
finalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c720  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000700  0800c8e0  0800c8e0  0000d8e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cfe0  0800cfe0  0000e25c  2**0
                  CONTENTS
  4 .ARM          00000008  0800cfe0  0800cfe0  0000dfe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cfe8  0800cfe8  0000e25c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cfe8  0800cfe8  0000dfe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cfec  0800cfec  0000dfec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000025c  20000000  0800cff0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c4  2000025c  0800d24c  0000e25c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000720  0800d24c  0000e720  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e25c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021efe  00000000  00000000  0000e28c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004081  00000000  00000000  0003018a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e18  00000000  00000000  00034210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000176c  00000000  00000000  00036028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030b7a  00000000  00000000  00037794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022c34  00000000  00000000  0006830e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012cada  00000000  00000000  0008af42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b7a1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000091ec  00000000  00000000  001b7a60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001c0c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000025c 	.word	0x2000025c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800c8c8 	.word	0x0800c8c8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000260 	.word	0x20000260
 80001fc:	0800c8c8 	.word	0x0800c8c8

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bec:	f000 b96a 	b.w	8000ec4 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	460c      	mov	r4, r1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d14e      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c14:	4694      	mov	ip, r2
 8000c16:	458c      	cmp	ip, r1
 8000c18:	4686      	mov	lr, r0
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	d962      	bls.n	8000ce6 <__udivmoddi4+0xde>
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0320 	rsb	r3, r2, #32
 8000c26:	4091      	lsls	r1, r2
 8000c28:	fa20 f303 	lsr.w	r3, r0, r3
 8000c2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c30:	4319      	orrs	r1, r3
 8000c32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f f68c 	uxth.w	r6, ip
 8000c3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	fb07 1114 	mls	r1, r7, r4, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb04 f106 	mul.w	r1, r4, r6
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c5e:	f080 8112 	bcs.w	8000e86 <__udivmoddi4+0x27e>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 810f 	bls.w	8000e86 <__udivmoddi4+0x27e>
 8000c68:	3c02      	subs	r4, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a59      	subs	r1, r3, r1
 8000c6e:	fa1f f38e 	uxth.w	r3, lr
 8000c72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c76:	fb07 1110 	mls	r1, r7, r0, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb00 f606 	mul.w	r6, r0, r6
 8000c82:	429e      	cmp	r6, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x94>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c8e:	f080 80fc 	bcs.w	8000e8a <__udivmoddi4+0x282>
 8000c92:	429e      	cmp	r6, r3
 8000c94:	f240 80f9 	bls.w	8000e8a <__udivmoddi4+0x282>
 8000c98:	4463      	add	r3, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11d      	cbz	r5, 8000cae <__udivmoddi4+0xa6>
 8000ca6:	40d3      	lsrs	r3, r2
 8000ca8:	2200      	movs	r2, #0
 8000caa:	e9c5 3200 	strd	r3, r2, [r5]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d905      	bls.n	8000cc2 <__udivmoddi4+0xba>
 8000cb6:	b10d      	cbz	r5, 8000cbc <__udivmoddi4+0xb4>
 8000cb8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e7f5      	b.n	8000cae <__udivmoddi4+0xa6>
 8000cc2:	fab3 f183 	clz	r1, r3
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	d146      	bne.n	8000d58 <__udivmoddi4+0x150>
 8000cca:	42a3      	cmp	r3, r4
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xcc>
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	f0c0 80f0 	bcc.w	8000eb4 <__udivmoddi4+0x2ac>
 8000cd4:	1a86      	subs	r6, r0, r2
 8000cd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	2d00      	cmp	r5, #0
 8000cde:	d0e6      	beq.n	8000cae <__udivmoddi4+0xa6>
 8000ce0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ce4:	e7e3      	b.n	8000cae <__udivmoddi4+0xa6>
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	f040 8090 	bne.w	8000e0c <__udivmoddi4+0x204>
 8000cec:	eba1 040c 	sub.w	r4, r1, ip
 8000cf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d02:	fb08 4416 	mls	r4, r8, r6, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb07 f006 	mul.w	r0, r7, r6
 8000d0e:	4298      	cmp	r0, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x11c>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x11a>
 8000d1c:	4298      	cmp	r0, r3
 8000d1e:	f200 80cd 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000d22:	4626      	mov	r6, r4
 8000d24:	1a1c      	subs	r4, r3, r0
 8000d26:	fa1f f38e 	uxth.w	r3, lr
 8000d2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d36:	fb00 f707 	mul.w	r7, r0, r7
 8000d3a:	429f      	cmp	r7, r3
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x148>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x146>
 8000d48:	429f      	cmp	r7, r3
 8000d4a:	f200 80b0 	bhi.w	8000eae <__udivmoddi4+0x2a6>
 8000d4e:	4620      	mov	r0, r4
 8000d50:	1bdb      	subs	r3, r3, r7
 8000d52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d56:	e7a5      	b.n	8000ca4 <__udivmoddi4+0x9c>
 8000d58:	f1c1 0620 	rsb	r6, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d68:	fa04 f301 	lsl.w	r3, r4, r1
 8000d6c:	ea43 030c 	orr.w	r3, r3, ip
 8000d70:	40f4      	lsrs	r4, r6
 8000d72:	fa00 f801 	lsl.w	r8, r0, r1
 8000d76:	0c38      	lsrs	r0, r7, #16
 8000d78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d80:	fa1f fc87 	uxth.w	ip, r7
 8000d84:	fb00 441e 	mls	r4, r0, lr, r4
 8000d88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	fa02 f201 	lsl.w	r2, r2, r1
 8000d96:	d90a      	bls.n	8000dae <__udivmoddi4+0x1a6>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d9e:	f080 8084 	bcs.w	8000eaa <__udivmoddi4+0x2a2>
 8000da2:	45a1      	cmp	r9, r4
 8000da4:	f240 8081 	bls.w	8000eaa <__udivmoddi4+0x2a2>
 8000da8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	eba4 0409 	sub.w	r4, r4, r9
 8000db2:	fa1f f983 	uxth.w	r9, r3
 8000db6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dba:	fb00 4413 	mls	r4, r0, r3, r4
 8000dbe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x1d2>
 8000dca:	193c      	adds	r4, r7, r4
 8000dcc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000dd0:	d267      	bcs.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd2:	45a4      	cmp	ip, r4
 8000dd4:	d965      	bls.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd6:	3b02      	subs	r3, #2
 8000dd8:	443c      	add	r4, r7
 8000dda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dde:	fba0 9302 	umull	r9, r3, r0, r2
 8000de2:	eba4 040c 	sub.w	r4, r4, ip
 8000de6:	429c      	cmp	r4, r3
 8000de8:	46ce      	mov	lr, r9
 8000dea:	469c      	mov	ip, r3
 8000dec:	d351      	bcc.n	8000e92 <__udivmoddi4+0x28a>
 8000dee:	d04e      	beq.n	8000e8e <__udivmoddi4+0x286>
 8000df0:	b155      	cbz	r5, 8000e08 <__udivmoddi4+0x200>
 8000df2:	ebb8 030e 	subs.w	r3, r8, lr
 8000df6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dfa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dfe:	40cb      	lsrs	r3, r1
 8000e00:	431e      	orrs	r6, r3
 8000e02:	40cc      	lsrs	r4, r1
 8000e04:	e9c5 6400 	strd	r6, r4, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e750      	b.n	8000cae <__udivmoddi4+0xa6>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f103 	lsr.w	r1, r0, r3
 8000e14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e18:	fa24 f303 	lsr.w	r3, r4, r3
 8000e1c:	4094      	lsls	r4, r2
 8000e1e:	430c      	orrs	r4, r1
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3110 	mls	r1, r8, r0, r3
 8000e34:	0c23      	lsrs	r3, r4, #16
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb00 f107 	mul.w	r1, r0, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x24c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e4a:	d22c      	bcs.n	8000ea6 <__udivmoddi4+0x29e>
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d92a      	bls.n	8000ea6 <__udivmoddi4+0x29e>
 8000e50:	3802      	subs	r0, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e64:	fb01 f307 	mul.w	r3, r1, r7
 8000e68:	42a3      	cmp	r3, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x276>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e74:	d213      	bcs.n	8000e9e <__udivmoddi4+0x296>
 8000e76:	42a3      	cmp	r3, r4
 8000e78:	d911      	bls.n	8000e9e <__udivmoddi4+0x296>
 8000e7a:	3902      	subs	r1, #2
 8000e7c:	4464      	add	r4, ip
 8000e7e:	1ae4      	subs	r4, r4, r3
 8000e80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e84:	e739      	b.n	8000cfa <__udivmoddi4+0xf2>
 8000e86:	4604      	mov	r4, r0
 8000e88:	e6f0      	b.n	8000c6c <__udivmoddi4+0x64>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e706      	b.n	8000c9c <__udivmoddi4+0x94>
 8000e8e:	45c8      	cmp	r8, r9
 8000e90:	d2ae      	bcs.n	8000df0 <__udivmoddi4+0x1e8>
 8000e92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e9a:	3801      	subs	r0, #1
 8000e9c:	e7a8      	b.n	8000df0 <__udivmoddi4+0x1e8>
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	e7ed      	b.n	8000e7e <__udivmoddi4+0x276>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	e799      	b.n	8000dda <__udivmoddi4+0x1d2>
 8000ea6:	4630      	mov	r0, r6
 8000ea8:	e7d4      	b.n	8000e54 <__udivmoddi4+0x24c>
 8000eaa:	46d6      	mov	lr, sl
 8000eac:	e77f      	b.n	8000dae <__udivmoddi4+0x1a6>
 8000eae:	4463      	add	r3, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e74d      	b.n	8000d50 <__udivmoddi4+0x148>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e70f      	b.n	8000cdc <__udivmoddi4+0xd4>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	e730      	b.n	8000d24 <__udivmoddi4+0x11c>
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ed0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ed4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000ed8:	f003 0301 	and.w	r3, r3, #1
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d013      	beq.n	8000f08 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ee0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ee4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000ee8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d00b      	beq.n	8000f08 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ef0:	e000      	b.n	8000ef4 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000ef2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ef4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d0f9      	beq.n	8000ef2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000efe:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	b2d2      	uxtb	r2, r2
 8000f06:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f08:	687b      	ldr	r3, [r7, #4]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
	...

08000f18 <detect_shake>:
#define TS_CAL2 ((uint16_t*)(uint32_t)0x1FFF75CA)
#define TS_CAL1_TEMP ((float)30.0)
#define TS_CAL2_TEMP ((float) 130.0)

// Function to detect shaking motion
bool detect_shake(int16_t* acc) {
 8000f18:	b480      	push	{r7}
 8000f1a:	b087      	sub	sp, #28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  // Calculate absolute differences from previous reading
  int32_t delta_x = abs((int32_t)acc[0] - (int32_t)prev_acc[0]);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f26:	461a      	mov	r2, r3
 8000f28:	4b29      	ldr	r3, [pc, #164]	@ (8000fd0 <detect_shake+0xb8>)
 8000f2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f2e:	1ad3      	subs	r3, r2, r3
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	bfb8      	it	lt
 8000f34:	425b      	neglt	r3, r3
 8000f36:	613b      	str	r3, [r7, #16]
  int32_t delta_y = abs((int32_t)acc[1] - (int32_t)prev_acc[1]);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3302      	adds	r3, #2
 8000f3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f40:	461a      	mov	r2, r3
 8000f42:	4b23      	ldr	r3, [pc, #140]	@ (8000fd0 <detect_shake+0xb8>)
 8000f44:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	bfb8      	it	lt
 8000f4e:	425b      	neglt	r3, r3
 8000f50:	60fb      	str	r3, [r7, #12]
  int32_t delta_z = abs((int32_t)acc[2] - (int32_t)prev_acc[2]);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	3304      	adds	r3, #4
 8000f56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <detect_shake+0xb8>)
 8000f5e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	bfb8      	it	lt
 8000f68:	425b      	neglt	r3, r3
 8000f6a:	60bb      	str	r3, [r7, #8]
//           delta_x, delta_y, delta_z, SHAKE_THRESHOLD);
//    last_debug = now;
//  }

  // Save current values as previous for next time
  prev_acc[0] = acc[0];
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f72:	4b17      	ldr	r3, [pc, #92]	@ (8000fd0 <detect_shake+0xb8>)
 8000f74:	801a      	strh	r2, [r3, #0]
  prev_acc[1] = acc[1];
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000f7c:	4b14      	ldr	r3, [pc, #80]	@ (8000fd0 <detect_shake+0xb8>)
 8000f7e:	805a      	strh	r2, [r3, #2]
  prev_acc[2] = acc[2];
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000f86:	4b12      	ldr	r3, [pc, #72]	@ (8000fd0 <detect_shake+0xb8>)
 8000f88:	809a      	strh	r2, [r3, #4]

  // Look for rapid movement on at least one axis (changed from two axes)
  int movement_axes = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
  if (delta_x > SHAKE_THRESHOLD) movement_axes++;
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000f94:	dd02      	ble.n	8000f9c <detect_shake+0x84>
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	617b      	str	r3, [r7, #20]
  if (delta_y > SHAKE_THRESHOLD) movement_axes++;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000fa2:	dd02      	ble.n	8000faa <detect_shake+0x92>
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	617b      	str	r3, [r7, #20]
  if (delta_z > SHAKE_THRESHOLD) movement_axes++;
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000fb0:	dd02      	ble.n	8000fb8 <detect_shake+0xa0>
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	617b      	str	r3, [r7, #20]

  return (movement_axes >= 1);  // True if significant movement on at least 1 axis (changed from 2)
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	bfcc      	ite	gt
 8000fbe:	2301      	movgt	r3, #1
 8000fc0:	2300      	movle	r3, #0
 8000fc2:	b2db      	uxtb	r3, r3
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	371c      	adds	r7, #28
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	20000510 	.word	0x20000510

08000fd4 <blink_led>:

// Function to blink LED for visual feedback
void blink_led(uint32_t times, uint32_t delay_ms) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
  for (uint32_t i = 0; i < times; i++) {
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	e014      	b.n	800100e <blink_led+0x3a>
    HAL_GPIO_WritePin(GPIOB, greenLed_Pin, GPIO_PIN_SET);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fea:	480d      	ldr	r0, [pc, #52]	@ (8001020 <blink_led+0x4c>)
 8000fec:	f004 fd5c 	bl	8005aa8 <HAL_GPIO_WritePin>
    HAL_Delay(delay_ms);
 8000ff0:	6838      	ldr	r0, [r7, #0]
 8000ff2:	f002 f85f 	bl	80030b4 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, greenLed_Pin, GPIO_PIN_RESET);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ffc:	4808      	ldr	r0, [pc, #32]	@ (8001020 <blink_led+0x4c>)
 8000ffe:	f004 fd53 	bl	8005aa8 <HAL_GPIO_WritePin>
    HAL_Delay(delay_ms);
 8001002:	6838      	ldr	r0, [r7, #0]
 8001004:	f002 f856 	bl	80030b4 <HAL_Delay>
  for (uint32_t i = 0; i < times; i++) {
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	3301      	adds	r3, #1
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	429a      	cmp	r2, r3
 8001014:	d3e6      	bcc.n	8000fe4 <blink_led+0x10>
  }
}
 8001016:	bf00      	nop
 8001018:	bf00      	nop
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	48000400 	.word	0x48000400

08001024 <play_tone>:

// Function to play a tone at a specific frequency for a duration
void play_tone(uint16_t frequency, uint32_t duration_ms) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af02      	add	r7, sp, #8
 800102a:	4603      	mov	r3, r0
 800102c:	6039      	str	r1, [r7, #0]
 800102e:	80fb      	strh	r3, [r7, #6]
    // Stop any ongoing playback
    if (audio_playing) {
 8001030:	4b21      	ldr	r3, [pc, #132]	@ (80010b8 <play_tone+0x94>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b00      	cmp	r3, #0
 8001038:	d009      	beq.n	800104e <play_tone+0x2a>
        HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 800103a:	2100      	movs	r1, #0
 800103c:	481f      	ldr	r0, [pc, #124]	@ (80010bc <play_tone+0x98>)
 800103e:	f003 fc9b 	bl	8004978 <HAL_DAC_Stop_DMA>
        audio_playing = 0;
 8001042:	4b1d      	ldr	r3, [pc, #116]	@ (80010b8 <play_tone+0x94>)
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]
        HAL_Delay(5); // Small delay to ensure DMA stops
 8001048:	2005      	movs	r0, #5
 800104a:	f002 f833 	bl	80030b4 <HAL_Delay>
    }

    printf("Playing tone: %d Hz for %lu ms\n", frequency, duration_ms);
 800104e:	88fb      	ldrh	r3, [r7, #6]
 8001050:	683a      	ldr	r2, [r7, #0]
 8001052:	4619      	mov	r1, r3
 8001054:	481a      	ldr	r0, [pc, #104]	@ (80010c0 <play_tone+0x9c>)
 8001056:	f009 fc63 	bl	800a920 <iprintf>

    // Calculate timer period for the requested frequency
    uint32_t timer_period = (SystemCoreClock / (frequency * SINE_SAMPLES));
 800105a:	4b1a      	ldr	r3, [pc, #104]	@ (80010c4 <play_tone+0xa0>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	88fa      	ldrh	r2, [r7, #6]
 8001060:	0152      	lsls	r2, r2, #5
 8001062:	fbb3 f3f2 	udiv	r3, r3, r2
 8001066:	60fb      	str	r3, [r7, #12]

    // Configure Timer2 period
    htim2.Instance->ARR = timer_period - 1;
 8001068:	4b17      	ldr	r3, [pc, #92]	@ (80010c8 <play_tone+0xa4>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	68fa      	ldr	r2, [r7, #12]
 800106e:	3a01      	subs	r2, #1
 8001070:	62da      	str	r2, [r3, #44]	@ 0x2c
    htim2.Instance->PSC = 0; // No prescaler
 8001072:	4b15      	ldr	r3, [pc, #84]	@ (80010c8 <play_tone+0xa4>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2200      	movs	r2, #0
 8001078:	629a      	str	r2, [r3, #40]	@ 0x28

    // Start the timer
    HAL_TIM_Base_Start(&htim2);
 800107a:	4813      	ldr	r0, [pc, #76]	@ (80010c8 <play_tone+0xa4>)
 800107c:	f007 fda8 	bl	8008bd0 <HAL_TIM_Base_Start>

    // Start DAC with DMA in circular mode to output the sine wave
    audio_playing = 1;
 8001080:	4b0d      	ldr	r3, [pc, #52]	@ (80010b8 <play_tone+0x94>)
 8001082:	2201      	movs	r2, #1
 8001084:	701a      	strb	r2, [r3, #0]
    HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)sine_wave, SINE_SAMPLES, DAC_ALIGN_12B_R);
 8001086:	2300      	movs	r3, #0
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	2320      	movs	r3, #32
 800108c:	4a0f      	ldr	r2, [pc, #60]	@ (80010cc <play_tone+0xa8>)
 800108e:	2100      	movs	r1, #0
 8001090:	480a      	ldr	r0, [pc, #40]	@ (80010bc <play_tone+0x98>)
 8001092:	f003 fba5 	bl	80047e0 <HAL_DAC_Start_DMA>

    // Optional: if you need precise duration, use a timer or non-blocking delay
    HAL_Delay(duration_ms);
 8001096:	6838      	ldr	r0, [r7, #0]
 8001098:	f002 f80c 	bl	80030b4 <HAL_Delay>

    // Stop the DAC and timer
    HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 800109c:	2100      	movs	r1, #0
 800109e:	4807      	ldr	r0, [pc, #28]	@ (80010bc <play_tone+0x98>)
 80010a0:	f003 fc6a 	bl	8004978 <HAL_DAC_Stop_DMA>
    HAL_TIM_Base_Stop(&htim2);
 80010a4:	4808      	ldr	r0, [pc, #32]	@ (80010c8 <play_tone+0xa4>)
 80010a6:	f007 fdfb 	bl	8008ca0 <HAL_TIM_Base_Stop>
    audio_playing = 0;
 80010aa:	4b03      	ldr	r3, [pc, #12]	@ (80010b8 <play_tone+0x94>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	701a      	strb	r2, [r3, #0]
}
 80010b0:	bf00      	nop
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000544 	.word	0x20000544
 80010bc:	200002e0 	.word	0x200002e0
 80010c0:	0800c8e0 	.word	0x0800c8e0
 80010c4:	20000054 	.word	0x20000054
 80010c8:	20000430 	.word	0x20000430
 80010cc:	20000014 	.word	0x20000014

080010d0 <stop_audio>:

// Add a function to forcibly stop audio
void stop_audio() {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
    if (audio_playing) {
 80010d4:	4b08      	ldr	r3, [pc, #32]	@ (80010f8 <stop_audio+0x28>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d009      	beq.n	80010f2 <stop_audio+0x22>
        HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80010de:	2100      	movs	r1, #0
 80010e0:	4806      	ldr	r0, [pc, #24]	@ (80010fc <stop_audio+0x2c>)
 80010e2:	f003 fc49 	bl	8004978 <HAL_DAC_Stop_DMA>
        HAL_TIM_Base_Stop(&htim2);
 80010e6:	4806      	ldr	r0, [pc, #24]	@ (8001100 <stop_audio+0x30>)
 80010e8:	f007 fdda 	bl	8008ca0 <HAL_TIM_Base_Stop>
        audio_playing = 0;
 80010ec:	4b02      	ldr	r3, [pc, #8]	@ (80010f8 <stop_audio+0x28>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]
    }
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000544 	.word	0x20000544
 80010fc:	200002e0 	.word	0x200002e0
 8001100:	20000430 	.word	0x20000430

08001104 <play_shake_detected_sound>:

// This function is called for audio feedback when a shake is detected
void play_shake_detected_sound(void) {
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
    stop_audio();
 8001108:	f7ff ffe2 	bl	80010d0 <stop_audio>
    // Rising tone pattern to indicate shake detection
    play_tone(NOTE_C4, 100);
 800110c:	2164      	movs	r1, #100	@ 0x64
 800110e:	f44f 7083 	mov.w	r0, #262	@ 0x106
 8001112:	f7ff ff87 	bl	8001024 <play_tone>
    play_tone(NOTE_E4, 100);
 8001116:	2164      	movs	r1, #100	@ 0x64
 8001118:	f44f 70a5 	mov.w	r0, #330	@ 0x14a
 800111c:	f7ff ff82 	bl	8001024 <play_tone>
    play_tone(NOTE_G4, 100);
 8001120:	2164      	movs	r1, #100	@ 0x64
 8001122:	f44f 70c4 	mov.w	r0, #392	@ 0x188
 8001126:	f7ff ff7d 	bl	8001024 <play_tone>
    play_tone(NOTE_C5, 200);
 800112a:	21c8      	movs	r1, #200	@ 0xc8
 800112c:	f240 200b 	movw	r0, #523	@ 0x20b
 8001130:	f7ff ff78 	bl	8001024 <play_tone>

    // Still blink LED for visual feedback
    blink_led(1, 50);
 8001134:	2132      	movs	r1, #50	@ 0x32
 8001136:	2001      	movs	r0, #1
 8001138:	f7ff ff4c 	bl	8000fd4 <blink_led>
    stop_audio();
 800113c:	f7ff ffc8 	bl	80010d0 <stop_audio>

}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}

08001144 <play_countdown_sound>:

// This function is called for audio countdown during temperature reading
void play_countdown_sound(uint32_t seconds_remaining) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
    stop_audio();
 800114c:	f7ff ffc0 	bl	80010d0 <stop_audio>
    // Different tones based on seconds remaining
    switch(seconds_remaining) {
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3b01      	subs	r3, #1
 8001154:	2b04      	cmp	r3, #4
 8001156:	d82b      	bhi.n	80011b0 <play_countdown_sound+0x6c>
 8001158:	a201      	add	r2, pc, #4	@ (adr r2, 8001160 <play_countdown_sound+0x1c>)
 800115a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800115e:	bf00      	nop
 8001160:	080011a5 	.word	0x080011a5
 8001164:	08001199 	.word	0x08001199
 8001168:	0800118d 	.word	0x0800118d
 800116c:	08001181 	.word	0x08001181
 8001170:	08001175 	.word	0x08001175
        case 5:
            play_tone(NOTE_C4, 100);
 8001174:	2164      	movs	r1, #100	@ 0x64
 8001176:	f44f 7083 	mov.w	r0, #262	@ 0x106
 800117a:	f7ff ff53 	bl	8001024 <play_tone>
            break;
 800117e:	e01d      	b.n	80011bc <play_countdown_sound+0x78>
        case 4:
            play_tone(NOTE_D4, 100);
 8001180:	2164      	movs	r1, #100	@ 0x64
 8001182:	f44f 7093 	mov.w	r0, #294	@ 0x126
 8001186:	f7ff ff4d 	bl	8001024 <play_tone>
            break;
 800118a:	e017      	b.n	80011bc <play_countdown_sound+0x78>
        case 3:
            play_tone(NOTE_E4, 100);
 800118c:	2164      	movs	r1, #100	@ 0x64
 800118e:	f44f 70a5 	mov.w	r0, #330	@ 0x14a
 8001192:	f7ff ff47 	bl	8001024 <play_tone>
            break;
 8001196:	e011      	b.n	80011bc <play_countdown_sound+0x78>
        case 2:
            play_tone(NOTE_G4, 100);
 8001198:	2164      	movs	r1, #100	@ 0x64
 800119a:	f44f 70c4 	mov.w	r0, #392	@ 0x188
 800119e:	f7ff ff41 	bl	8001024 <play_tone>
            break;
 80011a2:	e00b      	b.n	80011bc <play_countdown_sound+0x78>
        case 1:
            play_tone(NOTE_A4, 100);
 80011a4:	2164      	movs	r1, #100	@ 0x64
 80011a6:	f44f 70dc 	mov.w	r0, #440	@ 0x1b8
 80011aa:	f7ff ff3b 	bl	8001024 <play_tone>
            break;
 80011ae:	e005      	b.n	80011bc <play_countdown_sound+0x78>
        default:
            play_tone(NOTE_C4, 50);
 80011b0:	2132      	movs	r1, #50	@ 0x32
 80011b2:	f44f 7083 	mov.w	r0, #262	@ 0x106
 80011b6:	f7ff ff35 	bl	8001024 <play_tone>
            break;
 80011ba:	bf00      	nop
    }

    // Still blink LED for visual feedback
    blink_led(1, 50);
 80011bc:	2132      	movs	r1, #50	@ 0x32
 80011be:	2001      	movs	r0, #1
 80011c0:	f7ff ff08 	bl	8000fd4 <blink_led>
    stop_audio();
 80011c4:	f7ff ff84 	bl	80010d0 <stop_audio>
}
 80011c8:	bf00      	nop
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <play_success_sound>:

// This function is called for temperature reading success
void play_success_sound(void) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
    stop_audio();
 80011d4:	f7ff ff7c 	bl	80010d0 <stop_audio>
    // Success melody
    play_tone(NOTE_C4, 100);
 80011d8:	2164      	movs	r1, #100	@ 0x64
 80011da:	f44f 7083 	mov.w	r0, #262	@ 0x106
 80011de:	f7ff ff21 	bl	8001024 <play_tone>
    play_tone(NOTE_E4, 100);
 80011e2:	2164      	movs	r1, #100	@ 0x64
 80011e4:	f44f 70a5 	mov.w	r0, #330	@ 0x14a
 80011e8:	f7ff ff1c 	bl	8001024 <play_tone>
    play_tone(NOTE_G4, 100);
 80011ec:	2164      	movs	r1, #100	@ 0x64
 80011ee:	f44f 70c4 	mov.w	r0, #392	@ 0x188
 80011f2:	f7ff ff17 	bl	8001024 <play_tone>
    play_tone(NOTE_C5, 200);
 80011f6:	21c8      	movs	r1, #200	@ 0xc8
 80011f8:	f240 200b 	movw	r0, #523	@ 0x20b
 80011fc:	f7ff ff12 	bl	8001024 <play_tone>
    play_tone(NOTE_G4, 100);
 8001200:	2164      	movs	r1, #100	@ 0x64
 8001202:	f44f 70c4 	mov.w	r0, #392	@ 0x188
 8001206:	f7ff ff0d 	bl	8001024 <play_tone>
    play_tone(NOTE_C5, 300);
 800120a:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800120e:	f240 200b 	movw	r0, #523	@ 0x20b
 8001212:	f7ff ff07 	bl	8001024 <play_tone>

    // Still blink LED for visual feedback
    blink_led(1, 50);
 8001216:	2132      	movs	r1, #50	@ 0x32
 8001218:	2001      	movs	r0, #1
 800121a:	f7ff fedb 	bl	8000fd4 <blink_led>
    stop_audio();
 800121e:	f7ff ff57 	bl	80010d0 <stop_audio>
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <update_state_machine>:

// Function to process state machine
void update_state_machine(float current_temp) {
 8001228:	b5b0      	push	{r4, r5, r7, lr}
 800122a:	b08a      	sub	sp, #40	@ 0x28
 800122c:	af02      	add	r7, sp, #8
 800122e:	ed87 0a01 	vstr	s0, [r7, #4]
  uint32_t current_time = HAL_GetTick();
 8001232:	f001 ff33 	bl	800309c <HAL_GetTick>
 8001236:	6178      	str	r0, [r7, #20]

  switch (current_state) {
 8001238:	4b98      	ldr	r3, [pc, #608]	@ (800149c <update_state_machine+0x274>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b03      	cmp	r3, #3
 800123e:	f200 8129 	bhi.w	8001494 <update_state_machine+0x26c>
 8001242:	a201      	add	r2, pc, #4	@ (adr r2, 8001248 <update_state_machine+0x20>)
 8001244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001248:	08001259 	.word	0x08001259
 800124c:	08001271 	.word	0x08001271
 8001250:	080012dd 	.word	0x080012dd
 8001254:	080013bb 	.word	0x080013bb
    case STATE_IDLE:
      // In idle state, waiting for shake to be detected
      HAL_GPIO_WritePin(GPIOB, greenLed_Pin, GPIO_PIN_RESET);
 8001258:	2200      	movs	r2, #0
 800125a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800125e:	4890      	ldr	r0, [pc, #576]	@ (80014a0 <update_state_machine+0x278>)
 8001260:	f004 fc22 	bl	8005aa8 <HAL_GPIO_WritePin>
      stop_audio();
 8001264:	f7ff ff34 	bl	80010d0 <stop_audio>
      shake_count = 0;
 8001268:	4b8e      	ldr	r3, [pc, #568]	@ (80014a4 <update_state_machine+0x27c>)
 800126a:	2200      	movs	r2, #0
 800126c:	701a      	strb	r2, [r3, #0]
      break;
 800126e:	e111      	b.n	8001494 <update_state_machine+0x26c>

    case STATE_SHAKING:
      // Detecting continuous shaking
      HAL_GPIO_WritePin(GPIOB, greenLed_Pin, GPIO_PIN_SET);
 8001270:	2201      	movs	r2, #1
 8001272:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001276:	488a      	ldr	r0, [pc, #552]	@ (80014a0 <update_state_machine+0x278>)
 8001278:	f004 fc16 	bl	8005aa8 <HAL_GPIO_WritePin>

      // If user has been shaking for too long without qualifying, reset
      if (current_time - shake_time_start > 3000 && shake_count < MIN_SHAKE_COUNT) {
 800127c:	4b8a      	ldr	r3, [pc, #552]	@ (80014a8 <update_state_machine+0x280>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	697a      	ldr	r2, [r7, #20]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001288:	4293      	cmp	r3, r2
 800128a:	d911      	bls.n	80012b0 <update_state_machine+0x88>
 800128c:	4b85      	ldr	r3, [pc, #532]	@ (80014a4 <update_state_machine+0x27c>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b02      	cmp	r3, #2
 8001292:	d80d      	bhi.n	80012b0 <update_state_machine+0x88>
        current_state = STATE_IDLE;
 8001294:	4b81      	ldr	r3, [pc, #516]	@ (800149c <update_state_machine+0x274>)
 8001296:	2200      	movs	r2, #0
 8001298:	701a      	strb	r2, [r3, #0]
        shake_count = 0;
 800129a:	4b82      	ldr	r3, [pc, #520]	@ (80014a4 <update_state_machine+0x27c>)
 800129c:	2200      	movs	r2, #0
 800129e:	701a      	strb	r2, [r3, #0]
        printf("Shake timeout - please try again\n");
 80012a0:	4882      	ldr	r0, [pc, #520]	@ (80014ac <update_state_machine+0x284>)
 80012a2:	f009 fba5 	bl	800a9f0 <puts>
        blink_led(2, 200); // Error indication
 80012a6:	21c8      	movs	r1, #200	@ 0xc8
 80012a8:	2002      	movs	r0, #2
 80012aa:	f7ff fe93 	bl	8000fd4 <blink_led>
        temp_reading_index = 0;
        printf("Shake detected! Please place finger on temperature sensor\n");
        stop_audio();
        play_shake_detected_sound(); // Audio feedback
      }
      break;
 80012ae:	e0ee      	b.n	800148e <update_state_machine+0x266>
      else if (shake_count >= MIN_SHAKE_COUNT) {
 80012b0:	4b7c      	ldr	r3, [pc, #496]	@ (80014a4 <update_state_machine+0x27c>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	f240 80ea 	bls.w	800148e <update_state_machine+0x266>
        current_state = STATE_TEMPERATURE;
 80012ba:	4b78      	ldr	r3, [pc, #480]	@ (800149c <update_state_machine+0x274>)
 80012bc:	2202      	movs	r2, #2
 80012be:	701a      	strb	r2, [r3, #0]
        temp_reading_start = current_time;
 80012c0:	4a7b      	ldr	r2, [pc, #492]	@ (80014b0 <update_state_machine+0x288>)
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	6013      	str	r3, [r2, #0]
        temp_reading_index = 0;
 80012c6:	4b7b      	ldr	r3, [pc, #492]	@ (80014b4 <update_state_machine+0x28c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	701a      	strb	r2, [r3, #0]
        printf("Shake detected! Please place finger on temperature sensor\n");
 80012cc:	487a      	ldr	r0, [pc, #488]	@ (80014b8 <update_state_machine+0x290>)
 80012ce:	f009 fb8f 	bl	800a9f0 <puts>
        stop_audio();
 80012d2:	f7ff fefd 	bl	80010d0 <stop_audio>
        play_shake_detected_sound(); // Audio feedback
 80012d6:	f7ff ff15 	bl	8001104 <play_shake_detected_sound>
      break;
 80012da:	e0d8      	b.n	800148e <update_state_machine+0x266>

    case STATE_TEMPERATURE:
        // Reading temperature for 5 seconds
        HAL_GPIO_WritePin(GPIOB, greenLed_Pin, GPIO_PIN_SET);
 80012dc:	2201      	movs	r2, #1
 80012de:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012e2:	486f      	ldr	r0, [pc, #444]	@ (80014a0 <update_state_machine+0x278>)
 80012e4:	f004 fbe0 	bl	8005aa8 <HAL_GPIO_WritePin>

        uint32_t elapsed = current_time - temp_reading_start;
 80012e8:	4b71      	ldr	r3, [pc, #452]	@ (80014b0 <update_state_machine+0x288>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	697a      	ldr	r2, [r7, #20]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	60fb      	str	r3, [r7, #12]
        uint32_t seconds_remaining = (TEMP_MEASURE_TIME - elapsed) / 1000;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	f5c3 539c 	rsb	r3, r3, #4992	@ 0x1380
 80012f8:	3308      	adds	r3, #8
 80012fa:	4a70      	ldr	r2, [pc, #448]	@ (80014bc <update_state_machine+0x294>)
 80012fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001300:	099b      	lsrs	r3, r3, #6
 8001302:	60bb      	str	r3, [r7, #8]

        // Capture baseline temperature right at the start
        if (temp_reading_index == 0) {
 8001304:	4b6b      	ldr	r3, [pc, #428]	@ (80014b4 <update_state_machine+0x28c>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d10c      	bne.n	8001326 <update_state_machine+0xfe>
            baseline_temp = current_temp;
 800130c:	4a6c      	ldr	r2, [pc, #432]	@ (80014c0 <update_state_machine+0x298>)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6013      	str	r3, [r2, #0]
            printf("Baseline temperature: %.2f C\n", baseline_temp);
 8001312:	4b6b      	ldr	r3, [pc, #428]	@ (80014c0 <update_state_machine+0x298>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff f92e 	bl	8000578 <__aeabi_f2d>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	4868      	ldr	r0, [pc, #416]	@ (80014c4 <update_state_machine+0x29c>)
 8001322:	f009 fafd 	bl	800a920 <iprintf>
        }

        if (seconds_remaining < 5 && seconds_remaining >= 0) {
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	2b04      	cmp	r3, #4
 800132a:	d83a      	bhi.n	80013a2 <update_state_machine+0x17a>
            // Every second, update the countdown
            static uint32_t last_second = 0;
            if (last_second != seconds_remaining) {
 800132c:	4b66      	ldr	r3, [pc, #408]	@ (80014c8 <update_state_machine+0x2a0>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	68ba      	ldr	r2, [r7, #8]
 8001332:	429a      	cmp	r2, r3
 8001334:	d035      	beq.n	80013a2 <update_state_machine+0x17a>
                last_second = seconds_remaining;
 8001336:	4a64      	ldr	r2, [pc, #400]	@ (80014c8 <update_state_machine+0x2a0>)
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	6013      	str	r3, [r2, #0]
                printf("Temperature reading: %d seconds remaining\n", (int)seconds_remaining + 1);
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	3301      	adds	r3, #1
 8001340:	4619      	mov	r1, r3
 8001342:	4862      	ldr	r0, [pc, #392]	@ (80014cc <update_state_machine+0x2a4>)
 8001344:	f009 faec 	bl	800a920 <iprintf>
                play_countdown_sound(seconds_remaining + 1);
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	3301      	adds	r3, #1
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff fef9 	bl	8001144 <play_countdown_sound>

                // Store temperature reading
                if (temp_reading_index < 5) {
 8001352:	4b58      	ldr	r3, [pc, #352]	@ (80014b4 <update_state_machine+0x28c>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b04      	cmp	r3, #4
 8001358:	d823      	bhi.n	80013a2 <update_state_machine+0x17a>
                    // Store the temperature value
                    temp_readings[temp_reading_index++] = current_temp;
 800135a:	4b56      	ldr	r3, [pc, #344]	@ (80014b4 <update_state_machine+0x28c>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	1c5a      	adds	r2, r3, #1
 8001360:	b2d1      	uxtb	r1, r2
 8001362:	4a54      	ldr	r2, [pc, #336]	@ (80014b4 <update_state_machine+0x28c>)
 8001364:	7011      	strb	r1, [r2, #0]
 8001366:	4a5a      	ldr	r2, [pc, #360]	@ (80014d0 <update_state_machine+0x2a8>)
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	4413      	add	r3, r2
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	601a      	str	r2, [r3, #0]
                    printf("Current temperature: %.2f C (delta: %.2f C)\n",
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff f901 	bl	8000578 <__aeabi_f2d>
 8001376:	4604      	mov	r4, r0
 8001378:	460d      	mov	r5, r1
                           current_temp, current_temp - baseline_temp);
 800137a:	4b51      	ldr	r3, [pc, #324]	@ (80014c0 <update_state_machine+0x298>)
 800137c:	edd3 7a00 	vldr	s15, [r3]
 8001380:	ed97 7a01 	vldr	s14, [r7, #4]
 8001384:	ee77 7a67 	vsub.f32	s15, s14, s15
                    printf("Current temperature: %.2f C (delta: %.2f C)\n",
 8001388:	ee17 0a90 	vmov	r0, s15
 800138c:	f7ff f8f4 	bl	8000578 <__aeabi_f2d>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	e9cd 2300 	strd	r2, r3, [sp]
 8001398:	4622      	mov	r2, r4
 800139a:	462b      	mov	r3, r5
 800139c:	484d      	ldr	r0, [pc, #308]	@ (80014d4 <update_state_machine+0x2ac>)
 800139e:	f009 fabf 	bl	800a920 <iprintf>
                }
            }
        }

        // When time is up, move to verification
        if (elapsed >= TEMP_MEASURE_TIME) {
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f241 3287 	movw	r2, #4999	@ 0x1387
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d972      	bls.n	8001492 <update_state_machine+0x26a>
            current_state = STATE_VERIFY;
 80013ac:	4b3b      	ldr	r3, [pc, #236]	@ (800149c <update_state_machine+0x274>)
 80013ae:	2203      	movs	r2, #3
 80013b0:	701a      	strb	r2, [r3, #0]
            printf("Temperature reading complete, verifying...\n");
 80013b2:	4849      	ldr	r0, [pc, #292]	@ (80014d8 <update_state_machine+0x2b0>)
 80013b4:	f009 fb1c 	bl	800a9f0 <puts>
        }
        break;
 80013b8:	e06b      	b.n	8001492 <update_state_machine+0x26a>

    case STATE_VERIFY:
        // Process the collected temperature data
        float max_temp = -100.0f;
 80013ba:	4b48      	ldr	r3, [pc, #288]	@ (80014dc <update_state_machine+0x2b4>)
 80013bc:	61fb      	str	r3, [r7, #28]
        for (int i = 0; i < temp_reading_index; i++) {
 80013be:	2300      	movs	r3, #0
 80013c0:	61bb      	str	r3, [r7, #24]
 80013c2:	e015      	b.n	80013f0 <update_state_machine+0x1c8>
            if (temp_readings[i] > max_temp) {
 80013c4:	4a42      	ldr	r2, [pc, #264]	@ (80014d0 <update_state_machine+0x2a8>)
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4413      	add	r3, r2
 80013cc:	edd3 7a00 	vldr	s15, [r3]
 80013d0:	ed97 7a07 	vldr	s14, [r7, #28]
 80013d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013dc:	d505      	bpl.n	80013ea <update_state_machine+0x1c2>
                max_temp = temp_readings[i];
 80013de:	4a3c      	ldr	r2, [pc, #240]	@ (80014d0 <update_state_machine+0x2a8>)
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4413      	add	r3, r2
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	61fb      	str	r3, [r7, #28]
        for (int i = 0; i < temp_reading_index; i++) {
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	3301      	adds	r3, #1
 80013ee:	61bb      	str	r3, [r7, #24]
 80013f0:	4b30      	ldr	r3, [pc, #192]	@ (80014b4 <update_state_machine+0x28c>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	461a      	mov	r2, r3
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	4293      	cmp	r3, r2
 80013fa:	dbe3      	blt.n	80013c4 <update_state_machine+0x19c>
            }
        }

        float temp_change = max_temp - baseline_temp;
 80013fc:	4b30      	ldr	r3, [pc, #192]	@ (80014c0 <update_state_machine+0x298>)
 80013fe:	edd3 7a00 	vldr	s15, [r3]
 8001402:	ed97 7a07 	vldr	s14, [r7, #28]
 8001406:	ee77 7a67 	vsub.f32	s15, s14, s15
 800140a:	edc7 7a04 	vstr	s15, [r7, #16]
        printf("Maximum temperature: %.2f C\n", max_temp);
 800140e:	69f8      	ldr	r0, [r7, #28]
 8001410:	f7ff f8b2 	bl	8000578 <__aeabi_f2d>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	4831      	ldr	r0, [pc, #196]	@ (80014e0 <update_state_machine+0x2b8>)
 800141a:	f009 fa81 	bl	800a920 <iprintf>
        printf("Temperature change: %.2f C\n", temp_change);
 800141e:	6938      	ldr	r0, [r7, #16]
 8001420:	f7ff f8aa 	bl	8000578 <__aeabi_f2d>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	482e      	ldr	r0, [pc, #184]	@ (80014e4 <update_state_machine+0x2bc>)
 800142a:	f009 fa79 	bl	800a920 <iprintf>

        // Verify based on temperature change (warming from finger)
        if (temp_change >= 1.0f) {
 800142e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001432:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001436:	eef4 7ac7 	vcmpe.f32	s15, s14
 800143a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800143e:	db0a      	blt.n	8001456 <update_state_machine+0x22e>
            printf("Verification successful! Detected warming of %.2f C\n", temp_change);
 8001440:	6938      	ldr	r0, [r7, #16]
 8001442:	f7ff f899 	bl	8000578 <__aeabi_f2d>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4827      	ldr	r0, [pc, #156]	@ (80014e8 <update_state_machine+0x2c0>)
 800144c:	f009 fa68 	bl	800a920 <iprintf>
            play_success_sound();
 8001450:	f7ff febe 	bl	80011d0 <play_success_sound>
 8001454:	e009      	b.n	800146a <update_state_machine+0x242>
        } else {
            printf("Verification failed - insufficient temperature change\n");
 8001456:	4825      	ldr	r0, [pc, #148]	@ (80014ec <update_state_machine+0x2c4>)
 8001458:	f009 faca 	bl	800a9f0 <puts>
            printf("Please place your finger near the board's temperature sensor\n");
 800145c:	4824      	ldr	r0, [pc, #144]	@ (80014f0 <update_state_machine+0x2c8>)
 800145e:	f009 fac7 	bl	800a9f0 <puts>
            blink_led(2, 200); // Error indication
 8001462:	21c8      	movs	r1, #200	@ 0xc8
 8001464:	2002      	movs	r0, #2
 8001466:	f7ff fdb5 	bl	8000fd4 <blink_led>
        }

        stop_audio();
 800146a:	f7ff fe31 	bl	80010d0 <stop_audio>
        shake_count = 0;
 800146e:	4b0d      	ldr	r3, [pc, #52]	@ (80014a4 <update_state_machine+0x27c>)
 8001470:	2200      	movs	r2, #0
 8001472:	701a      	strb	r2, [r3, #0]
        temp_reading_index = 0;
 8001474:	4b0f      	ldr	r3, [pc, #60]	@ (80014b4 <update_state_machine+0x28c>)
 8001476:	2200      	movs	r2, #0
 8001478:	701a      	strb	r2, [r3, #0]
        // Return to idle state
        current_state = STATE_IDLE;
 800147a:	4b08      	ldr	r3, [pc, #32]	@ (800149c <update_state_machine+0x274>)
 800147c:	2200      	movs	r2, #0
 800147e:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(GPIOB, greenLed_Pin, GPIO_PIN_RESET);
 8001480:	2200      	movs	r2, #0
 8001482:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001486:	4806      	ldr	r0, [pc, #24]	@ (80014a0 <update_state_machine+0x278>)
 8001488:	f004 fb0e 	bl	8005aa8 <HAL_GPIO_WritePin>
        break;
 800148c:	e002      	b.n	8001494 <update_state_machine+0x26c>
      break;
 800148e:	bf00      	nop
 8001490:	e000      	b.n	8001494 <update_state_machine+0x26c>
        break;
 8001492:	bf00      	nop
  }
}
 8001494:	bf00      	nop
 8001496:	3720      	adds	r7, #32
 8001498:	46bd      	mov	sp, r7
 800149a:	bdb0      	pop	{r4, r5, r7, pc}
 800149c:	20000524 	.word	0x20000524
 80014a0:	48000400 	.word	0x48000400
 80014a4:	2000051c 	.word	0x2000051c
 80014a8:	20000518 	.word	0x20000518
 80014ac:	0800c900 	.word	0x0800c900
 80014b0:	20000520 	.word	0x20000520
 80014b4:	2000053c 	.word	0x2000053c
 80014b8:	0800c924 	.word	0x0800c924
 80014bc:	10624dd3 	.word	0x10624dd3
 80014c0:	20000540 	.word	0x20000540
 80014c4:	0800c960 	.word	0x0800c960
 80014c8:	20000548 	.word	0x20000548
 80014cc:	0800c980 	.word	0x0800c980
 80014d0:	20000528 	.word	0x20000528
 80014d4:	0800c9ac 	.word	0x0800c9ac
 80014d8:	0800c9dc 	.word	0x0800c9dc
 80014dc:	c2c80000 	.word	0xc2c80000
 80014e0:	0800ca08 	.word	0x0800ca08
 80014e4:	0800ca28 	.word	0x0800ca28
 80014e8:	0800ca44 	.word	0x0800ca44
 80014ec:	0800ca7c 	.word	0x0800ca7c
 80014f0:	0800cab4 	.word	0x0800cab4

080014f4 <_write>:

int _write(int file, char *ptr, int len)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
    // Send each character via ITM
    for (int i = 0; i < len; i++)
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
 8001504:	e009      	b.n	800151a <_write+0x26>
    {
        ITM_SendChar(*ptr++);
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	1c5a      	adds	r2, r3, #1
 800150a:	60ba      	str	r2, [r7, #8]
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff fcda 	bl	8000ec8 <ITM_SendChar>
    for (int i = 0; i < len; i++)
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	3301      	adds	r3, #1
 8001518:	617b      	str	r3, [r7, #20]
 800151a:	697a      	ldr	r2, [r7, #20]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	429a      	cmp	r2, r3
 8001520:	dbf1      	blt.n	8001506 <_write+0x12>
    }
    return len;
 8001522:	687b      	ldr	r3, [r7, #4]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <change_channel>:

void change_channel(int i) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b088      	sub	sp, #32
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef Config = {0};
 8001534:	f107 0308 	add.w	r3, r7, #8
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]
 8001544:	615a      	str	r2, [r3, #20]

	if (i){
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d002      	beq.n	8001552 <change_channel+0x26>
		Config.Channel = ADC_CHANNEL_TEMPSENSOR;
 800154c:	4b0e      	ldr	r3, [pc, #56]	@ (8001588 <change_channel+0x5c>)
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	e001      	b.n	8001556 <change_channel+0x2a>
	}
	else{
		Config.Channel = ADC_CHANNEL_VREFINT;
 8001552:	4b0e      	ldr	r3, [pc, #56]	@ (800158c <change_channel+0x60>)
 8001554:	60bb      	str	r3, [r7, #8]
	}

	Config.Rank = ADC_REGULAR_RANK_1,
 8001556:	2306      	movs	r3, #6
 8001558:	60fb      	str	r3, [r7, #12]
	Config.SamplingTime = ADC_SAMPLETIME_640CYCLES_5,
 800155a:	2307      	movs	r3, #7
 800155c:	613b      	str	r3, [r7, #16]
	Config.SingleDiff = ADC_SINGLE_ENDED,
 800155e:	237f      	movs	r3, #127	@ 0x7f
 8001560:	617b      	str	r3, [r7, #20]
	Config.OffsetNumber = ADC_OFFSET_NONE,
 8001562:	2304      	movs	r3, #4
 8001564:	61bb      	str	r3, [r7, #24]
	Config.Offset = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]


	if (HAL_ADC_ConfigChannel(&hadc1, &Config) != HAL_OK){
 800156a:	f107 0308 	add.w	r3, r7, #8
 800156e:	4619      	mov	r1, r3
 8001570:	4807      	ldr	r0, [pc, #28]	@ (8001590 <change_channel+0x64>)
 8001572:	f002 fa63 	bl	8003a3c <HAL_ADC_ConfigChannel>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <change_channel+0x54>
		Error_Handler();
 800157c:	f000 fe78 	bl	8002270 <Error_Handler>
	}
}
 8001580:	bf00      	nop
 8001582:	3720      	adds	r7, #32
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	c7520000 	.word	0xc7520000
 800158c:	80000001 	.word	0x80000001
 8001590:	20000278 	.word	0x20000278

08001594 <KalmanFilterC>:

int KalmanFilterC(float* InputArray, float* OutputArray, struct kalman_state* kstate, int length) {
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
 80015a0:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < length; i++) { // Iterate
 80015a2:	2300      	movs	r3, #0
 80015a4:	617b      	str	r3, [r7, #20]
 80015a6:	e058      	b.n	800165a <KalmanFilterC+0xc6>
        kstate->p = kstate->p + kstate->q;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	ed93 7a03 	vldr	s14, [r3, #12]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	edd3 7a00 	vldr	s15, [r3]
 80015b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	edc3 7a03 	vstr	s15, [r3, #12]
        kstate->k = kstate->p/(kstate->p + kstate->r);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	edd3 6a03 	vldr	s13, [r3, #12]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	ed93 7a03 	vldr	s14, [r3, #12]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80015d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	edc3 7a04 	vstr	s15, [r3, #16]
        kstate->x = kstate->x + (kstate->k)*(InputArray[i]-kstate->x);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	ed93 7a02 	vldr	s14, [r3, #8]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	edd3 6a04 	vldr	s13, [r3, #16]
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	4413      	add	r3, r2
 80015f2:	ed93 6a00 	vldr	s12, [r3]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80015fc:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001600:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001604:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	edc3 7a02 	vstr	s15, [r3, #8]
        kstate->p = (1-kstate->k)*kstate->p;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	edd3 7a04 	vldr	s15, [r3, #16]
 8001614:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001618:	ee37 7a67 	vsub.f32	s14, s14, s15
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	edc3 7a03 	vstr	s15, [r3, #12]
        OutputArray[i] = kstate->x; // Store in output array
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	68ba      	ldr	r2, [r7, #8]
 8001632:	4413      	add	r3, r2
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	6892      	ldr	r2, [r2, #8]
 8001638:	601a      	str	r2, [r3, #0]
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_get_fpscr) 
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  return __builtin_arm_get_fpscr();
 800163a:	eef1 3a10 	vmrs	r3, fpscr
        int a = __get_FPSCR();
 800163e:	613b      	str	r3, [r7, #16]
        if ((a & 268435456) != 0) { // Check for overflow (fixed parentheses)
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d004      	beq.n	8001654 <KalmanFilterC+0xc0>
            printf("Overflow.");
 800164a:	4808      	ldr	r0, [pc, #32]	@ (800166c <KalmanFilterC+0xd8>)
 800164c:	f009 f968 	bl	800a920 <iprintf>
            while (1){}
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <KalmanFilterC+0xbc>
    for (int i = 0; i < length; i++) { // Iterate
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	3301      	adds	r3, #1
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	697a      	ldr	r2, [r7, #20]
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	429a      	cmp	r2, r3
 8001660:	dba2      	blt.n	80015a8 <KalmanFilterC+0x14>
        }
    }
    return 0; // Return 0 if successful or get stuck in while loop
 8001662:	2300      	movs	r3, #0
}
 8001664:	4618      	mov	r0, r3
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	0800caf4 	.word	0x0800caf4

08001670 <read_temperature>:

// Improved temperature reading function with Kalman filtering
float read_temperature(void) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b08e      	sub	sp, #56	@ 0x38
 8001674:	af00      	add	r7, sp, #0
    float V_temp;
    float temp_readings[5];
    float filtered_temp;

    // Take multiple readings for stability
    for (int i = 0; i < 5; i++) {
 8001676:	2300      	movs	r3, #0
 8001678:	637b      	str	r3, [r7, #52]	@ 0x34
 800167a:	e0a2      	b.n	80017c2 <read_temperature+0x152>
        // Measure the voltage ref+
        change_channel(0);
 800167c:	2000      	movs	r0, #0
 800167e:	f7ff ff55 	bl	800152c <change_channel>
        HAL_ADC_Start(&hadc1);
 8001682:	4859      	ldr	r0, [pc, #356]	@ (80017e8 <read_temperature+0x178>)
 8001684:	f002 f8a8 	bl	80037d8 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001688:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800168c:	4856      	ldr	r0, [pc, #344]	@ (80017e8 <read_temperature+0x178>)
 800168e:	f002 f939 	bl	8003904 <HAL_ADC_PollForConversion>
        ADC_value = (float)HAL_ADC_GetValue(&hadc1);
 8001692:	4855      	ldr	r0, [pc, #340]	@ (80017e8 <read_temperature+0x178>)
 8001694:	f002 f9c5 	bl	8003a22 <HAL_ADC_GetValue>
 8001698:	ee07 0a90 	vmov	s15, r0
 800169c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016a0:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        HAL_ADC_Stop(&hadc1);
 80016a4:	4850      	ldr	r0, [pc, #320]	@ (80017e8 <read_temperature+0x178>)
 80016a6:	f002 f8fa 	bl	800389e <HAL_ADC_Stop>
        vref_plus = 3.0f * (float)(*V_REFINT)/ADC_value;
 80016aa:	4b50      	ldr	r3, [pc, #320]	@ (80017ec <read_temperature+0x17c>)
 80016ac:	881b      	ldrh	r3, [r3, #0]
 80016ae:	ee07 3a90 	vmov	s15, r3
 80016b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016b6:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80016ba:	ee67 6a87 	vmul.f32	s13, s15, s14
 80016be:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80016c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016c6:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

        // Small delay between readings
        HAL_Delay(5);
 80016ca:	2005      	movs	r0, #5
 80016cc:	f001 fcf2 	bl	80030b4 <HAL_Delay>

        // Measure temperature
        change_channel(1);
 80016d0:	2001      	movs	r0, #1
 80016d2:	f7ff ff2b 	bl	800152c <change_channel>
        HAL_ADC_Start(&hadc1);
 80016d6:	4844      	ldr	r0, [pc, #272]	@ (80017e8 <read_temperature+0x178>)
 80016d8:	f002 f87e 	bl	80037d8 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80016dc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80016e0:	4841      	ldr	r0, [pc, #260]	@ (80017e8 <read_temperature+0x178>)
 80016e2:	f002 f90f 	bl	8003904 <HAL_ADC_PollForConversion>
        V_temp = (float)HAL_ADC_GetValue(&hadc1);
 80016e6:	4840      	ldr	r0, [pc, #256]	@ (80017e8 <read_temperature+0x178>)
 80016e8:	f002 f99b 	bl	8003a22 <HAL_ADC_GetValue>
 80016ec:	ee07 0a90 	vmov	s15, r0
 80016f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016f4:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
        HAL_ADC_Stop(&hadc1);
 80016f8:	483b      	ldr	r0, [pc, #236]	@ (80017e8 <read_temperature+0x178>)
 80016fa:	f002 f8d0 	bl	800389e <HAL_ADC_Stop>

        // Calculate temperature
        temp_readings[i] = (((TS_CAL2_TEMP - TS_CAL1_TEMP)/((float)(*TS_CAL2) - (float)(*TS_CAL1))) *
 80016fe:	4b3c      	ldr	r3, [pc, #240]	@ (80017f0 <read_temperature+0x180>)
 8001700:	881b      	ldrh	r3, [r3, #0]
 8001702:	ee07 3a90 	vmov	s15, r3
 8001706:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800170a:	4b3a      	ldr	r3, [pc, #232]	@ (80017f4 <read_temperature+0x184>)
 800170c:	881b      	ldrh	r3, [r3, #0]
 800170e:	ee07 3a90 	vmov	s15, r3
 8001712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001716:	ee77 7a67 	vsub.f32	s15, s14, s15
 800171a:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80017f8 <read_temperature+0x188>
 800171e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                          ((V_temp * vref_plus/3.0f)-(float)(*TS_CAL1))) + TS_CAL1_TEMP;
 8001722:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001726:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800172a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800172e:	eeb0 6a08 	vmov.f32	s12, #8	@ 0x40400000  3.0
 8001732:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001736:	4b2f      	ldr	r3, [pc, #188]	@ (80017f4 <read_temperature+0x184>)
 8001738:	881b      	ldrh	r3, [r3, #0]
 800173a:	ee07 3a90 	vmov	s15, r3
 800173e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001742:	ee76 7ae7 	vsub.f32	s15, s13, s15
        temp_readings[i] = (((TS_CAL2_TEMP - TS_CAL1_TEMP)/((float)(*TS_CAL2) - (float)(*TS_CAL1))) *
 8001746:	ee67 7a27 	vmul.f32	s15, s14, s15
                          ((V_temp * vref_plus/3.0f)-(float)(*TS_CAL1))) + TS_CAL1_TEMP;
 800174a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800174e:	ee77 7a87 	vadd.f32	s15, s15, s14
        temp_readings[i] = (((TS_CAL2_TEMP - TS_CAL1_TEMP)/((float)(*TS_CAL2) - (float)(*TS_CAL1))) *
 8001752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	3338      	adds	r3, #56	@ 0x38
 8001758:	443b      	add	r3, r7
 800175a:	3b24      	subs	r3, #36	@ 0x24
 800175c:	edc3 7a00 	vstr	s15, [r3]

        // Check for obviously wrong readings
        if (temp_readings[i] < -10.0f || temp_readings[i] > 100.0f) {
 8001760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	3338      	adds	r3, #56	@ 0x38
 8001766:	443b      	add	r3, r7
 8001768:	3b24      	subs	r3, #36	@ 0x24
 800176a:	edd3 7a00 	vldr	s15, [r3]
 800176e:	eeba 7a04 	vmov.f32	s14, #164	@ 0xc1200000 -10.0
 8001772:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800177a:	d40d      	bmi.n	8001798 <read_temperature+0x128>
 800177c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	3338      	adds	r3, #56	@ 0x38
 8001782:	443b      	add	r3, r7
 8001784:	3b24      	subs	r3, #36	@ 0x24
 8001786:	edd3 7a00 	vldr	s15, [r3]
 800178a:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80017f8 <read_temperature+0x188>
 800178e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001796:	dd11      	ble.n	80017bc <read_temperature+0x14c>
            temp_readings[i] = (i > 0) ? temp_readings[i-1] : 25.0f; // Use previous or default
 8001798:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800179a:	2b00      	cmp	r3, #0
 800179c:	dd07      	ble.n	80017ae <read_temperature+0x13e>
 800179e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017a0:	3b01      	subs	r3, #1
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	3338      	adds	r3, #56	@ 0x38
 80017a6:	443b      	add	r3, r7
 80017a8:	3b24      	subs	r3, #36	@ 0x24
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	e000      	b.n	80017b0 <read_temperature+0x140>
 80017ae:	4b13      	ldr	r3, [pc, #76]	@ (80017fc <read_temperature+0x18c>)
 80017b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80017b2:	0092      	lsls	r2, r2, #2
 80017b4:	3238      	adds	r2, #56	@ 0x38
 80017b6:	443a      	add	r2, r7
 80017b8:	3a24      	subs	r2, #36	@ 0x24
 80017ba:	6013      	str	r3, [r2, #0]
    for (int i = 0; i < 5; i++) {
 80017bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017be:	3301      	adds	r3, #1
 80017c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80017c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017c4:	2b04      	cmp	r3, #4
 80017c6:	f77f af59 	ble.w	800167c <read_temperature+0xc>
        }
    }

    // Apply Kalman filter to the readings
    float filtered_readings[5];
    KalmanFilterC(temp_readings, filtered_readings, &temp_kalman, 5);
 80017ca:	4639      	mov	r1, r7
 80017cc:	f107 0014 	add.w	r0, r7, #20
 80017d0:	2305      	movs	r3, #5
 80017d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001800 <read_temperature+0x190>)
 80017d4:	f7ff fede 	bl	8001594 <KalmanFilterC>

    // Return the last filtered value (most current)
    return filtered_readings[4];
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	ee07 3a90 	vmov	s15, r3
}
 80017de:	eeb0 0a67 	vmov.f32	s0, s15
 80017e2:	3738      	adds	r7, #56	@ 0x38
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000278 	.word	0x20000278
 80017ec:	1fff75aa 	.word	0x1fff75aa
 80017f0:	1fff75ca 	.word	0x1fff75ca
 80017f4:	1fff75a8 	.word	0x1fff75a8
 80017f8:	42c80000 	.word	0x42c80000
 80017fc:	41c80000 	.word	0x41c80000
 8001800:	20000000 	.word	0x20000000

08001804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001808:	b08a      	sub	sp, #40	@ 0x28
 800180a:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800180c:	f001 fbde 	bl	8002fcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001810:	f000 f8ce 	bl	80019b0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001814:	f000 f92e 	bl	8001a74 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001818:	f000 fb8e 	bl	8001f38 <MX_GPIO_Init>
  MX_DMA_Init();
 800181c:	f000 fb62 	bl	8001ee4 <MX_DMA_Init>
  MX_ADC1_Init();
 8001820:	f000 f958 	bl	8001ad4 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8001824:	f000 f9ee 	bl	8001c04 <MX_DFSDM1_Init>
  MX_OCTOSPI1_Init();
 8001828:	f000 fa64 	bl	8001cf4 <MX_OCTOSPI1_Init>
  MX_USART1_UART_Init();
 800182c:	f000 fb06 	bl	8001e3c <MX_USART1_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8001830:	f000 fb50 	bl	8001ed4 <MX_USB_OTG_FS_USB_Init>
  MX_I2C2_Init();
 8001834:	f000 fa1e 	bl	8001c74 <MX_I2C2_Init>
  MX_DAC1_Init();
 8001838:	f000 f9b0 	bl	8001b9c <MX_DAC1_Init>
  MX_TIM2_Init();
 800183c:	f000 fab0 	bl	8001da0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //BSP_TSENSOR_Init();
  //BSP_HSENSOR_Init(); //HTS221
  //BSP_MAGNETO_Init(); //LIS3MDL
  // Initialize the accelerometer with default parameters (±2g range)
  BSP_ACCELERO_Init(); //LSM6DSL
 8001840:	f000 fe6c 	bl	800251c <BSP_ACCELERO_Init>

  current_state = STATE_IDLE;  // Explicitly set initial state
 8001844:	4b4e      	ldr	r3, [pc, #312]	@ (8001980 <main+0x17c>)
 8001846:	2200      	movs	r2, #0
 8001848:	701a      	strb	r2, [r3, #0]
  shake_count = 0;             // Reset shake count
 800184a:	4b4e      	ldr	r3, [pc, #312]	@ (8001984 <main+0x180>)
 800184c:	2200      	movs	r2, #0
 800184e:	701a      	strb	r2, [r3, #0]
  temp_reading_index = 0;      // Reset temperature reading index
 8001850:	4b4d      	ldr	r3, [pc, #308]	@ (8001988 <main+0x184>)
 8001852:	2200      	movs	r2, #0
 8001854:	701a      	strb	r2, [r3, #0]

  // Initialize TIM2 for DAC triggering
  HAL_TIM_Base_Stop(&htim2);
 8001856:	484d      	ldr	r0, [pc, #308]	@ (800198c <main+0x188>)
 8001858:	f007 fa22 	bl	8008ca0 <HAL_TIM_Base_Stop>

  // Set accelerometer to full scale - this may be required depending on your board
  // The below is a placeholder - you might need to modify based on your specific board API
  uint8_t ctrl = 0;
 800185c:	2300      	movs	r3, #0
 800185e:	73fb      	strb	r3, [r7, #15]
  //BSP_PSENSOR_Init(); //LPS22HB

  float ADC_value;
  float vref_plus;
  float V_temp;
  float temp = 0;
 8001860:	f04f 0300 	mov.w	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
  int16_t acc[3] = {0};
 8001866:	463b      	mov	r3, r7
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	809a      	strh	r2, [r3, #4]
  uint32_t lastPrintTime = 0;
 800186e:	2300      	movs	r3, #0
 8001870:	613b      	str	r3, [r7, #16]

  printf("\n\n--- Multi-factor Biometric Verification System ---\n");
 8001872:	4847      	ldr	r0, [pc, #284]	@ (8001990 <main+0x18c>)
 8001874:	f009 f8bc 	bl	800a9f0 <puts>
  printf("Shake the device firmly to begin verification\n");
 8001878:	4846      	ldr	r0, [pc, #280]	@ (8001994 <main+0x190>)
 800187a:	f009 f8b9 	bl	800a9f0 <puts>

  // Blink LED to indicate system is ready
  blink_led(2, 250);
 800187e:	21fa      	movs	r1, #250	@ 0xfa
 8001880:	2002      	movs	r0, #2
 8001882:	f7ff fba7 	bl	8000fd4 <blink_led>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    uint32_t currentTime = HAL_GetTick();
 8001886:	f001 fc09 	bl	800309c <HAL_GetTick>
 800188a:	60b8      	str	r0, [r7, #8]

    // Read accelerometer data
    BSP_ACCELERO_AccGetXYZ(acc);
 800188c:	463b      	mov	r3, r7
 800188e:	4618      	mov	r0, r3
 8001890:	f000 fe82 	bl	8002598 <BSP_ACCELERO_AccGetXYZ>

    // Process accelerometer data for shake detection
    if (current_state == STATE_IDLE) {
 8001894:	4b3a      	ldr	r3, [pc, #232]	@ (8001980 <main+0x17c>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d113      	bne.n	80018c4 <main+0xc0>
      // In idle state, look for the start of shaking
      if (detect_shake(acc)) {
 800189c:	463b      	mov	r3, r7
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff fb3a 	bl	8000f18 <detect_shake>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d024      	beq.n	80018f4 <main+0xf0>
        // First shake detected, transition to shaking state
        current_state = STATE_SHAKING;
 80018aa:	4b35      	ldr	r3, [pc, #212]	@ (8001980 <main+0x17c>)
 80018ac:	2201      	movs	r2, #1
 80018ae:	701a      	strb	r2, [r3, #0]
        shake_time_start = currentTime;
 80018b0:	4a39      	ldr	r2, [pc, #228]	@ (8001998 <main+0x194>)
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	6013      	str	r3, [r2, #0]
        shake_count = 1;
 80018b6:	4b33      	ldr	r3, [pc, #204]	@ (8001984 <main+0x180>)
 80018b8:	2201      	movs	r2, #1
 80018ba:	701a      	strb	r2, [r3, #0]
        printf("Possible shake detected, continue shaking...\n");
 80018bc:	4837      	ldr	r0, [pc, #220]	@ (800199c <main+0x198>)
 80018be:	f009 f897 	bl	800a9f0 <puts>
 80018c2:	e017      	b.n	80018f4 <main+0xf0>
      }
    }
    else if (current_state == STATE_SHAKING) {
 80018c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001980 <main+0x17c>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d113      	bne.n	80018f4 <main+0xf0>
      // Already in shaking state, count additional shakes
      if (detect_shake(acc)) {
 80018cc:	463b      	mov	r3, r7
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff fb22 	bl	8000f18 <detect_shake>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d00c      	beq.n	80018f4 <main+0xf0>
        shake_count++;
 80018da:	4b2a      	ldr	r3, [pc, #168]	@ (8001984 <main+0x180>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	3301      	adds	r3, #1
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	4b28      	ldr	r3, [pc, #160]	@ (8001984 <main+0x180>)
 80018e4:	701a      	strb	r2, [r3, #0]
        printf("Shake count: %d/%d\n", shake_count, MIN_SHAKE_COUNT);
 80018e6:	4b27      	ldr	r3, [pc, #156]	@ (8001984 <main+0x180>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2203      	movs	r2, #3
 80018ec:	4619      	mov	r1, r3
 80018ee:	482c      	ldr	r0, [pc, #176]	@ (80019a0 <main+0x19c>)
 80018f0:	f009 f816 	bl	800a920 <iprintf>
      }
    }

    // Always read temperature when in temperature reading state or for verification
    // Always read temperature when in temperature reading state or for verification
    if (current_state == STATE_TEMPERATURE || current_state == STATE_VERIFY) {
 80018f4:	4b22      	ldr	r3, [pc, #136]	@ (8001980 <main+0x17c>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d003      	beq.n	8001904 <main+0x100>
 80018fc:	4b20      	ldr	r3, [pc, #128]	@ (8001980 <main+0x17c>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b03      	cmp	r3, #3
 8001902:	d103      	bne.n	800190c <main+0x108>
        temp = read_temperature();
 8001904:	f7ff feb4 	bl	8001670 <read_temperature>
 8001908:	ed87 0a05 	vstr	s0, [r7, #20]
    }

    // For debugging in idle mode, print sensor values occasionally
    if ((current_state == STATE_IDLE || current_state == STATE_SHAKING) &&
 800190c:	4b1c      	ldr	r3, [pc, #112]	@ (8001980 <main+0x17c>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <main+0x118>
 8001914:	4b1a      	ldr	r3, [pc, #104]	@ (8001980 <main+0x17c>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d129      	bne.n	8001970 <main+0x16c>
        currentTime - lastPrintTime > 1000) {
 800191c:	68ba      	ldr	r2, [r7, #8]
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
    if ((current_state == STATE_IDLE || current_state == STATE_SHAKING) &&
 8001922:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001926:	d923      	bls.n	8001970 <main+0x16c>

        // Read temperature with Kalman filtering for display
        temp = read_temperature();
 8001928:	f7ff fea2 	bl	8001670 <read_temperature>
 800192c:	ed87 0a05 	vstr	s0, [r7, #20]

        printf("Status: %s | Accelerometer: x=%d, y=%d, z=%d | Temp: %.2f C\n",
               current_state == STATE_IDLE ? "IDLE" : "SHAKING",
 8001930:	4b13      	ldr	r3, [pc, #76]	@ (8001980 <main+0x17c>)
 8001932:	781b      	ldrb	r3, [r3, #0]
        printf("Status: %s | Accelerometer: x=%d, y=%d, z=%d | Temp: %.2f C\n",
 8001934:	2b00      	cmp	r3, #0
 8001936:	d101      	bne.n	800193c <main+0x138>
 8001938:	4c1a      	ldr	r4, [pc, #104]	@ (80019a4 <main+0x1a0>)
 800193a:	e000      	b.n	800193e <main+0x13a>
 800193c:	4c1a      	ldr	r4, [pc, #104]	@ (80019a8 <main+0x1a4>)
               acc[0], acc[1], acc[2], temp);
 800193e:	f9b7 3000 	ldrsh.w	r3, [r7]
        printf("Status: %s | Accelerometer: x=%d, y=%d, z=%d | Temp: %.2f C\n",
 8001942:	461e      	mov	r6, r3
               acc[0], acc[1], acc[2], temp);
 8001944:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
        printf("Status: %s | Accelerometer: x=%d, y=%d, z=%d | Temp: %.2f C\n",
 8001948:	4698      	mov	r8, r3
               acc[0], acc[1], acc[2], temp);
 800194a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
        printf("Status: %s | Accelerometer: x=%d, y=%d, z=%d | Temp: %.2f C\n",
 800194e:	461d      	mov	r5, r3
 8001950:	6978      	ldr	r0, [r7, #20]
 8001952:	f7fe fe11 	bl	8000578 <__aeabi_f2d>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800195e:	9500      	str	r5, [sp, #0]
 8001960:	4643      	mov	r3, r8
 8001962:	4632      	mov	r2, r6
 8001964:	4621      	mov	r1, r4
 8001966:	4811      	ldr	r0, [pc, #68]	@ (80019ac <main+0x1a8>)
 8001968:	f008 ffda 	bl	800a920 <iprintf>

        lastPrintTime = currentTime;
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	613b      	str	r3, [r7, #16]
    }

    // Update the state machine with current temperature
    update_state_machine(temp);
 8001970:	ed97 0a05 	vldr	s0, [r7, #20]
 8001974:	f7ff fc58 	bl	8001228 <update_state_machine>

    // Small delay to prevent CPU hogging
    HAL_Delay(10);
 8001978:	200a      	movs	r0, #10
 800197a:	f001 fb9b 	bl	80030b4 <HAL_Delay>
  {
 800197e:	e782      	b.n	8001886 <main+0x82>
 8001980:	20000524 	.word	0x20000524
 8001984:	2000051c 	.word	0x2000051c
 8001988:	2000053c 	.word	0x2000053c
 800198c:	20000430 	.word	0x20000430
 8001990:	0800cb00 	.word	0x0800cb00
 8001994:	0800cb38 	.word	0x0800cb38
 8001998:	20000518 	.word	0x20000518
 800199c:	0800cb68 	.word	0x0800cb68
 80019a0:	0800cb98 	.word	0x0800cb98
 80019a4:	0800cbac 	.word	0x0800cbac
 80019a8:	0800cbb4 	.word	0x0800cbb4
 80019ac:	0800cbbc 	.word	0x0800cbbc

080019b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b096      	sub	sp, #88	@ 0x58
 80019b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019b6:	f107 0314 	add.w	r3, r7, #20
 80019ba:	2244      	movs	r2, #68	@ 0x44
 80019bc:	2100      	movs	r1, #0
 80019be:	4618      	mov	r0, r3
 80019c0:	f009 f81e 	bl	800aa00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019c4:	463b      	mov	r3, r7
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	605a      	str	r2, [r3, #4]
 80019cc:	609a      	str	r2, [r3, #8]
 80019ce:	60da      	str	r2, [r3, #12]
 80019d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80019d2:	2000      	movs	r0, #0
 80019d4:	f005 fc00 	bl	80071d8 <HAL_PWREx_ControlVoltageScaling>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80019de:	f000 fc47 	bl	8002270 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80019e2:	f005 fbc9 	bl	8007178 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80019e6:	4b22      	ldr	r3, [pc, #136]	@ (8001a70 <SystemClock_Config+0xc0>)
 80019e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019ec:	4a20      	ldr	r2, [pc, #128]	@ (8001a70 <SystemClock_Config+0xc0>)
 80019ee:	f023 0318 	bic.w	r3, r3, #24
 80019f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80019f6:	2314      	movs	r3, #20
 80019f8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80019fa:	2301      	movs	r3, #1
 80019fc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80019fe:	2301      	movs	r3, #1
 8001a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001a02:	2300      	movs	r3, #0
 8001a04:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001a06:	2360      	movs	r3, #96	@ 0x60
 8001a08:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001a12:	2301      	movs	r3, #1
 8001a14:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001a16:	233c      	movs	r3, #60	@ 0x3c
 8001a18:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a22:	2302      	movs	r3, #2
 8001a24:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a26:	f107 0314 	add.w	r3, r7, #20
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f005 fc78 	bl	8007320 <HAL_RCC_OscConfig>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001a36:	f000 fc1b 	bl	8002270 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a3a:	230f      	movs	r3, #15
 8001a3c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a42:	2300      	movs	r3, #0
 8001a44:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a4e:	463b      	mov	r3, r7
 8001a50:	2105      	movs	r1, #5
 8001a52:	4618      	mov	r0, r3
 8001a54:	f006 f87e 	bl	8007b54 <HAL_RCC_ClockConfig>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001a5e:	f000 fc07 	bl	8002270 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001a62:	f006 fe65 	bl	8008730 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001a66:	bf00      	nop
 8001a68:	3758      	adds	r7, #88	@ 0x58
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40021000 	.word	0x40021000

08001a74 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b0a6      	sub	sp, #152	@ 0x98
 8001a78:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a7a:	1d3b      	adds	r3, r7, #4
 8001a7c:	2294      	movs	r2, #148	@ 0x94
 8001a7e:	2100      	movs	r1, #0
 8001a80:	4618      	mov	r0, r3
 8001a82:	f008 ffbd 	bl	800aa00 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8001a86:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001a8a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001a8c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001a90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001a94:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001a98:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001aa2:	2318      	movs	r3, #24
 8001aa4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8001ab2:	f04f 7388 	mov.w	r3, #17825792	@ 0x1100000
 8001ab6:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ab8:	1d3b      	adds	r3, r7, #4
 8001aba:	4618      	mov	r0, r3
 8001abc:	f006 fb08 	bl	80080d0 <HAL_RCCEx_PeriphCLKConfig>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001ac6:	f000 fbd3 	bl	8002270 <Error_Handler>
  }
}
 8001aca:	bf00      	nop
 8001acc:	3798      	adds	r7, #152	@ 0x98
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ada:	463b      	mov	r3, r7
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
 8001ae8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001aea:	4b29      	ldr	r3, [pc, #164]	@ (8001b90 <MX_ADC1_Init+0xbc>)
 8001aec:	4a29      	ldr	r2, [pc, #164]	@ (8001b94 <MX_ADC1_Init+0xc0>)
 8001aee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001af0:	4b27      	ldr	r3, [pc, #156]	@ (8001b90 <MX_ADC1_Init+0xbc>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001af6:	4b26      	ldr	r3, [pc, #152]	@ (8001b90 <MX_ADC1_Init+0xbc>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001afc:	4b24      	ldr	r3, [pc, #144]	@ (8001b90 <MX_ADC1_Init+0xbc>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b02:	4b23      	ldr	r3, [pc, #140]	@ (8001b90 <MX_ADC1_Init+0xbc>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b08:	4b21      	ldr	r3, [pc, #132]	@ (8001b90 <MX_ADC1_Init+0xbc>)
 8001b0a:	2204      	movs	r2, #4
 8001b0c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001b0e:	4b20      	ldr	r3, [pc, #128]	@ (8001b90 <MX_ADC1_Init+0xbc>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b14:	4b1e      	ldr	r3, [pc, #120]	@ (8001b90 <MX_ADC1_Init+0xbc>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8001b90 <MX_ADC1_Init+0xbc>)
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b20:	4b1b      	ldr	r3, [pc, #108]	@ (8001b90 <MX_ADC1_Init+0xbc>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b28:	4b19      	ldr	r3, [pc, #100]	@ (8001b90 <MX_ADC1_Init+0xbc>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b2e:	4b18      	ldr	r3, [pc, #96]	@ (8001b90 <MX_ADC1_Init+0xbc>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b34:	4b16      	ldr	r3, [pc, #88]	@ (8001b90 <MX_ADC1_Init+0xbc>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001b3c:	4b14      	ldr	r3, [pc, #80]	@ (8001b90 <MX_ADC1_Init+0xbc>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001b42:	4b13      	ldr	r3, [pc, #76]	@ (8001b90 <MX_ADC1_Init+0xbc>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b4a:	4811      	ldr	r0, [pc, #68]	@ (8001b90 <MX_ADC1_Init+0xbc>)
 8001b4c:	f001 fcfe 	bl	800354c <HAL_ADC_Init>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001b56:	f000 fb8b 	bl	8002270 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001b5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b98 <MX_ADC1_Init+0xc4>)
 8001b5c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b5e:	2306      	movs	r3, #6
 8001b60:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001b62:	2300      	movs	r3, #0
 8001b64:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001b66:	237f      	movs	r3, #127	@ 0x7f
 8001b68:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001b6a:	2304      	movs	r3, #4
 8001b6c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b72:	463b      	mov	r3, r7
 8001b74:	4619      	mov	r1, r3
 8001b76:	4806      	ldr	r0, [pc, #24]	@ (8001b90 <MX_ADC1_Init+0xbc>)
 8001b78:	f001 ff60 	bl	8003a3c <HAL_ADC_ConfigChannel>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001b82:	f000 fb75 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b86:	bf00      	nop
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000278 	.word	0x20000278
 8001b94:	50040000 	.word	0x50040000
 8001b98:	04300002 	.word	0x04300002

08001b9c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08a      	sub	sp, #40	@ 0x28
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001ba2:	463b      	mov	r3, r7
 8001ba4:	2228      	movs	r2, #40	@ 0x28
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f008 ff29 	bl	800aa00 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001bae:	4b13      	ldr	r3, [pc, #76]	@ (8001bfc <MX_DAC1_Init+0x60>)
 8001bb0:	4a13      	ldr	r2, [pc, #76]	@ (8001c00 <MX_DAC1_Init+0x64>)
 8001bb2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001bb4:	4811      	ldr	r0, [pc, #68]	@ (8001bfc <MX_DAC1_Init+0x60>)
 8001bb6:	f002 fdf0 	bl	800479a <HAL_DAC_Init>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001bc0:	f000 fb56 	bl	8002270 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001bc8:	230a      	movs	r3, #10
 8001bca:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8001bcc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001bd0:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001bde:	463b      	mov	r3, r7
 8001be0:	2200      	movs	r2, #0
 8001be2:	4619      	mov	r1, r3
 8001be4:	4805      	ldr	r0, [pc, #20]	@ (8001bfc <MX_DAC1_Init+0x60>)
 8001be6:	f002 ff2b 	bl	8004a40 <HAL_DAC_ConfigChannel>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8001bf0:	f000 fb3e 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001bf4:	bf00      	nop
 8001bf6:	3728      	adds	r7, #40	@ 0x28
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	200002e0 	.word	0x200002e0
 8001c00:	40007400 	.word	0x40007400

08001c04 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8001c08:	4b18      	ldr	r3, [pc, #96]	@ (8001c6c <MX_DFSDM1_Init+0x68>)
 8001c0a:	4a19      	ldr	r2, [pc, #100]	@ (8001c70 <MX_DFSDM1_Init+0x6c>)
 8001c0c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8001c0e:	4b17      	ldr	r3, [pc, #92]	@ (8001c6c <MX_DFSDM1_Init+0x68>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001c14:	4b15      	ldr	r3, [pc, #84]	@ (8001c6c <MX_DFSDM1_Init+0x68>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8001c1a:	4b14      	ldr	r3, [pc, #80]	@ (8001c6c <MX_DFSDM1_Init+0x68>)
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001c20:	4b12      	ldr	r3, [pc, #72]	@ (8001c6c <MX_DFSDM1_Init+0x68>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001c26:	4b11      	ldr	r3, [pc, #68]	@ (8001c6c <MX_DFSDM1_Init+0x68>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8001c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c6c <MX_DFSDM1_Init+0x68>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001c32:	4b0e      	ldr	r3, [pc, #56]	@ (8001c6c <MX_DFSDM1_Init+0x68>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001c38:	4b0c      	ldr	r3, [pc, #48]	@ (8001c6c <MX_DFSDM1_Init+0x68>)
 8001c3a:	2204      	movs	r2, #4
 8001c3c:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c6c <MX_DFSDM1_Init+0x68>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8001c44:	4b09      	ldr	r3, [pc, #36]	@ (8001c6c <MX_DFSDM1_Init+0x68>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8001c4a:	4b08      	ldr	r3, [pc, #32]	@ (8001c6c <MX_DFSDM1_Init+0x68>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8001c50:	4b06      	ldr	r3, [pc, #24]	@ (8001c6c <MX_DFSDM1_Init+0x68>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8001c56:	4805      	ldr	r0, [pc, #20]	@ (8001c6c <MX_DFSDM1_Init+0x68>)
 8001c58:	f003 f8c8 	bl	8004dec <HAL_DFSDM_ChannelInit>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8001c62:	f000 fb05 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20000354 	.word	0x20000354
 8001c70:	40016040 	.word	0x40016040

08001c74 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001c78:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce8 <MX_I2C2_Init+0x74>)
 8001c7a:	4a1c      	ldr	r2, [pc, #112]	@ (8001cec <MX_I2C2_Init+0x78>)
 8001c7c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A175AB;
 8001c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce8 <MX_I2C2_Init+0x74>)
 8001c80:	4a1b      	ldr	r2, [pc, #108]	@ (8001cf0 <MX_I2C2_Init+0x7c>)
 8001c82:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001c84:	4b18      	ldr	r3, [pc, #96]	@ (8001ce8 <MX_I2C2_Init+0x74>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c8a:	4b17      	ldr	r3, [pc, #92]	@ (8001ce8 <MX_I2C2_Init+0x74>)
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c90:	4b15      	ldr	r3, [pc, #84]	@ (8001ce8 <MX_I2C2_Init+0x74>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001c96:	4b14      	ldr	r3, [pc, #80]	@ (8001ce8 <MX_I2C2_Init+0x74>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c9c:	4b12      	ldr	r3, [pc, #72]	@ (8001ce8 <MX_I2C2_Init+0x74>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ca2:	4b11      	ldr	r3, [pc, #68]	@ (8001ce8 <MX_I2C2_Init+0x74>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce8 <MX_I2C2_Init+0x74>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001cae:	480e      	ldr	r0, [pc, #56]	@ (8001ce8 <MX_I2C2_Init+0x74>)
 8001cb0:	f003 ff35 	bl	8005b1e <HAL_I2C_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001cba:	f000 fad9 	bl	8002270 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	4809      	ldr	r0, [pc, #36]	@ (8001ce8 <MX_I2C2_Init+0x74>)
 8001cc2:	f004 fce7 	bl	8006694 <HAL_I2CEx_ConfigAnalogFilter>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001ccc:	f000 fad0 	bl	8002270 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	4805      	ldr	r0, [pc, #20]	@ (8001ce8 <MX_I2C2_Init+0x74>)
 8001cd4:	f004 fd29 	bl	800672a <HAL_I2CEx_ConfigDigitalFilter>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001cde:	f000 fac7 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	2000038c 	.word	0x2000038c
 8001cec:	40005800 	.word	0x40005800
 8001cf0:	30a175ab 	.word	0x30a175ab

08001cf4 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8001cfa:	1d3b      	adds	r3, r7, #4
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8001d08:	4b23      	ldr	r3, [pc, #140]	@ (8001d98 <MX_OCTOSPI1_Init+0xa4>)
 8001d0a:	4a24      	ldr	r2, [pc, #144]	@ (8001d9c <MX_OCTOSPI1_Init+0xa8>)
 8001d0c:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8001d0e:	4b22      	ldr	r3, [pc, #136]	@ (8001d98 <MX_OCTOSPI1_Init+0xa4>)
 8001d10:	2201      	movs	r2, #1
 8001d12:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001d14:	4b20      	ldr	r3, [pc, #128]	@ (8001d98 <MX_OCTOSPI1_Init+0xa4>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8001d1a:	4b1f      	ldr	r3, [pc, #124]	@ (8001d98 <MX_OCTOSPI1_Init+0xa4>)
 8001d1c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001d20:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8001d22:	4b1d      	ldr	r3, [pc, #116]	@ (8001d98 <MX_OCTOSPI1_Init+0xa4>)
 8001d24:	2220      	movs	r2, #32
 8001d26:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8001d28:	4b1b      	ldr	r3, [pc, #108]	@ (8001d98 <MX_OCTOSPI1_Init+0xa4>)
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001d2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d98 <MX_OCTOSPI1_Init+0xa4>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001d34:	4b18      	ldr	r3, [pc, #96]	@ (8001d98 <MX_OCTOSPI1_Init+0xa4>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8001d3a:	4b17      	ldr	r3, [pc, #92]	@ (8001d98 <MX_OCTOSPI1_Init+0xa4>)
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001d40:	4b15      	ldr	r3, [pc, #84]	@ (8001d98 <MX_OCTOSPI1_Init+0xa4>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001d46:	4b14      	ldr	r3, [pc, #80]	@ (8001d98 <MX_OCTOSPI1_Init+0xa4>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8001d4c:	4b12      	ldr	r3, [pc, #72]	@ (8001d98 <MX_OCTOSPI1_Init+0xa4>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001d52:	4b11      	ldr	r3, [pc, #68]	@ (8001d98 <MX_OCTOSPI1_Init+0xa4>)
 8001d54:	2208      	movs	r2, #8
 8001d56:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001d58:	480f      	ldr	r0, [pc, #60]	@ (8001d98 <MX_OCTOSPI1_Init+0xa4>)
 8001d5a:	f004 fd33 	bl	80067c4 <HAL_OSPI_Init>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8001d64:	f000 fa84 	bl	8002270 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8001d70:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8001d74:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001d76:	1d3b      	adds	r3, r7, #4
 8001d78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4806      	ldr	r0, [pc, #24]	@ (8001d98 <MX_OCTOSPI1_Init+0xa4>)
 8001d80:	f004 fdda 	bl	8006938 <HAL_OSPIM_Config>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8001d8a:	f000 fa71 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8001d8e:	bf00      	nop
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	200003e0 	.word	0x200003e0
 8001d9c:	a0001000 	.word	0xa0001000

08001da0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b088      	sub	sp, #32
 8001da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001da6:	f107 0310 	add.w	r3, r7, #16
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	605a      	str	r2, [r3, #4]
 8001db0:	609a      	str	r2, [r3, #8]
 8001db2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001db4:	1d3b      	adds	r3, r7, #4
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	605a      	str	r2, [r3, #4]
 8001dbc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001dbe:	4b1e      	ldr	r3, [pc, #120]	@ (8001e38 <MX_TIM2_Init+0x98>)
 8001dc0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001dc4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001dc6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e38 <MX_TIM2_Init+0x98>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dcc:	4b1a      	ldr	r3, [pc, #104]	@ (8001e38 <MX_TIM2_Init+0x98>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001dd2:	4b19      	ldr	r3, [pc, #100]	@ (8001e38 <MX_TIM2_Init+0x98>)
 8001dd4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001dd8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dda:	4b17      	ldr	r3, [pc, #92]	@ (8001e38 <MX_TIM2_Init+0x98>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001de0:	4b15      	ldr	r3, [pc, #84]	@ (8001e38 <MX_TIM2_Init+0x98>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001de6:	4814      	ldr	r0, [pc, #80]	@ (8001e38 <MX_TIM2_Init+0x98>)
 8001de8:	f006 fe9a 	bl	8008b20 <HAL_TIM_Base_Init>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001df2:	f000 fa3d 	bl	8002270 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001df6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dfa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001dfc:	f107 0310 	add.w	r3, r7, #16
 8001e00:	4619      	mov	r1, r3
 8001e02:	480d      	ldr	r0, [pc, #52]	@ (8001e38 <MX_TIM2_Init+0x98>)
 8001e04:	f006 ff73 	bl	8008cee <HAL_TIM_ConfigClockSource>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001e0e:	f000 fa2f 	bl	8002270 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001e12:	2320      	movs	r3, #32
 8001e14:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e16:	2300      	movs	r3, #0
 8001e18:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e1a:	1d3b      	adds	r3, r7, #4
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4806      	ldr	r0, [pc, #24]	@ (8001e38 <MX_TIM2_Init+0x98>)
 8001e20:	f007 f96e 	bl	8009100 <HAL_TIMEx_MasterConfigSynchronization>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001e2a:	f000 fa21 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e2e:	bf00      	nop
 8001e30:	3720      	adds	r7, #32
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20000430 	.word	0x20000430

08001e3c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e40:	4b22      	ldr	r3, [pc, #136]	@ (8001ecc <MX_USART1_UART_Init+0x90>)
 8001e42:	4a23      	ldr	r2, [pc, #140]	@ (8001ed0 <MX_USART1_UART_Init+0x94>)
 8001e44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e46:	4b21      	ldr	r3, [pc, #132]	@ (8001ecc <MX_USART1_UART_Init+0x90>)
 8001e48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e4e:	4b1f      	ldr	r3, [pc, #124]	@ (8001ecc <MX_USART1_UART_Init+0x90>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e54:	4b1d      	ldr	r3, [pc, #116]	@ (8001ecc <MX_USART1_UART_Init+0x90>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e5a:	4b1c      	ldr	r3, [pc, #112]	@ (8001ecc <MX_USART1_UART_Init+0x90>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e60:	4b1a      	ldr	r3, [pc, #104]	@ (8001ecc <MX_USART1_UART_Init+0x90>)
 8001e62:	220c      	movs	r2, #12
 8001e64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e66:	4b19      	ldr	r3, [pc, #100]	@ (8001ecc <MX_USART1_UART_Init+0x90>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e6c:	4b17      	ldr	r3, [pc, #92]	@ (8001ecc <MX_USART1_UART_Init+0x90>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e72:	4b16      	ldr	r3, [pc, #88]	@ (8001ecc <MX_USART1_UART_Init+0x90>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e78:	4b14      	ldr	r3, [pc, #80]	@ (8001ecc <MX_USART1_UART_Init+0x90>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e7e:	4b13      	ldr	r3, [pc, #76]	@ (8001ecc <MX_USART1_UART_Init+0x90>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e84:	4811      	ldr	r0, [pc, #68]	@ (8001ecc <MX_USART1_UART_Init+0x90>)
 8001e86:	f007 f9c3 	bl	8009210 <HAL_UART_Init>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001e90:	f000 f9ee 	bl	8002270 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e94:	2100      	movs	r1, #0
 8001e96:	480d      	ldr	r0, [pc, #52]	@ (8001ecc <MX_USART1_UART_Init+0x90>)
 8001e98:	f007 ff5e 	bl	8009d58 <HAL_UARTEx_SetTxFifoThreshold>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001ea2:	f000 f9e5 	bl	8002270 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	4808      	ldr	r0, [pc, #32]	@ (8001ecc <MX_USART1_UART_Init+0x90>)
 8001eaa:	f007 ff93 	bl	8009dd4 <HAL_UARTEx_SetRxFifoThreshold>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001eb4:	f000 f9dc 	bl	8002270 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001eb8:	4804      	ldr	r0, [pc, #16]	@ (8001ecc <MX_USART1_UART_Init+0x90>)
 8001eba:	f007 ff14 	bl	8009ce6 <HAL_UARTEx_DisableFifoMode>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001ec4:	f000 f9d4 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ec8:	bf00      	nop
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	2000047c 	.word	0x2000047c
 8001ed0:	40013800 	.word	0x40013800

08001ed4 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001ed8:	bf00      	nop
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
	...

08001ee4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001eea:	4b12      	ldr	r3, [pc, #72]	@ (8001f34 <MX_DMA_Init+0x50>)
 8001eec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eee:	4a11      	ldr	r2, [pc, #68]	@ (8001f34 <MX_DMA_Init+0x50>)
 8001ef0:	f043 0304 	orr.w	r3, r3, #4
 8001ef4:	6493      	str	r3, [r2, #72]	@ 0x48
 8001ef6:	4b0f      	ldr	r3, [pc, #60]	@ (8001f34 <MX_DMA_Init+0x50>)
 8001ef8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001efa:	f003 0304 	and.w	r3, r3, #4
 8001efe:	607b      	str	r3, [r7, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f02:	4b0c      	ldr	r3, [pc, #48]	@ (8001f34 <MX_DMA_Init+0x50>)
 8001f04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f06:	4a0b      	ldr	r2, [pc, #44]	@ (8001f34 <MX_DMA_Init+0x50>)
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001f0e:	4b09      	ldr	r3, [pc, #36]	@ (8001f34 <MX_DMA_Init+0x50>)
 8001f10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	603b      	str	r3, [r7, #0]
 8001f18:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	200b      	movs	r0, #11
 8001f20:	f002 fc05 	bl	800472e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f24:	200b      	movs	r0, #11
 8001f26:	f002 fc1e 	bl	8004766 <HAL_NVIC_EnableIRQ>

}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40021000 	.word	0x40021000

08001f38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08c      	sub	sp, #48	@ 0x30
 8001f3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3e:	f107 031c 	add.w	r3, r7, #28
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	605a      	str	r2, [r3, #4]
 8001f48:	609a      	str	r2, [r3, #8]
 8001f4a:	60da      	str	r2, [r3, #12]
 8001f4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f4e:	4bba      	ldr	r3, [pc, #744]	@ (8002238 <MX_GPIO_Init+0x300>)
 8001f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f52:	4ab9      	ldr	r2, [pc, #740]	@ (8002238 <MX_GPIO_Init+0x300>)
 8001f54:	f043 0310 	orr.w	r3, r3, #16
 8001f58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f5a:	4bb7      	ldr	r3, [pc, #732]	@ (8002238 <MX_GPIO_Init+0x300>)
 8001f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f5e:	f003 0310 	and.w	r3, r3, #16
 8001f62:	61bb      	str	r3, [r7, #24]
 8001f64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f66:	4bb4      	ldr	r3, [pc, #720]	@ (8002238 <MX_GPIO_Init+0x300>)
 8001f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f6a:	4ab3      	ldr	r2, [pc, #716]	@ (8002238 <MX_GPIO_Init+0x300>)
 8001f6c:	f043 0304 	orr.w	r3, r3, #4
 8001f70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f72:	4bb1      	ldr	r3, [pc, #708]	@ (8002238 <MX_GPIO_Init+0x300>)
 8001f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f76:	f003 0304 	and.w	r3, r3, #4
 8001f7a:	617b      	str	r3, [r7, #20]
 8001f7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f7e:	4bae      	ldr	r3, [pc, #696]	@ (8002238 <MX_GPIO_Init+0x300>)
 8001f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f82:	4aad      	ldr	r2, [pc, #692]	@ (8002238 <MX_GPIO_Init+0x300>)
 8001f84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f8a:	4bab      	ldr	r3, [pc, #684]	@ (8002238 <MX_GPIO_Init+0x300>)
 8001f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f92:	613b      	str	r3, [r7, #16]
 8001f94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f96:	4ba8      	ldr	r3, [pc, #672]	@ (8002238 <MX_GPIO_Init+0x300>)
 8001f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f9a:	4aa7      	ldr	r2, [pc, #668]	@ (8002238 <MX_GPIO_Init+0x300>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fa2:	4ba5      	ldr	r3, [pc, #660]	@ (8002238 <MX_GPIO_Init+0x300>)
 8001fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fae:	4ba2      	ldr	r3, [pc, #648]	@ (8002238 <MX_GPIO_Init+0x300>)
 8001fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fb2:	4aa1      	ldr	r2, [pc, #644]	@ (8002238 <MX_GPIO_Init+0x300>)
 8001fb4:	f043 0302 	orr.w	r3, r3, #2
 8001fb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fba:	4b9f      	ldr	r3, [pc, #636]	@ (8002238 <MX_GPIO_Init+0x300>)
 8001fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	60bb      	str	r3, [r7, #8]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fc6:	4b9c      	ldr	r3, [pc, #624]	@ (8002238 <MX_GPIO_Init+0x300>)
 8001fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fca:	4a9b      	ldr	r2, [pc, #620]	@ (8002238 <MX_GPIO_Init+0x300>)
 8001fcc:	f043 0308 	orr.w	r3, r3, #8
 8001fd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fd2:	4b99      	ldr	r3, [pc, #612]	@ (8002238 <MX_GPIO_Init+0x300>)
 8001fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	607b      	str	r3, [r7, #4]
 8001fdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f240 1105 	movw	r1, #261	@ 0x105
 8001fe4:	4895      	ldr	r0, [pc, #596]	@ (800223c <MX_GPIO_Init+0x304>)
 8001fe6:	f003 fd5f 	bl	8005aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8001fea:	2200      	movs	r2, #0
 8001fec:	f248 110c 	movw	r1, #33036	@ 0x810c
 8001ff0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ff4:	f003 fd58 	bl	8005aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|greenLed_Pin
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f24f 0134 	movw	r1, #61492	@ 0xf034
 8001ffe:	4890      	ldr	r0, [pc, #576]	@ (8002240 <MX_GPIO_Init+0x308>)
 8002000:	f003 fd52 	bl	8005aa8 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8002004:	2200      	movs	r2, #0
 8002006:	f242 0183 	movw	r1, #8323	@ 0x2083
 800200a:	488e      	ldr	r0, [pc, #568]	@ (8002244 <MX_GPIO_Init+0x30c>)
 800200c:	f003 fd4c 	bl	8005aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8002010:	2200      	movs	r2, #0
 8002012:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8002016:	488c      	ldr	r0, [pc, #560]	@ (8002248 <MX_GPIO_Init+0x310>)
 8002018:	f003 fd46 	bl	8005aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 800201c:	f240 1305 	movw	r3, #261	@ 0x105
 8002020:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002022:	2301      	movs	r3, #1
 8002024:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	2300      	movs	r3, #0
 8002028:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202a:	2300      	movs	r3, #0
 800202c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800202e:	f107 031c 	add.w	r3, r7, #28
 8002032:	4619      	mov	r1, r3
 8002034:	4881      	ldr	r0, [pc, #516]	@ (800223c <MX_GPIO_Init+0x304>)
 8002036:	f003 fab3 	bl	80055a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 800203a:	237a      	movs	r3, #122	@ 0x7a
 800203c:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800203e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002042:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002048:	f107 031c 	add.w	r3, r7, #28
 800204c:	4619      	mov	r1, r3
 800204e:	487b      	ldr	r0, [pc, #492]	@ (800223c <MX_GPIO_Init+0x304>)
 8002050:	f003 faa6 	bl	80055a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : blue_button_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = blue_button_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8002054:	f44f 5306 	mov.w	r3, #8576	@ 0x2180
 8002058:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800205a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800205e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	2300      	movs	r3, #0
 8002062:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002064:	f107 031c 	add.w	r3, r7, #28
 8002068:	4619      	mov	r1, r3
 800206a:	4877      	ldr	r0, [pc, #476]	@ (8002248 <MX_GPIO_Init+0x310>)
 800206c:	f003 fa98 	bl	80055a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8002070:	2303      	movs	r3, #3
 8002072:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002074:	2302      	movs	r3, #2
 8002076:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	2300      	movs	r3, #0
 800207a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800207c:	2303      	movs	r3, #3
 800207e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002080:	2308      	movs	r3, #8
 8002082:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002084:	f107 031c 	add.w	r3, r7, #28
 8002088:	4619      	mov	r1, r3
 800208a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800208e:	f003 fa87 	bl	80055a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8002092:	f248 130c 	movw	r3, #33036	@ 0x810c
 8002096:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002098:	2301      	movs	r3, #1
 800209a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209c:	2300      	movs	r3, #0
 800209e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a0:	2300      	movs	r3, #0
 80020a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a4:	f107 031c 	add.w	r3, r7, #28
 80020a8:	4619      	mov	r1, r3
 80020aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020ae:	f003 fa77 	bl	80055a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80020b2:	23e0      	movs	r3, #224	@ 0xe0
 80020b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b6:	2302      	movs	r3, #2
 80020b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020be:	2303      	movs	r3, #3
 80020c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020c2:	2305      	movs	r3, #5
 80020c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c6:	f107 031c 	add.w	r3, r7, #28
 80020ca:	4619      	mov	r1, r3
 80020cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020d0:	f003 fa66 	bl	80055a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80020d4:	2301      	movs	r3, #1
 80020d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020d8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80020dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80020e2:	f107 031c 	add.w	r3, r7, #28
 80020e6:	4619      	mov	r1, r3
 80020e8:	4855      	ldr	r0, [pc, #340]	@ (8002240 <MX_GPIO_Init+0x308>)
 80020ea:	f003 fa59 	bl	80055a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80020ee:	2302      	movs	r3, #2
 80020f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f2:	2302      	movs	r3, #2
 80020f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fa:	2300      	movs	r3, #0
 80020fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020fe:	2302      	movs	r3, #2
 8002100:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8002102:	f107 031c 	add.w	r3, r7, #28
 8002106:	4619      	mov	r1, r3
 8002108:	484d      	ldr	r0, [pc, #308]	@ (8002240 <MX_GPIO_Init+0x308>)
 800210a:	f003 fa49 	bl	80055a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin greenLed_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|greenLed_Pin
 800210e:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8002112:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002114:	2301      	movs	r3, #1
 8002116:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211c:	2300      	movs	r3, #0
 800211e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002120:	f107 031c 	add.w	r3, r7, #28
 8002124:	4619      	mov	r1, r3
 8002126:	4846      	ldr	r0, [pc, #280]	@ (8002240 <MX_GPIO_Init+0x308>)
 8002128:	f003 fa3a 	bl	80055a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800212c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002130:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002132:	2302      	movs	r3, #2
 8002134:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002136:	2300      	movs	r3, #0
 8002138:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213a:	2303      	movs	r3, #3
 800213c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800213e:	2307      	movs	r3, #7
 8002140:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002142:	f107 031c 	add.w	r3, r7, #28
 8002146:	4619      	mov	r1, r3
 8002148:	483e      	ldr	r0, [pc, #248]	@ (8002244 <MX_GPIO_Init+0x30c>)
 800214a:	f003 fa29 	bl	80055a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 800214e:	f64d 4304 	movw	r3, #56324	@ 0xdc04
 8002152:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002154:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002158:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215a:	2300      	movs	r3, #0
 800215c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800215e:	f107 031c 	add.w	r3, r7, #28
 8002162:	4619      	mov	r1, r3
 8002164:	4837      	ldr	r0, [pc, #220]	@ (8002244 <MX_GPIO_Init+0x30c>)
 8002166:	f003 fa1b 	bl	80055a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 800216a:	f242 0383 	movw	r3, #8323	@ 0x2083
 800216e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002170:	2301      	movs	r3, #1
 8002172:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002174:	2300      	movs	r3, #0
 8002176:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002178:	2300      	movs	r3, #0
 800217a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800217c:	f107 031c 	add.w	r3, r7, #28
 8002180:	4619      	mov	r1, r3
 8002182:	4830      	ldr	r0, [pc, #192]	@ (8002244 <MX_GPIO_Init+0x30c>)
 8002184:	f003 fa0c 	bl	80055a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8002188:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800218c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800218e:	2301      	movs	r3, #1
 8002190:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002192:	2300      	movs	r3, #0
 8002194:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002196:	2300      	movs	r3, #0
 8002198:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800219a:	f107 031c 	add.w	r3, r7, #28
 800219e:	4619      	mov	r1, r3
 80021a0:	4829      	ldr	r0, [pc, #164]	@ (8002248 <MX_GPIO_Init+0x310>)
 80021a2:	f003 f9fd 	bl	80055a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80021a6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80021aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ac:	2302      	movs	r3, #2
 80021ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b4:	2303      	movs	r3, #3
 80021b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80021b8:	230a      	movs	r3, #10
 80021ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021bc:	f107 031c 	add.w	r3, r7, #28
 80021c0:	4619      	mov	r1, r3
 80021c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021c6:	f003 f9eb 	bl	80055a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80021ca:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80021ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d0:	2302      	movs	r3, #2
 80021d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d8:	2303      	movs	r3, #3
 80021da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80021dc:	2306      	movs	r3, #6
 80021de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021e0:	f107 031c 	add.w	r3, r7, #28
 80021e4:	4619      	mov	r1, r3
 80021e6:	4818      	ldr	r0, [pc, #96]	@ (8002248 <MX_GPIO_Init+0x310>)
 80021e8:	f003 f9da 	bl	80055a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80021ec:	2378      	movs	r3, #120	@ 0x78
 80021ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f0:	2302      	movs	r3, #2
 80021f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f8:	2303      	movs	r3, #3
 80021fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021fc:	2307      	movs	r3, #7
 80021fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002200:	f107 031c 	add.w	r3, r7, #28
 8002204:	4619      	mov	r1, r3
 8002206:	480f      	ldr	r0, [pc, #60]	@ (8002244 <MX_GPIO_Init+0x30c>)
 8002208:	f003 f9ca 	bl	80055a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800220c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002210:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002212:	2312      	movs	r3, #18
 8002214:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002216:	2301      	movs	r3, #1
 8002218:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800221a:	2303      	movs	r3, #3
 800221c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800221e:	2304      	movs	r3, #4
 8002220:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002222:	f107 031c 	add.w	r3, r7, #28
 8002226:	4619      	mov	r1, r3
 8002228:	4805      	ldr	r0, [pc, #20]	@ (8002240 <MX_GPIO_Init+0x308>)
 800222a:	f003 f9b9 	bl	80055a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800222e:	2200      	movs	r2, #0
 8002230:	2100      	movs	r1, #0
 8002232:	2017      	movs	r0, #23
 8002234:	e00a      	b.n	800224c <MX_GPIO_Init+0x314>
 8002236:	bf00      	nop
 8002238:	40021000 	.word	0x40021000
 800223c:	48001000 	.word	0x48001000
 8002240:	48000400 	.word	0x48000400
 8002244:	48000c00 	.word	0x48000c00
 8002248:	48000800 	.word	0x48000800
 800224c:	f002 fa6f 	bl	800472e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002250:	2017      	movs	r0, #23
 8002252:	f002 fa88 	bl	8004766 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002256:	2200      	movs	r2, #0
 8002258:	2100      	movs	r1, #0
 800225a:	2028      	movs	r0, #40	@ 0x28
 800225c:	f002 fa67 	bl	800472e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002260:	2028      	movs	r0, #40	@ 0x28
 8002262:	f002 fa80 	bl	8004766 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002266:	bf00      	nop
 8002268:	3730      	adds	r7, #48	@ 0x30
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop

08002270 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002274:	b672      	cpsid	i
}
 8002276:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002278:	bf00      	nop
 800227a:	e7fd      	b.n	8002278 <Error_Handler+0x8>

0800227c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08a      	sub	sp, #40	@ 0x28
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002284:	4b27      	ldr	r3, [pc, #156]	@ (8002324 <I2Cx_MspInit+0xa8>)
 8002286:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002288:	4a26      	ldr	r2, [pc, #152]	@ (8002324 <I2Cx_MspInit+0xa8>)
 800228a:	f043 0302 	orr.w	r3, r3, #2
 800228e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002290:	4b24      	ldr	r3, [pc, #144]	@ (8002324 <I2Cx_MspInit+0xa8>)
 8002292:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	613b      	str	r3, [r7, #16]
 800229a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 800229c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80022a0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80022a2:	2312      	movs	r3, #18
 80022a4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80022a6:	2301      	movs	r3, #1
 80022a8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022aa:	2303      	movs	r3, #3
 80022ac:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80022ae:	2304      	movs	r3, #4
 80022b0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80022b2:	f107 0314 	add.w	r3, r7, #20
 80022b6:	4619      	mov	r1, r3
 80022b8:	481b      	ldr	r0, [pc, #108]	@ (8002328 <I2Cx_MspInit+0xac>)
 80022ba:	f003 f971 	bl	80055a0 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80022be:	f107 0314 	add.w	r3, r7, #20
 80022c2:	4619      	mov	r1, r3
 80022c4:	4818      	ldr	r0, [pc, #96]	@ (8002328 <I2Cx_MspInit+0xac>)
 80022c6:	f003 f96b 	bl	80055a0 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80022ca:	4b16      	ldr	r3, [pc, #88]	@ (8002324 <I2Cx_MspInit+0xa8>)
 80022cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ce:	4a15      	ldr	r2, [pc, #84]	@ (8002324 <I2Cx_MspInit+0xa8>)
 80022d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80022d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80022d6:	4b13      	ldr	r3, [pc, #76]	@ (8002324 <I2Cx_MspInit+0xa8>)
 80022d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80022e2:	4b10      	ldr	r3, [pc, #64]	@ (8002324 <I2Cx_MspInit+0xa8>)
 80022e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022e6:	4a0f      	ldr	r2, [pc, #60]	@ (8002324 <I2Cx_MspInit+0xa8>)
 80022e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80022ec:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80022ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002324 <I2Cx_MspInit+0xa8>)
 80022f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022f2:	4a0c      	ldr	r2, [pc, #48]	@ (8002324 <I2Cx_MspInit+0xa8>)
 80022f4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80022f8:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80022fa:	2200      	movs	r2, #0
 80022fc:	210f      	movs	r1, #15
 80022fe:	2021      	movs	r0, #33	@ 0x21
 8002300:	f002 fa15 	bl	800472e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002304:	2021      	movs	r0, #33	@ 0x21
 8002306:	f002 fa2e 	bl	8004766 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800230a:	2200      	movs	r2, #0
 800230c:	210f      	movs	r1, #15
 800230e:	2022      	movs	r0, #34	@ 0x22
 8002310:	f002 fa0d 	bl	800472e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002314:	2022      	movs	r0, #34	@ 0x22
 8002316:	f002 fa26 	bl	8004766 <HAL_NVIC_EnableIRQ>
}
 800231a:	bf00      	nop
 800231c:	3728      	adds	r7, #40	@ 0x28
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40021000 	.word	0x40021000
 8002328:	48000400 	.word	0x48000400

0800232c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a12      	ldr	r2, [pc, #72]	@ (8002380 <I2Cx_Init+0x54>)
 8002338:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a11      	ldr	r2, [pc, #68]	@ (8002384 <I2Cx_Init+0x58>)
 800233e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f7ff ff89 	bl	800227c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f003 fbd7 	bl	8005b1e <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8002370:	2100      	movs	r1, #0
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f004 f98e 	bl	8006694 <HAL_I2CEx_ConfigAnalogFilter>
}
 8002378:	bf00      	nop
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40005800 	.word	0x40005800
 8002384:	00702681 	.word	0x00702681

08002388 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b08a      	sub	sp, #40	@ 0x28
 800238c:	af04      	add	r7, sp, #16
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	4608      	mov	r0, r1
 8002392:	4611      	mov	r1, r2
 8002394:	461a      	mov	r2, r3
 8002396:	4603      	mov	r3, r0
 8002398:	72fb      	strb	r3, [r7, #11]
 800239a:	460b      	mov	r3, r1
 800239c:	813b      	strh	r3, [r7, #8]
 800239e:	4613      	mov	r3, r2
 80023a0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80023a2:	2300      	movs	r3, #0
 80023a4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80023a6:	7afb      	ldrb	r3, [r7, #11]
 80023a8:	b299      	uxth	r1, r3
 80023aa:	88f8      	ldrh	r0, [r7, #6]
 80023ac:	893a      	ldrh	r2, [r7, #8]
 80023ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023b2:	9302      	str	r3, [sp, #8]
 80023b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80023b6:	9301      	str	r3, [sp, #4]
 80023b8:	6a3b      	ldr	r3, [r7, #32]
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	4603      	mov	r3, r0
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f003 fd8c 	bl	8005edc <HAL_I2C_Mem_Read>
 80023c4:	4603      	mov	r3, r0
 80023c6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80023c8:	7dfb      	ldrb	r3, [r7, #23]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d004      	beq.n	80023d8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80023ce:	7afb      	ldrb	r3, [r7, #11]
 80023d0:	4619      	mov	r1, r3
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 f832 	bl	800243c <I2Cx_Error>
  }
  return status;
 80023d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3718      	adds	r7, #24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b08a      	sub	sp, #40	@ 0x28
 80023e6:	af04      	add	r7, sp, #16
 80023e8:	60f8      	str	r0, [r7, #12]
 80023ea:	4608      	mov	r0, r1
 80023ec:	4611      	mov	r1, r2
 80023ee:	461a      	mov	r2, r3
 80023f0:	4603      	mov	r3, r0
 80023f2:	72fb      	strb	r3, [r7, #11]
 80023f4:	460b      	mov	r3, r1
 80023f6:	813b      	strh	r3, [r7, #8]
 80023f8:	4613      	mov	r3, r2
 80023fa:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80023fc:	2300      	movs	r3, #0
 80023fe:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002400:	7afb      	ldrb	r3, [r7, #11]
 8002402:	b299      	uxth	r1, r3
 8002404:	88f8      	ldrh	r0, [r7, #6]
 8002406:	893a      	ldrh	r2, [r7, #8]
 8002408:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800240c:	9302      	str	r3, [sp, #8]
 800240e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002410:	9301      	str	r3, [sp, #4]
 8002412:	6a3b      	ldr	r3, [r7, #32]
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	4603      	mov	r3, r0
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f003 fc4b 	bl	8005cb4 <HAL_I2C_Mem_Write>
 800241e:	4603      	mov	r3, r0
 8002420:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002422:	7dfb      	ldrb	r3, [r7, #23]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d004      	beq.n	8002432 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002428:	7afb      	ldrb	r3, [r7, #11]
 800242a:	4619      	mov	r1, r3
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f000 f805 	bl	800243c <I2Cx_Error>
  }
  return status;
 8002432:	7dfb      	ldrb	r3, [r7, #23]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3718      	adds	r7, #24
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	460b      	mov	r3, r1
 8002446:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f003 fc03 	bl	8005c54 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7ff ff6c 	bl	800232c <I2Cx_Init>
}
 8002454:	bf00      	nop
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8002460:	4802      	ldr	r0, [pc, #8]	@ (800246c <SENSOR_IO_Init+0x10>)
 8002462:	f7ff ff63 	bl	800232c <I2Cx_Init>
}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	2000054c 	.word	0x2000054c

08002470 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af02      	add	r7, sp, #8
 8002476:	4603      	mov	r3, r0
 8002478:	71fb      	strb	r3, [r7, #7]
 800247a:	460b      	mov	r3, r1
 800247c:	71bb      	strb	r3, [r7, #6]
 800247e:	4613      	mov	r3, r2
 8002480:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002482:	79bb      	ldrb	r3, [r7, #6]
 8002484:	b29a      	uxth	r2, r3
 8002486:	79f9      	ldrb	r1, [r7, #7]
 8002488:	2301      	movs	r3, #1
 800248a:	9301      	str	r3, [sp, #4]
 800248c:	1d7b      	adds	r3, r7, #5
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	2301      	movs	r3, #1
 8002492:	4803      	ldr	r0, [pc, #12]	@ (80024a0 <SENSOR_IO_Write+0x30>)
 8002494:	f7ff ffa5 	bl	80023e2 <I2Cx_WriteMultiple>
}
 8002498:	bf00      	nop
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	2000054c 	.word	0x2000054c

080024a4 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af02      	add	r7, sp, #8
 80024aa:	4603      	mov	r3, r0
 80024ac:	460a      	mov	r2, r1
 80024ae:	71fb      	strb	r3, [r7, #7]
 80024b0:	4613      	mov	r3, r2
 80024b2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80024b4:	2300      	movs	r3, #0
 80024b6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80024b8:	79bb      	ldrb	r3, [r7, #6]
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	79f9      	ldrb	r1, [r7, #7]
 80024be:	2301      	movs	r3, #1
 80024c0:	9301      	str	r3, [sp, #4]
 80024c2:	f107 030f 	add.w	r3, r7, #15
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	2301      	movs	r3, #1
 80024ca:	4804      	ldr	r0, [pc, #16]	@ (80024dc <SENSOR_IO_Read+0x38>)
 80024cc:	f7ff ff5c 	bl	8002388 <I2Cx_ReadMultiple>

  return read_value;
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	2000054c 	.word	0x2000054c

080024e0 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af02      	add	r7, sp, #8
 80024e6:	603a      	str	r2, [r7, #0]
 80024e8:	461a      	mov	r2, r3
 80024ea:	4603      	mov	r3, r0
 80024ec:	71fb      	strb	r3, [r7, #7]
 80024ee:	460b      	mov	r3, r1
 80024f0:	71bb      	strb	r3, [r7, #6]
 80024f2:	4613      	mov	r3, r2
 80024f4:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80024f6:	79bb      	ldrb	r3, [r7, #6]
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	79f9      	ldrb	r1, [r7, #7]
 80024fc:	88bb      	ldrh	r3, [r7, #4]
 80024fe:	9301      	str	r3, [sp, #4]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	2301      	movs	r3, #1
 8002506:	4804      	ldr	r0, [pc, #16]	@ (8002518 <SENSOR_IO_ReadMultiple+0x38>)
 8002508:	f7ff ff3e 	bl	8002388 <I2Cx_ReadMultiple>
 800250c:	4603      	mov	r3, r0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	2000054c 	.word	0x2000054c

0800251c <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8002522:	2300      	movs	r3, #0
 8002524:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002526:	2300      	movs	r3, #0
 8002528:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800252a:	4b19      	ldr	r3, [pc, #100]	@ (8002590 <BSP_ACCELERO_Init+0x74>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	4798      	blx	r3
 8002530:	4603      	mov	r3, r0
 8002532:	2b6a      	cmp	r3, #106	@ 0x6a
 8002534:	d002      	beq.n	800253c <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	73fb      	strb	r3, [r7, #15]
 800253a:	e024      	b.n	8002586 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 800253c:	4b15      	ldr	r3, [pc, #84]	@ (8002594 <BSP_ACCELERO_Init+0x78>)
 800253e:	4a14      	ldr	r2, [pc, #80]	@ (8002590 <BSP_ACCELERO_Init+0x74>)
 8002540:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8002542:	2330      	movs	r3, #48	@ 0x30
 8002544:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8002546:	2300      	movs	r3, #0
 8002548:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 800254a:	2300      	movs	r3, #0
 800254c:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800254e:	2340      	movs	r3, #64	@ 0x40
 8002550:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8002552:	2300      	movs	r3, #0
 8002554:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8002556:	2300      	movs	r3, #0
 8002558:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 800255a:	797a      	ldrb	r2, [r7, #5]
 800255c:	7abb      	ldrb	r3, [r7, #10]
 800255e:	4313      	orrs	r3, r2
 8002560:	b2db      	uxtb	r3, r3
 8002562:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8002564:	7a3b      	ldrb	r3, [r7, #8]
 8002566:	f043 0304 	orr.w	r3, r3, #4
 800256a:	b2db      	uxtb	r3, r3
 800256c:	021b      	lsls	r3, r3, #8
 800256e:	b21a      	sxth	r2, r3
 8002570:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002574:	4313      	orrs	r3, r2
 8002576:	b21b      	sxth	r3, r3
 8002578:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800257a:	4b06      	ldr	r3, [pc, #24]	@ (8002594 <BSP_ACCELERO_Init+0x78>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	89ba      	ldrh	r2, [r7, #12]
 8002582:	4610      	mov	r0, r2
 8002584:	4798      	blx	r3
  }  

  return ret;
 8002586:	7bfb      	ldrb	r3, [r7, #15]
}
 8002588:	4618      	mov	r0, r3
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	20000058 	.word	0x20000058
 8002594:	200005a0 	.word	0x200005a0

08002598 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 80025a0:	4b08      	ldr	r3, [pc, #32]	@ (80025c4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d009      	beq.n	80025bc <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 80025a8:	4b06      	ldr	r3, [pc, #24]	@ (80025c4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d004      	beq.n	80025bc <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 80025b2:	4b04      	ldr	r3, [pc, #16]	@ (80025c4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	4798      	blx	r3
    }
  }
}
 80025bc:	bf00      	nop
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	200005a0 	.word	0x200005a0

080025c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ce:	4b0f      	ldr	r3, [pc, #60]	@ (800260c <HAL_MspInit+0x44>)
 80025d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025d2:	4a0e      	ldr	r2, [pc, #56]	@ (800260c <HAL_MspInit+0x44>)
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80025da:	4b0c      	ldr	r3, [pc, #48]	@ (800260c <HAL_MspInit+0x44>)
 80025dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	607b      	str	r3, [r7, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025e6:	4b09      	ldr	r3, [pc, #36]	@ (800260c <HAL_MspInit+0x44>)
 80025e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ea:	4a08      	ldr	r2, [pc, #32]	@ (800260c <HAL_MspInit+0x44>)
 80025ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80025f2:	4b06      	ldr	r3, [pc, #24]	@ (800260c <HAL_MspInit+0x44>)
 80025f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025fa:	603b      	str	r3, [r7, #0]
 80025fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	40021000 	.word	0x40021000

08002610 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08a      	sub	sp, #40	@ 0x28
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002618:	f107 0314 	add.w	r3, r7, #20
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	60da      	str	r2, [r3, #12]
 8002626:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a15      	ldr	r2, [pc, #84]	@ (8002684 <HAL_ADC_MspInit+0x74>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d123      	bne.n	800267a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002632:	4b15      	ldr	r3, [pc, #84]	@ (8002688 <HAL_ADC_MspInit+0x78>)
 8002634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002636:	4a14      	ldr	r2, [pc, #80]	@ (8002688 <HAL_ADC_MspInit+0x78>)
 8002638:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800263c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800263e:	4b12      	ldr	r3, [pc, #72]	@ (8002688 <HAL_ADC_MspInit+0x78>)
 8002640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002642:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002646:	613b      	str	r3, [r7, #16]
 8002648:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800264a:	4b0f      	ldr	r3, [pc, #60]	@ (8002688 <HAL_ADC_MspInit+0x78>)
 800264c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800264e:	4a0e      	ldr	r2, [pc, #56]	@ (8002688 <HAL_ADC_MspInit+0x78>)
 8002650:	f043 0304 	orr.w	r3, r3, #4
 8002654:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002656:	4b0c      	ldr	r3, [pc, #48]	@ (8002688 <HAL_ADC_MspInit+0x78>)
 8002658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800265a:	f003 0304 	and.w	r3, r3, #4
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8002662:	233f      	movs	r3, #63	@ 0x3f
 8002664:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002666:	230b      	movs	r3, #11
 8002668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266a:	2300      	movs	r3, #0
 800266c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800266e:	f107 0314 	add.w	r3, r7, #20
 8002672:	4619      	mov	r1, r3
 8002674:	4805      	ldr	r0, [pc, #20]	@ (800268c <HAL_ADC_MspInit+0x7c>)
 8002676:	f002 ff93 	bl	80055a0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800267a:	bf00      	nop
 800267c:	3728      	adds	r7, #40	@ 0x28
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	50040000 	.word	0x50040000
 8002688:	40021000 	.word	0x40021000
 800268c:	48000800 	.word	0x48000800

08002690 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08a      	sub	sp, #40	@ 0x28
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002698:	f107 0314 	add.w	r3, r7, #20
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	605a      	str	r2, [r3, #4]
 80026a2:	609a      	str	r2, [r3, #8]
 80026a4:	60da      	str	r2, [r3, #12]
 80026a6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a2b      	ldr	r2, [pc, #172]	@ (800275c <HAL_DAC_MspInit+0xcc>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d14f      	bne.n	8002752 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80026b2:	4b2b      	ldr	r3, [pc, #172]	@ (8002760 <HAL_DAC_MspInit+0xd0>)
 80026b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026b6:	4a2a      	ldr	r2, [pc, #168]	@ (8002760 <HAL_DAC_MspInit+0xd0>)
 80026b8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80026bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80026be:	4b28      	ldr	r3, [pc, #160]	@ (8002760 <HAL_DAC_MspInit+0xd0>)
 80026c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80026c6:	613b      	str	r3, [r7, #16]
 80026c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ca:	4b25      	ldr	r3, [pc, #148]	@ (8002760 <HAL_DAC_MspInit+0xd0>)
 80026cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ce:	4a24      	ldr	r2, [pc, #144]	@ (8002760 <HAL_DAC_MspInit+0xd0>)
 80026d0:	f043 0301 	orr.w	r3, r3, #1
 80026d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026d6:	4b22      	ldr	r3, [pc, #136]	@ (8002760 <HAL_DAC_MspInit+0xd0>)
 80026d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80026e2:	2310      	movs	r3, #16
 80026e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026e6:	2303      	movs	r3, #3
 80026e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ea:	2300      	movs	r3, #0
 80026ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ee:	f107 0314 	add.w	r3, r7, #20
 80026f2:	4619      	mov	r1, r3
 80026f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026f8:	f002 ff52 	bl	80055a0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 80026fc:	4b19      	ldr	r3, [pc, #100]	@ (8002764 <HAL_DAC_MspInit+0xd4>)
 80026fe:	4a1a      	ldr	r2, [pc, #104]	@ (8002768 <HAL_DAC_MspInit+0xd8>)
 8002700:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 8002702:	4b18      	ldr	r3, [pc, #96]	@ (8002764 <HAL_DAC_MspInit+0xd4>)
 8002704:	2206      	movs	r2, #6
 8002706:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002708:	4b16      	ldr	r3, [pc, #88]	@ (8002764 <HAL_DAC_MspInit+0xd4>)
 800270a:	2210      	movs	r2, #16
 800270c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800270e:	4b15      	ldr	r3, [pc, #84]	@ (8002764 <HAL_DAC_MspInit+0xd4>)
 8002710:	2200      	movs	r2, #0
 8002712:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002714:	4b13      	ldr	r3, [pc, #76]	@ (8002764 <HAL_DAC_MspInit+0xd4>)
 8002716:	2280      	movs	r2, #128	@ 0x80
 8002718:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800271a:	4b12      	ldr	r3, [pc, #72]	@ (8002764 <HAL_DAC_MspInit+0xd4>)
 800271c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002720:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002722:	4b10      	ldr	r3, [pc, #64]	@ (8002764 <HAL_DAC_MspInit+0xd4>)
 8002724:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002728:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800272a:	4b0e      	ldr	r3, [pc, #56]	@ (8002764 <HAL_DAC_MspInit+0xd4>)
 800272c:	2220      	movs	r2, #32
 800272e:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002730:	4b0c      	ldr	r3, [pc, #48]	@ (8002764 <HAL_DAC_MspInit+0xd4>)
 8002732:	2200      	movs	r2, #0
 8002734:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002736:	480b      	ldr	r0, [pc, #44]	@ (8002764 <HAL_DAC_MspInit+0xd4>)
 8002738:	f002 fc64 	bl	8005004 <HAL_DMA_Init>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8002742:	f7ff fd95 	bl	8002270 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a06      	ldr	r2, [pc, #24]	@ (8002764 <HAL_DAC_MspInit+0xd4>)
 800274a:	609a      	str	r2, [r3, #8]
 800274c:	4a05      	ldr	r2, [pc, #20]	@ (8002764 <HAL_DAC_MspInit+0xd4>)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8002752:	bf00      	nop
 8002754:	3728      	adds	r7, #40	@ 0x28
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40007400 	.word	0x40007400
 8002760:	40021000 	.word	0x40021000
 8002764:	200002f4 	.word	0x200002f4
 8002768:	40020008 	.word	0x40020008

0800276c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b0ae      	sub	sp, #184	@ 0xb8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002774:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	605a      	str	r2, [r3, #4]
 800277e:	609a      	str	r2, [r3, #8]
 8002780:	60da      	str	r2, [r3, #12]
 8002782:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002784:	f107 0310 	add.w	r3, r7, #16
 8002788:	2294      	movs	r2, #148	@ 0x94
 800278a:	2100      	movs	r1, #0
 800278c:	4618      	mov	r0, r3
 800278e:	f008 f937 	bl	800aa00 <memset>
  if(DFSDM1_Init == 0)
 8002792:	4b25      	ldr	r3, [pc, #148]	@ (8002828 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d142      	bne.n	8002820 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800279a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800279e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80027a0:	2300      	movs	r3, #0
 80027a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027a6:	f107 0310 	add.w	r3, r7, #16
 80027aa:	4618      	mov	r0, r3
 80027ac:	f005 fc90 	bl	80080d0 <HAL_RCCEx_PeriphCLKConfig>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80027b6:	f7ff fd5b 	bl	8002270 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80027ba:	4b1c      	ldr	r3, [pc, #112]	@ (800282c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80027bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027be:	4a1b      	ldr	r2, [pc, #108]	@ (800282c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80027c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80027c6:	4b19      	ldr	r3, [pc, #100]	@ (800282c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80027c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80027d2:	4b16      	ldr	r3, [pc, #88]	@ (800282c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80027d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027d6:	4a15      	ldr	r2, [pc, #84]	@ (800282c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80027d8:	f043 0310 	orr.w	r3, r3, #16
 80027dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027de:	4b13      	ldr	r3, [pc, #76]	@ (800282c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80027e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027e2:	f003 0310 	and.w	r3, r3, #16
 80027e6:	60bb      	str	r3, [r7, #8]
 80027e8:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80027ea:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80027ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f2:	2302      	movs	r3, #2
 80027f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027fe:	2300      	movs	r3, #0
 8002800:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002804:	2306      	movs	r3, #6
 8002806:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800280a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800280e:	4619      	mov	r1, r3
 8002810:	4807      	ldr	r0, [pc, #28]	@ (8002830 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8002812:	f002 fec5 	bl	80055a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8002816:	4b04      	ldr	r3, [pc, #16]	@ (8002828 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	3301      	adds	r3, #1
 800281c:	4a02      	ldr	r2, [pc, #8]	@ (8002828 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800281e:	6013      	str	r3, [r2, #0]
  }

}
 8002820:	bf00      	nop
 8002822:	37b8      	adds	r7, #184	@ 0xb8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	200005a4 	.word	0x200005a4
 800282c:	40021000 	.word	0x40021000
 8002830:	48001000 	.word	0x48001000

08002834 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b0ae      	sub	sp, #184	@ 0xb8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800283c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	609a      	str	r2, [r3, #8]
 8002848:	60da      	str	r2, [r3, #12]
 800284a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800284c:	f107 0310 	add.w	r3, r7, #16
 8002850:	2294      	movs	r2, #148	@ 0x94
 8002852:	2100      	movs	r1, #0
 8002854:	4618      	mov	r0, r3
 8002856:	f008 f8d3 	bl	800aa00 <memset>
  if(hi2c->Instance==I2C2)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a21      	ldr	r2, [pc, #132]	@ (80028e4 <HAL_I2C_MspInit+0xb0>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d13b      	bne.n	80028dc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002864:	2380      	movs	r3, #128	@ 0x80
 8002866:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002868:	2300      	movs	r3, #0
 800286a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800286c:	f107 0310 	add.w	r3, r7, #16
 8002870:	4618      	mov	r0, r3
 8002872:	f005 fc2d 	bl	80080d0 <HAL_RCCEx_PeriphCLKConfig>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800287c:	f7ff fcf8 	bl	8002270 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002880:	4b19      	ldr	r3, [pc, #100]	@ (80028e8 <HAL_I2C_MspInit+0xb4>)
 8002882:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002884:	4a18      	ldr	r2, [pc, #96]	@ (80028e8 <HAL_I2C_MspInit+0xb4>)
 8002886:	f043 0302 	orr.w	r3, r3, #2
 800288a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800288c:	4b16      	ldr	r3, [pc, #88]	@ (80028e8 <HAL_I2C_MspInit+0xb4>)
 800288e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8002898:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800289c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028a0:	2312      	movs	r3, #18
 80028a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028a6:	2301      	movs	r3, #1
 80028a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ac:	2303      	movs	r3, #3
 80028ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80028b2:	2304      	movs	r3, #4
 80028b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028b8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80028bc:	4619      	mov	r1, r3
 80028be:	480b      	ldr	r0, [pc, #44]	@ (80028ec <HAL_I2C_MspInit+0xb8>)
 80028c0:	f002 fe6e 	bl	80055a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80028c4:	4b08      	ldr	r3, [pc, #32]	@ (80028e8 <HAL_I2C_MspInit+0xb4>)
 80028c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028c8:	4a07      	ldr	r2, [pc, #28]	@ (80028e8 <HAL_I2C_MspInit+0xb4>)
 80028ca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80028ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80028d0:	4b05      	ldr	r3, [pc, #20]	@ (80028e8 <HAL_I2C_MspInit+0xb4>)
 80028d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028d8:	60bb      	str	r3, [r7, #8]
 80028da:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80028dc:	bf00      	nop
 80028de:	37b8      	adds	r7, #184	@ 0xb8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40005800 	.word	0x40005800
 80028e8:	40021000 	.word	0x40021000
 80028ec:	48000400 	.word	0x48000400

080028f0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a0b      	ldr	r2, [pc, #44]	@ (800292c <HAL_I2C_MspDeInit+0x3c>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d10f      	bne.n	8002922 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002902:	4b0b      	ldr	r3, [pc, #44]	@ (8002930 <HAL_I2C_MspDeInit+0x40>)
 8002904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002906:	4a0a      	ldr	r2, [pc, #40]	@ (8002930 <HAL_I2C_MspDeInit+0x40>)
 8002908:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800290c:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 800290e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002912:	4808      	ldr	r0, [pc, #32]	@ (8002934 <HAL_I2C_MspDeInit+0x44>)
 8002914:	f002 ffd6 	bl	80058c4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8002918:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800291c:	4805      	ldr	r0, [pc, #20]	@ (8002934 <HAL_I2C_MspDeInit+0x44>)
 800291e:	f002 ffd1 	bl	80058c4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8002922:	bf00      	nop
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40005800 	.word	0x40005800
 8002930:	40021000 	.word	0x40021000
 8002934:	48000400 	.word	0x48000400

08002938 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b0b0      	sub	sp, #192	@ 0xc0
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002940:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	605a      	str	r2, [r3, #4]
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	60da      	str	r2, [r3, #12]
 800294e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002950:	f107 0318 	add.w	r3, r7, #24
 8002954:	2294      	movs	r2, #148	@ 0x94
 8002956:	2100      	movs	r1, #0
 8002958:	4618      	mov	r0, r3
 800295a:	f008 f851 	bl	800aa00 <memset>
  if(hospi->Instance==OCTOSPI1)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a28      	ldr	r2, [pc, #160]	@ (8002a04 <HAL_OSPI_MspInit+0xcc>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d149      	bne.n	80029fc <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8002968:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800296c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800296e:	2300      	movs	r3, #0
 8002970:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002974:	f107 0318 	add.w	r3, r7, #24
 8002978:	4618      	mov	r0, r3
 800297a:	f005 fba9 	bl	80080d0 <HAL_RCCEx_PeriphCLKConfig>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8002984:	f7ff fc74 	bl	8002270 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8002988:	4b1f      	ldr	r3, [pc, #124]	@ (8002a08 <HAL_OSPI_MspInit+0xd0>)
 800298a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800298c:	4a1e      	ldr	r2, [pc, #120]	@ (8002a08 <HAL_OSPI_MspInit+0xd0>)
 800298e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002992:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002994:	4b1c      	ldr	r3, [pc, #112]	@ (8002a08 <HAL_OSPI_MspInit+0xd0>)
 8002996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002998:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800299c:	617b      	str	r3, [r7, #20]
 800299e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80029a0:	4b19      	ldr	r3, [pc, #100]	@ (8002a08 <HAL_OSPI_MspInit+0xd0>)
 80029a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029a4:	4a18      	ldr	r2, [pc, #96]	@ (8002a08 <HAL_OSPI_MspInit+0xd0>)
 80029a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80029ac:	4b16      	ldr	r3, [pc, #88]	@ (8002a08 <HAL_OSPI_MspInit+0xd0>)
 80029ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029b4:	613b      	str	r3, [r7, #16]
 80029b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80029b8:	4b13      	ldr	r3, [pc, #76]	@ (8002a08 <HAL_OSPI_MspInit+0xd0>)
 80029ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029bc:	4a12      	ldr	r2, [pc, #72]	@ (8002a08 <HAL_OSPI_MspInit+0xd0>)
 80029be:	f043 0310 	orr.w	r3, r3, #16
 80029c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029c4:	4b10      	ldr	r3, [pc, #64]	@ (8002a08 <HAL_OSPI_MspInit+0xd0>)
 80029c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029c8:	f003 0310 	and.w	r3, r3, #16
 80029cc:	60fb      	str	r3, [r7, #12]
 80029ce:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80029d0:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 80029d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d8:	2302      	movs	r3, #2
 80029da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029e4:	2303      	movs	r3, #3
 80029e6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80029ea:	230a      	movs	r3, #10
 80029ec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029f0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80029f4:	4619      	mov	r1, r3
 80029f6:	4805      	ldr	r0, [pc, #20]	@ (8002a0c <HAL_OSPI_MspInit+0xd4>)
 80029f8:	f002 fdd2 	bl	80055a0 <HAL_GPIO_Init>

  /* USER CODE END OCTOSPI1_MspInit 1 */

  }

}
 80029fc:	bf00      	nop
 80029fe:	37c0      	adds	r7, #192	@ 0xc0
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	a0001000 	.word	0xa0001000
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	48001000 	.word	0x48001000

08002a10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a20:	d10b      	bne.n	8002a3a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a22:	4b09      	ldr	r3, [pc, #36]	@ (8002a48 <HAL_TIM_Base_MspInit+0x38>)
 8002a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a26:	4a08      	ldr	r2, [pc, #32]	@ (8002a48 <HAL_TIM_Base_MspInit+0x38>)
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a2e:	4b06      	ldr	r3, [pc, #24]	@ (8002a48 <HAL_TIM_Base_MspInit+0x38>)
 8002a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002a3a:	bf00      	nop
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	40021000 	.word	0x40021000

08002a4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b0ae      	sub	sp, #184	@ 0xb8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a54:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	605a      	str	r2, [r3, #4]
 8002a5e:	609a      	str	r2, [r3, #8]
 8002a60:	60da      	str	r2, [r3, #12]
 8002a62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a64:	f107 0310 	add.w	r3, r7, #16
 8002a68:	2294      	movs	r2, #148	@ 0x94
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f007 ffc7 	bl	800aa00 <memset>
  if(huart->Instance==USART1)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a21      	ldr	r2, [pc, #132]	@ (8002afc <HAL_UART_MspInit+0xb0>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d13a      	bne.n	8002af2 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002a80:	2300      	movs	r3, #0
 8002a82:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a84:	f107 0310 	add.w	r3, r7, #16
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f005 fb21 	bl	80080d0 <HAL_RCCEx_PeriphCLKConfig>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002a94:	f7ff fbec 	bl	8002270 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a98:	4b19      	ldr	r3, [pc, #100]	@ (8002b00 <HAL_UART_MspInit+0xb4>)
 8002a9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a9c:	4a18      	ldr	r2, [pc, #96]	@ (8002b00 <HAL_UART_MspInit+0xb4>)
 8002a9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002aa2:	6613      	str	r3, [r2, #96]	@ 0x60
 8002aa4:	4b16      	ldr	r3, [pc, #88]	@ (8002b00 <HAL_UART_MspInit+0xb4>)
 8002aa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aa8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab0:	4b13      	ldr	r3, [pc, #76]	@ (8002b00 <HAL_UART_MspInit+0xb4>)
 8002ab2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ab4:	4a12      	ldr	r2, [pc, #72]	@ (8002b00 <HAL_UART_MspInit+0xb4>)
 8002ab6:	f043 0302 	orr.w	r3, r3, #2
 8002aba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002abc:	4b10      	ldr	r3, [pc, #64]	@ (8002b00 <HAL_UART_MspInit+0xb4>)
 8002abe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	60bb      	str	r3, [r7, #8]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|GPIO_PIN_7;
 8002ac8:	23c0      	movs	r3, #192	@ 0xc0
 8002aca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ace:	2302      	movs	r3, #2
 8002ad0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ada:	2303      	movs	r3, #3
 8002adc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ae0:	2307      	movs	r3, #7
 8002ae2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ae6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002aea:	4619      	mov	r1, r3
 8002aec:	4805      	ldr	r0, [pc, #20]	@ (8002b04 <HAL_UART_MspInit+0xb8>)
 8002aee:	f002 fd57 	bl	80055a0 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002af2:	bf00      	nop
 8002af4:	37b8      	adds	r7, #184	@ 0xb8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	40013800 	.word	0x40013800
 8002b00:	40021000 	.word	0x40021000
 8002b04:	48000400 	.word	0x48000400

08002b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b0c:	bf00      	nop
 8002b0e:	e7fd      	b.n	8002b0c <NMI_Handler+0x4>

08002b10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b14:	bf00      	nop
 8002b16:	e7fd      	b.n	8002b14 <HardFault_Handler+0x4>

08002b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b1c:	bf00      	nop
 8002b1e:	e7fd      	b.n	8002b1c <MemManage_Handler+0x4>

08002b20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b24:	bf00      	nop
 8002b26:	e7fd      	b.n	8002b24 <BusFault_Handler+0x4>

08002b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b2c:	bf00      	nop
 8002b2e:	e7fd      	b.n	8002b2c <UsageFault_Handler+0x4>

08002b30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b34:	bf00      	nop
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b42:	bf00      	nop
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b50:	bf00      	nop
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b5e:	f000 fa89 	bl	8003074 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b62:	bf00      	nop
 8002b64:	bd80      	pop	{r7, pc}
	...

08002b68 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002b6c:	4802      	ldr	r0, [pc, #8]	@ (8002b78 <DMA1_Channel1_IRQHandler+0x10>)
 8002b6e:	f002 fbc8 	bl	8005302 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002b72:	bf00      	nop
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	200002f4 	.word	0x200002f4

08002b7c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8002b80:	2020      	movs	r0, #32
 8002b82:	f002 ffa9 	bl	8005ad8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8002b86:	2040      	movs	r0, #64	@ 0x40
 8002b88:	f002 ffa6 	bl	8005ad8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8002b8c:	2080      	movs	r0, #128	@ 0x80
 8002b8e:	f002 ffa3 	bl	8005ad8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8002b92:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002b96:	f002 ff9f 	bl	8005ad8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002b9a:	bf00      	nop
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 8002ba2:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002ba6:	f002 ff97 	bl	8005ad8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8002baa:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002bae:	f002 ff93 	bl	8005ad8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 8002bb2:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002bb6:	f002 ff8f 	bl	8005ad8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(blue_button_Pin);
 8002bba:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002bbe:	f002 ff8b 	bl	8005ad8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8002bc2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002bc6:	f002 ff87 	bl	8005ad8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8002bca:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002bce:	f002 ff83 	bl	8005ad8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002bd2:	bf00      	nop
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <_getpid>:
 8002bd6:	b480      	push	{r7}
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	2301      	movs	r3, #1
 8002bdc:	4618      	mov	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <_kill>:
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b082      	sub	sp, #8
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	6039      	str	r1, [r7, #0]
 8002bf0:	f007 ff12 	bl	800aa18 <__errno>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2216      	movs	r2, #22
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <_exit>:
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b082      	sub	sp, #8
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
 8002c0e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7ff ffe7 	bl	8002be6 <_kill>
 8002c18:	bf00      	nop
 8002c1a:	e7fd      	b.n	8002c18 <_exit+0x12>

08002c1c <_read>:
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
 8002c28:	2300      	movs	r3, #0
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	e00a      	b.n	8002c44 <_read+0x28>
 8002c2e:	f3af 8000 	nop.w
 8002c32:	4601      	mov	r1, r0
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	1c5a      	adds	r2, r3, #1
 8002c38:	60ba      	str	r2, [r7, #8]
 8002c3a:	b2ca      	uxtb	r2, r1
 8002c3c:	701a      	strb	r2, [r3, #0]
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	3301      	adds	r3, #1
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	dbf0      	blt.n	8002c2e <_read+0x12>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3718      	adds	r7, #24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <_close>:
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
 8002c5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c62:	4618      	mov	r0, r3
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <_fstat>:
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
 8002c76:	6039      	str	r1, [r7, #0]
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c7e:	605a      	str	r2, [r3, #4]
 8002c80:	2300      	movs	r3, #0
 8002c82:	4618      	mov	r0, r3
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <_isatty>:
 8002c8e:	b480      	push	{r7}
 8002c90:	b083      	sub	sp, #12
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
 8002c96:	2301      	movs	r3, #1
 8002c98:	4618      	mov	r0, r3
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <_lseek>:
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3714      	adds	r7, #20
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
	...

08002cc0 <_sbrk>:
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	4a14      	ldr	r2, [pc, #80]	@ (8002d1c <_sbrk+0x5c>)
 8002cca:	4b15      	ldr	r3, [pc, #84]	@ (8002d20 <_sbrk+0x60>)
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	613b      	str	r3, [r7, #16]
 8002cd4:	4b13      	ldr	r3, [pc, #76]	@ (8002d24 <_sbrk+0x64>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d102      	bne.n	8002ce2 <_sbrk+0x22>
 8002cdc:	4b11      	ldr	r3, [pc, #68]	@ (8002d24 <_sbrk+0x64>)
 8002cde:	4a12      	ldr	r2, [pc, #72]	@ (8002d28 <_sbrk+0x68>)
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	4b10      	ldr	r3, [pc, #64]	@ (8002d24 <_sbrk+0x64>)
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4413      	add	r3, r2
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d207      	bcs.n	8002d00 <_sbrk+0x40>
 8002cf0:	f007 fe92 	bl	800aa18 <__errno>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	220c      	movs	r2, #12
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002cfe:	e009      	b.n	8002d14 <_sbrk+0x54>
 8002d00:	4b08      	ldr	r3, [pc, #32]	@ (8002d24 <_sbrk+0x64>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	4b07      	ldr	r3, [pc, #28]	@ (8002d24 <_sbrk+0x64>)
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	4a05      	ldr	r2, [pc, #20]	@ (8002d24 <_sbrk+0x64>)
 8002d10:	6013      	str	r3, [r2, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	4618      	mov	r0, r3
 8002d16:	3718      	adds	r7, #24
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	200a0000 	.word	0x200a0000
 8002d20:	00000400 	.word	0x00000400
 8002d24:	200005a8 	.word	0x200005a8
 8002d28:	20000720 	.word	0x20000720

08002d2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002d30:	4b06      	ldr	r3, [pc, #24]	@ (8002d4c <SystemInit+0x20>)
 8002d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d36:	4a05      	ldr	r2, [pc, #20]	@ (8002d4c <SystemInit+0x20>)
 8002d38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002d40:	bf00      	nop
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	e000ed00 	.word	0xe000ed00

08002d50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002d50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d88 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d54:	f7ff ffea 	bl	8002d2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d58:	480c      	ldr	r0, [pc, #48]	@ (8002d8c <LoopForever+0x6>)
  ldr r1, =_edata
 8002d5a:	490d      	ldr	r1, [pc, #52]	@ (8002d90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d5c:	4a0d      	ldr	r2, [pc, #52]	@ (8002d94 <LoopForever+0xe>)
  movs r3, #0
 8002d5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d60:	e002      	b.n	8002d68 <LoopCopyDataInit>

08002d62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d66:	3304      	adds	r3, #4

08002d68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d6c:	d3f9      	bcc.n	8002d62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d6e:	4a0a      	ldr	r2, [pc, #40]	@ (8002d98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d70:	4c0a      	ldr	r4, [pc, #40]	@ (8002d9c <LoopForever+0x16>)
  movs r3, #0
 8002d72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d74:	e001      	b.n	8002d7a <LoopFillZerobss>

08002d76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d78:	3204      	adds	r2, #4

08002d7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d7c:	d3fb      	bcc.n	8002d76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d7e:	f007 fe51 	bl	800aa24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d82:	f7fe fd3f 	bl	8001804 <main>

08002d86 <LoopForever>:

LoopForever:
    b LoopForever
 8002d86:	e7fe      	b.n	8002d86 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002d88:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002d8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d90:	2000025c 	.word	0x2000025c
  ldr r2, =_sidata
 8002d94:	0800cff0 	.word	0x0800cff0
  ldr r2, =_sbss
 8002d98:	2000025c 	.word	0x2000025c
  ldr r4, =_ebss
 8002d9c:	20000720 	.word	0x20000720

08002da0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002da0:	e7fe      	b.n	8002da0 <ADC1_IRQHandler>

08002da2 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b084      	sub	sp, #16
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	4603      	mov	r3, r0
 8002daa:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002dac:	2300      	movs	r3, #0
 8002dae:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002db0:	2110      	movs	r1, #16
 8002db2:	20d4      	movs	r0, #212	@ 0xd4
 8002db4:	f7ff fb76 	bl	80024a4 <SENSOR_IO_Read>
 8002db8:	4603      	mov	r3, r0
 8002dba:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8002dbc:	88fb      	ldrh	r3, [r7, #6]
 8002dbe:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8002dc0:	7bbb      	ldrb	r3, [r7, #14]
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8002dc8:	7bba      	ldrb	r2, [r7, #14]
 8002dca:	7bfb      	ldrb	r3, [r7, #15]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8002dd0:	7bbb      	ldrb	r3, [r7, #14]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	2110      	movs	r1, #16
 8002dd6:	20d4      	movs	r0, #212	@ 0xd4
 8002dd8:	f7ff fb4a 	bl	8002470 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8002ddc:	2112      	movs	r1, #18
 8002dde:	20d4      	movs	r0, #212	@ 0xd4
 8002de0:	f7ff fb60 	bl	80024a4 <SENSOR_IO_Read>
 8002de4:	4603      	mov	r3, r0
 8002de6:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8002de8:	88fb      	ldrh	r3, [r7, #6]
 8002dea:	0a1b      	lsrs	r3, r3, #8
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8002df0:	7bbb      	ldrb	r3, [r7, #14]
 8002df2:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8002df6:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8002df8:	7bba      	ldrb	r2, [r7, #14]
 8002dfa:	7bfb      	ldrb	r3, [r7, #15]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8002e00:	7bbb      	ldrb	r3, [r7, #14]
 8002e02:	461a      	mov	r2, r3
 8002e04:	2112      	movs	r1, #18
 8002e06:	20d4      	movs	r0, #212	@ 0xd4
 8002e08:	f7ff fb32 	bl	8002470 <SENSOR_IO_Write>
}
 8002e0c:	bf00      	nop
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002e1e:	2110      	movs	r1, #16
 8002e20:	20d4      	movs	r0, #212	@ 0xd4
 8002e22:	f7ff fb3f 	bl	80024a4 <SENSOR_IO_Read>
 8002e26:	4603      	mov	r3, r0
 8002e28:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8002e2a:	79fb      	ldrb	r3, [r7, #7]
 8002e2c:	f003 030f 	and.w	r3, r3, #15
 8002e30:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8002e32:	79fb      	ldrb	r3, [r7, #7]
 8002e34:	461a      	mov	r2, r3
 8002e36:	2110      	movs	r1, #16
 8002e38:	20d4      	movs	r0, #212	@ 0xd4
 8002e3a:	f7ff fb19 	bl	8002470 <SENSOR_IO_Write>
}
 8002e3e:	bf00      	nop
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8002e46:	b580      	push	{r7, lr}
 8002e48:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8002e4a:	f7ff fb07 	bl	800245c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8002e4e:	210f      	movs	r1, #15
 8002e50:	20d4      	movs	r0, #212	@ 0xd4
 8002e52:	f7ff fb27 	bl	80024a4 <SENSOR_IO_Read>
 8002e56:	4603      	mov	r3, r0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	4603      	mov	r3, r0
 8002e64:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002e66:	2300      	movs	r3, #0
 8002e68:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8002e6a:	2115      	movs	r1, #21
 8002e6c:	20d4      	movs	r0, #212	@ 0xd4
 8002e6e:	f7ff fb19 	bl	80024a4 <SENSOR_IO_Read>
 8002e72:	4603      	mov	r3, r0
 8002e74:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8002e76:	7bfb      	ldrb	r3, [r7, #15]
 8002e78:	f023 0310 	bic.w	r3, r3, #16
 8002e7c:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8002e7e:	88fb      	ldrh	r3, [r7, #6]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8002e84:	7bfb      	ldrb	r3, [r7, #15]
 8002e86:	f043 0310 	orr.w	r3, r3, #16
 8002e8a:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8002e8c:	7bfb      	ldrb	r3, [r7, #15]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	2115      	movs	r1, #21
 8002e92:	20d4      	movs	r0, #212	@ 0xd4
 8002e94:	f7ff faec 	bl	8002470 <SENSOR_IO_Write>
}
 8002e98:	bf00      	nop
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b088      	sub	sp, #32
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002eac:	2300      	movs	r3, #0
 8002eae:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002eb0:	f04f 0300 	mov.w	r3, #0
 8002eb4:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002eb6:	2110      	movs	r1, #16
 8002eb8:	20d4      	movs	r0, #212	@ 0xd4
 8002eba:	f7ff faf3 	bl	80024a4 <SENSOR_IO_Read>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8002ec2:	f107 0208 	add.w	r2, r7, #8
 8002ec6:	2306      	movs	r3, #6
 8002ec8:	2128      	movs	r1, #40	@ 0x28
 8002eca:	20d4      	movs	r0, #212	@ 0xd4
 8002ecc:	f7ff fb08 	bl	80024e0 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	77fb      	strb	r3, [r7, #31]
 8002ed4:	e01a      	b.n	8002f0c <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002ed6:	7ffb      	ldrb	r3, [r7, #31]
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	3301      	adds	r3, #1
 8002edc:	3320      	adds	r3, #32
 8002ede:	443b      	add	r3, r7
 8002ee0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002ee4:	021b      	lsls	r3, r3, #8
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	7ffa      	ldrb	r2, [r7, #31]
 8002eea:	0052      	lsls	r2, r2, #1
 8002eec:	3220      	adds	r2, #32
 8002eee:	443a      	add	r2, r7
 8002ef0:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	7ffb      	ldrb	r3, [r7, #31]
 8002efa:	b212      	sxth	r2, r2
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	3320      	adds	r3, #32
 8002f00:	443b      	add	r3, r7
 8002f02:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002f06:	7ffb      	ldrb	r3, [r7, #31]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	77fb      	strb	r3, [r7, #31]
 8002f0c:	7ffb      	ldrb	r3, [r7, #31]
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d9e1      	bls.n	8002ed6 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8002f12:	7dfb      	ldrb	r3, [r7, #23]
 8002f14:	f003 030c 	and.w	r3, r3, #12
 8002f18:	2b0c      	cmp	r3, #12
 8002f1a:	d829      	bhi.n	8002f70 <LSM6DSL_AccReadXYZ+0xd0>
 8002f1c:	a201      	add	r2, pc, #4	@ (adr r2, 8002f24 <LSM6DSL_AccReadXYZ+0x84>)
 8002f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f22:	bf00      	nop
 8002f24:	08002f59 	.word	0x08002f59
 8002f28:	08002f71 	.word	0x08002f71
 8002f2c:	08002f71 	.word	0x08002f71
 8002f30:	08002f71 	.word	0x08002f71
 8002f34:	08002f6b 	.word	0x08002f6b
 8002f38:	08002f71 	.word	0x08002f71
 8002f3c:	08002f71 	.word	0x08002f71
 8002f40:	08002f71 	.word	0x08002f71
 8002f44:	08002f5f 	.word	0x08002f5f
 8002f48:	08002f71 	.word	0x08002f71
 8002f4c:	08002f71 	.word	0x08002f71
 8002f50:	08002f71 	.word	0x08002f71
 8002f54:	08002f65 	.word	0x08002f65
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8002f58:	4b18      	ldr	r3, [pc, #96]	@ (8002fbc <LSM6DSL_AccReadXYZ+0x11c>)
 8002f5a:	61bb      	str	r3, [r7, #24]
    break;
 8002f5c:	e008      	b.n	8002f70 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8002f5e:	4b18      	ldr	r3, [pc, #96]	@ (8002fc0 <LSM6DSL_AccReadXYZ+0x120>)
 8002f60:	61bb      	str	r3, [r7, #24]
    break;
 8002f62:	e005      	b.n	8002f70 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8002f64:	4b17      	ldr	r3, [pc, #92]	@ (8002fc4 <LSM6DSL_AccReadXYZ+0x124>)
 8002f66:	61bb      	str	r3, [r7, #24]
    break;
 8002f68:	e002      	b.n	8002f70 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8002f6a:	4b17      	ldr	r3, [pc, #92]	@ (8002fc8 <LSM6DSL_AccReadXYZ+0x128>)
 8002f6c:	61bb      	str	r3, [r7, #24]
    break;    
 8002f6e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8002f70:	2300      	movs	r3, #0
 8002f72:	77fb      	strb	r3, [r7, #31]
 8002f74:	e01a      	b.n	8002fac <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8002f76:	7ffb      	ldrb	r3, [r7, #31]
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	3320      	adds	r3, #32
 8002f7c:	443b      	add	r3, r7
 8002f7e:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002f82:	ee07 3a90 	vmov	s15, r3
 8002f86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f8a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f92:	7ffb      	ldrb	r3, [r7, #31]
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	4413      	add	r3, r2
 8002f9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f9e:	ee17 2a90 	vmov	r2, s15
 8002fa2:	b212      	sxth	r2, r2
 8002fa4:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8002fa6:	7ffb      	ldrb	r3, [r7, #31]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	77fb      	strb	r3, [r7, #31]
 8002fac:	7ffb      	ldrb	r3, [r7, #31]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d9e1      	bls.n	8002f76 <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 8002fb2:	bf00      	nop
 8002fb4:	bf00      	nop
 8002fb6:	3720      	adds	r7, #32
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	3d79db23 	.word	0x3d79db23
 8002fc0:	3df9db23 	.word	0x3df9db23
 8002fc4:	3e79db23 	.word	0x3e79db23
 8002fc8:	3ef9db23 	.word	0x3ef9db23

08002fcc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fd6:	2003      	movs	r0, #3
 8002fd8:	f001 fb9e 	bl	8004718 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002fdc:	2000      	movs	r0, #0
 8002fde:	f000 f80d 	bl	8002ffc <HAL_InitTick>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d002      	beq.n	8002fee <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	71fb      	strb	r3, [r7, #7]
 8002fec:	e001      	b.n	8002ff2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002fee:	f7ff faeb 	bl	80025c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ff2:	79fb      	ldrb	r3, [r7, #7]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3708      	adds	r7, #8
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003004:	2300      	movs	r3, #0
 8003006:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003008:	4b17      	ldr	r3, [pc, #92]	@ (8003068 <HAL_InitTick+0x6c>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d023      	beq.n	8003058 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003010:	4b16      	ldr	r3, [pc, #88]	@ (800306c <HAL_InitTick+0x70>)
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	4b14      	ldr	r3, [pc, #80]	@ (8003068 <HAL_InitTick+0x6c>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	4619      	mov	r1, r3
 800301a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800301e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003022:	fbb2 f3f3 	udiv	r3, r2, r3
 8003026:	4618      	mov	r0, r3
 8003028:	f001 fbab 	bl	8004782 <HAL_SYSTICK_Config>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10f      	bne.n	8003052 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2b0f      	cmp	r3, #15
 8003036:	d809      	bhi.n	800304c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003038:	2200      	movs	r2, #0
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003040:	f001 fb75 	bl	800472e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003044:	4a0a      	ldr	r2, [pc, #40]	@ (8003070 <HAL_InitTick+0x74>)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6013      	str	r3, [r2, #0]
 800304a:	e007      	b.n	800305c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	73fb      	strb	r3, [r7, #15]
 8003050:	e004      	b.n	800305c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	73fb      	strb	r3, [r7, #15]
 8003056:	e001      	b.n	800305c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800305c:	7bfb      	ldrb	r3, [r7, #15]
}
 800305e:	4618      	mov	r0, r3
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	20000090 	.word	0x20000090
 800306c:	20000054 	.word	0x20000054
 8003070:	2000008c 	.word	0x2000008c

08003074 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003078:	4b06      	ldr	r3, [pc, #24]	@ (8003094 <HAL_IncTick+0x20>)
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	461a      	mov	r2, r3
 800307e:	4b06      	ldr	r3, [pc, #24]	@ (8003098 <HAL_IncTick+0x24>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4413      	add	r3, r2
 8003084:	4a04      	ldr	r2, [pc, #16]	@ (8003098 <HAL_IncTick+0x24>)
 8003086:	6013      	str	r3, [r2, #0]
}
 8003088:	bf00      	nop
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	20000090 	.word	0x20000090
 8003098:	200005ac 	.word	0x200005ac

0800309c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  return uwTick;
 80030a0:	4b03      	ldr	r3, [pc, #12]	@ (80030b0 <HAL_GetTick+0x14>)
 80030a2:	681b      	ldr	r3, [r3, #0]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	200005ac 	.word	0x200005ac

080030b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030bc:	f7ff ffee 	bl	800309c <HAL_GetTick>
 80030c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80030cc:	d005      	beq.n	80030da <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80030ce:	4b0a      	ldr	r3, [pc, #40]	@ (80030f8 <HAL_Delay+0x44>)
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	461a      	mov	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4413      	add	r3, r2
 80030d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030da:	bf00      	nop
 80030dc:	f7ff ffde 	bl	800309c <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d8f7      	bhi.n	80030dc <HAL_Delay+0x28>
  {
  }
}
 80030ec:	bf00      	nop
 80030ee:	bf00      	nop
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	20000090 	.word	0x20000090

080030fc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	431a      	orrs	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	609a      	str	r2, [r3, #8]
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr

08003122 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003122:	b480      	push	{r7}
 8003124:	b083      	sub	sp, #12
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
 800312a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	609a      	str	r2, [r3, #8]
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003158:	4618      	mov	r0, r3
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003164:	b480      	push	{r7}
 8003166:	b087      	sub	sp, #28
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
 8003170:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	3360      	adds	r3, #96	@ 0x60
 8003176:	461a      	mov	r2, r3
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4413      	add	r3, r2
 800317e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	4b08      	ldr	r3, [pc, #32]	@ (80031a8 <LL_ADC_SetOffset+0x44>)
 8003186:	4013      	ands	r3, r2
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	4313      	orrs	r3, r2
 8003194:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800319c:	bf00      	nop
 800319e:	371c      	adds	r7, #28
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	03fff000 	.word	0x03fff000

080031ac <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	3360      	adds	r3, #96	@ 0x60
 80031ba:	461a      	mov	r2, r3
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3714      	adds	r7, #20
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80031d8:	b480      	push	{r7}
 80031da:	b087      	sub	sp, #28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	3360      	adds	r3, #96	@ 0x60
 80031e8:	461a      	mov	r2, r3
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	431a      	orrs	r2, r3
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003202:	bf00      	nop
 8003204:	371c      	adds	r7, #28
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800320e:	b480      	push	{r7}
 8003210:	b083      	sub	sp, #12
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
 8003216:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	615a      	str	r2, [r3, #20]
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003248:	2301      	movs	r3, #1
 800324a:	e000      	b.n	800324e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800325a:	b480      	push	{r7}
 800325c:	b087      	sub	sp, #28
 800325e:	af00      	add	r7, sp, #0
 8003260:	60f8      	str	r0, [r7, #12]
 8003262:	60b9      	str	r1, [r7, #8]
 8003264:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	3330      	adds	r3, #48	@ 0x30
 800326a:	461a      	mov	r2, r3
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	0a1b      	lsrs	r3, r3, #8
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	f003 030c 	and.w	r3, r3, #12
 8003276:	4413      	add	r3, r2
 8003278:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	f003 031f 	and.w	r3, r3, #31
 8003284:	211f      	movs	r1, #31
 8003286:	fa01 f303 	lsl.w	r3, r1, r3
 800328a:	43db      	mvns	r3, r3
 800328c:	401a      	ands	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	0e9b      	lsrs	r3, r3, #26
 8003292:	f003 011f 	and.w	r1, r3, #31
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	f003 031f 	and.w	r3, r3, #31
 800329c:	fa01 f303 	lsl.w	r3, r1, r3
 80032a0:	431a      	orrs	r2, r3
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80032a6:	bf00      	nop
 80032a8:	371c      	adds	r7, #28
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80032b2:	b480      	push	{r7}
 80032b4:	b087      	sub	sp, #28
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	60f8      	str	r0, [r7, #12]
 80032ba:	60b9      	str	r1, [r7, #8]
 80032bc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	3314      	adds	r3, #20
 80032c2:	461a      	mov	r2, r3
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	0e5b      	lsrs	r3, r3, #25
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	f003 0304 	and.w	r3, r3, #4
 80032ce:	4413      	add	r3, r2
 80032d0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	0d1b      	lsrs	r3, r3, #20
 80032da:	f003 031f 	and.w	r3, r3, #31
 80032de:	2107      	movs	r1, #7
 80032e0:	fa01 f303 	lsl.w	r3, r1, r3
 80032e4:	43db      	mvns	r3, r3
 80032e6:	401a      	ands	r2, r3
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	0d1b      	lsrs	r3, r3, #20
 80032ec:	f003 031f 	and.w	r3, r3, #31
 80032f0:	6879      	ldr	r1, [r7, #4]
 80032f2:	fa01 f303 	lsl.w	r3, r1, r3
 80032f6:	431a      	orrs	r2, r3
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80032fc:	bf00      	nop
 80032fe:	371c      	adds	r7, #28
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003320:	43db      	mvns	r3, r3
 8003322:	401a      	ands	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f003 0318 	and.w	r3, r3, #24
 800332a:	4908      	ldr	r1, [pc, #32]	@ (800334c <LL_ADC_SetChannelSingleDiff+0x44>)
 800332c:	40d9      	lsrs	r1, r3
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	400b      	ands	r3, r1
 8003332:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003336:	431a      	orrs	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800333e:	bf00      	nop
 8003340:	3714      	adds	r7, #20
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	0007ffff 	.word	0x0007ffff

08003350 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003360:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	6093      	str	r3, [r2, #8]
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003384:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003388:	d101      	bne.n	800338e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800338a:	2301      	movs	r3, #1
 800338c:	e000      	b.n	8003390 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80033ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80033b0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80033d8:	d101      	bne.n	80033de <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80033da:	2301      	movs	r3, #1
 80033dc:	e000      	b.n	80033e0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80033fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003400:	f043 0201 	orr.w	r2, r3, #1
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003424:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003428:	f043 0202 	orr.w	r2, r3, #2
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	2b01      	cmp	r3, #1
 800344e:	d101      	bne.n	8003454 <LL_ADC_IsEnabled+0x18>
 8003450:	2301      	movs	r3, #1
 8003452:	e000      	b.n	8003456 <LL_ADC_IsEnabled+0x1a>
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr

08003462 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003462:	b480      	push	{r7}
 8003464:	b083      	sub	sp, #12
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b02      	cmp	r3, #2
 8003474:	d101      	bne.n	800347a <LL_ADC_IsDisableOngoing+0x18>
 8003476:	2301      	movs	r3, #1
 8003478:	e000      	b.n	800347c <LL_ADC_IsDisableOngoing+0x1a>
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003498:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800349c:	f043 0204 	orr.w	r2, r3, #4
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80034c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80034c4:	f043 0210 	orr.w	r2, r3, #16
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f003 0304 	and.w	r3, r3, #4
 80034e8:	2b04      	cmp	r3, #4
 80034ea:	d101      	bne.n	80034f0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80034ec:	2301      	movs	r3, #1
 80034ee:	e000      	b.n	80034f2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80034fe:	b480      	push	{r7}
 8003500:	b083      	sub	sp, #12
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800350e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003512:	f043 0220 	orr.w	r2, r3, #32
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800351a:	bf00      	nop
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003526:	b480      	push	{r7}
 8003528:	b083      	sub	sp, #12
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 0308 	and.w	r3, r3, #8
 8003536:	2b08      	cmp	r3, #8
 8003538:	d101      	bne.n	800353e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800353a:	2301      	movs	r3, #1
 800353c:	e000      	b.n	8003540 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b088      	sub	sp, #32
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003554:	2300      	movs	r3, #0
 8003556:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003558:	2300      	movs	r3, #0
 800355a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e129      	b.n	80037ba <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003570:	2b00      	cmp	r3, #0
 8003572:	d109      	bne.n	8003588 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f7ff f84b 	bl	8002610 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff fef1 	bl	8003374 <LL_ADC_IsDeepPowerDownEnabled>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d004      	beq.n	80035a2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff fed7 	bl	8003350 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff ff0c 	bl	80033c4 <LL_ADC_IsInternalRegulatorEnabled>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d115      	bne.n	80035de <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff fef0 	bl	800339c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035bc:	4b81      	ldr	r3, [pc, #516]	@ (80037c4 <HAL_ADC_Init+0x278>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	099b      	lsrs	r3, r3, #6
 80035c2:	4a81      	ldr	r2, [pc, #516]	@ (80037c8 <HAL_ADC_Init+0x27c>)
 80035c4:	fba2 2303 	umull	r2, r3, r2, r3
 80035c8:	099b      	lsrs	r3, r3, #6
 80035ca:	3301      	adds	r3, #1
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80035d0:	e002      	b.n	80035d8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	3b01      	subs	r3, #1
 80035d6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1f9      	bne.n	80035d2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7ff feee 	bl	80033c4 <LL_ADC_IsInternalRegulatorEnabled>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10d      	bne.n	800360a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035f2:	f043 0210 	orr.w	r2, r3, #16
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035fe:	f043 0201 	orr.w	r2, r3, #1
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4618      	mov	r0, r3
 8003610:	f7ff ff62 	bl	80034d8 <LL_ADC_REG_IsConversionOngoing>
 8003614:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800361a:	f003 0310 	and.w	r3, r3, #16
 800361e:	2b00      	cmp	r3, #0
 8003620:	f040 80c2 	bne.w	80037a8 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	2b00      	cmp	r3, #0
 8003628:	f040 80be 	bne.w	80037a8 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003630:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003634:	f043 0202 	orr.w	r2, r3, #2
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4618      	mov	r0, r3
 8003642:	f7ff fefb 	bl	800343c <LL_ADC_IsEnabled>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10b      	bne.n	8003664 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800364c:	485f      	ldr	r0, [pc, #380]	@ (80037cc <HAL_ADC_Init+0x280>)
 800364e:	f7ff fef5 	bl	800343c <LL_ADC_IsEnabled>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d105      	bne.n	8003664 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	4619      	mov	r1, r3
 800365e:	485c      	ldr	r0, [pc, #368]	@ (80037d0 <HAL_ADC_Init+0x284>)
 8003660:	f7ff fd4c 	bl	80030fc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	7e5b      	ldrb	r3, [r3, #25]
 8003668:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800366e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003674:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800367a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003682:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003684:	4313      	orrs	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d106      	bne.n	80036a0 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003696:	3b01      	subs	r3, #1
 8003698:	045b      	lsls	r3, r3, #17
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	4313      	orrs	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d009      	beq.n	80036bc <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ac:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68da      	ldr	r2, [r3, #12]
 80036c2:	4b44      	ldr	r3, [pc, #272]	@ (80037d4 <HAL_ADC_Init+0x288>)
 80036c4:	4013      	ands	r3, r2
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	6812      	ldr	r2, [r2, #0]
 80036ca:	69b9      	ldr	r1, [r7, #24]
 80036cc:	430b      	orrs	r3, r1
 80036ce:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff ff26 	bl	8003526 <LL_ADC_INJ_IsConversionOngoing>
 80036da:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d140      	bne.n	8003764 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d13d      	bne.n	8003764 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	7e1b      	ldrb	r3, [r3, #24]
 80036f0:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80036f2:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80036fa:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80036fc:	4313      	orrs	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800370a:	f023 0306 	bic.w	r3, r3, #6
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	6812      	ldr	r2, [r2, #0]
 8003712:	69b9      	ldr	r1, [r7, #24]
 8003714:	430b      	orrs	r3, r1
 8003716:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800371e:	2b01      	cmp	r3, #1
 8003720:	d118      	bne.n	8003754 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800372c:	f023 0304 	bic.w	r3, r3, #4
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003738:	4311      	orrs	r1, r2
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800373e:	4311      	orrs	r1, r2
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003744:	430a      	orrs	r2, r1
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f042 0201 	orr.w	r2, r2, #1
 8003750:	611a      	str	r2, [r3, #16]
 8003752:	e007      	b.n	8003764 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	691a      	ldr	r2, [r3, #16]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 0201 	bic.w	r2, r2, #1
 8003762:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d10c      	bne.n	8003786 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003772:	f023 010f 	bic.w	r1, r3, #15
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	1e5a      	subs	r2, r3, #1
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	631a      	str	r2, [r3, #48]	@ 0x30
 8003784:	e007      	b.n	8003796 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 020f 	bic.w	r2, r2, #15
 8003794:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800379a:	f023 0303 	bic.w	r3, r3, #3
 800379e:	f043 0201 	orr.w	r2, r3, #1
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	659a      	str	r2, [r3, #88]	@ 0x58
 80037a6:	e007      	b.n	80037b8 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ac:	f043 0210 	orr.w	r2, r3, #16
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80037b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3720      	adds	r7, #32
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	20000054 	.word	0x20000054
 80037c8:	053e2d63 	.word	0x053e2d63
 80037cc:	50040000 	.word	0x50040000
 80037d0:	50040300 	.word	0x50040300
 80037d4:	fff0c007 	.word	0xfff0c007

080037d8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7ff fe77 	bl	80034d8 <LL_ADC_REG_IsConversionOngoing>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d14f      	bne.n	8003890 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d101      	bne.n	80037fe <HAL_ADC_Start+0x26>
 80037fa:	2302      	movs	r3, #2
 80037fc:	e04b      	b.n	8003896 <HAL_ADC_Start+0xbe>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 fdd0 	bl	80043ac <ADC_Enable>
 800380c:	4603      	mov	r3, r0
 800380e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003810:	7bfb      	ldrb	r3, [r7, #15]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d137      	bne.n	8003886 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800381a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800381e:	f023 0301 	bic.w	r3, r3, #1
 8003822:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800382e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003832:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003836:	d106      	bne.n	8003846 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800383c:	f023 0206 	bic.w	r2, r3, #6
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003844:	e002      	b.n	800384c <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	221c      	movs	r2, #28
 8003852:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d007      	beq.n	800387a <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800386e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003872:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4618      	mov	r0, r3
 8003880:	f7ff fe02 	bl	8003488 <LL_ADC_REG_StartConversion>
 8003884:	e006      	b.n	8003894 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 800388e:	e001      	b.n	8003894 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003890:	2302      	movs	r3, #2
 8003892:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8003894:	7bfb      	ldrb	r3, [r7, #15]
}
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b084      	sub	sp, #16
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d101      	bne.n	80038b4 <HAL_ADC_Stop+0x16>
 80038b0:	2302      	movs	r3, #2
 80038b2:	e023      	b.n	80038fc <HAL_ADC_Stop+0x5e>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80038bc:	2103      	movs	r1, #3
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 fcb8 	bl	8004234 <ADC_ConversionStop>
 80038c4:	4603      	mov	r3, r0
 80038c6:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80038c8:	7bfb      	ldrb	r3, [r7, #15]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d111      	bne.n	80038f2 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 fdf2 	bl	80044b8 <ADC_Disable>
 80038d4:	4603      	mov	r3, r0
 80038d6:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80038d8:	7bfb      	ldrb	r3, [r7, #15]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d109      	bne.n	80038f2 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038e2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80038e6:	f023 0301 	bic.w	r3, r3, #1
 80038ea:	f043 0201 	orr.w	r2, r3, #1
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80038fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	2b08      	cmp	r3, #8
 8003914:	d102      	bne.n	800391c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003916:	2308      	movs	r3, #8
 8003918:	617b      	str	r3, [r7, #20]
 800391a:	e010      	b.n	800393e <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	d007      	beq.n	800393a <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800392e:	f043 0220 	orr.w	r2, r3, #32
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e06f      	b.n	8003a1a <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800393a:	2304      	movs	r3, #4
 800393c:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800393e:	f7ff fbad 	bl	800309c <HAL_GetTick>
 8003942:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003944:	e021      	b.n	800398a <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800394c:	d01d      	beq.n	800398a <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800394e:	f7ff fba5 	bl	800309c <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	429a      	cmp	r2, r3
 800395c:	d302      	bcc.n	8003964 <HAL_ADC_PollForConversion+0x60>
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d112      	bne.n	800398a <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	4013      	ands	r3, r2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10b      	bne.n	800398a <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003976:	f043 0204 	orr.w	r2, r3, #4
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e047      	b.n	8003a1a <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	4013      	ands	r3, r2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d0d6      	beq.n	8003946 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800399c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7ff fc43 	bl	8003234 <LL_ADC_REG_IsTriggerSourceSWStart>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d01c      	beq.n	80039ee <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	7e5b      	ldrb	r3, [r3, #25]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d118      	bne.n	80039ee <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0308 	and.w	r3, r3, #8
 80039c6:	2b08      	cmp	r3, #8
 80039c8:	d111      	bne.n	80039ee <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ce:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d105      	bne.n	80039ee <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039e6:	f043 0201 	orr.w	r2, r3, #1
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	659a      	str	r2, [r3, #88]	@ 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	2b08      	cmp	r3, #8
 80039fa:	d104      	bne.n	8003a06 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2208      	movs	r2, #8
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	e008      	b.n	8003a18 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d103      	bne.n	8003a18 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	220c      	movs	r2, #12
 8003a16:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3718      	adds	r7, #24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003a22:	b480      	push	{r7}
 8003a24:	b083      	sub	sp, #12
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b0b6      	sub	sp, #216	@ 0xd8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a46:	2300      	movs	r3, #0
 8003a48:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d101      	bne.n	8003a5e <HAL_ADC_ConfigChannel+0x22>
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	e3d5      	b.n	800420a <HAL_ADC_ConfigChannel+0x7ce>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7ff fd34 	bl	80034d8 <LL_ADC_REG_IsConversionOngoing>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f040 83ba 	bne.w	80041ec <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	2b05      	cmp	r3, #5
 8003a86:	d824      	bhi.n	8003ad2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	3b02      	subs	r3, #2
 8003a8e:	2b03      	cmp	r3, #3
 8003a90:	d81b      	bhi.n	8003aca <HAL_ADC_ConfigChannel+0x8e>
 8003a92:	a201      	add	r2, pc, #4	@ (adr r2, 8003a98 <HAL_ADC_ConfigChannel+0x5c>)
 8003a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a98:	08003aa9 	.word	0x08003aa9
 8003a9c:	08003ab1 	.word	0x08003ab1
 8003aa0:	08003ab9 	.word	0x08003ab9
 8003aa4:	08003ac1 	.word	0x08003ac1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003aa8:	230c      	movs	r3, #12
 8003aaa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003aae:	e010      	b.n	8003ad2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003ab0:	2312      	movs	r3, #18
 8003ab2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003ab6:	e00c      	b.n	8003ad2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003ab8:	2318      	movs	r3, #24
 8003aba:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003abe:	e008      	b.n	8003ad2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003ac0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003ac4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003ac8:	e003      	b.n	8003ad2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8003aca:	2306      	movs	r3, #6
 8003acc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003ad0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6818      	ldr	r0, [r3, #0]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	461a      	mov	r2, r3
 8003adc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003ae0:	f7ff fbbb 	bl	800325a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7ff fcf5 	bl	80034d8 <LL_ADC_REG_IsConversionOngoing>
 8003aee:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7ff fd15 	bl	8003526 <LL_ADC_INJ_IsConversionOngoing>
 8003afc:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f040 81bf 	bne.w	8003e88 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f040 81ba 	bne.w	8003e88 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b1c:	d10f      	bne.n	8003b3e <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6818      	ldr	r0, [r3, #0]
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2200      	movs	r2, #0
 8003b28:	4619      	mov	r1, r3
 8003b2a:	f7ff fbc2 	bl	80032b2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7ff fb69 	bl	800320e <LL_ADC_SetSamplingTimeCommonConfig>
 8003b3c:	e00e      	b.n	8003b5c <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6818      	ldr	r0, [r3, #0]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	6819      	ldr	r1, [r3, #0]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	f7ff fbb1 	bl	80032b2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2100      	movs	r1, #0
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7ff fb59 	bl	800320e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	695a      	ldr	r2, [r3, #20]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	08db      	lsrs	r3, r3, #3
 8003b68:	f003 0303 	and.w	r3, r3, #3
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b72:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	2b04      	cmp	r3, #4
 8003b7c:	d00a      	beq.n	8003b94 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6818      	ldr	r0, [r3, #0]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	6919      	ldr	r1, [r3, #16]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b8e:	f7ff fae9 	bl	8003164 <LL_ADC_SetOffset>
 8003b92:	e179      	b.n	8003e88 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2100      	movs	r1, #0
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7ff fb06 	bl	80031ac <LL_ADC_GetOffsetChannel>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10a      	bne.n	8003bc0 <HAL_ADC_ConfigChannel+0x184>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2100      	movs	r1, #0
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7ff fafb 	bl	80031ac <LL_ADC_GetOffsetChannel>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	0e9b      	lsrs	r3, r3, #26
 8003bba:	f003 021f 	and.w	r2, r3, #31
 8003bbe:	e01e      	b.n	8003bfe <HAL_ADC_ConfigChannel+0x1c2>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7ff faf0 	bl	80031ac <LL_ADC_GetOffsetChannel>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003bd6:	fa93 f3a3 	rbit	r3, r3
 8003bda:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003bde:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003be2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003be6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8003bee:	2320      	movs	r3, #32
 8003bf0:	e004      	b.n	8003bfc <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8003bf2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003bf6:	fab3 f383 	clz	r3, r3
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d105      	bne.n	8003c16 <HAL_ADC_ConfigChannel+0x1da>
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	0e9b      	lsrs	r3, r3, #26
 8003c10:	f003 031f 	and.w	r3, r3, #31
 8003c14:	e018      	b.n	8003c48 <HAL_ADC_ConfigChannel+0x20c>
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c22:	fa93 f3a3 	rbit	r3, r3
 8003c26:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003c2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003c2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003c32:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8003c3a:	2320      	movs	r3, #32
 8003c3c:	e004      	b.n	8003c48 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8003c3e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003c42:	fab3 f383 	clz	r3, r3
 8003c46:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d106      	bne.n	8003c5a <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2200      	movs	r2, #0
 8003c52:	2100      	movs	r1, #0
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7ff fabf 	bl	80031d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2101      	movs	r1, #1
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7ff faa3 	bl	80031ac <LL_ADC_GetOffsetChannel>
 8003c66:	4603      	mov	r3, r0
 8003c68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10a      	bne.n	8003c86 <HAL_ADC_ConfigChannel+0x24a>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2101      	movs	r1, #1
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7ff fa98 	bl	80031ac <LL_ADC_GetOffsetChannel>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	0e9b      	lsrs	r3, r3, #26
 8003c80:	f003 021f 	and.w	r2, r3, #31
 8003c84:	e01e      	b.n	8003cc4 <HAL_ADC_ConfigChannel+0x288>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7ff fa8d 	bl	80031ac <LL_ADC_GetOffsetChannel>
 8003c92:	4603      	mov	r3, r0
 8003c94:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c98:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c9c:	fa93 f3a3 	rbit	r3, r3
 8003ca0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003ca4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ca8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003cac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d101      	bne.n	8003cb8 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8003cb4:	2320      	movs	r3, #32
 8003cb6:	e004      	b.n	8003cc2 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8003cb8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003cbc:	fab3 f383 	clz	r3, r3
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d105      	bne.n	8003cdc <HAL_ADC_ConfigChannel+0x2a0>
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	0e9b      	lsrs	r3, r3, #26
 8003cd6:	f003 031f 	and.w	r3, r3, #31
 8003cda:	e018      	b.n	8003d0e <HAL_ADC_ConfigChannel+0x2d2>
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ce8:	fa93 f3a3 	rbit	r3, r3
 8003cec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003cf0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003cf4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003cf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8003d00:	2320      	movs	r3, #32
 8003d02:	e004      	b.n	8003d0e <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8003d04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d08:	fab3 f383 	clz	r3, r3
 8003d0c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d106      	bne.n	8003d20 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2200      	movs	r2, #0
 8003d18:	2101      	movs	r1, #1
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7ff fa5c 	bl	80031d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2102      	movs	r1, #2
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7ff fa40 	bl	80031ac <LL_ADC_GetOffsetChannel>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10a      	bne.n	8003d4c <HAL_ADC_ConfigChannel+0x310>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2102      	movs	r1, #2
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7ff fa35 	bl	80031ac <LL_ADC_GetOffsetChannel>
 8003d42:	4603      	mov	r3, r0
 8003d44:	0e9b      	lsrs	r3, r3, #26
 8003d46:	f003 021f 	and.w	r2, r3, #31
 8003d4a:	e01e      	b.n	8003d8a <HAL_ADC_ConfigChannel+0x34e>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2102      	movs	r1, #2
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7ff fa2a 	bl	80031ac <LL_ADC_GetOffsetChannel>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d62:	fa93 f3a3 	rbit	r3, r3
 8003d66:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003d6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003d72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8003d7a:	2320      	movs	r3, #32
 8003d7c:	e004      	b.n	8003d88 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8003d7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d82:	fab3 f383 	clz	r3, r3
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d105      	bne.n	8003da2 <HAL_ADC_ConfigChannel+0x366>
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	0e9b      	lsrs	r3, r3, #26
 8003d9c:	f003 031f 	and.w	r3, r3, #31
 8003da0:	e014      	b.n	8003dcc <HAL_ADC_ConfigChannel+0x390>
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003daa:	fa93 f3a3 	rbit	r3, r3
 8003dae:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003db0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003db2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003db6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8003dbe:	2320      	movs	r3, #32
 8003dc0:	e004      	b.n	8003dcc <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8003dc2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003dc6:	fab3 f383 	clz	r3, r3
 8003dca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d106      	bne.n	8003dde <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	2102      	movs	r1, #2
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7ff f9fd 	bl	80031d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2103      	movs	r1, #3
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7ff f9e1 	bl	80031ac <LL_ADC_GetOffsetChannel>
 8003dea:	4603      	mov	r3, r0
 8003dec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d10a      	bne.n	8003e0a <HAL_ADC_ConfigChannel+0x3ce>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2103      	movs	r1, #3
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7ff f9d6 	bl	80031ac <LL_ADC_GetOffsetChannel>
 8003e00:	4603      	mov	r3, r0
 8003e02:	0e9b      	lsrs	r3, r3, #26
 8003e04:	f003 021f 	and.w	r2, r3, #31
 8003e08:	e017      	b.n	8003e3a <HAL_ADC_ConfigChannel+0x3fe>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2103      	movs	r1, #3
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7ff f9cb 	bl	80031ac <LL_ADC_GetOffsetChannel>
 8003e16:	4603      	mov	r3, r0
 8003e18:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e1c:	fa93 f3a3 	rbit	r3, r3
 8003e20:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003e22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e24:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003e26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8003e2c:	2320      	movs	r3, #32
 8003e2e:	e003      	b.n	8003e38 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8003e30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e32:	fab3 f383 	clz	r3, r3
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d105      	bne.n	8003e52 <HAL_ADC_ConfigChannel+0x416>
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	0e9b      	lsrs	r3, r3, #26
 8003e4c:	f003 031f 	and.w	r3, r3, #31
 8003e50:	e011      	b.n	8003e76 <HAL_ADC_ConfigChannel+0x43a>
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e5a:	fa93 f3a3 	rbit	r3, r3
 8003e5e:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003e60:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e62:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003e64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8003e6a:	2320      	movs	r3, #32
 8003e6c:	e003      	b.n	8003e76 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8003e6e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e70:	fab3 f383 	clz	r3, r3
 8003e74:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d106      	bne.n	8003e88 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	2103      	movs	r1, #3
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7ff f9a8 	bl	80031d8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7ff fad5 	bl	800343c <LL_ADC_IsEnabled>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f040 813f 	bne.w	8004118 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6818      	ldr	r0, [r3, #0]
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	6819      	ldr	r1, [r3, #0]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	f7ff fa2e 	bl	8003308 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	4a8e      	ldr	r2, [pc, #568]	@ (80040ec <HAL_ADC_ConfigChannel+0x6b0>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	f040 8130 	bne.w	8004118 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10b      	bne.n	8003ee0 <HAL_ADC_ConfigChannel+0x4a4>
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	0e9b      	lsrs	r3, r3, #26
 8003ece:	3301      	adds	r3, #1
 8003ed0:	f003 031f 	and.w	r3, r3, #31
 8003ed4:	2b09      	cmp	r3, #9
 8003ed6:	bf94      	ite	ls
 8003ed8:	2301      	movls	r3, #1
 8003eda:	2300      	movhi	r3, #0
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	e019      	b.n	8003f14 <HAL_ADC_ConfigChannel+0x4d8>
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ee8:	fa93 f3a3 	rbit	r3, r3
 8003eec:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003eee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ef0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003ef2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d101      	bne.n	8003efc <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8003ef8:	2320      	movs	r3, #32
 8003efa:	e003      	b.n	8003f04 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8003efc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003efe:	fab3 f383 	clz	r3, r3
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	3301      	adds	r3, #1
 8003f06:	f003 031f 	and.w	r3, r3, #31
 8003f0a:	2b09      	cmp	r3, #9
 8003f0c:	bf94      	ite	ls
 8003f0e:	2301      	movls	r3, #1
 8003f10:	2300      	movhi	r3, #0
 8003f12:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d079      	beq.n	800400c <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d107      	bne.n	8003f34 <HAL_ADC_ConfigChannel+0x4f8>
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	0e9b      	lsrs	r3, r3, #26
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	069b      	lsls	r3, r3, #26
 8003f2e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f32:	e015      	b.n	8003f60 <HAL_ADC_ConfigChannel+0x524>
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f3c:	fa93 f3a3 	rbit	r3, r3
 8003f40:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003f42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f44:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003f46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d101      	bne.n	8003f50 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8003f4c:	2320      	movs	r3, #32
 8003f4e:	e003      	b.n	8003f58 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8003f50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f52:	fab3 f383 	clz	r3, r3
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	3301      	adds	r3, #1
 8003f5a:	069b      	lsls	r3, r3, #26
 8003f5c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d109      	bne.n	8003f80 <HAL_ADC_ConfigChannel+0x544>
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	0e9b      	lsrs	r3, r3, #26
 8003f72:	3301      	adds	r3, #1
 8003f74:	f003 031f 	and.w	r3, r3, #31
 8003f78:	2101      	movs	r1, #1
 8003f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f7e:	e017      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x574>
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f88:	fa93 f3a3 	rbit	r3, r3
 8003f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003f8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f90:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003f92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8003f98:	2320      	movs	r3, #32
 8003f9a:	e003      	b.n	8003fa4 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8003f9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f9e:	fab3 f383 	clz	r3, r3
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	f003 031f 	and.w	r3, r3, #31
 8003faa:	2101      	movs	r1, #1
 8003fac:	fa01 f303 	lsl.w	r3, r1, r3
 8003fb0:	ea42 0103 	orr.w	r1, r2, r3
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10a      	bne.n	8003fd6 <HAL_ADC_ConfigChannel+0x59a>
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	0e9b      	lsrs	r3, r3, #26
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	f003 021f 	and.w	r2, r3, #31
 8003fcc:	4613      	mov	r3, r2
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	4413      	add	r3, r2
 8003fd2:	051b      	lsls	r3, r3, #20
 8003fd4:	e018      	b.n	8004008 <HAL_ADC_ConfigChannel+0x5cc>
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fde:	fa93 f3a3 	rbit	r3, r3
 8003fe2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8003fee:	2320      	movs	r3, #32
 8003ff0:	e003      	b.n	8003ffa <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8003ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ff4:	fab3 f383 	clz	r3, r3
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	f003 021f 	and.w	r2, r3, #31
 8004000:	4613      	mov	r3, r2
 8004002:	005b      	lsls	r3, r3, #1
 8004004:	4413      	add	r3, r2
 8004006:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004008:	430b      	orrs	r3, r1
 800400a:	e080      	b.n	800410e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004014:	2b00      	cmp	r3, #0
 8004016:	d107      	bne.n	8004028 <HAL_ADC_ConfigChannel+0x5ec>
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	0e9b      	lsrs	r3, r3, #26
 800401e:	3301      	adds	r3, #1
 8004020:	069b      	lsls	r3, r3, #26
 8004022:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004026:	e015      	b.n	8004054 <HAL_ADC_ConfigChannel+0x618>
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800402e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004030:	fa93 f3a3 	rbit	r3, r3
 8004034:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004038:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800403a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800403c:	2b00      	cmp	r3, #0
 800403e:	d101      	bne.n	8004044 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8004040:	2320      	movs	r3, #32
 8004042:	e003      	b.n	800404c <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8004044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004046:	fab3 f383 	clz	r3, r3
 800404a:	b2db      	uxtb	r3, r3
 800404c:	3301      	adds	r3, #1
 800404e:	069b      	lsls	r3, r3, #26
 8004050:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800405c:	2b00      	cmp	r3, #0
 800405e:	d109      	bne.n	8004074 <HAL_ADC_ConfigChannel+0x638>
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	0e9b      	lsrs	r3, r3, #26
 8004066:	3301      	adds	r3, #1
 8004068:	f003 031f 	and.w	r3, r3, #31
 800406c:	2101      	movs	r1, #1
 800406e:	fa01 f303 	lsl.w	r3, r1, r3
 8004072:	e017      	b.n	80040a4 <HAL_ADC_ConfigChannel+0x668>
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	fa93 f3a3 	rbit	r3, r3
 8004080:	61bb      	str	r3, [r7, #24]
  return result;
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004086:	6a3b      	ldr	r3, [r7, #32]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d101      	bne.n	8004090 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 800408c:	2320      	movs	r3, #32
 800408e:	e003      	b.n	8004098 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8004090:	6a3b      	ldr	r3, [r7, #32]
 8004092:	fab3 f383 	clz	r3, r3
 8004096:	b2db      	uxtb	r3, r3
 8004098:	3301      	adds	r3, #1
 800409a:	f003 031f 	and.w	r3, r3, #31
 800409e:	2101      	movs	r1, #1
 80040a0:	fa01 f303 	lsl.w	r3, r1, r3
 80040a4:	ea42 0103 	orr.w	r1, r2, r3
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10d      	bne.n	80040d0 <HAL_ADC_ConfigChannel+0x694>
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	0e9b      	lsrs	r3, r3, #26
 80040ba:	3301      	adds	r3, #1
 80040bc:	f003 021f 	and.w	r2, r3, #31
 80040c0:	4613      	mov	r3, r2
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	4413      	add	r3, r2
 80040c6:	3b1e      	subs	r3, #30
 80040c8:	051b      	lsls	r3, r3, #20
 80040ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80040ce:	e01d      	b.n	800410c <HAL_ADC_ConfigChannel+0x6d0>
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	fa93 f3a3 	rbit	r3, r3
 80040dc:	60fb      	str	r3, [r7, #12]
  return result;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d103      	bne.n	80040f0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80040e8:	2320      	movs	r3, #32
 80040ea:	e005      	b.n	80040f8 <HAL_ADC_ConfigChannel+0x6bc>
 80040ec:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	fab3 f383 	clz	r3, r3
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	3301      	adds	r3, #1
 80040fa:	f003 021f 	and.w	r2, r3, #31
 80040fe:	4613      	mov	r3, r2
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	4413      	add	r3, r2
 8004104:	3b1e      	subs	r3, #30
 8004106:	051b      	lsls	r3, r3, #20
 8004108:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800410c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800410e:	683a      	ldr	r2, [r7, #0]
 8004110:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004112:	4619      	mov	r1, r3
 8004114:	f7ff f8cd 	bl	80032b2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	4b3d      	ldr	r3, [pc, #244]	@ (8004214 <HAL_ADC_ConfigChannel+0x7d8>)
 800411e:	4013      	ands	r3, r2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d06c      	beq.n	80041fe <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004124:	483c      	ldr	r0, [pc, #240]	@ (8004218 <HAL_ADC_ConfigChannel+0x7dc>)
 8004126:	f7ff f80f 	bl	8003148 <LL_ADC_GetCommonPathInternalCh>
 800412a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a3a      	ldr	r2, [pc, #232]	@ (800421c <HAL_ADC_ConfigChannel+0x7e0>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d127      	bne.n	8004188 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004138:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800413c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d121      	bne.n	8004188 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a35      	ldr	r2, [pc, #212]	@ (8004220 <HAL_ADC_ConfigChannel+0x7e4>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d157      	bne.n	80041fe <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800414e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004152:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004156:	4619      	mov	r1, r3
 8004158:	482f      	ldr	r0, [pc, #188]	@ (8004218 <HAL_ADC_ConfigChannel+0x7dc>)
 800415a:	f7fe ffe2 	bl	8003122 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800415e:	4b31      	ldr	r3, [pc, #196]	@ (8004224 <HAL_ADC_ConfigChannel+0x7e8>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	099b      	lsrs	r3, r3, #6
 8004164:	4a30      	ldr	r2, [pc, #192]	@ (8004228 <HAL_ADC_ConfigChannel+0x7ec>)
 8004166:	fba2 2303 	umull	r2, r3, r2, r3
 800416a:	099b      	lsrs	r3, r3, #6
 800416c:	1c5a      	adds	r2, r3, #1
 800416e:	4613      	mov	r3, r2
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	4413      	add	r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004178:	e002      	b.n	8004180 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	3b01      	subs	r3, #1
 800417e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1f9      	bne.n	800417a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004186:	e03a      	b.n	80041fe <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a27      	ldr	r2, [pc, #156]	@ (800422c <HAL_ADC_ConfigChannel+0x7f0>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d113      	bne.n	80041ba <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004192:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004196:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10d      	bne.n	80041ba <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a1f      	ldr	r2, [pc, #124]	@ (8004220 <HAL_ADC_ConfigChannel+0x7e4>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d12a      	bne.n	80041fe <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80041ac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041b0:	4619      	mov	r1, r3
 80041b2:	4819      	ldr	r0, [pc, #100]	@ (8004218 <HAL_ADC_ConfigChannel+0x7dc>)
 80041b4:	f7fe ffb5 	bl	8003122 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80041b8:	e021      	b.n	80041fe <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a1c      	ldr	r2, [pc, #112]	@ (8004230 <HAL_ADC_ConfigChannel+0x7f4>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d11c      	bne.n	80041fe <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80041c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80041c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d116      	bne.n	80041fe <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a12      	ldr	r2, [pc, #72]	@ (8004220 <HAL_ADC_ConfigChannel+0x7e4>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d111      	bne.n	80041fe <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80041de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80041e2:	4619      	mov	r1, r3
 80041e4:	480c      	ldr	r0, [pc, #48]	@ (8004218 <HAL_ADC_ConfigChannel+0x7dc>)
 80041e6:	f7fe ff9c 	bl	8003122 <LL_ADC_SetCommonPathInternalCh>
 80041ea:	e008      	b.n	80041fe <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041f0:	f043 0220 	orr.w	r2, r3, #32
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8004206:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800420a:	4618      	mov	r0, r3
 800420c:	37d8      	adds	r7, #216	@ 0xd8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	80080000 	.word	0x80080000
 8004218:	50040300 	.word	0x50040300
 800421c:	c7520000 	.word	0xc7520000
 8004220:	50040000 	.word	0x50040000
 8004224:	20000054 	.word	0x20000054
 8004228:	053e2d63 	.word	0x053e2d63
 800422c:	cb840000 	.word	0xcb840000
 8004230:	80000001 	.word	0x80000001

08004234 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b088      	sub	sp, #32
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800423e:	2300      	movs	r3, #0
 8004240:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4618      	mov	r0, r3
 800424c:	f7ff f944 	bl	80034d8 <LL_ADC_REG_IsConversionOngoing>
 8004250:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4618      	mov	r0, r3
 8004258:	f7ff f965 	bl	8003526 <LL_ADC_INJ_IsConversionOngoing>
 800425c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d103      	bne.n	800426c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2b00      	cmp	r3, #0
 8004268:	f000 8098 	beq.w	800439c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d02a      	beq.n	80042d0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	7e5b      	ldrb	r3, [r3, #25]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d126      	bne.n	80042d0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	7e1b      	ldrb	r3, [r3, #24]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d122      	bne.n	80042d0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800428a:	2301      	movs	r3, #1
 800428c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800428e:	e014      	b.n	80042ba <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	4a45      	ldr	r2, [pc, #276]	@ (80043a8 <ADC_ConversionStop+0x174>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d90d      	bls.n	80042b4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800429c:	f043 0210 	orr.w	r2, r3, #16
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042a8:	f043 0201 	orr.w	r2, r3, #1
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e074      	b.n	800439e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	3301      	adds	r3, #1
 80042b8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042c4:	2b40      	cmp	r3, #64	@ 0x40
 80042c6:	d1e3      	bne.n	8004290 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2240      	movs	r2, #64	@ 0x40
 80042ce:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d014      	beq.n	8004300 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4618      	mov	r0, r3
 80042dc:	f7ff f8fc 	bl	80034d8 <LL_ADC_REG_IsConversionOngoing>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00c      	beq.n	8004300 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7ff f8b9 	bl	8003462 <LL_ADC_IsDisableOngoing>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d104      	bne.n	8004300 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7ff f8d8 	bl	80034b0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d014      	beq.n	8004330 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4618      	mov	r0, r3
 800430c:	f7ff f90b 	bl	8003526 <LL_ADC_INJ_IsConversionOngoing>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00c      	beq.n	8004330 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4618      	mov	r0, r3
 800431c:	f7ff f8a1 	bl	8003462 <LL_ADC_IsDisableOngoing>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d104      	bne.n	8004330 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	f7ff f8e7 	bl	80034fe <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	2b02      	cmp	r3, #2
 8004334:	d005      	beq.n	8004342 <ADC_ConversionStop+0x10e>
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	2b03      	cmp	r3, #3
 800433a:	d105      	bne.n	8004348 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800433c:	230c      	movs	r3, #12
 800433e:	617b      	str	r3, [r7, #20]
        break;
 8004340:	e005      	b.n	800434e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004342:	2308      	movs	r3, #8
 8004344:	617b      	str	r3, [r7, #20]
        break;
 8004346:	e002      	b.n	800434e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004348:	2304      	movs	r3, #4
 800434a:	617b      	str	r3, [r7, #20]
        break;
 800434c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800434e:	f7fe fea5 	bl	800309c <HAL_GetTick>
 8004352:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004354:	e01b      	b.n	800438e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004356:	f7fe fea1 	bl	800309c <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b05      	cmp	r3, #5
 8004362:	d914      	bls.n	800438e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	689a      	ldr	r2, [r3, #8]
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	4013      	ands	r3, r2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00d      	beq.n	800438e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004376:	f043 0210 	orr.w	r2, r3, #16
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004382:	f043 0201 	orr.w	r2, r3, #1
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e007      	b.n	800439e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	4013      	ands	r3, r2
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1dc      	bne.n	8004356 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3720      	adds	r7, #32
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	a33fffff 	.word	0xa33fffff

080043ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80043b4:	2300      	movs	r3, #0
 80043b6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4618      	mov	r0, r3
 80043be:	f7ff f83d 	bl	800343c <LL_ADC_IsEnabled>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d169      	bne.n	800449c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689a      	ldr	r2, [r3, #8]
 80043ce:	4b36      	ldr	r3, [pc, #216]	@ (80044a8 <ADC_Enable+0xfc>)
 80043d0:	4013      	ands	r3, r2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00d      	beq.n	80043f2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043da:	f043 0210 	orr.w	r2, r3, #16
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043e6:	f043 0201 	orr.w	r2, r3, #1
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e055      	b.n	800449e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7fe fff8 	bl	80033ec <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80043fc:	482b      	ldr	r0, [pc, #172]	@ (80044ac <ADC_Enable+0x100>)
 80043fe:	f7fe fea3 	bl	8003148 <LL_ADC_GetCommonPathInternalCh>
 8004402:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004404:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004408:	2b00      	cmp	r3, #0
 800440a:	d013      	beq.n	8004434 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800440c:	4b28      	ldr	r3, [pc, #160]	@ (80044b0 <ADC_Enable+0x104>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	099b      	lsrs	r3, r3, #6
 8004412:	4a28      	ldr	r2, [pc, #160]	@ (80044b4 <ADC_Enable+0x108>)
 8004414:	fba2 2303 	umull	r2, r3, r2, r3
 8004418:	099b      	lsrs	r3, r3, #6
 800441a:	1c5a      	adds	r2, r3, #1
 800441c:	4613      	mov	r3, r2
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	4413      	add	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004426:	e002      	b.n	800442e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	3b01      	subs	r3, #1
 800442c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1f9      	bne.n	8004428 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004434:	f7fe fe32 	bl	800309c <HAL_GetTick>
 8004438:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800443a:	e028      	b.n	800448e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4618      	mov	r0, r3
 8004442:	f7fe fffb 	bl	800343c <LL_ADC_IsEnabled>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d104      	bne.n	8004456 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4618      	mov	r0, r3
 8004452:	f7fe ffcb 	bl	80033ec <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004456:	f7fe fe21 	bl	800309c <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d914      	bls.n	800448e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b01      	cmp	r3, #1
 8004470:	d00d      	beq.n	800448e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004476:	f043 0210 	orr.w	r2, r3, #16
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004482:	f043 0201 	orr.w	r2, r3, #1
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e007      	b.n	800449e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	2b01      	cmp	r3, #1
 800449a:	d1cf      	bne.n	800443c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	8000003f 	.word	0x8000003f
 80044ac:	50040300 	.word	0x50040300
 80044b0:	20000054 	.word	0x20000054
 80044b4:	053e2d63 	.word	0x053e2d63

080044b8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7fe ffcc 	bl	8003462 <LL_ADC_IsDisableOngoing>
 80044ca:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7fe ffb3 	bl	800343c <LL_ADC_IsEnabled>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d047      	beq.n	800456c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d144      	bne.n	800456c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f003 030d 	and.w	r3, r3, #13
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d10c      	bne.n	800450a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7fe ff8d 	bl	8003414 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2203      	movs	r2, #3
 8004500:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004502:	f7fe fdcb 	bl	800309c <HAL_GetTick>
 8004506:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004508:	e029      	b.n	800455e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800450e:	f043 0210 	orr.w	r2, r3, #16
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800451a:	f043 0201 	orr.w	r2, r3, #1
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e023      	b.n	800456e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004526:	f7fe fdb9 	bl	800309c <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	2b02      	cmp	r3, #2
 8004532:	d914      	bls.n	800455e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00d      	beq.n	800455e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004546:	f043 0210 	orr.w	r2, r3, #16
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004552:	f043 0201 	orr.w	r2, r3, #1
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e007      	b.n	800456e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1dc      	bne.n	8004526 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
	...

08004578 <__NVIC_SetPriorityGrouping>:
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f003 0307 	and.w	r3, r3, #7
 8004586:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004588:	4b0c      	ldr	r3, [pc, #48]	@ (80045bc <__NVIC_SetPriorityGrouping+0x44>)
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004594:	4013      	ands	r3, r2
 8004596:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80045a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045aa:	4a04      	ldr	r2, [pc, #16]	@ (80045bc <__NVIC_SetPriorityGrouping+0x44>)
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	60d3      	str	r3, [r2, #12]
}
 80045b0:	bf00      	nop
 80045b2:	3714      	adds	r7, #20
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr
 80045bc:	e000ed00 	.word	0xe000ed00

080045c0 <__NVIC_GetPriorityGrouping>:
{
 80045c0:	b480      	push	{r7}
 80045c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045c4:	4b04      	ldr	r3, [pc, #16]	@ (80045d8 <__NVIC_GetPriorityGrouping+0x18>)
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	0a1b      	lsrs	r3, r3, #8
 80045ca:	f003 0307 	and.w	r3, r3, #7
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	e000ed00 	.word	0xe000ed00

080045dc <__NVIC_EnableIRQ>:
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	4603      	mov	r3, r0
 80045e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	db0b      	blt.n	8004606 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045ee:	79fb      	ldrb	r3, [r7, #7]
 80045f0:	f003 021f 	and.w	r2, r3, #31
 80045f4:	4907      	ldr	r1, [pc, #28]	@ (8004614 <__NVIC_EnableIRQ+0x38>)
 80045f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045fa:	095b      	lsrs	r3, r3, #5
 80045fc:	2001      	movs	r0, #1
 80045fe:	fa00 f202 	lsl.w	r2, r0, r2
 8004602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004606:	bf00      	nop
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	e000e100 	.word	0xe000e100

08004618 <__NVIC_SetPriority>:
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	4603      	mov	r3, r0
 8004620:	6039      	str	r1, [r7, #0]
 8004622:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004628:	2b00      	cmp	r3, #0
 800462a:	db0a      	blt.n	8004642 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	b2da      	uxtb	r2, r3
 8004630:	490c      	ldr	r1, [pc, #48]	@ (8004664 <__NVIC_SetPriority+0x4c>)
 8004632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004636:	0112      	lsls	r2, r2, #4
 8004638:	b2d2      	uxtb	r2, r2
 800463a:	440b      	add	r3, r1
 800463c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004640:	e00a      	b.n	8004658 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	b2da      	uxtb	r2, r3
 8004646:	4908      	ldr	r1, [pc, #32]	@ (8004668 <__NVIC_SetPriority+0x50>)
 8004648:	79fb      	ldrb	r3, [r7, #7]
 800464a:	f003 030f 	and.w	r3, r3, #15
 800464e:	3b04      	subs	r3, #4
 8004650:	0112      	lsls	r2, r2, #4
 8004652:	b2d2      	uxtb	r2, r2
 8004654:	440b      	add	r3, r1
 8004656:	761a      	strb	r2, [r3, #24]
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr
 8004664:	e000e100 	.word	0xe000e100
 8004668:	e000ed00 	.word	0xe000ed00

0800466c <NVIC_EncodePriority>:
{
 800466c:	b480      	push	{r7}
 800466e:	b089      	sub	sp, #36	@ 0x24
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f003 0307 	and.w	r3, r3, #7
 800467e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	f1c3 0307 	rsb	r3, r3, #7
 8004686:	2b04      	cmp	r3, #4
 8004688:	bf28      	it	cs
 800468a:	2304      	movcs	r3, #4
 800468c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	3304      	adds	r3, #4
 8004692:	2b06      	cmp	r3, #6
 8004694:	d902      	bls.n	800469c <NVIC_EncodePriority+0x30>
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	3b03      	subs	r3, #3
 800469a:	e000      	b.n	800469e <NVIC_EncodePriority+0x32>
 800469c:	2300      	movs	r3, #0
 800469e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	fa02 f303 	lsl.w	r3, r2, r3
 80046aa:	43da      	mvns	r2, r3
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	401a      	ands	r2, r3
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	fa01 f303 	lsl.w	r3, r1, r3
 80046be:	43d9      	mvns	r1, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046c4:	4313      	orrs	r3, r2
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3724      	adds	r7, #36	@ 0x24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
	...

080046d4 <SysTick_Config>:
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	3b01      	subs	r3, #1
 80046e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80046e4:	d301      	bcc.n	80046ea <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80046e6:	2301      	movs	r3, #1
 80046e8:	e00f      	b.n	800470a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004714 <SysTick_Config+0x40>)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	3b01      	subs	r3, #1
 80046f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046f2:	210f      	movs	r1, #15
 80046f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80046f8:	f7ff ff8e 	bl	8004618 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046fc:	4b05      	ldr	r3, [pc, #20]	@ (8004714 <SysTick_Config+0x40>)
 80046fe:	2200      	movs	r2, #0
 8004700:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004702:	4b04      	ldr	r3, [pc, #16]	@ (8004714 <SysTick_Config+0x40>)
 8004704:	2207      	movs	r2, #7
 8004706:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	e000e010 	.word	0xe000e010

08004718 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f7ff ff29 	bl	8004578 <__NVIC_SetPriorityGrouping>
}
 8004726:	bf00      	nop
 8004728:	3708      	adds	r7, #8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b086      	sub	sp, #24
 8004732:	af00      	add	r7, sp, #0
 8004734:	4603      	mov	r3, r0
 8004736:	60b9      	str	r1, [r7, #8]
 8004738:	607a      	str	r2, [r7, #4]
 800473a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800473c:	2300      	movs	r3, #0
 800473e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004740:	f7ff ff3e 	bl	80045c0 <__NVIC_GetPriorityGrouping>
 8004744:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	68b9      	ldr	r1, [r7, #8]
 800474a:	6978      	ldr	r0, [r7, #20]
 800474c:	f7ff ff8e 	bl	800466c <NVIC_EncodePriority>
 8004750:	4602      	mov	r2, r0
 8004752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004756:	4611      	mov	r1, r2
 8004758:	4618      	mov	r0, r3
 800475a:	f7ff ff5d 	bl	8004618 <__NVIC_SetPriority>
}
 800475e:	bf00      	nop
 8004760:	3718      	adds	r7, #24
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}

08004766 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b082      	sub	sp, #8
 800476a:	af00      	add	r7, sp, #0
 800476c:	4603      	mov	r3, r0
 800476e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004774:	4618      	mov	r0, r3
 8004776:	f7ff ff31 	bl	80045dc <__NVIC_EnableIRQ>
}
 800477a:	bf00      	nop
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b082      	sub	sp, #8
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7ff ffa2 	bl	80046d4 <SysTick_Config>
 8004790:	4603      	mov	r3, r0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3708      	adds	r7, #8
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800479a:	b580      	push	{r7, lr}
 800479c:	b082      	sub	sp, #8
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d101      	bne.n	80047ac <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e014      	b.n	80047d6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	791b      	ldrb	r3, [r3, #4]
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d105      	bne.n	80047c2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f7fd ff67 	bl	8002690 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2202      	movs	r2, #2
 80047c6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3708      	adds	r7, #8
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
	...

080047e0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
 80047ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80047ee:	2300      	movs	r3, #0
 80047f0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	795b      	ldrb	r3, [r3, #5]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d101      	bne.n	80047fe <HAL_DAC_Start_DMA+0x1e>
 80047fa:	2302      	movs	r3, #2
 80047fc:	e0ab      	b.n	8004956 <HAL_DAC_Start_DMA+0x176>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2201      	movs	r2, #1
 8004802:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2202      	movs	r2, #2
 8004808:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d12f      	bne.n	8004870 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	4a52      	ldr	r2, [pc, #328]	@ (8004960 <HAL_DAC_Start_DMA+0x180>)
 8004816:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	4a51      	ldr	r2, [pc, #324]	@ (8004964 <HAL_DAC_Start_DMA+0x184>)
 800481e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	4a50      	ldr	r2, [pc, #320]	@ (8004968 <HAL_DAC_Start_DMA+0x188>)
 8004826:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004836:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004838:	6a3b      	ldr	r3, [r7, #32]
 800483a:	2b08      	cmp	r3, #8
 800483c:	d013      	beq.n	8004866 <HAL_DAC_Start_DMA+0x86>
 800483e:	6a3b      	ldr	r3, [r7, #32]
 8004840:	2b08      	cmp	r3, #8
 8004842:	d845      	bhi.n	80048d0 <HAL_DAC_Start_DMA+0xf0>
 8004844:	6a3b      	ldr	r3, [r7, #32]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d003      	beq.n	8004852 <HAL_DAC_Start_DMA+0x72>
 800484a:	6a3b      	ldr	r3, [r7, #32]
 800484c:	2b04      	cmp	r3, #4
 800484e:	d005      	beq.n	800485c <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8004850:	e03e      	b.n	80048d0 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	3308      	adds	r3, #8
 8004858:	613b      	str	r3, [r7, #16]
        break;
 800485a:	e03c      	b.n	80048d6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	330c      	adds	r3, #12
 8004862:	613b      	str	r3, [r7, #16]
        break;
 8004864:	e037      	b.n	80048d6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	3310      	adds	r3, #16
 800486c:	613b      	str	r3, [r7, #16]
        break;
 800486e:	e032      	b.n	80048d6 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	4a3d      	ldr	r2, [pc, #244]	@ (800496c <HAL_DAC_Start_DMA+0x18c>)
 8004876:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	4a3c      	ldr	r2, [pc, #240]	@ (8004970 <HAL_DAC_Start_DMA+0x190>)
 800487e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	4a3b      	ldr	r2, [pc, #236]	@ (8004974 <HAL_DAC_Start_DMA+0x194>)
 8004886:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004896:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004898:	6a3b      	ldr	r3, [r7, #32]
 800489a:	2b08      	cmp	r3, #8
 800489c:	d013      	beq.n	80048c6 <HAL_DAC_Start_DMA+0xe6>
 800489e:	6a3b      	ldr	r3, [r7, #32]
 80048a0:	2b08      	cmp	r3, #8
 80048a2:	d817      	bhi.n	80048d4 <HAL_DAC_Start_DMA+0xf4>
 80048a4:	6a3b      	ldr	r3, [r7, #32]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <HAL_DAC_Start_DMA+0xd2>
 80048aa:	6a3b      	ldr	r3, [r7, #32]
 80048ac:	2b04      	cmp	r3, #4
 80048ae:	d005      	beq.n	80048bc <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80048b0:	e010      	b.n	80048d4 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	3314      	adds	r3, #20
 80048b8:	613b      	str	r3, [r7, #16]
        break;
 80048ba:	e00c      	b.n	80048d6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	3318      	adds	r3, #24
 80048c2:	613b      	str	r3, [r7, #16]
        break;
 80048c4:	e007      	b.n	80048d6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	331c      	adds	r3, #28
 80048cc:	613b      	str	r3, [r7, #16]
        break;
 80048ce:	e002      	b.n	80048d6 <HAL_DAC_Start_DMA+0xf6>
        break;
 80048d0:	bf00      	nop
 80048d2:	e000      	b.n	80048d6 <HAL_DAC_Start_DMA+0xf6>
        break;
 80048d4:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d111      	bne.n	8004900 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048ea:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6898      	ldr	r0, [r3, #8]
 80048f0:	6879      	ldr	r1, [r7, #4]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	f000 fc2d 	bl	8005154 <HAL_DMA_Start_IT>
 80048fa:	4603      	mov	r3, r0
 80048fc:	75fb      	strb	r3, [r7, #23]
 80048fe:	e010      	b.n	8004922 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800490e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	68d8      	ldr	r0, [r3, #12]
 8004914:	6879      	ldr	r1, [r7, #4]
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	f000 fc1b 	bl	8005154 <HAL_DMA_Start_IT>
 800491e:	4603      	mov	r3, r0
 8004920:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004928:	7dfb      	ldrb	r3, [r7, #23]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10c      	bne.n	8004948 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	6819      	ldr	r1, [r3, #0]
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	f003 0310 	and.w	r3, r3, #16
 800493a:	2201      	movs	r2, #1
 800493c:	409a      	lsls	r2, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	430a      	orrs	r2, r1
 8004944:	601a      	str	r2, [r3, #0]
 8004946:	e005      	b.n	8004954 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	f043 0204 	orr.w	r2, r3, #4
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004954:	7dfb      	ldrb	r3, [r7, #23]
}
 8004956:	4618      	mov	r0, r3
 8004958:	3718      	adds	r7, #24
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	08004cd9 	.word	0x08004cd9
 8004964:	08004cfb 	.word	0x08004cfb
 8004968:	08004d17 	.word	0x08004d17
 800496c:	08004d81 	.word	0x08004d81
 8004970:	08004da3 	.word	0x08004da3
 8004974:	08004dbf 	.word	0x08004dbf

08004978 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	6819      	ldr	r1, [r3, #0]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	f003 0310 	and.w	r3, r3, #16
 800498e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004992:	fa02 f303 	lsl.w	r3, r2, r3
 8004996:	43da      	mvns	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	400a      	ands	r2, r1
 800499e:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6819      	ldr	r1, [r3, #0]
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	f003 0310 	and.w	r3, r3, #16
 80049ac:	2201      	movs	r2, #1
 80049ae:	fa02 f303 	lsl.w	r3, r2, r3
 80049b2:	43da      	mvns	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	400a      	ands	r2, r1
 80049ba:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10d      	bne.n	80049de <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 fc3f 	bl	800524a <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80049da:	601a      	str	r2, [r3, #0]
 80049dc:	e00c      	b.n	80049f8 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	4618      	mov	r0, r3
 80049e4:	f000 fc31 	bl	800524a <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 80049f6:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3708      	adds	r7, #8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b083      	sub	sp, #12
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004a0a:	bf00      	nop
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b083      	sub	sp, #12
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b083      	sub	sp, #12
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004a32:	bf00      	nop
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
	...

08004a40 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b088      	sub	sp, #32
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	795b      	ldrb	r3, [r3, #5]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d101      	bne.n	8004a5c <HAL_DAC_ConfigChannel+0x1c>
 8004a58:	2302      	movs	r3, #2
 8004a5a:	e137      	b.n	8004ccc <HAL_DAC_ConfigChannel+0x28c>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2202      	movs	r2, #2
 8004a66:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	2b04      	cmp	r3, #4
 8004a6e:	f040 8081 	bne.w	8004b74 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004a72:	f7fe fb13 	bl	800309c <HAL_GetTick>
 8004a76:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d140      	bne.n	8004b00 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004a7e:	e018      	b.n	8004ab2 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004a80:	f7fe fb0c 	bl	800309c <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d911      	bls.n	8004ab2 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00a      	beq.n	8004ab2 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	f043 0208 	orr.w	r2, r3, #8
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2203      	movs	r2, #3
 8004aac:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e10c      	b.n	8004ccc <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ab8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1df      	bne.n	8004a80 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8004ac0:	2001      	movs	r0, #1
 8004ac2:	f7fe faf7 	bl	80030b4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	69d2      	ldr	r2, [r2, #28]
 8004ace:	641a      	str	r2, [r3, #64]	@ 0x40
 8004ad0:	e023      	b.n	8004b1a <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004ad2:	f7fe fae3 	bl	800309c <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d90f      	bls.n	8004b00 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	da0a      	bge.n	8004b00 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	f043 0208 	orr.w	r2, r3, #8
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2203      	movs	r2, #3
 8004afa:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e0e5      	b.n	8004ccc <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	dbe3      	blt.n	8004ad2 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8004b0a:	2001      	movs	r0, #1
 8004b0c:	f7fe fad2 	bl	80030b4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	69d2      	ldr	r2, [r2, #28]
 8004b18:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f003 0310 	and.w	r3, r3, #16
 8004b26:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8004b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b2e:	43db      	mvns	r3, r3
 8004b30:	ea02 0103 	and.w	r1, r2, r3
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	6a1a      	ldr	r2, [r3, #32]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f003 0310 	and.w	r3, r3, #16
 8004b3e:	409a      	lsls	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	430a      	orrs	r2, r1
 8004b46:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f003 0310 	and.w	r3, r3, #16
 8004b54:	21ff      	movs	r1, #255	@ 0xff
 8004b56:	fa01 f303 	lsl.w	r3, r1, r3
 8004b5a:	43db      	mvns	r3, r3
 8004b5c:	ea02 0103 	and.w	r1, r2, r3
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f003 0310 	and.w	r3, r3, #16
 8004b6a:	409a      	lsls	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	430a      	orrs	r2, r1
 8004b72:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	695b      	ldr	r3, [r3, #20]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d11d      	bne.n	8004bb8 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b82:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f003 0310 	and.w	r3, r3, #16
 8004b8a:	221f      	movs	r2, #31
 8004b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b90:	43db      	mvns	r3, r3
 8004b92:	69fa      	ldr	r2, [r7, #28]
 8004b94:	4013      	ands	r3, r2
 8004b96:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f003 0310 	and.w	r3, r3, #16
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8004baa:	69fa      	ldr	r2, [r7, #28]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	69fa      	ldr	r2, [r7, #28]
 8004bb6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bbe:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f003 0310 	and.w	r3, r3, #16
 8004bc6:	2207      	movs	r2, #7
 8004bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bcc:	43db      	mvns	r3, r3
 8004bce:	69fa      	ldr	r2, [r7, #28]
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	431a      	orrs	r2, r3
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f003 0310 	and.w	r3, r3, #16
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf2:	69fa      	ldr	r2, [r7, #28]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	69fa      	ldr	r2, [r7, #28]
 8004bfe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6819      	ldr	r1, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f003 0310 	and.w	r3, r3, #16
 8004c0c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004c10:	fa02 f303 	lsl.w	r3, r2, r3
 8004c14:	43da      	mvns	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	400a      	ands	r2, r1
 8004c1c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f003 0310 	and.w	r3, r3, #16
 8004c2c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8004c30:	fa02 f303 	lsl.w	r3, r2, r3
 8004c34:	43db      	mvns	r3, r3
 8004c36:	69fa      	ldr	r2, [r7, #28]
 8004c38:	4013      	ands	r3, r2
 8004c3a:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f003 0310 	and.w	r3, r3, #16
 8004c48:	697a      	ldr	r2, [r7, #20]
 8004c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4e:	69fa      	ldr	r2, [r7, #28]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c5c:	d104      	bne.n	8004c68 <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c64:	61fb      	str	r3, [r7, #28]
 8004c66:	e018      	b.n	8004c9a <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d104      	bne.n	8004c7a <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004c76:	61fb      	str	r3, [r7, #28]
 8004c78:	e00f      	b.n	8004c9a <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8004c7a:	f003 f931 	bl	8007ee0 <HAL_RCC_GetHCLKFreq>
 8004c7e:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	4a14      	ldr	r2, [pc, #80]	@ (8004cd4 <HAL_DAC_ConfigChannel+0x294>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d904      	bls.n	8004c92 <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c8e:	61fb      	str	r3, [r7, #28]
 8004c90:	e003      	b.n	8004c9a <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004c98:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	69fa      	ldr	r2, [r7, #28]
 8004ca0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	6819      	ldr	r1, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f003 0310 	and.w	r3, r3, #16
 8004cae:	22c0      	movs	r2, #192	@ 0xc0
 8004cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb4:	43da      	mvns	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	400a      	ands	r2, r1
 8004cbc:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3720      	adds	r7, #32
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	04c4b400 	.word	0x04c4b400

08004cd8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ce4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f7ff fe8b 	bl	8004a02 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	711a      	strb	r2, [r3, #4]
}
 8004cf2:	bf00      	nop
 8004cf4:	3710      	adds	r7, #16
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b084      	sub	sp, #16
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d06:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f7ff fe84 	bl	8004a16 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004d0e:	bf00      	nop
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b084      	sub	sp, #16
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d22:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	f043 0204 	orr.w	r2, r3, #4
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f7ff fe7a 	bl	8004a2a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	711a      	strb	r2, [r3, #4]
}
 8004d3c:	bf00      	nop
 8004d3e:	3710      	adds	r7, #16
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d8c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f7ff ffd8 	bl	8004d44 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2201      	movs	r2, #1
 8004d98:	711a      	strb	r2, [r3, #4]
}
 8004d9a:	bf00      	nop
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b084      	sub	sp, #16
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dae:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f7ff ffd1 	bl	8004d58 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004db6:	bf00      	nop
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b084      	sub	sp, #16
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	f043 0204 	orr.w	r2, r3, #4
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	f7ff ffc7 	bl	8004d6c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2201      	movs	r2, #1
 8004de2:	711a      	strb	r2, [r3, #4]
}
 8004de4:	bf00      	nop
 8004de6:	3710      	adds	r7, #16
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e0ac      	b.n	8004f58 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 f8b2 	bl	8004f6c <DFSDM_GetChannelFromInstance>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	4a55      	ldr	r2, [pc, #340]	@ (8004f60 <HAL_DFSDM_ChannelInit+0x174>)
 8004e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d001      	beq.n	8004e18 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e09f      	b.n	8004f58 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f7fd fca7 	bl	800276c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8004e1e:	4b51      	ldr	r3, [pc, #324]	@ (8004f64 <HAL_DFSDM_ChannelInit+0x178>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	3301      	adds	r3, #1
 8004e24:	4a4f      	ldr	r2, [pc, #316]	@ (8004f64 <HAL_DFSDM_ChannelInit+0x178>)
 8004e26:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8004e28:	4b4e      	ldr	r3, [pc, #312]	@ (8004f64 <HAL_DFSDM_ChannelInit+0x178>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d125      	bne.n	8004e7c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8004e30:	4b4d      	ldr	r3, [pc, #308]	@ (8004f68 <HAL_DFSDM_ChannelInit+0x17c>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a4c      	ldr	r2, [pc, #304]	@ (8004f68 <HAL_DFSDM_ChannelInit+0x17c>)
 8004e36:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004e3a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8004e3c:	4b4a      	ldr	r3, [pc, #296]	@ (8004f68 <HAL_DFSDM_ChannelInit+0x17c>)
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	4948      	ldr	r1, [pc, #288]	@ (8004f68 <HAL_DFSDM_ChannelInit+0x17c>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8004e4a:	4b47      	ldr	r3, [pc, #284]	@ (8004f68 <HAL_DFSDM_ChannelInit+0x17c>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a46      	ldr	r2, [pc, #280]	@ (8004f68 <HAL_DFSDM_ChannelInit+0x17c>)
 8004e50:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8004e54:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	791b      	ldrb	r3, [r3, #4]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d108      	bne.n	8004e70 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8004e5e:	4b42      	ldr	r3, [pc, #264]	@ (8004f68 <HAL_DFSDM_ChannelInit+0x17c>)
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	3b01      	subs	r3, #1
 8004e68:	041b      	lsls	r3, r3, #16
 8004e6a:	493f      	ldr	r1, [pc, #252]	@ (8004f68 <HAL_DFSDM_ChannelInit+0x17c>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8004e70:	4b3d      	ldr	r3, [pc, #244]	@ (8004f68 <HAL_DFSDM_ChannelInit+0x17c>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a3c      	ldr	r2, [pc, #240]	@ (8004f68 <HAL_DFSDM_ChannelInit+0x17c>)
 8004e76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004e7a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8004e8a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	6819      	ldr	r1, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004e9a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004ea0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	430a      	orrs	r2, r1
 8004ea8:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f022 020f 	bic.w	r2, r2, #15
 8004eb8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	6819      	ldr	r1, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004ec8:	431a      	orrs	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	689a      	ldr	r2, [r3, #8]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8004ee0:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	6899      	ldr	r1, [r3, #8]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f002 0207 	and.w	r2, r2, #7
 8004f0c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	6859      	ldr	r1, [r3, #4]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f18:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f1e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004f20:	431a      	orrs	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004f38:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f000 f810 	bl	8004f6c <DFSDM_GetChannelFromInstance>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	4904      	ldr	r1, [pc, #16]	@ (8004f60 <HAL_DFSDM_ChannelInit+0x174>)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3708      	adds	r7, #8
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	200005b4 	.word	0x200005b4
 8004f64:	200005b0 	.word	0x200005b0
 8004f68:	40016000 	.word	0x40016000

08004f6c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a1c      	ldr	r2, [pc, #112]	@ (8004fe8 <DFSDM_GetChannelFromInstance+0x7c>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d102      	bne.n	8004f82 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	60fb      	str	r3, [r7, #12]
 8004f80:	e02b      	b.n	8004fda <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a19      	ldr	r2, [pc, #100]	@ (8004fec <DFSDM_GetChannelFromInstance+0x80>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d102      	bne.n	8004f90 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	60fb      	str	r3, [r7, #12]
 8004f8e:	e024      	b.n	8004fda <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a17      	ldr	r2, [pc, #92]	@ (8004ff0 <DFSDM_GetChannelFromInstance+0x84>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d102      	bne.n	8004f9e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8004f98:	2302      	movs	r3, #2
 8004f9a:	60fb      	str	r3, [r7, #12]
 8004f9c:	e01d      	b.n	8004fda <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a14      	ldr	r2, [pc, #80]	@ (8004ff4 <DFSDM_GetChannelFromInstance+0x88>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d102      	bne.n	8004fac <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8004fa6:	2304      	movs	r3, #4
 8004fa8:	60fb      	str	r3, [r7, #12]
 8004faa:	e016      	b.n	8004fda <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a12      	ldr	r2, [pc, #72]	@ (8004ff8 <DFSDM_GetChannelFromInstance+0x8c>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d102      	bne.n	8004fba <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8004fb4:	2305      	movs	r3, #5
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	e00f      	b.n	8004fda <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a0f      	ldr	r2, [pc, #60]	@ (8004ffc <DFSDM_GetChannelFromInstance+0x90>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d102      	bne.n	8004fc8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8004fc2:	2306      	movs	r3, #6
 8004fc4:	60fb      	str	r3, [r7, #12]
 8004fc6:	e008      	b.n	8004fda <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a0d      	ldr	r2, [pc, #52]	@ (8005000 <DFSDM_GetChannelFromInstance+0x94>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d102      	bne.n	8004fd6 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8004fd0:	2307      	movs	r3, #7
 8004fd2:	60fb      	str	r3, [r7, #12]
 8004fd4:	e001      	b.n	8004fda <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8004fda:	68fb      	ldr	r3, [r7, #12]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3714      	adds	r7, #20
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr
 8004fe8:	40016000 	.word	0x40016000
 8004fec:	40016020 	.word	0x40016020
 8004ff0:	40016040 	.word	0x40016040
 8004ff4:	40016080 	.word	0x40016080
 8004ff8:	400160a0 	.word	0x400160a0
 8004ffc:	400160c0 	.word	0x400160c0
 8005000:	400160e0 	.word	0x400160e0

08005004 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e08d      	b.n	8005132 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	461a      	mov	r2, r3
 800501c:	4b47      	ldr	r3, [pc, #284]	@ (800513c <HAL_DMA_Init+0x138>)
 800501e:	429a      	cmp	r2, r3
 8005020:	d80f      	bhi.n	8005042 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	461a      	mov	r2, r3
 8005028:	4b45      	ldr	r3, [pc, #276]	@ (8005140 <HAL_DMA_Init+0x13c>)
 800502a:	4413      	add	r3, r2
 800502c:	4a45      	ldr	r2, [pc, #276]	@ (8005144 <HAL_DMA_Init+0x140>)
 800502e:	fba2 2303 	umull	r2, r3, r2, r3
 8005032:	091b      	lsrs	r3, r3, #4
 8005034:	009a      	lsls	r2, r3, #2
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a42      	ldr	r2, [pc, #264]	@ (8005148 <HAL_DMA_Init+0x144>)
 800503e:	641a      	str	r2, [r3, #64]	@ 0x40
 8005040:	e00e      	b.n	8005060 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	461a      	mov	r2, r3
 8005048:	4b40      	ldr	r3, [pc, #256]	@ (800514c <HAL_DMA_Init+0x148>)
 800504a:	4413      	add	r3, r2
 800504c:	4a3d      	ldr	r2, [pc, #244]	@ (8005144 <HAL_DMA_Init+0x140>)
 800504e:	fba2 2303 	umull	r2, r3, r2, r3
 8005052:	091b      	lsrs	r3, r3, #4
 8005054:	009a      	lsls	r2, r3, #2
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a3c      	ldr	r2, [pc, #240]	@ (8005150 <HAL_DMA_Init+0x14c>)
 800505e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2202      	movs	r2, #2
 8005064:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005076:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800507a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005084:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005090:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800509c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 fa12 	bl	80054dc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050c0:	d102      	bne.n	80050c8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685a      	ldr	r2, [r3, #4]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050d0:	b2d2      	uxtb	r2, r2
 80050d2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80050dc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d010      	beq.n	8005108 <HAL_DMA_Init+0x104>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	2b04      	cmp	r3, #4
 80050ec:	d80c      	bhi.n	8005108 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 fa32 	bl	8005558 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050f8:	2200      	movs	r2, #0
 80050fa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005104:	605a      	str	r2, [r3, #4]
 8005106:	e008      	b.n	800511a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3710      	adds	r7, #16
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	40020407 	.word	0x40020407
 8005140:	bffdfff8 	.word	0xbffdfff8
 8005144:	cccccccd 	.word	0xcccccccd
 8005148:	40020000 	.word	0x40020000
 800514c:	bffdfbf8 	.word	0xbffdfbf8
 8005150:	40020400 	.word	0x40020400

08005154 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b086      	sub	sp, #24
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	607a      	str	r2, [r7, #4]
 8005160:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005162:	2300      	movs	r3, #0
 8005164:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800516c:	2b01      	cmp	r3, #1
 800516e:	d101      	bne.n	8005174 <HAL_DMA_Start_IT+0x20>
 8005170:	2302      	movs	r3, #2
 8005172:	e066      	b.n	8005242 <HAL_DMA_Start_IT+0xee>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005182:	b2db      	uxtb	r3, r3
 8005184:	2b01      	cmp	r3, #1
 8005186:	d155      	bne.n	8005234 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2202      	movs	r2, #2
 800518c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f022 0201 	bic.w	r2, r2, #1
 80051a4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	68b9      	ldr	r1, [r7, #8]
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f000 f957 	bl	8005460 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d008      	beq.n	80051cc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f042 020e 	orr.w	r2, r2, #14
 80051c8:	601a      	str	r2, [r3, #0]
 80051ca:	e00f      	b.n	80051ec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f022 0204 	bic.w	r2, r2, #4
 80051da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f042 020a 	orr.w	r2, r2, #10
 80051ea:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d007      	beq.n	800520a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005204:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005208:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800520e:	2b00      	cmp	r3, #0
 8005210:	d007      	beq.n	8005222 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800521c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005220:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f042 0201 	orr.w	r2, r2, #1
 8005230:	601a      	str	r2, [r3, #0]
 8005232:	e005      	b.n	8005240 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800523c:	2302      	movs	r3, #2
 800523e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005240:	7dfb      	ldrb	r3, [r7, #23]
}
 8005242:	4618      	mov	r0, r3
 8005244:	3718      	adds	r7, #24
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800524a:	b480      	push	{r7}
 800524c:	b085      	sub	sp, #20
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005252:	2300      	movs	r3, #0
 8005254:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b02      	cmp	r3, #2
 8005260:	d008      	beq.n	8005274 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2204      	movs	r2, #4
 8005266:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e040      	b.n	80052f6 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f022 020e 	bic.w	r2, r2, #14
 8005282:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800528e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005292:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f022 0201 	bic.w	r2, r2, #1
 80052a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052a8:	f003 021c 	and.w	r2, r3, #28
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b0:	2101      	movs	r1, #1
 80052b2:	fa01 f202 	lsl.w	r2, r1, r2
 80052b6:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80052c0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00c      	beq.n	80052e4 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80052d8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80052e2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80052f4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3714      	adds	r7, #20
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b084      	sub	sp, #16
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800531e:	f003 031c 	and.w	r3, r3, #28
 8005322:	2204      	movs	r2, #4
 8005324:	409a      	lsls	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	4013      	ands	r3, r2
 800532a:	2b00      	cmp	r3, #0
 800532c:	d026      	beq.n	800537c <HAL_DMA_IRQHandler+0x7a>
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	f003 0304 	and.w	r3, r3, #4
 8005334:	2b00      	cmp	r3, #0
 8005336:	d021      	beq.n	800537c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0320 	and.w	r3, r3, #32
 8005342:	2b00      	cmp	r3, #0
 8005344:	d107      	bne.n	8005356 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f022 0204 	bic.w	r2, r2, #4
 8005354:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800535a:	f003 021c 	and.w	r2, r3, #28
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005362:	2104      	movs	r1, #4
 8005364:	fa01 f202 	lsl.w	r2, r1, r2
 8005368:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800536e:	2b00      	cmp	r3, #0
 8005370:	d071      	beq.n	8005456 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800537a:	e06c      	b.n	8005456 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005380:	f003 031c 	and.w	r3, r3, #28
 8005384:	2202      	movs	r2, #2
 8005386:	409a      	lsls	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4013      	ands	r3, r2
 800538c:	2b00      	cmp	r3, #0
 800538e:	d02e      	beq.n	80053ee <HAL_DMA_IRQHandler+0xec>
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	2b00      	cmp	r3, #0
 8005398:	d029      	beq.n	80053ee <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0320 	and.w	r3, r3, #32
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d10b      	bne.n	80053c0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f022 020a 	bic.w	r2, r2, #10
 80053b6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053c4:	f003 021c 	and.w	r2, r3, #28
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053cc:	2102      	movs	r1, #2
 80053ce:	fa01 f202 	lsl.w	r2, r1, r2
 80053d2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d038      	beq.n	8005456 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80053ec:	e033      	b.n	8005456 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053f2:	f003 031c 	and.w	r3, r3, #28
 80053f6:	2208      	movs	r2, #8
 80053f8:	409a      	lsls	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	4013      	ands	r3, r2
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d02a      	beq.n	8005458 <HAL_DMA_IRQHandler+0x156>
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	f003 0308 	and.w	r3, r3, #8
 8005408:	2b00      	cmp	r3, #0
 800540a:	d025      	beq.n	8005458 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f022 020e 	bic.w	r2, r2, #14
 800541a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005420:	f003 021c 	and.w	r2, r3, #28
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005428:	2101      	movs	r1, #1
 800542a:	fa01 f202 	lsl.w	r2, r1, r2
 800542e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800544a:	2b00      	cmp	r3, #0
 800544c:	d004      	beq.n	8005458 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005456:	bf00      	nop
 8005458:	bf00      	nop
}
 800545a:	3710      	adds	r7, #16
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005460:	b480      	push	{r7}
 8005462:	b085      	sub	sp, #20
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
 800546c:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005476:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800547c:	2b00      	cmp	r3, #0
 800547e:	d004      	beq.n	800548a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005488:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800548e:	f003 021c 	and.w	r2, r3, #28
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005496:	2101      	movs	r1, #1
 8005498:	fa01 f202 	lsl.w	r2, r1, r2
 800549c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	683a      	ldr	r2, [r7, #0]
 80054a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	2b10      	cmp	r3, #16
 80054ac:	d108      	bne.n	80054c0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68ba      	ldr	r2, [r7, #8]
 80054bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80054be:	e007      	b.n	80054d0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68ba      	ldr	r2, [r7, #8]
 80054c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	60da      	str	r2, [r3, #12]
}
 80054d0:	bf00      	nop
 80054d2:	3714      	adds	r7, #20
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	461a      	mov	r2, r3
 80054ea:	4b17      	ldr	r3, [pc, #92]	@ (8005548 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d80a      	bhi.n	8005506 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054f4:	089b      	lsrs	r3, r3, #2
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80054fc:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	6493      	str	r3, [r2, #72]	@ 0x48
 8005504:	e007      	b.n	8005516 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800550a:	089b      	lsrs	r3, r3, #2
 800550c:	009a      	lsls	r2, r3, #2
 800550e:	4b0f      	ldr	r3, [pc, #60]	@ (800554c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005510:	4413      	add	r3, r2
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	b2db      	uxtb	r3, r3
 800551c:	3b08      	subs	r3, #8
 800551e:	4a0c      	ldr	r2, [pc, #48]	@ (8005550 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005520:	fba2 2303 	umull	r2, r3, r2, r3
 8005524:	091b      	lsrs	r3, r3, #4
 8005526:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a0a      	ldr	r2, [pc, #40]	@ (8005554 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800552c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f003 031f 	and.w	r3, r3, #31
 8005534:	2201      	movs	r2, #1
 8005536:	409a      	lsls	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800553c:	bf00      	nop
 800553e:	3714      	adds	r7, #20
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr
 8005548:	40020407 	.word	0x40020407
 800554c:	4002081c 	.word	0x4002081c
 8005550:	cccccccd 	.word	0xcccccccd
 8005554:	40020880 	.word	0x40020880

08005558 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	b2db      	uxtb	r3, r3
 8005566:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	4b0b      	ldr	r3, [pc, #44]	@ (8005598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800556c:	4413      	add	r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	461a      	mov	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a08      	ldr	r2, [pc, #32]	@ (800559c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800557a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	3b01      	subs	r3, #1
 8005580:	f003 0303 	and.w	r3, r3, #3
 8005584:	2201      	movs	r2, #1
 8005586:	409a      	lsls	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800558c:	bf00      	nop
 800558e:	3714      	adds	r7, #20
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr
 8005598:	1000823f 	.word	0x1000823f
 800559c:	40020940 	.word	0x40020940

080055a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b087      	sub	sp, #28
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80055aa:	2300      	movs	r3, #0
 80055ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80055ae:	e166      	b.n	800587e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	2101      	movs	r1, #1
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	fa01 f303 	lsl.w	r3, r1, r3
 80055bc:	4013      	ands	r3, r2
 80055be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	f000 8158 	beq.w	8005878 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	f003 0303 	and.w	r3, r3, #3
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d005      	beq.n	80055e0 <HAL_GPIO_Init+0x40>
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f003 0303 	and.w	r3, r3, #3
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d130      	bne.n	8005642 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	005b      	lsls	r3, r3, #1
 80055ea:	2203      	movs	r2, #3
 80055ec:	fa02 f303 	lsl.w	r3, r2, r3
 80055f0:	43db      	mvns	r3, r3
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	4013      	ands	r3, r2
 80055f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	68da      	ldr	r2, [r3, #12]
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	005b      	lsls	r3, r3, #1
 8005600:	fa02 f303 	lsl.w	r3, r2, r3
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	4313      	orrs	r3, r2
 8005608:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005616:	2201      	movs	r2, #1
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	fa02 f303 	lsl.w	r3, r2, r3
 800561e:	43db      	mvns	r3, r3
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	4013      	ands	r3, r2
 8005624:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	091b      	lsrs	r3, r3, #4
 800562c:	f003 0201 	and.w	r2, r3, #1
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	fa02 f303 	lsl.w	r3, r2, r3
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	4313      	orrs	r3, r2
 800563a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f003 0303 	and.w	r3, r3, #3
 800564a:	2b03      	cmp	r3, #3
 800564c:	d017      	beq.n	800567e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	005b      	lsls	r3, r3, #1
 8005658:	2203      	movs	r2, #3
 800565a:	fa02 f303 	lsl.w	r3, r2, r3
 800565e:	43db      	mvns	r3, r3
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	4013      	ands	r3, r2
 8005664:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	689a      	ldr	r2, [r3, #8]
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	005b      	lsls	r3, r3, #1
 800566e:	fa02 f303 	lsl.w	r3, r2, r3
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	4313      	orrs	r3, r2
 8005676:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	f003 0303 	and.w	r3, r3, #3
 8005686:	2b02      	cmp	r3, #2
 8005688:	d123      	bne.n	80056d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	08da      	lsrs	r2, r3, #3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	3208      	adds	r2, #8
 8005692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005696:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	f003 0307 	and.w	r3, r3, #7
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	220f      	movs	r2, #15
 80056a2:	fa02 f303 	lsl.w	r3, r2, r3
 80056a6:	43db      	mvns	r3, r3
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	4013      	ands	r3, r2
 80056ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	691a      	ldr	r2, [r3, #16]
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	f003 0307 	and.w	r3, r3, #7
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	fa02 f303 	lsl.w	r3, r2, r3
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	08da      	lsrs	r2, r3, #3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	3208      	adds	r2, #8
 80056cc:	6939      	ldr	r1, [r7, #16]
 80056ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	005b      	lsls	r3, r3, #1
 80056dc:	2203      	movs	r2, #3
 80056de:	fa02 f303 	lsl.w	r3, r2, r3
 80056e2:	43db      	mvns	r3, r3
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	4013      	ands	r3, r2
 80056e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f003 0203 	and.w	r2, r3, #3
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	005b      	lsls	r3, r3, #1
 80056f6:	fa02 f303 	lsl.w	r3, r2, r3
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	693a      	ldr	r2, [r7, #16]
 8005704:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800570e:	2b00      	cmp	r3, #0
 8005710:	f000 80b2 	beq.w	8005878 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005714:	4b61      	ldr	r3, [pc, #388]	@ (800589c <HAL_GPIO_Init+0x2fc>)
 8005716:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005718:	4a60      	ldr	r2, [pc, #384]	@ (800589c <HAL_GPIO_Init+0x2fc>)
 800571a:	f043 0301 	orr.w	r3, r3, #1
 800571e:	6613      	str	r3, [r2, #96]	@ 0x60
 8005720:	4b5e      	ldr	r3, [pc, #376]	@ (800589c <HAL_GPIO_Init+0x2fc>)
 8005722:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005724:	f003 0301 	and.w	r3, r3, #1
 8005728:	60bb      	str	r3, [r7, #8]
 800572a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800572c:	4a5c      	ldr	r2, [pc, #368]	@ (80058a0 <HAL_GPIO_Init+0x300>)
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	089b      	lsrs	r3, r3, #2
 8005732:	3302      	adds	r3, #2
 8005734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005738:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	f003 0303 	and.w	r3, r3, #3
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	220f      	movs	r2, #15
 8005744:	fa02 f303 	lsl.w	r3, r2, r3
 8005748:	43db      	mvns	r3, r3
 800574a:	693a      	ldr	r2, [r7, #16]
 800574c:	4013      	ands	r3, r2
 800574e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005756:	d02b      	beq.n	80057b0 <HAL_GPIO_Init+0x210>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4a52      	ldr	r2, [pc, #328]	@ (80058a4 <HAL_GPIO_Init+0x304>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d025      	beq.n	80057ac <HAL_GPIO_Init+0x20c>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a51      	ldr	r2, [pc, #324]	@ (80058a8 <HAL_GPIO_Init+0x308>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d01f      	beq.n	80057a8 <HAL_GPIO_Init+0x208>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a50      	ldr	r2, [pc, #320]	@ (80058ac <HAL_GPIO_Init+0x30c>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d019      	beq.n	80057a4 <HAL_GPIO_Init+0x204>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a4f      	ldr	r2, [pc, #316]	@ (80058b0 <HAL_GPIO_Init+0x310>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d013      	beq.n	80057a0 <HAL_GPIO_Init+0x200>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a4e      	ldr	r2, [pc, #312]	@ (80058b4 <HAL_GPIO_Init+0x314>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d00d      	beq.n	800579c <HAL_GPIO_Init+0x1fc>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a4d      	ldr	r2, [pc, #308]	@ (80058b8 <HAL_GPIO_Init+0x318>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d007      	beq.n	8005798 <HAL_GPIO_Init+0x1f8>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a4c      	ldr	r2, [pc, #304]	@ (80058bc <HAL_GPIO_Init+0x31c>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d101      	bne.n	8005794 <HAL_GPIO_Init+0x1f4>
 8005790:	2307      	movs	r3, #7
 8005792:	e00e      	b.n	80057b2 <HAL_GPIO_Init+0x212>
 8005794:	2308      	movs	r3, #8
 8005796:	e00c      	b.n	80057b2 <HAL_GPIO_Init+0x212>
 8005798:	2306      	movs	r3, #6
 800579a:	e00a      	b.n	80057b2 <HAL_GPIO_Init+0x212>
 800579c:	2305      	movs	r3, #5
 800579e:	e008      	b.n	80057b2 <HAL_GPIO_Init+0x212>
 80057a0:	2304      	movs	r3, #4
 80057a2:	e006      	b.n	80057b2 <HAL_GPIO_Init+0x212>
 80057a4:	2303      	movs	r3, #3
 80057a6:	e004      	b.n	80057b2 <HAL_GPIO_Init+0x212>
 80057a8:	2302      	movs	r3, #2
 80057aa:	e002      	b.n	80057b2 <HAL_GPIO_Init+0x212>
 80057ac:	2301      	movs	r3, #1
 80057ae:	e000      	b.n	80057b2 <HAL_GPIO_Init+0x212>
 80057b0:	2300      	movs	r3, #0
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	f002 0203 	and.w	r2, r2, #3
 80057b8:	0092      	lsls	r2, r2, #2
 80057ba:	4093      	lsls	r3, r2
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	4313      	orrs	r3, r2
 80057c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80057c2:	4937      	ldr	r1, [pc, #220]	@ (80058a0 <HAL_GPIO_Init+0x300>)
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	089b      	lsrs	r3, r3, #2
 80057c8:	3302      	adds	r3, #2
 80057ca:	693a      	ldr	r2, [r7, #16]
 80057cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80057d0:	4b3b      	ldr	r3, [pc, #236]	@ (80058c0 <HAL_GPIO_Init+0x320>)
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	43db      	mvns	r3, r3
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	4013      	ands	r3, r2
 80057de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d003      	beq.n	80057f4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80057f4:	4a32      	ldr	r2, [pc, #200]	@ (80058c0 <HAL_GPIO_Init+0x320>)
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80057fa:	4b31      	ldr	r3, [pc, #196]	@ (80058c0 <HAL_GPIO_Init+0x320>)
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	43db      	mvns	r3, r3
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	4013      	ands	r3, r2
 8005808:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d003      	beq.n	800581e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	4313      	orrs	r3, r2
 800581c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800581e:	4a28      	ldr	r2, [pc, #160]	@ (80058c0 <HAL_GPIO_Init+0x320>)
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005824:	4b26      	ldr	r3, [pc, #152]	@ (80058c0 <HAL_GPIO_Init+0x320>)
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	43db      	mvns	r3, r3
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	4013      	ands	r3, r2
 8005832:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d003      	beq.n	8005848 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	4313      	orrs	r3, r2
 8005846:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005848:	4a1d      	ldr	r2, [pc, #116]	@ (80058c0 <HAL_GPIO_Init+0x320>)
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800584e:	4b1c      	ldr	r3, [pc, #112]	@ (80058c0 <HAL_GPIO_Init+0x320>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	43db      	mvns	r3, r3
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	4013      	ands	r3, r2
 800585c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d003      	beq.n	8005872 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	4313      	orrs	r3, r2
 8005870:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005872:	4a13      	ldr	r2, [pc, #76]	@ (80058c0 <HAL_GPIO_Init+0x320>)
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	3301      	adds	r3, #1
 800587c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	fa22 f303 	lsr.w	r3, r2, r3
 8005888:	2b00      	cmp	r3, #0
 800588a:	f47f ae91 	bne.w	80055b0 <HAL_GPIO_Init+0x10>
  }
}
 800588e:	bf00      	nop
 8005890:	bf00      	nop
 8005892:	371c      	adds	r7, #28
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	40021000 	.word	0x40021000
 80058a0:	40010000 	.word	0x40010000
 80058a4:	48000400 	.word	0x48000400
 80058a8:	48000800 	.word	0x48000800
 80058ac:	48000c00 	.word	0x48000c00
 80058b0:	48001000 	.word	0x48001000
 80058b4:	48001400 	.word	0x48001400
 80058b8:	48001800 	.word	0x48001800
 80058bc:	48001c00 	.word	0x48001c00
 80058c0:	40010400 	.word	0x40010400

080058c4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b087      	sub	sp, #28
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80058ce:	2300      	movs	r3, #0
 80058d0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80058d2:	e0c9      	b.n	8005a68 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80058d4:	2201      	movs	r2, #1
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	fa02 f303 	lsl.w	r3, r2, r3
 80058dc:	683a      	ldr	r2, [r7, #0]
 80058de:	4013      	ands	r3, r2
 80058e0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f000 80bc 	beq.w	8005a62 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80058ea:	4a66      	ldr	r2, [pc, #408]	@ (8005a84 <HAL_GPIO_DeInit+0x1c0>)
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	089b      	lsrs	r3, r3, #2
 80058f0:	3302      	adds	r3, #2
 80058f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058f6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	f003 0303 	and.w	r3, r3, #3
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	220f      	movs	r2, #15
 8005902:	fa02 f303 	lsl.w	r3, r2, r3
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	4013      	ands	r3, r2
 800590a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005912:	d02b      	beq.n	800596c <HAL_GPIO_DeInit+0xa8>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a5c      	ldr	r2, [pc, #368]	@ (8005a88 <HAL_GPIO_DeInit+0x1c4>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d025      	beq.n	8005968 <HAL_GPIO_DeInit+0xa4>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a5b      	ldr	r2, [pc, #364]	@ (8005a8c <HAL_GPIO_DeInit+0x1c8>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d01f      	beq.n	8005964 <HAL_GPIO_DeInit+0xa0>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a5a      	ldr	r2, [pc, #360]	@ (8005a90 <HAL_GPIO_DeInit+0x1cc>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d019      	beq.n	8005960 <HAL_GPIO_DeInit+0x9c>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a59      	ldr	r2, [pc, #356]	@ (8005a94 <HAL_GPIO_DeInit+0x1d0>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d013      	beq.n	800595c <HAL_GPIO_DeInit+0x98>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a58      	ldr	r2, [pc, #352]	@ (8005a98 <HAL_GPIO_DeInit+0x1d4>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d00d      	beq.n	8005958 <HAL_GPIO_DeInit+0x94>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a57      	ldr	r2, [pc, #348]	@ (8005a9c <HAL_GPIO_DeInit+0x1d8>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d007      	beq.n	8005954 <HAL_GPIO_DeInit+0x90>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a56      	ldr	r2, [pc, #344]	@ (8005aa0 <HAL_GPIO_DeInit+0x1dc>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d101      	bne.n	8005950 <HAL_GPIO_DeInit+0x8c>
 800594c:	2307      	movs	r3, #7
 800594e:	e00e      	b.n	800596e <HAL_GPIO_DeInit+0xaa>
 8005950:	2308      	movs	r3, #8
 8005952:	e00c      	b.n	800596e <HAL_GPIO_DeInit+0xaa>
 8005954:	2306      	movs	r3, #6
 8005956:	e00a      	b.n	800596e <HAL_GPIO_DeInit+0xaa>
 8005958:	2305      	movs	r3, #5
 800595a:	e008      	b.n	800596e <HAL_GPIO_DeInit+0xaa>
 800595c:	2304      	movs	r3, #4
 800595e:	e006      	b.n	800596e <HAL_GPIO_DeInit+0xaa>
 8005960:	2303      	movs	r3, #3
 8005962:	e004      	b.n	800596e <HAL_GPIO_DeInit+0xaa>
 8005964:	2302      	movs	r3, #2
 8005966:	e002      	b.n	800596e <HAL_GPIO_DeInit+0xaa>
 8005968:	2301      	movs	r3, #1
 800596a:	e000      	b.n	800596e <HAL_GPIO_DeInit+0xaa>
 800596c:	2300      	movs	r3, #0
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	f002 0203 	and.w	r2, r2, #3
 8005974:	0092      	lsls	r2, r2, #2
 8005976:	4093      	lsls	r3, r2
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	429a      	cmp	r2, r3
 800597c:	d132      	bne.n	80059e4 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800597e:	4b49      	ldr	r3, [pc, #292]	@ (8005aa4 <HAL_GPIO_DeInit+0x1e0>)
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	43db      	mvns	r3, r3
 8005986:	4947      	ldr	r1, [pc, #284]	@ (8005aa4 <HAL_GPIO_DeInit+0x1e0>)
 8005988:	4013      	ands	r3, r2
 800598a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800598c:	4b45      	ldr	r3, [pc, #276]	@ (8005aa4 <HAL_GPIO_DeInit+0x1e0>)
 800598e:	685a      	ldr	r2, [r3, #4]
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	43db      	mvns	r3, r3
 8005994:	4943      	ldr	r1, [pc, #268]	@ (8005aa4 <HAL_GPIO_DeInit+0x1e0>)
 8005996:	4013      	ands	r3, r2
 8005998:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800599a:	4b42      	ldr	r3, [pc, #264]	@ (8005aa4 <HAL_GPIO_DeInit+0x1e0>)
 800599c:	68da      	ldr	r2, [r3, #12]
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	43db      	mvns	r3, r3
 80059a2:	4940      	ldr	r1, [pc, #256]	@ (8005aa4 <HAL_GPIO_DeInit+0x1e0>)
 80059a4:	4013      	ands	r3, r2
 80059a6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80059a8:	4b3e      	ldr	r3, [pc, #248]	@ (8005aa4 <HAL_GPIO_DeInit+0x1e0>)
 80059aa:	689a      	ldr	r2, [r3, #8]
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	43db      	mvns	r3, r3
 80059b0:	493c      	ldr	r1, [pc, #240]	@ (8005aa4 <HAL_GPIO_DeInit+0x1e0>)
 80059b2:	4013      	ands	r3, r2
 80059b4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	f003 0303 	and.w	r3, r3, #3
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	220f      	movs	r2, #15
 80059c0:	fa02 f303 	lsl.w	r3, r2, r3
 80059c4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80059c6:	4a2f      	ldr	r2, [pc, #188]	@ (8005a84 <HAL_GPIO_DeInit+0x1c0>)
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	089b      	lsrs	r3, r3, #2
 80059cc:	3302      	adds	r3, #2
 80059ce:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	43da      	mvns	r2, r3
 80059d6:	482b      	ldr	r0, [pc, #172]	@ (8005a84 <HAL_GPIO_DeInit+0x1c0>)
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	089b      	lsrs	r3, r3, #2
 80059dc:	400a      	ands	r2, r1
 80059de:	3302      	adds	r3, #2
 80059e0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	005b      	lsls	r3, r3, #1
 80059ec:	2103      	movs	r1, #3
 80059ee:	fa01 f303 	lsl.w	r3, r1, r3
 80059f2:	431a      	orrs	r2, r3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	08da      	lsrs	r2, r3, #3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	3208      	adds	r2, #8
 8005a00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	f003 0307 	and.w	r3, r3, #7
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	220f      	movs	r2, #15
 8005a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a12:	43db      	mvns	r3, r3
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	08d2      	lsrs	r2, r2, #3
 8005a18:	4019      	ands	r1, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	3208      	adds	r2, #8
 8005a1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	689a      	ldr	r2, [r3, #8]
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	005b      	lsls	r3, r3, #1
 8005a2a:	2103      	movs	r1, #3
 8005a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a30:	43db      	mvns	r3, r3
 8005a32:	401a      	ands	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	685a      	ldr	r2, [r3, #4]
 8005a3c:	2101      	movs	r1, #1
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	fa01 f303 	lsl.w	r3, r1, r3
 8005a44:	43db      	mvns	r3, r3
 8005a46:	401a      	ands	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	68da      	ldr	r2, [r3, #12]
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	005b      	lsls	r3, r3, #1
 8005a54:	2103      	movs	r1, #3
 8005a56:	fa01 f303 	lsl.w	r3, r1, r3
 8005a5a:	43db      	mvns	r3, r3
 8005a5c:	401a      	ands	r2, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	3301      	adds	r3, #1
 8005a66:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005a68:	683a      	ldr	r2, [r7, #0]
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f47f af2f 	bne.w	80058d4 <HAL_GPIO_DeInit+0x10>
  }
}
 8005a76:	bf00      	nop
 8005a78:	bf00      	nop
 8005a7a:	371c      	adds	r7, #28
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr
 8005a84:	40010000 	.word	0x40010000
 8005a88:	48000400 	.word	0x48000400
 8005a8c:	48000800 	.word	0x48000800
 8005a90:	48000c00 	.word	0x48000c00
 8005a94:	48001000 	.word	0x48001000
 8005a98:	48001400 	.word	0x48001400
 8005a9c:	48001800 	.word	0x48001800
 8005aa0:	48001c00 	.word	0x48001c00
 8005aa4:	40010400 	.word	0x40010400

08005aa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	807b      	strh	r3, [r7, #2]
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ab8:	787b      	ldrb	r3, [r7, #1]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d003      	beq.n	8005ac6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005abe:	887a      	ldrh	r2, [r7, #2]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005ac4:	e002      	b.n	8005acc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005ac6:	887a      	ldrh	r2, [r7, #2]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	4603      	mov	r3, r0
 8005ae0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005ae2:	4b08      	ldr	r3, [pc, #32]	@ (8005b04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ae4:	695a      	ldr	r2, [r3, #20]
 8005ae6:	88fb      	ldrh	r3, [r7, #6]
 8005ae8:	4013      	ands	r3, r2
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d006      	beq.n	8005afc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005aee:	4a05      	ldr	r2, [pc, #20]	@ (8005b04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005af0:	88fb      	ldrh	r3, [r7, #6]
 8005af2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005af4:	88fb      	ldrh	r3, [r7, #6]
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 f806 	bl	8005b08 <HAL_GPIO_EXTI_Callback>
  }
}
 8005afc:	bf00      	nop
 8005afe:	3708      	adds	r7, #8
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	40010400 	.word	0x40010400

08005b08 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	4603      	mov	r3, r0
 8005b10:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005b12:	bf00      	nop
 8005b14:	370c      	adds	r7, #12
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr

08005b1e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	b082      	sub	sp, #8
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d101      	bne.n	8005b30 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e08d      	b.n	8005c4c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d106      	bne.n	8005b4a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f7fc fe75 	bl	8002834 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2224      	movs	r2, #36	@ 0x24
 8005b4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f022 0201 	bic.w	r2, r2, #1
 8005b60:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685a      	ldr	r2, [r3, #4]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005b6e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	689a      	ldr	r2, [r3, #8]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b7e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d107      	bne.n	8005b98 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	689a      	ldr	r2, [r3, #8]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b94:	609a      	str	r2, [r3, #8]
 8005b96:	e006      	b.n	8005ba6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	689a      	ldr	r2, [r3, #8]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005ba4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d108      	bne.n	8005bc0 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bbc:	605a      	str	r2, [r3, #4]
 8005bbe:	e007      	b.n	8005bd0 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	685a      	ldr	r2, [r3, #4]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005bce:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	6812      	ldr	r2, [r2, #0]
 8005bda:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005bde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005be2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68da      	ldr	r2, [r3, #12]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005bf2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	691a      	ldr	r2, [r3, #16]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	695b      	ldr	r3, [r3, #20]
 8005bfc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	69d9      	ldr	r1, [r3, #28]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a1a      	ldr	r2, [r3, #32]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	430a      	orrs	r2, r1
 8005c1c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f042 0201 	orr.w	r2, r2, #1
 8005c2c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2220      	movs	r2, #32
 8005c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3708      	adds	r7, #8
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d101      	bne.n	8005c66 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e021      	b.n	8005caa <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2224      	movs	r2, #36	@ 0x24
 8005c6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f022 0201 	bic.w	r2, r2, #1
 8005c7c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f7fc fe36 	bl	80028f0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3708      	adds	r7, #8
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
	...

08005cb4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b088      	sub	sp, #32
 8005cb8:	af02      	add	r7, sp, #8
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	4608      	mov	r0, r1
 8005cbe:	4611      	mov	r1, r2
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	817b      	strh	r3, [r7, #10]
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	813b      	strh	r3, [r7, #8]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	2b20      	cmp	r3, #32
 8005cd8:	f040 80f9 	bne.w	8005ece <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cdc:	6a3b      	ldr	r3, [r7, #32]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d002      	beq.n	8005ce8 <HAL_I2C_Mem_Write+0x34>
 8005ce2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d105      	bne.n	8005cf4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cee:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e0ed      	b.n	8005ed0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d101      	bne.n	8005d02 <HAL_I2C_Mem_Write+0x4e>
 8005cfe:	2302      	movs	r3, #2
 8005d00:	e0e6      	b.n	8005ed0 <HAL_I2C_Mem_Write+0x21c>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005d0a:	f7fd f9c7 	bl	800309c <HAL_GetTick>
 8005d0e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	9300      	str	r3, [sp, #0]
 8005d14:	2319      	movs	r3, #25
 8005d16:	2201      	movs	r2, #1
 8005d18:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f000 fac3 	bl	80062a8 <I2C_WaitOnFlagUntilTimeout>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d001      	beq.n	8005d2c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e0d1      	b.n	8005ed0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2221      	movs	r2, #33	@ 0x21
 8005d30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2240      	movs	r2, #64	@ 0x40
 8005d38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6a3a      	ldr	r2, [r7, #32]
 8005d46:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005d4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d54:	88f8      	ldrh	r0, [r7, #6]
 8005d56:	893a      	ldrh	r2, [r7, #8]
 8005d58:	8979      	ldrh	r1, [r7, #10]
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	9301      	str	r3, [sp, #4]
 8005d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d60:	9300      	str	r3, [sp, #0]
 8005d62:	4603      	mov	r3, r0
 8005d64:	68f8      	ldr	r0, [r7, #12]
 8005d66:	f000 f9d3 	bl	8006110 <I2C_RequestMemoryWrite>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d005      	beq.n	8005d7c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e0a9      	b.n	8005ed0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	2bff      	cmp	r3, #255	@ 0xff
 8005d84:	d90e      	bls.n	8005da4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	22ff      	movs	r2, #255	@ 0xff
 8005d8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d90:	b2da      	uxtb	r2, r3
 8005d92:	8979      	ldrh	r1, [r7, #10]
 8005d94:	2300      	movs	r3, #0
 8005d96:	9300      	str	r3, [sp, #0]
 8005d98:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	f000 fc47 	bl	8006630 <I2C_TransferConfig>
 8005da2:	e00f      	b.n	8005dc4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005db2:	b2da      	uxtb	r2, r3
 8005db4:	8979      	ldrh	r1, [r7, #10]
 8005db6:	2300      	movs	r3, #0
 8005db8:	9300      	str	r3, [sp, #0]
 8005dba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005dbe:	68f8      	ldr	r0, [r7, #12]
 8005dc0:	f000 fc36 	bl	8006630 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005dc8:	68f8      	ldr	r0, [r7, #12]
 8005dca:	f000 fac6 	bl	800635a <I2C_WaitOnTXISFlagUntilTimeout>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d001      	beq.n	8005dd8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e07b      	b.n	8005ed0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ddc:	781a      	ldrb	r2, [r3, #0]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005de8:	1c5a      	adds	r2, r3, #1
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	3b01      	subs	r3, #1
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e00:	3b01      	subs	r3, #1
 8005e02:	b29a      	uxth	r2, r3
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d034      	beq.n	8005e7c <HAL_I2C_Mem_Write+0x1c8>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d130      	bne.n	8005e7c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	9300      	str	r3, [sp, #0]
 8005e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e20:	2200      	movs	r2, #0
 8005e22:	2180      	movs	r1, #128	@ 0x80
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f000 fa3f 	bl	80062a8 <I2C_WaitOnFlagUntilTimeout>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d001      	beq.n	8005e34 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e04d      	b.n	8005ed0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	2bff      	cmp	r3, #255	@ 0xff
 8005e3c:	d90e      	bls.n	8005e5c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	22ff      	movs	r2, #255	@ 0xff
 8005e42:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e48:	b2da      	uxtb	r2, r3
 8005e4a:	8979      	ldrh	r1, [r7, #10]
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	9300      	str	r3, [sp, #0]
 8005e50:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f000 fbeb 	bl	8006630 <I2C_TransferConfig>
 8005e5a:	e00f      	b.n	8005e7c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e6a:	b2da      	uxtb	r2, r3
 8005e6c:	8979      	ldrh	r1, [r7, #10]
 8005e6e:	2300      	movs	r3, #0
 8005e70:	9300      	str	r3, [sp, #0]
 8005e72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f000 fbda 	bl	8006630 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d19e      	bne.n	8005dc4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e86:	697a      	ldr	r2, [r7, #20]
 8005e88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e8a:	68f8      	ldr	r0, [r7, #12]
 8005e8c:	f000 faac 	bl	80063e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d001      	beq.n	8005e9a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e01a      	b.n	8005ed0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2220      	movs	r2, #32
 8005ea0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	6859      	ldr	r1, [r3, #4]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	4b0a      	ldr	r3, [pc, #40]	@ (8005ed8 <HAL_I2C_Mem_Write+0x224>)
 8005eae:	400b      	ands	r3, r1
 8005eb0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2220      	movs	r2, #32
 8005eb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	e000      	b.n	8005ed0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005ece:	2302      	movs	r3, #2
  }
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3718      	adds	r7, #24
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	fe00e800 	.word	0xfe00e800

08005edc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b088      	sub	sp, #32
 8005ee0:	af02      	add	r7, sp, #8
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	4608      	mov	r0, r1
 8005ee6:	4611      	mov	r1, r2
 8005ee8:	461a      	mov	r2, r3
 8005eea:	4603      	mov	r3, r0
 8005eec:	817b      	strh	r3, [r7, #10]
 8005eee:	460b      	mov	r3, r1
 8005ef0:	813b      	strh	r3, [r7, #8]
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	2b20      	cmp	r3, #32
 8005f00:	f040 80fd 	bne.w	80060fe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f04:	6a3b      	ldr	r3, [r7, #32]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d002      	beq.n	8005f10 <HAL_I2C_Mem_Read+0x34>
 8005f0a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d105      	bne.n	8005f1c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f16:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e0f1      	b.n	8006100 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d101      	bne.n	8005f2a <HAL_I2C_Mem_Read+0x4e>
 8005f26:	2302      	movs	r3, #2
 8005f28:	e0ea      	b.n	8006100 <HAL_I2C_Mem_Read+0x224>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005f32:	f7fd f8b3 	bl	800309c <HAL_GetTick>
 8005f36:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	9300      	str	r3, [sp, #0]
 8005f3c:	2319      	movs	r3, #25
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f000 f9af 	bl	80062a8 <I2C_WaitOnFlagUntilTimeout>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d001      	beq.n	8005f54 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e0d5      	b.n	8006100 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2222      	movs	r2, #34	@ 0x22
 8005f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2240      	movs	r2, #64	@ 0x40
 8005f60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6a3a      	ldr	r2, [r7, #32]
 8005f6e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005f74:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f7c:	88f8      	ldrh	r0, [r7, #6]
 8005f7e:	893a      	ldrh	r2, [r7, #8]
 8005f80:	8979      	ldrh	r1, [r7, #10]
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	9301      	str	r3, [sp, #4]
 8005f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f000 f913 	bl	80061b8 <I2C_RequestMemoryRead>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d005      	beq.n	8005fa4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e0ad      	b.n	8006100 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	2bff      	cmp	r3, #255	@ 0xff
 8005fac:	d90e      	bls.n	8005fcc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fb8:	b2da      	uxtb	r2, r3
 8005fba:	8979      	ldrh	r1, [r7, #10]
 8005fbc:	4b52      	ldr	r3, [pc, #328]	@ (8006108 <HAL_I2C_Mem_Read+0x22c>)
 8005fbe:	9300      	str	r3, [sp, #0]
 8005fc0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f000 fb33 	bl	8006630 <I2C_TransferConfig>
 8005fca:	e00f      	b.n	8005fec <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fda:	b2da      	uxtb	r2, r3
 8005fdc:	8979      	ldrh	r1, [r7, #10]
 8005fde:	4b4a      	ldr	r3, [pc, #296]	@ (8006108 <HAL_I2C_Mem_Read+0x22c>)
 8005fe0:	9300      	str	r3, [sp, #0]
 8005fe2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f000 fb22 	bl	8006630 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	9300      	str	r3, [sp, #0]
 8005ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	2104      	movs	r1, #4
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f000 f956 	bl	80062a8 <I2C_WaitOnFlagUntilTimeout>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d001      	beq.n	8006006 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e07c      	b.n	8006100 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006010:	b2d2      	uxtb	r2, r2
 8006012:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006018:	1c5a      	adds	r2, r3, #1
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006022:	3b01      	subs	r3, #1
 8006024:	b29a      	uxth	r2, r3
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800602e:	b29b      	uxth	r3, r3
 8006030:	3b01      	subs	r3, #1
 8006032:	b29a      	uxth	r2, r3
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800603c:	b29b      	uxth	r3, r3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d034      	beq.n	80060ac <HAL_I2C_Mem_Read+0x1d0>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006046:	2b00      	cmp	r3, #0
 8006048:	d130      	bne.n	80060ac <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	9300      	str	r3, [sp, #0]
 800604e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006050:	2200      	movs	r2, #0
 8006052:	2180      	movs	r1, #128	@ 0x80
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	f000 f927 	bl	80062a8 <I2C_WaitOnFlagUntilTimeout>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d001      	beq.n	8006064 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	e04d      	b.n	8006100 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006068:	b29b      	uxth	r3, r3
 800606a:	2bff      	cmp	r3, #255	@ 0xff
 800606c:	d90e      	bls.n	800608c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2201      	movs	r2, #1
 8006072:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006078:	b2da      	uxtb	r2, r3
 800607a:	8979      	ldrh	r1, [r7, #10]
 800607c:	2300      	movs	r3, #0
 800607e:	9300      	str	r3, [sp, #0]
 8006080:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f000 fad3 	bl	8006630 <I2C_TransferConfig>
 800608a:	e00f      	b.n	80060ac <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006090:	b29a      	uxth	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800609a:	b2da      	uxtb	r2, r3
 800609c:	8979      	ldrh	r1, [r7, #10]
 800609e:	2300      	movs	r3, #0
 80060a0:	9300      	str	r3, [sp, #0]
 80060a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f000 fac2 	bl	8006630 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d19a      	bne.n	8005fec <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	f000 f994 	bl	80063e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d001      	beq.n	80060ca <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e01a      	b.n	8006100 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2220      	movs	r2, #32
 80060d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	6859      	ldr	r1, [r3, #4]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	4b0b      	ldr	r3, [pc, #44]	@ (800610c <HAL_I2C_Mem_Read+0x230>)
 80060de:	400b      	ands	r3, r1
 80060e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2220      	movs	r2, #32
 80060e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80060fa:	2300      	movs	r3, #0
 80060fc:	e000      	b.n	8006100 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80060fe:	2302      	movs	r3, #2
  }
}
 8006100:	4618      	mov	r0, r3
 8006102:	3718      	adds	r7, #24
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	80002400 	.word	0x80002400
 800610c:	fe00e800 	.word	0xfe00e800

08006110 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b086      	sub	sp, #24
 8006114:	af02      	add	r7, sp, #8
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	4608      	mov	r0, r1
 800611a:	4611      	mov	r1, r2
 800611c:	461a      	mov	r2, r3
 800611e:	4603      	mov	r3, r0
 8006120:	817b      	strh	r3, [r7, #10]
 8006122:	460b      	mov	r3, r1
 8006124:	813b      	strh	r3, [r7, #8]
 8006126:	4613      	mov	r3, r2
 8006128:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800612a:	88fb      	ldrh	r3, [r7, #6]
 800612c:	b2da      	uxtb	r2, r3
 800612e:	8979      	ldrh	r1, [r7, #10]
 8006130:	4b20      	ldr	r3, [pc, #128]	@ (80061b4 <I2C_RequestMemoryWrite+0xa4>)
 8006132:	9300      	str	r3, [sp, #0]
 8006134:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f000 fa79 	bl	8006630 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800613e:	69fa      	ldr	r2, [r7, #28]
 8006140:	69b9      	ldr	r1, [r7, #24]
 8006142:	68f8      	ldr	r0, [r7, #12]
 8006144:	f000 f909 	bl	800635a <I2C_WaitOnTXISFlagUntilTimeout>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d001      	beq.n	8006152 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e02c      	b.n	80061ac <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006152:	88fb      	ldrh	r3, [r7, #6]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d105      	bne.n	8006164 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006158:	893b      	ldrh	r3, [r7, #8]
 800615a:	b2da      	uxtb	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	629a      	str	r2, [r3, #40]	@ 0x28
 8006162:	e015      	b.n	8006190 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006164:	893b      	ldrh	r3, [r7, #8]
 8006166:	0a1b      	lsrs	r3, r3, #8
 8006168:	b29b      	uxth	r3, r3
 800616a:	b2da      	uxtb	r2, r3
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006172:	69fa      	ldr	r2, [r7, #28]
 8006174:	69b9      	ldr	r1, [r7, #24]
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	f000 f8ef 	bl	800635a <I2C_WaitOnTXISFlagUntilTimeout>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d001      	beq.n	8006186 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e012      	b.n	80061ac <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006186:	893b      	ldrh	r3, [r7, #8]
 8006188:	b2da      	uxtb	r2, r3
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	9300      	str	r3, [sp, #0]
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	2200      	movs	r2, #0
 8006198:	2180      	movs	r1, #128	@ 0x80
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f000 f884 	bl	80062a8 <I2C_WaitOnFlagUntilTimeout>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d001      	beq.n	80061aa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e000      	b.n	80061ac <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	80002000 	.word	0x80002000

080061b8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b086      	sub	sp, #24
 80061bc:	af02      	add	r7, sp, #8
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	4608      	mov	r0, r1
 80061c2:	4611      	mov	r1, r2
 80061c4:	461a      	mov	r2, r3
 80061c6:	4603      	mov	r3, r0
 80061c8:	817b      	strh	r3, [r7, #10]
 80061ca:	460b      	mov	r3, r1
 80061cc:	813b      	strh	r3, [r7, #8]
 80061ce:	4613      	mov	r3, r2
 80061d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80061d2:	88fb      	ldrh	r3, [r7, #6]
 80061d4:	b2da      	uxtb	r2, r3
 80061d6:	8979      	ldrh	r1, [r7, #10]
 80061d8:	4b20      	ldr	r3, [pc, #128]	@ (800625c <I2C_RequestMemoryRead+0xa4>)
 80061da:	9300      	str	r3, [sp, #0]
 80061dc:	2300      	movs	r3, #0
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f000 fa26 	bl	8006630 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061e4:	69fa      	ldr	r2, [r7, #28]
 80061e6:	69b9      	ldr	r1, [r7, #24]
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f000 f8b6 	bl	800635a <I2C_WaitOnTXISFlagUntilTimeout>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d001      	beq.n	80061f8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e02c      	b.n	8006252 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80061f8:	88fb      	ldrh	r3, [r7, #6]
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d105      	bne.n	800620a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80061fe:	893b      	ldrh	r3, [r7, #8]
 8006200:	b2da      	uxtb	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	629a      	str	r2, [r3, #40]	@ 0x28
 8006208:	e015      	b.n	8006236 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800620a:	893b      	ldrh	r3, [r7, #8]
 800620c:	0a1b      	lsrs	r3, r3, #8
 800620e:	b29b      	uxth	r3, r3
 8006210:	b2da      	uxtb	r2, r3
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006218:	69fa      	ldr	r2, [r7, #28]
 800621a:	69b9      	ldr	r1, [r7, #24]
 800621c:	68f8      	ldr	r0, [r7, #12]
 800621e:	f000 f89c 	bl	800635a <I2C_WaitOnTXISFlagUntilTimeout>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d001      	beq.n	800622c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e012      	b.n	8006252 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800622c:	893b      	ldrh	r3, [r7, #8]
 800622e:	b2da      	uxtb	r2, r3
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	9300      	str	r3, [sp, #0]
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	2200      	movs	r2, #0
 800623e:	2140      	movs	r1, #64	@ 0x40
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f000 f831 	bl	80062a8 <I2C_WaitOnFlagUntilTimeout>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d001      	beq.n	8006250 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e000      	b.n	8006252 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	80002000 	.word	0x80002000

08006260 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	699b      	ldr	r3, [r3, #24]
 800626e:	f003 0302 	and.w	r3, r3, #2
 8006272:	2b02      	cmp	r3, #2
 8006274:	d103      	bne.n	800627e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2200      	movs	r2, #0
 800627c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	699b      	ldr	r3, [r3, #24]
 8006284:	f003 0301 	and.w	r3, r3, #1
 8006288:	2b01      	cmp	r3, #1
 800628a:	d007      	beq.n	800629c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	699a      	ldr	r2, [r3, #24]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f042 0201 	orr.w	r2, r2, #1
 800629a:	619a      	str	r2, [r3, #24]
  }
}
 800629c:	bf00      	nop
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	603b      	str	r3, [r7, #0]
 80062b4:	4613      	mov	r3, r2
 80062b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062b8:	e03b      	b.n	8006332 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80062ba:	69ba      	ldr	r2, [r7, #24]
 80062bc:	6839      	ldr	r1, [r7, #0]
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f000 f8d6 	bl	8006470 <I2C_IsErrorOccurred>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d001      	beq.n	80062ce <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e041      	b.n	8006352 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80062d4:	d02d      	beq.n	8006332 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062d6:	f7fc fee1 	bl	800309c <HAL_GetTick>
 80062da:	4602      	mov	r2, r0
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	683a      	ldr	r2, [r7, #0]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d302      	bcc.n	80062ec <I2C_WaitOnFlagUntilTimeout+0x44>
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d122      	bne.n	8006332 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	699a      	ldr	r2, [r3, #24]
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	4013      	ands	r3, r2
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	bf0c      	ite	eq
 80062fc:	2301      	moveq	r3, #1
 80062fe:	2300      	movne	r3, #0
 8006300:	b2db      	uxtb	r3, r3
 8006302:	461a      	mov	r2, r3
 8006304:	79fb      	ldrb	r3, [r7, #7]
 8006306:	429a      	cmp	r2, r3
 8006308:	d113      	bne.n	8006332 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800630e:	f043 0220 	orr.w	r2, r3, #32
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2220      	movs	r2, #32
 800631a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e00f      	b.n	8006352 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	699a      	ldr	r2, [r3, #24]
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	4013      	ands	r3, r2
 800633c:	68ba      	ldr	r2, [r7, #8]
 800633e:	429a      	cmp	r2, r3
 8006340:	bf0c      	ite	eq
 8006342:	2301      	moveq	r3, #1
 8006344:	2300      	movne	r3, #0
 8006346:	b2db      	uxtb	r3, r3
 8006348:	461a      	mov	r2, r3
 800634a:	79fb      	ldrb	r3, [r7, #7]
 800634c:	429a      	cmp	r2, r3
 800634e:	d0b4      	beq.n	80062ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}

0800635a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800635a:	b580      	push	{r7, lr}
 800635c:	b084      	sub	sp, #16
 800635e:	af00      	add	r7, sp, #0
 8006360:	60f8      	str	r0, [r7, #12]
 8006362:	60b9      	str	r1, [r7, #8]
 8006364:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006366:	e033      	b.n	80063d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	68b9      	ldr	r1, [r7, #8]
 800636c:	68f8      	ldr	r0, [r7, #12]
 800636e:	f000 f87f 	bl	8006470 <I2C_IsErrorOccurred>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d001      	beq.n	800637c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e031      	b.n	80063e0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006382:	d025      	beq.n	80063d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006384:	f7fc fe8a 	bl	800309c <HAL_GetTick>
 8006388:	4602      	mov	r2, r0
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	1ad3      	subs	r3, r2, r3
 800638e:	68ba      	ldr	r2, [r7, #8]
 8006390:	429a      	cmp	r2, r3
 8006392:	d302      	bcc.n	800639a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d11a      	bne.n	80063d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	699b      	ldr	r3, [r3, #24]
 80063a0:	f003 0302 	and.w	r3, r3, #2
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d013      	beq.n	80063d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ac:	f043 0220 	orr.w	r2, r3, #32
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2220      	movs	r2, #32
 80063b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e007      	b.n	80063e0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	699b      	ldr	r3, [r3, #24]
 80063d6:	f003 0302 	and.w	r3, r3, #2
 80063da:	2b02      	cmp	r3, #2
 80063dc:	d1c4      	bne.n	8006368 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063f4:	e02f      	b.n	8006456 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	68b9      	ldr	r1, [r7, #8]
 80063fa:	68f8      	ldr	r0, [r7, #12]
 80063fc:	f000 f838 	bl	8006470 <I2C_IsErrorOccurred>
 8006400:	4603      	mov	r3, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d001      	beq.n	800640a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e02d      	b.n	8006466 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800640a:	f7fc fe47 	bl	800309c <HAL_GetTick>
 800640e:	4602      	mov	r2, r0
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	68ba      	ldr	r2, [r7, #8]
 8006416:	429a      	cmp	r2, r3
 8006418:	d302      	bcc.n	8006420 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d11a      	bne.n	8006456 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	f003 0320 	and.w	r3, r3, #32
 800642a:	2b20      	cmp	r3, #32
 800642c:	d013      	beq.n	8006456 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006432:	f043 0220 	orr.w	r2, r3, #32
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2220      	movs	r2, #32
 800643e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e007      	b.n	8006466 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	f003 0320 	and.w	r3, r3, #32
 8006460:	2b20      	cmp	r3, #32
 8006462:	d1c8      	bne.n	80063f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3710      	adds	r7, #16
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
	...

08006470 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b08a      	sub	sp, #40	@ 0x28
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800647c:	2300      	movs	r3, #0
 800647e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800648a:	2300      	movs	r3, #0
 800648c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	f003 0310 	and.w	r3, r3, #16
 8006498:	2b00      	cmp	r3, #0
 800649a:	d068      	beq.n	800656e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2210      	movs	r2, #16
 80064a2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80064a4:	e049      	b.n	800653a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064ac:	d045      	beq.n	800653a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80064ae:	f7fc fdf5 	bl	800309c <HAL_GetTick>
 80064b2:	4602      	mov	r2, r0
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	1ad3      	subs	r3, r2, r3
 80064b8:	68ba      	ldr	r2, [r7, #8]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d302      	bcc.n	80064c4 <I2C_IsErrorOccurred+0x54>
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d13a      	bne.n	800653a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064ce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80064d6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064e6:	d121      	bne.n	800652c <I2C_IsErrorOccurred+0xbc>
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80064ee:	d01d      	beq.n	800652c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80064f0:	7cfb      	ldrb	r3, [r7, #19]
 80064f2:	2b20      	cmp	r3, #32
 80064f4:	d01a      	beq.n	800652c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	685a      	ldr	r2, [r3, #4]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006504:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006506:	f7fc fdc9 	bl	800309c <HAL_GetTick>
 800650a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800650c:	e00e      	b.n	800652c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800650e:	f7fc fdc5 	bl	800309c <HAL_GetTick>
 8006512:	4602      	mov	r2, r0
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	2b19      	cmp	r3, #25
 800651a:	d907      	bls.n	800652c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800651c:	6a3b      	ldr	r3, [r7, #32]
 800651e:	f043 0320 	orr.w	r3, r3, #32
 8006522:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800652a:	e006      	b.n	800653a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	699b      	ldr	r3, [r3, #24]
 8006532:	f003 0320 	and.w	r3, r3, #32
 8006536:	2b20      	cmp	r3, #32
 8006538:	d1e9      	bne.n	800650e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	699b      	ldr	r3, [r3, #24]
 8006540:	f003 0320 	and.w	r3, r3, #32
 8006544:	2b20      	cmp	r3, #32
 8006546:	d003      	beq.n	8006550 <I2C_IsErrorOccurred+0xe0>
 8006548:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800654c:	2b00      	cmp	r3, #0
 800654e:	d0aa      	beq.n	80064a6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006550:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006554:	2b00      	cmp	r3, #0
 8006556:	d103      	bne.n	8006560 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	2220      	movs	r2, #32
 800655e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006560:	6a3b      	ldr	r3, [r7, #32]
 8006562:	f043 0304 	orr.w	r3, r3, #4
 8006566:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00b      	beq.n	8006598 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006580:	6a3b      	ldr	r3, [r7, #32]
 8006582:	f043 0301 	orr.w	r3, r3, #1
 8006586:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006590:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00b      	beq.n	80065ba <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80065a2:	6a3b      	ldr	r3, [r7, #32]
 80065a4:	f043 0308 	orr.w	r3, r3, #8
 80065a8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80065b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00b      	beq.n	80065dc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80065c4:	6a3b      	ldr	r3, [r7, #32]
 80065c6:	f043 0302 	orr.w	r3, r3, #2
 80065ca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80065d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80065dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d01c      	beq.n	800661e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80065e4:	68f8      	ldr	r0, [r7, #12]
 80065e6:	f7ff fe3b 	bl	8006260 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	6859      	ldr	r1, [r3, #4]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	4b0d      	ldr	r3, [pc, #52]	@ (800662c <I2C_IsErrorOccurred+0x1bc>)
 80065f6:	400b      	ands	r3, r1
 80065f8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065fe:	6a3b      	ldr	r3, [r7, #32]
 8006600:	431a      	orrs	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2220      	movs	r2, #32
 800660a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800661e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006622:	4618      	mov	r0, r3
 8006624:	3728      	adds	r7, #40	@ 0x28
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	fe00e800 	.word	0xfe00e800

08006630 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006630:	b480      	push	{r7}
 8006632:	b087      	sub	sp, #28
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	607b      	str	r3, [r7, #4]
 800663a:	460b      	mov	r3, r1
 800663c:	817b      	strh	r3, [r7, #10]
 800663e:	4613      	mov	r3, r2
 8006640:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006642:	897b      	ldrh	r3, [r7, #10]
 8006644:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006648:	7a7b      	ldrb	r3, [r7, #9]
 800664a:	041b      	lsls	r3, r3, #16
 800664c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006650:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006656:	6a3b      	ldr	r3, [r7, #32]
 8006658:	4313      	orrs	r3, r2
 800665a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800665e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	685a      	ldr	r2, [r3, #4]
 8006666:	6a3b      	ldr	r3, [r7, #32]
 8006668:	0d5b      	lsrs	r3, r3, #21
 800666a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800666e:	4b08      	ldr	r3, [pc, #32]	@ (8006690 <I2C_TransferConfig+0x60>)
 8006670:	430b      	orrs	r3, r1
 8006672:	43db      	mvns	r3, r3
 8006674:	ea02 0103 	and.w	r1, r2, r3
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	430a      	orrs	r2, r1
 8006680:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006682:	bf00      	nop
 8006684:	371c      	adds	r7, #28
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	03ff63ff 	.word	0x03ff63ff

08006694 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	2b20      	cmp	r3, #32
 80066a8:	d138      	bne.n	800671c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d101      	bne.n	80066b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80066b4:	2302      	movs	r3, #2
 80066b6:	e032      	b.n	800671e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2224      	movs	r2, #36	@ 0x24
 80066c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f022 0201 	bic.w	r2, r2, #1
 80066d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80066e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	6819      	ldr	r1, [r3, #0]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	683a      	ldr	r2, [r7, #0]
 80066f4:	430a      	orrs	r2, r1
 80066f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f042 0201 	orr.w	r2, r2, #1
 8006706:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2220      	movs	r2, #32
 800670c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006718:	2300      	movs	r3, #0
 800671a:	e000      	b.n	800671e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800671c:	2302      	movs	r3, #2
  }
}
 800671e:	4618      	mov	r0, r3
 8006720:	370c      	adds	r7, #12
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr

0800672a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800672a:	b480      	push	{r7}
 800672c:	b085      	sub	sp, #20
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
 8006732:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800673a:	b2db      	uxtb	r3, r3
 800673c:	2b20      	cmp	r3, #32
 800673e:	d139      	bne.n	80067b4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006746:	2b01      	cmp	r3, #1
 8006748:	d101      	bne.n	800674e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800674a:	2302      	movs	r3, #2
 800674c:	e033      	b.n	80067b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2201      	movs	r2, #1
 8006752:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2224      	movs	r2, #36	@ 0x24
 800675a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f022 0201 	bic.w	r2, r2, #1
 800676c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800677c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	021b      	lsls	r3, r3, #8
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	4313      	orrs	r3, r2
 8006786:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f042 0201 	orr.w	r2, r2, #1
 800679e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2220      	movs	r2, #32
 80067a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80067b0:	2300      	movs	r3, #0
 80067b2:	e000      	b.n	80067b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80067b4:	2302      	movs	r3, #2
  }
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3714      	adds	r7, #20
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr
	...

080067c4 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b086      	sub	sp, #24
 80067c8:	af02      	add	r7, sp, #8
 80067ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067cc:	2300      	movs	r3, #0
 80067ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80067d0:	f7fc fc64 	bl	800309c <HAL_GetTick>
 80067d4:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d102      	bne.n	80067e2 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	73fb      	strb	r3, [r7, #15]
 80067e0:	e092      	b.n	8006908 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f040 808b 	bne.w	8006908 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f7fc f8a0 	bl	8002938 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80067f8:	f241 3188 	movw	r1, #5000	@ 0x1388
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 f88b 	bl	8006918 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	689a      	ldr	r2, [r3, #8]
 8006808:	4b42      	ldr	r3, [pc, #264]	@ (8006914 <HAL_OSPI_Init+0x150>)
 800680a:	4013      	ands	r3, r2
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	68d1      	ldr	r1, [r2, #12]
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	6912      	ldr	r2, [r2, #16]
 8006814:	3a01      	subs	r2, #1
 8006816:	0412      	lsls	r2, r2, #16
 8006818:	4311      	orrs	r1, r2
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	6952      	ldr	r2, [r2, #20]
 800681e:	3a01      	subs	r2, #1
 8006820:	0212      	lsls	r2, r2, #8
 8006822:	4311      	orrs	r1, r2
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006828:	4311      	orrs	r1, r2
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	69d2      	ldr	r2, [r2, #28]
 800682e:	4311      	orrs	r1, r2
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	6812      	ldr	r2, [r2, #0]
 8006834:	430b      	orrs	r3, r1
 8006836:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	0412      	lsls	r2, r2, #16
 8006842:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	3b01      	subs	r3, #1
 8006854:	021a      	lsls	r2, r3, #8
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	430a      	orrs	r2, r1
 800685c:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006862:	9300      	str	r3, [sp, #0]
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	2200      	movs	r2, #0
 8006868:	2120      	movs	r1, #32
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 fb9c 	bl	8006fa8 <OSPI_WaitFlagStateUntilTimeout>
 8006870:	4603      	mov	r3, r0
 8006872:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006874:	7bfb      	ldrb	r3, [r7, #15]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d146      	bne.n	8006908 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a1b      	ldr	r3, [r3, #32]
 8006888:	1e5a      	subs	r2, r3, #1
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	430a      	orrs	r2, r1
 8006890:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	689a      	ldr	r2, [r3, #8]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	430a      	orrs	r2, r1
 80068a6:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80068b0:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068bc:	431a      	orrs	r2, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	430a      	orrs	r2, r1
 80068c4:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f042 0201 	orr.w	r2, r2, #1
 80068d6:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	699b      	ldr	r3, [r3, #24]
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d107      	bne.n	80068f0 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	689a      	ldr	r2, [r3, #8]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f042 0202 	orr.w	r2, r2, #2
 80068ee:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80068f8:	d103      	bne.n	8006902 <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2201      	movs	r2, #1
 80068fe:	645a      	str	r2, [r3, #68]	@ 0x44
 8006900:	e002      	b.n	8006908 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2202      	movs	r2, #2
 8006906:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8006908:	7bfb      	ldrb	r3, [r7, #15]
}
 800690a:	4618      	mov	r0, r3
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	f8e0f8f4 	.word	0xf8e0f8f4

08006918 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	683a      	ldr	r2, [r7, #0]
 8006926:	64da      	str	r2, [r3, #76]	@ 0x4c
  return HAL_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	370c      	adds	r7, #12
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
	...

08006938 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b092      	sub	sp, #72	@ 0x48
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006944:	2300      	movs	r3, #0
 8006946:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 800694a:	2300      	movs	r3, #0
 800694c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a08      	ldr	r2, [pc, #32]	@ (8006978 <HAL_OSPIM_Config+0x40>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d105      	bne.n	8006966 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800695a:	2300      	movs	r3, #0
 800695c:	643b      	str	r3, [r7, #64]	@ 0x40
    other_instance = 1U;
 800695e:	2301      	movs	r3, #1
 8006960:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8006964:	e004      	b.n	8006970 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8006966:	2301      	movs	r3, #1
 8006968:	643b      	str	r3, [r7, #64]	@ 0x40
    other_instance = 0U;
 800696a:	2300      	movs	r3, #0
 800696c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8006970:	2300      	movs	r3, #0
 8006972:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8006976:	e01f      	b.n	80069b8 <HAL_OSPIM_Config+0x80>
 8006978:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 800697c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006980:	3301      	adds	r3, #1
 8006982:	b2d8      	uxtb	r0, r3
 8006984:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8006988:	f107 0114 	add.w	r1, r7, #20
 800698c:	4613      	mov	r3, r2
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	4413      	add	r3, r2
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	440b      	add	r3, r1
 8006996:	4619      	mov	r1, r3
 8006998:	f000 fb3e 	bl	8007018 <OSPIM_GetConfig>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d005      	beq.n	80069ae <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2208      	movs	r2, #8
 80069ac:	649a      	str	r2, [r3, #72]	@ 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80069ae:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80069b2:	3301      	adds	r3, #1
 80069b4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80069b8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d9dd      	bls.n	800697c <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 80069c0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	f040 82e3 	bne.w	8006f90 <HAL_OSPIM_Config+0x658>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 80069ca:	4bc5      	ldr	r3, [pc, #788]	@ (8006ce0 <HAL_OSPIM_Config+0x3a8>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0301 	and.w	r3, r3, #1
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00b      	beq.n	80069ee <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80069d6:	4bc2      	ldr	r3, [pc, #776]	@ (8006ce0 <HAL_OSPIM_Config+0x3a8>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4ac1      	ldr	r2, [pc, #772]	@ (8006ce0 <HAL_OSPIM_Config+0x3a8>)
 80069dc:	f023 0301 	bic.w	r3, r3, #1
 80069e0:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 80069e2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80069e6:	f043 0301 	orr.w	r3, r3, #1
 80069ea:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80069ee:	4bbd      	ldr	r3, [pc, #756]	@ (8006ce4 <HAL_OSPIM_Config+0x3ac>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0301 	and.w	r3, r3, #1
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00b      	beq.n	8006a12 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80069fa:	4bba      	ldr	r3, [pc, #744]	@ (8006ce4 <HAL_OSPIM_Config+0x3ac>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4ab9      	ldr	r2, [pc, #740]	@ (8006ce4 <HAL_OSPIM_Config+0x3ac>)
 8006a00:	f023 0301 	bic.w	r3, r3, #1
 8006a04:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8006a06:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8006a0a:	f043 0302 	orr.w	r3, r3, #2
 8006a0e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8006a12:	49b5      	ldr	r1, [pc, #724]	@ (8006ce8 <HAL_OSPIM_Config+0x3b0>)
 8006a14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a16:	4613      	mov	r3, r2
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	4413      	add	r3, r2
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	3348      	adds	r3, #72	@ 0x48
 8006a20:	443b      	add	r3, r7
 8006a22:	3b2c      	subs	r3, #44	@ 0x2c
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	3b01      	subs	r3, #1
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	440b      	add	r3, r1
 8006a2c:	6859      	ldr	r1, [r3, #4]
 8006a2e:	48ae      	ldr	r0, [pc, #696]	@ (8006ce8 <HAL_OSPIM_Config+0x3b0>)
 8006a30:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a32:	4613      	mov	r3, r2
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	4413      	add	r3, r2
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	3348      	adds	r3, #72	@ 0x48
 8006a3c:	443b      	add	r3, r7
 8006a3e:	3b2c      	subs	r3, #44	@ 0x2c
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	3b01      	subs	r3, #1
 8006a44:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	4403      	add	r3, r0
 8006a4c:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8006a4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a50:	4613      	mov	r3, r2
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	4413      	add	r3, r2
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	3348      	adds	r3, #72	@ 0x48
 8006a5a:	443b      	add	r3, r7
 8006a5c:	3b34      	subs	r3, #52	@ 0x34
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f000 80a1 	beq.w	8006ba8 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8006a66:	49a0      	ldr	r1, [pc, #640]	@ (8006ce8 <HAL_OSPIM_Config+0x3b0>)
 8006a68:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	4413      	add	r3, r2
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	3348      	adds	r3, #72	@ 0x48
 8006a74:	443b      	add	r3, r7
 8006a76:	3b34      	subs	r3, #52	@ 0x34
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	440b      	add	r3, r1
 8006a80:	6859      	ldr	r1, [r3, #4]
 8006a82:	4899      	ldr	r0, [pc, #612]	@ (8006ce8 <HAL_OSPIM_Config+0x3b0>)
 8006a84:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a86:	4613      	mov	r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4413      	add	r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	3348      	adds	r3, #72	@ 0x48
 8006a90:	443b      	add	r3, r7
 8006a92:	3b34      	subs	r3, #52	@ 0x34
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	3b01      	subs	r3, #1
 8006a98:	f021 0201 	bic.w	r2, r1, #1
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	4403      	add	r3, r0
 8006aa0:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8006aa2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006aa4:	4613      	mov	r3, r2
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	4413      	add	r3, r2
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	3348      	adds	r3, #72	@ 0x48
 8006aae:	443b      	add	r3, r7
 8006ab0:	3b30      	subs	r3, #48	@ 0x30
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d01d      	beq.n	8006af4 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8006ab8:	498b      	ldr	r1, [pc, #556]	@ (8006ce8 <HAL_OSPIM_Config+0x3b0>)
 8006aba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006abc:	4613      	mov	r3, r2
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	4413      	add	r3, r2
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	3348      	adds	r3, #72	@ 0x48
 8006ac6:	443b      	add	r3, r7
 8006ac8:	3b30      	subs	r3, #48	@ 0x30
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	3b01      	subs	r3, #1
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	440b      	add	r3, r1
 8006ad2:	6859      	ldr	r1, [r3, #4]
 8006ad4:	4884      	ldr	r0, [pc, #528]	@ (8006ce8 <HAL_OSPIM_Config+0x3b0>)
 8006ad6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ad8:	4613      	mov	r3, r2
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	4413      	add	r3, r2
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	3348      	adds	r3, #72	@ 0x48
 8006ae2:	443b      	add	r3, r7
 8006ae4:	3b30      	subs	r3, #48	@ 0x30
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	f021 0210 	bic.w	r2, r1, #16
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	4403      	add	r3, r0
 8006af2:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006af4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006af6:	4613      	mov	r3, r2
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	4413      	add	r3, r2
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	3348      	adds	r3, #72	@ 0x48
 8006b00:	443b      	add	r3, r7
 8006b02:	3b28      	subs	r3, #40	@ 0x28
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d021      	beq.n	8006b4e <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8006b0a:	4977      	ldr	r1, [pc, #476]	@ (8006ce8 <HAL_OSPIM_Config+0x3b0>)
 8006b0c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b0e:	4613      	mov	r3, r2
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	4413      	add	r3, r2
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	3348      	adds	r3, #72	@ 0x48
 8006b18:	443b      	add	r3, r7
 8006b1a:	3b28      	subs	r3, #40	@ 0x28
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	f003 0301 	and.w	r3, r3, #1
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	440b      	add	r3, r1
 8006b28:	6859      	ldr	r1, [r3, #4]
 8006b2a:	486f      	ldr	r0, [pc, #444]	@ (8006ce8 <HAL_OSPIM_Config+0x3b0>)
 8006b2c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b2e:	4613      	mov	r3, r2
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	4413      	add	r3, r2
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	3348      	adds	r3, #72	@ 0x48
 8006b38:	443b      	add	r3, r7
 8006b3a:	3b28      	subs	r3, #40	@ 0x28
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	3b01      	subs	r3, #1
 8006b40:	f003 0301 	and.w	r3, r3, #1
 8006b44:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	4403      	add	r3, r0
 8006b4c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006b4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b50:	4613      	mov	r3, r2
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	4413      	add	r3, r2
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	3348      	adds	r3, #72	@ 0x48
 8006b5a:	443b      	add	r3, r7
 8006b5c:	3b24      	subs	r3, #36	@ 0x24
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d021      	beq.n	8006ba8 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8006b64:	4960      	ldr	r1, [pc, #384]	@ (8006ce8 <HAL_OSPIM_Config+0x3b0>)
 8006b66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b68:	4613      	mov	r3, r2
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	4413      	add	r3, r2
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	3348      	adds	r3, #72	@ 0x48
 8006b72:	443b      	add	r3, r7
 8006b74:	3b24      	subs	r3, #36	@ 0x24
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	3b01      	subs	r3, #1
 8006b7a:	f003 0301 	and.w	r3, r3, #1
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	440b      	add	r3, r1
 8006b82:	6859      	ldr	r1, [r3, #4]
 8006b84:	4858      	ldr	r0, [pc, #352]	@ (8006ce8 <HAL_OSPIM_Config+0x3b0>)
 8006b86:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b88:	4613      	mov	r3, r2
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	4413      	add	r3, r2
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	3348      	adds	r3, #72	@ 0x48
 8006b92:	443b      	add	r3, r7
 8006b94:	3b24      	subs	r3, #36	@ 0x24
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	f003 0301 	and.w	r3, r3, #1
 8006b9e:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	4403      	add	r3, r0
 8006ba6:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	6819      	ldr	r1, [r3, #0]
 8006bac:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	4413      	add	r3, r2
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	3348      	adds	r3, #72	@ 0x48
 8006bba:	443b      	add	r3, r7
 8006bbc:	3b34      	subs	r3, #52	@ 0x34
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4299      	cmp	r1, r3
 8006bc2:	d03c      	beq.n	8006c3e <HAL_OSPIM_Config+0x306>
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	6899      	ldr	r1, [r3, #8]
 8006bc8:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8006bcc:	4613      	mov	r3, r2
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	4413      	add	r3, r2
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	3348      	adds	r3, #72	@ 0x48
 8006bd6:	443b      	add	r3, r7
 8006bd8:	3b2c      	subs	r3, #44	@ 0x2c
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4299      	cmp	r1, r3
 8006bde:	d02e      	beq.n	8006c3e <HAL_OSPIM_Config+0x306>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	6859      	ldr	r1, [r3, #4]
 8006be4:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8006be8:	4613      	mov	r3, r2
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	4413      	add	r3, r2
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	3348      	adds	r3, #72	@ 0x48
 8006bf2:	443b      	add	r3, r7
 8006bf4:	3b30      	subs	r3, #48	@ 0x30
 8006bf6:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 8006bf8:	4299      	cmp	r1, r3
 8006bfa:	d103      	bne.n	8006c04 <HAL_OSPIM_Config+0x2cc>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d11c      	bne.n	8006c3e <HAL_OSPIM_Config+0x306>
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	68d9      	ldr	r1, [r3, #12]
 8006c08:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	4413      	add	r3, r2
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	3348      	adds	r3, #72	@ 0x48
 8006c16:	443b      	add	r3, r7
 8006c18:	3b28      	subs	r3, #40	@ 0x28
 8006c1a:	681b      	ldr	r3, [r3, #0]
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8006c1c:	4299      	cmp	r1, r3
 8006c1e:	d00e      	beq.n	8006c3e <HAL_OSPIM_Config+0x306>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	6919      	ldr	r1, [r3, #16]
 8006c24:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8006c28:	4613      	mov	r3, r2
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	4413      	add	r3, r2
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	3348      	adds	r3, #72	@ 0x48
 8006c32:	443b      	add	r3, r7
 8006c34:	3b24      	subs	r3, #36	@ 0x24
 8006c36:	681b      	ldr	r3, [r3, #0]
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006c38:	4299      	cmp	r1, r3
 8006c3a:	f040 80d4 	bne.w	8006de6 <HAL_OSPIM_Config+0x4ae>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8006c3e:	492a      	ldr	r1, [pc, #168]	@ (8006ce8 <HAL_OSPIM_Config+0x3b0>)
 8006c40:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8006c44:	4613      	mov	r3, r2
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	4413      	add	r3, r2
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	3348      	adds	r3, #72	@ 0x48
 8006c4e:	443b      	add	r3, r7
 8006c50:	3b34      	subs	r3, #52	@ 0x34
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	3b01      	subs	r3, #1
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	440b      	add	r3, r1
 8006c5a:	6859      	ldr	r1, [r3, #4]
 8006c5c:	4822      	ldr	r0, [pc, #136]	@ (8006ce8 <HAL_OSPIM_Config+0x3b0>)
 8006c5e:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8006c62:	4613      	mov	r3, r2
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	4413      	add	r3, r2
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	3348      	adds	r3, #72	@ 0x48
 8006c6c:	443b      	add	r3, r7
 8006c6e:	3b34      	subs	r3, #52	@ 0x34
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	3b01      	subs	r3, #1
 8006c74:	f021 0201 	bic.w	r2, r1, #1
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	4403      	add	r3, r0
 8006c7c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8006c7e:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8006c82:	4613      	mov	r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	4413      	add	r3, r2
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	3348      	adds	r3, #72	@ 0x48
 8006c8c:	443b      	add	r3, r7
 8006c8e:	3b30      	subs	r3, #48	@ 0x30
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d01f      	beq.n	8006cd6 <HAL_OSPIM_Config+0x39e>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8006c96:	4914      	ldr	r1, [pc, #80]	@ (8006ce8 <HAL_OSPIM_Config+0x3b0>)
 8006c98:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8006c9c:	4613      	mov	r3, r2
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	4413      	add	r3, r2
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	3348      	adds	r3, #72	@ 0x48
 8006ca6:	443b      	add	r3, r7
 8006ca8:	3b30      	subs	r3, #48	@ 0x30
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	3b01      	subs	r3, #1
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	440b      	add	r3, r1
 8006cb2:	6859      	ldr	r1, [r3, #4]
 8006cb4:	480c      	ldr	r0, [pc, #48]	@ (8006ce8 <HAL_OSPIM_Config+0x3b0>)
 8006cb6:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8006cba:	4613      	mov	r3, r2
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	4413      	add	r3, r2
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	3348      	adds	r3, #72	@ 0x48
 8006cc4:	443b      	add	r3, r7
 8006cc6:	3b30      	subs	r3, #48	@ 0x30
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	3b01      	subs	r3, #1
 8006ccc:	f021 0210 	bic.w	r2, r1, #16
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	4403      	add	r3, r0
 8006cd4:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8006cd6:	4904      	ldr	r1, [pc, #16]	@ (8006ce8 <HAL_OSPIM_Config+0x3b0>)
 8006cd8:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8006cdc:	e006      	b.n	8006cec <HAL_OSPIM_Config+0x3b4>
 8006cde:	bf00      	nop
 8006ce0:	a0001000 	.word	0xa0001000
 8006ce4:	a0001400 	.word	0xa0001400
 8006ce8:	50061c00 	.word	0x50061c00
 8006cec:	4613      	mov	r3, r2
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	4413      	add	r3, r2
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	3348      	adds	r3, #72	@ 0x48
 8006cf6:	443b      	add	r3, r7
 8006cf8:	3b2c      	subs	r3, #44	@ 0x2c
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	440b      	add	r3, r1
 8006d02:	6859      	ldr	r1, [r3, #4]
 8006d04:	48a5      	ldr	r0, [pc, #660]	@ (8006f9c <HAL_OSPIM_Config+0x664>)
 8006d06:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	4413      	add	r3, r2
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	3348      	adds	r3, #72	@ 0x48
 8006d14:	443b      	add	r3, r7
 8006d16:	3b2c      	subs	r3, #44	@ 0x2c
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	4403      	add	r3, r0
 8006d24:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006d26:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	4413      	add	r3, r2
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	3348      	adds	r3, #72	@ 0x48
 8006d34:	443b      	add	r3, r7
 8006d36:	3b28      	subs	r3, #40	@ 0x28
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d023      	beq.n	8006d86 <HAL_OSPIM_Config+0x44e>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006d3e:	4997      	ldr	r1, [pc, #604]	@ (8006f9c <HAL_OSPIM_Config+0x664>)
 8006d40:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8006d44:	4613      	mov	r3, r2
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	4413      	add	r3, r2
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	3348      	adds	r3, #72	@ 0x48
 8006d4e:	443b      	add	r3, r7
 8006d50:	3b28      	subs	r3, #40	@ 0x28
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	3b01      	subs	r3, #1
 8006d56:	f003 0301 	and.w	r3, r3, #1
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	440b      	add	r3, r1
 8006d5e:	6859      	ldr	r1, [r3, #4]
 8006d60:	488e      	ldr	r0, [pc, #568]	@ (8006f9c <HAL_OSPIM_Config+0x664>)
 8006d62:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8006d66:	4613      	mov	r3, r2
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	4413      	add	r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	3348      	adds	r3, #72	@ 0x48
 8006d70:	443b      	add	r3, r7
 8006d72:	3b28      	subs	r3, #40	@ 0x28
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	3b01      	subs	r3, #1
 8006d78:	f003 0301 	and.w	r3, r3, #1
 8006d7c:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	4403      	add	r3, r0
 8006d84:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006d86:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	4413      	add	r3, r2
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	3348      	adds	r3, #72	@ 0x48
 8006d94:	443b      	add	r3, r7
 8006d96:	3b24      	subs	r3, #36	@ 0x24
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d023      	beq.n	8006de6 <HAL_OSPIM_Config+0x4ae>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006d9e:	497f      	ldr	r1, [pc, #508]	@ (8006f9c <HAL_OSPIM_Config+0x664>)
 8006da0:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8006da4:	4613      	mov	r3, r2
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	4413      	add	r3, r2
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	3348      	adds	r3, #72	@ 0x48
 8006dae:	443b      	add	r3, r7
 8006db0:	3b24      	subs	r3, #36	@ 0x24
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	3b01      	subs	r3, #1
 8006db6:	f003 0301 	and.w	r3, r3, #1
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	440b      	add	r3, r1
 8006dbe:	6859      	ldr	r1, [r3, #4]
 8006dc0:	4876      	ldr	r0, [pc, #472]	@ (8006f9c <HAL_OSPIM_Config+0x664>)
 8006dc2:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	4413      	add	r3, r2
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	3348      	adds	r3, #72	@ 0x48
 8006dd0:	443b      	add	r3, r7
 8006dd2:	3b24      	subs	r3, #36	@ 0x24
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	f003 0301 	and.w	r3, r3, #1
 8006ddc:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	4403      	add	r3, r0
 8006de4:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8006de6:	4a6d      	ldr	r2, [pc, #436]	@ (8006f9c <HAL_OSPIM_Config+0x664>)
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	3b01      	subs	r3, #1
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	4413      	add	r3, r2
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006df8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dfa:	025b      	lsls	r3, r3, #9
 8006dfc:	431a      	orrs	r2, r3
 8006dfe:	4967      	ldr	r1, [pc, #412]	@ (8006f9c <HAL_OSPIM_Config+0x664>)
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	3b01      	subs	r3, #1
 8006e06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	440b      	add	r3, r1
 8006e0e:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8006e10:	4a62      	ldr	r2, [pc, #392]	@ (8006f9c <HAL_OSPIM_Config+0x664>)
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	3b01      	subs	r3, #1
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	4413      	add	r3, r2
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	f023 0203 	bic.w	r2, r3, #3
 8006e22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e24:	005b      	lsls	r3, r3, #1
 8006e26:	431a      	orrs	r2, r3
 8006e28:	495c      	ldr	r1, [pc, #368]	@ (8006f9c <HAL_OSPIM_Config+0x664>)
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	3b01      	subs	r3, #1
 8006e30:	f042 0201 	orr.w	r2, r2, #1
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	440b      	add	r3, r1
 8006e38:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d014      	beq.n	8006e6c <HAL_OSPIM_Config+0x534>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8006e42:	4a56      	ldr	r2, [pc, #344]	@ (8006f9c <HAL_OSPIM_Config+0x664>)
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	4413      	add	r3, r2
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006e54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e56:	015b      	lsls	r3, r3, #5
 8006e58:	431a      	orrs	r2, r3
 8006e5a:	4950      	ldr	r1, [pc, #320]	@ (8006f9c <HAL_OSPIM_Config+0x664>)
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	3b01      	subs	r3, #1
 8006e62:	f042 0210 	orr.w	r2, r2, #16
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	440b      	add	r3, r1
 8006e6a:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d019      	beq.n	8006eac <HAL_OSPIM_Config+0x574>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006e78:	4a48      	ldr	r2, [pc, #288]	@ (8006f9c <HAL_OSPIM_Config+0x664>)
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	3b01      	subs	r3, #1
 8006e80:	f003 0301 	and.w	r3, r3, #1
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	4413      	add	r3, r2
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8006e8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e90:	049b      	lsls	r3, r3, #18
 8006e92:	431a      	orrs	r2, r3
 8006e94:	4941      	ldr	r1, [pc, #260]	@ (8006f9c <HAL_OSPIM_Config+0x664>)
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	f003 0301 	and.w	r3, r3, #1
 8006ea0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	440b      	add	r3, r1
 8006ea8:	605a      	str	r2, [r3, #4]
 8006eaa:	e01c      	b.n	8006ee6 <HAL_OSPIM_Config+0x5ae>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d018      	beq.n	8006ee6 <HAL_OSPIM_Config+0x5ae>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006eb4:	4a39      	ldr	r2, [pc, #228]	@ (8006f9c <HAL_OSPIM_Config+0x664>)
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	f003 0301 	and.w	r3, r3, #1
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	4413      	add	r3, r2
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8006eca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ecc:	069b      	lsls	r3, r3, #26
 8006ece:	431a      	orrs	r2, r3
 8006ed0:	4932      	ldr	r1, [pc, #200]	@ (8006f9c <HAL_OSPIM_Config+0x664>)
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	f003 0301 	and.w	r3, r3, #1
 8006edc:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	440b      	add	r3, r1
 8006ee4:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d019      	beq.n	8006f26 <HAL_OSPIM_Config+0x5ee>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006ef2:	4a2a      	ldr	r2, [pc, #168]	@ (8006f9c <HAL_OSPIM_Config+0x664>)
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	f003 0301 	and.w	r3, r3, #1
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	4413      	add	r3, r2
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8006f08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f0a:	049b      	lsls	r3, r3, #18
 8006f0c:	431a      	orrs	r2, r3
 8006f0e:	4923      	ldr	r1, [pc, #140]	@ (8006f9c <HAL_OSPIM_Config+0x664>)
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	3b01      	subs	r3, #1
 8006f16:	f003 0301 	and.w	r3, r3, #1
 8006f1a:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	440b      	add	r3, r1
 8006f22:	605a      	str	r2, [r3, #4]
 8006f24:	e01c      	b.n	8006f60 <HAL_OSPIM_Config+0x628>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d018      	beq.n	8006f60 <HAL_OSPIM_Config+0x628>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006f2e:	4a1b      	ldr	r2, [pc, #108]	@ (8006f9c <HAL_OSPIM_Config+0x664>)
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	691b      	ldr	r3, [r3, #16]
 8006f34:	3b01      	subs	r3, #1
 8006f36:	f003 0301 	and.w	r3, r3, #1
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	4413      	add	r3, r2
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8006f44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f46:	069b      	lsls	r3, r3, #26
 8006f48:	431a      	orrs	r2, r3
 8006f4a:	4914      	ldr	r1, [pc, #80]	@ (8006f9c <HAL_OSPIM_Config+0x664>)
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	3b01      	subs	r3, #1
 8006f52:	f003 0301 	and.w	r3, r3, #1
 8006f56:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	440b      	add	r3, r1
 8006f5e:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8006f60:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8006f64:	f003 0301 	and.w	r3, r3, #1
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d005      	beq.n	8006f78 <HAL_OSPIM_Config+0x640>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8006f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8006fa0 <HAL_OSPIM_Config+0x668>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a0b      	ldr	r2, [pc, #44]	@ (8006fa0 <HAL_OSPIM_Config+0x668>)
 8006f72:	f043 0301 	orr.w	r3, r3, #1
 8006f76:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8006f78:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8006f7c:	f003 0302 	and.w	r3, r3, #2
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d005      	beq.n	8006f90 <HAL_OSPIM_Config+0x658>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8006f84:	4b07      	ldr	r3, [pc, #28]	@ (8006fa4 <HAL_OSPIM_Config+0x66c>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a06      	ldr	r2, [pc, #24]	@ (8006fa4 <HAL_OSPIM_Config+0x66c>)
 8006f8a:	f043 0301 	orr.w	r3, r3, #1
 8006f8e:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8006f90:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3748      	adds	r7, #72	@ 0x48
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	50061c00 	.word	0x50061c00
 8006fa0:	a0001000 	.word	0xa0001000
 8006fa4:	a0001400 	.word	0xa0001400

08006fa8 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	603b      	str	r3, [r7, #0]
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8006fb8:	e01a      	b.n	8006ff0 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006fc0:	d016      	beq.n	8006ff0 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fc2:	f7fc f86b 	bl	800309c <HAL_GetTick>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	1ad3      	subs	r3, r2, r3
 8006fcc:	69ba      	ldr	r2, [r7, #24]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d302      	bcc.n	8006fd8 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d10b      	bne.n	8006ff0 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006fde:	645a      	str	r2, [r3, #68]	@ 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fe4:	f043 0201 	orr.w	r2, r3, #1
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	649a      	str	r2, [r3, #72]	@ 0x48

        return HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	e00e      	b.n	800700e <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	6a1a      	ldr	r2, [r3, #32]
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	bf14      	ite	ne
 8006ffe:	2301      	movne	r3, #1
 8007000:	2300      	moveq	r3, #0
 8007002:	b2db      	uxtb	r3, r3
 8007004:	461a      	mov	r2, r3
 8007006:	79fb      	ldrb	r3, [r7, #7]
 8007008:	429a      	cmp	r2, r3
 800700a:	d1d6      	bne.n	8006fba <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
	...

08007018 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8007018:	b480      	push	{r7}
 800701a:	b087      	sub	sp, #28
 800701c:	af00      	add	r7, sp, #0
 800701e:	4603      	mov	r3, r0
 8007020:	6039      	str	r1, [r7, #0]
 8007022:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8007024:	2300      	movs	r3, #0
 8007026:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8007028:	2300      	movs	r3, #0
 800702a:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 800702c:	79fb      	ldrb	r3, [r7, #7]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d005      	beq.n	800703e <OSPIM_GetConfig+0x26>
 8007032:	79fb      	ldrb	r3, [r7, #7]
 8007034:	2b02      	cmp	r3, #2
 8007036:	d802      	bhi.n	800703e <OSPIM_GetConfig+0x26>
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d102      	bne.n	8007044 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	75fb      	strb	r3, [r7, #23]
 8007042:	e08e      	b.n	8007162 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	2200      	movs	r2, #0
 8007048:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	2200      	movs	r2, #0
 800704e:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	2200      	movs	r2, #0
 8007054:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	2200      	movs	r2, #0
 800705a:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	2200      	movs	r2, #0
 8007060:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8007062:	79fb      	ldrb	r3, [r7, #7]
 8007064:	2b02      	cmp	r3, #2
 8007066:	d101      	bne.n	800706c <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8007068:	4b41      	ldr	r3, [pc, #260]	@ (8007170 <OSPIM_GetConfig+0x158>)
 800706a:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800706c:	2300      	movs	r3, #0
 800706e:	60fb      	str	r3, [r7, #12]
 8007070:	e074      	b.n	800715c <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8007072:	4a40      	ldr	r2, [pc, #256]	@ (8007174 <OSPIM_GetConfig+0x15c>)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	4413      	add	r3, r2
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	f003 0301 	and.w	r3, r3, #1
 8007084:	2b00      	cmp	r3, #0
 8007086:	d00a      	beq.n	800709e <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8007088:	68ba      	ldr	r2, [r7, #8]
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	4053      	eors	r3, r2
 800708e:	f003 0302 	and.w	r3, r3, #2
 8007092:	2b00      	cmp	r3, #0
 8007094:	d103      	bne.n	800709e <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	1c5a      	adds	r2, r3, #1
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	f003 0310 	and.w	r3, r3, #16
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00a      	beq.n	80070be <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 80070a8:	68ba      	ldr	r2, [r7, #8]
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	4053      	eors	r3, r2
 80070ae:	f003 0320 	and.w	r3, r3, #32
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d103      	bne.n	80070be <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	1c5a      	adds	r2, r3, #1
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d00a      	beq.n	80070de <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 80070c8:	68ba      	ldr	r2, [r7, #8]
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	4053      	eors	r3, r2
 80070ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d103      	bne.n	80070de <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	1c5a      	adds	r2, r3, #1
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d018      	beq.n	800711a <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 80070e8:	68ba      	ldr	r2, [r7, #8]
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	4053      	eors	r3, r2
 80070ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d111      	bne.n	800711a <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d106      	bne.n	800710e <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	3301      	adds	r3, #1
 8007104:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	60da      	str	r2, [r3, #12]
 800710c:	e005      	b.n	800711a <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	3301      	adds	r3, #1
 8007112:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007120:	2b00      	cmp	r3, #0
 8007122:	d018      	beq.n	8007156 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8007124:	68ba      	ldr	r2, [r7, #8]
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	4053      	eors	r3, r2
 800712a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800712e:	2b00      	cmp	r3, #0
 8007130:	d111      	bne.n	8007156 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007138:	2b00      	cmp	r3, #0
 800713a:	d106      	bne.n	800714a <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	3301      	adds	r3, #1
 8007140:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	611a      	str	r2, [r3, #16]
 8007148:	e005      	b.n	8007156 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	3301      	adds	r3, #1
 800714e:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	3301      	adds	r3, #1
 800715a:	60fb      	str	r3, [r7, #12]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2b01      	cmp	r3, #1
 8007160:	d987      	bls.n	8007072 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8007162:	7dfb      	ldrb	r3, [r7, #23]
}
 8007164:	4618      	mov	r0, r3
 8007166:	371c      	adds	r7, #28
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr
 8007170:	04040222 	.word	0x04040222
 8007174:	50061c00 	.word	0x50061c00

08007178 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007178:	b480      	push	{r7}
 800717a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800717c:	4b05      	ldr	r3, [pc, #20]	@ (8007194 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a04      	ldr	r2, [pc, #16]	@ (8007194 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007182:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007186:	6013      	str	r3, [r2, #0]
}
 8007188:	bf00      	nop
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop
 8007194:	40007000 	.word	0x40007000

08007198 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007198:	b480      	push	{r7}
 800719a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800719c:	4b0d      	ldr	r3, [pc, #52]	@ (80071d4 <HAL_PWREx_GetVoltageRange+0x3c>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80071a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071a8:	d102      	bne.n	80071b0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80071aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80071ae:	e00b      	b.n	80071c8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80071b0:	4b08      	ldr	r3, [pc, #32]	@ (80071d4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80071b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071be:	d102      	bne.n	80071c6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80071c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80071c4:	e000      	b.n	80071c8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80071c6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	40007000 	.word	0x40007000

080071d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d141      	bne.n	800726a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80071e6:	4b4b      	ldr	r3, [pc, #300]	@ (8007314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80071ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071f2:	d131      	bne.n	8007258 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80071f4:	4b47      	ldr	r3, [pc, #284]	@ (8007314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80071f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071fa:	4a46      	ldr	r2, [pc, #280]	@ (8007314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80071fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007200:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007204:	4b43      	ldr	r3, [pc, #268]	@ (8007314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800720c:	4a41      	ldr	r2, [pc, #260]	@ (8007314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800720e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007212:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8007214:	4b40      	ldr	r3, [pc, #256]	@ (8007318 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	2232      	movs	r2, #50	@ 0x32
 800721a:	fb02 f303 	mul.w	r3, r2, r3
 800721e:	4a3f      	ldr	r2, [pc, #252]	@ (800731c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007220:	fba2 2303 	umull	r2, r3, r2, r3
 8007224:	0c9b      	lsrs	r3, r3, #18
 8007226:	3301      	adds	r3, #1
 8007228:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800722a:	e002      	b.n	8007232 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	3b01      	subs	r3, #1
 8007230:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007232:	4b38      	ldr	r3, [pc, #224]	@ (8007314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007234:	695b      	ldr	r3, [r3, #20]
 8007236:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800723a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800723e:	d102      	bne.n	8007246 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d1f2      	bne.n	800722c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007246:	4b33      	ldr	r3, [pc, #204]	@ (8007314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007248:	695b      	ldr	r3, [r3, #20]
 800724a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800724e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007252:	d158      	bne.n	8007306 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007254:	2303      	movs	r3, #3
 8007256:	e057      	b.n	8007308 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007258:	4b2e      	ldr	r3, [pc, #184]	@ (8007314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800725a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800725e:	4a2d      	ldr	r2, [pc, #180]	@ (8007314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007260:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007264:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007268:	e04d      	b.n	8007306 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007270:	d141      	bne.n	80072f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007272:	4b28      	ldr	r3, [pc, #160]	@ (8007314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800727a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800727e:	d131      	bne.n	80072e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007280:	4b24      	ldr	r3, [pc, #144]	@ (8007314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007282:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007286:	4a23      	ldr	r2, [pc, #140]	@ (8007314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007288:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800728c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007290:	4b20      	ldr	r3, [pc, #128]	@ (8007314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007298:	4a1e      	ldr	r2, [pc, #120]	@ (8007314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800729a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800729e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80072a0:	4b1d      	ldr	r3, [pc, #116]	@ (8007318 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2232      	movs	r2, #50	@ 0x32
 80072a6:	fb02 f303 	mul.w	r3, r2, r3
 80072aa:	4a1c      	ldr	r2, [pc, #112]	@ (800731c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80072ac:	fba2 2303 	umull	r2, r3, r2, r3
 80072b0:	0c9b      	lsrs	r3, r3, #18
 80072b2:	3301      	adds	r3, #1
 80072b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80072b6:	e002      	b.n	80072be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	3b01      	subs	r3, #1
 80072bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80072be:	4b15      	ldr	r3, [pc, #84]	@ (8007314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072c0:	695b      	ldr	r3, [r3, #20]
 80072c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072ca:	d102      	bne.n	80072d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d1f2      	bne.n	80072b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80072d2:	4b10      	ldr	r3, [pc, #64]	@ (8007314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072d4:	695b      	ldr	r3, [r3, #20]
 80072d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072de:	d112      	bne.n	8007306 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80072e0:	2303      	movs	r3, #3
 80072e2:	e011      	b.n	8007308 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80072e4:	4b0b      	ldr	r3, [pc, #44]	@ (8007314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072ea:	4a0a      	ldr	r2, [pc, #40]	@ (8007314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80072f4:	e007      	b.n	8007306 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80072f6:	4b07      	ldr	r3, [pc, #28]	@ (8007314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80072fe:	4a05      	ldr	r2, [pc, #20]	@ (8007314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007300:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007304:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3714      	adds	r7, #20
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr
 8007314:	40007000 	.word	0x40007000
 8007318:	20000054 	.word	0x20000054
 800731c:	431bde83 	.word	0x431bde83

08007320 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b088      	sub	sp, #32
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d102      	bne.n	8007334 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	f000 bc08 	b.w	8007b44 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007334:	4b96      	ldr	r3, [pc, #600]	@ (8007590 <HAL_RCC_OscConfig+0x270>)
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	f003 030c 	and.w	r3, r3, #12
 800733c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800733e:	4b94      	ldr	r3, [pc, #592]	@ (8007590 <HAL_RCC_OscConfig+0x270>)
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	f003 0303 	and.w	r3, r3, #3
 8007346:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 0310 	and.w	r3, r3, #16
 8007350:	2b00      	cmp	r3, #0
 8007352:	f000 80e4 	beq.w	800751e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d007      	beq.n	800736c <HAL_RCC_OscConfig+0x4c>
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	2b0c      	cmp	r3, #12
 8007360:	f040 808b 	bne.w	800747a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	2b01      	cmp	r3, #1
 8007368:	f040 8087 	bne.w	800747a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800736c:	4b88      	ldr	r3, [pc, #544]	@ (8007590 <HAL_RCC_OscConfig+0x270>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f003 0302 	and.w	r3, r3, #2
 8007374:	2b00      	cmp	r3, #0
 8007376:	d005      	beq.n	8007384 <HAL_RCC_OscConfig+0x64>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	699b      	ldr	r3, [r3, #24]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d101      	bne.n	8007384 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8007380:	2301      	movs	r3, #1
 8007382:	e3df      	b.n	8007b44 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6a1a      	ldr	r2, [r3, #32]
 8007388:	4b81      	ldr	r3, [pc, #516]	@ (8007590 <HAL_RCC_OscConfig+0x270>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 0308 	and.w	r3, r3, #8
 8007390:	2b00      	cmp	r3, #0
 8007392:	d004      	beq.n	800739e <HAL_RCC_OscConfig+0x7e>
 8007394:	4b7e      	ldr	r3, [pc, #504]	@ (8007590 <HAL_RCC_OscConfig+0x270>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800739c:	e005      	b.n	80073aa <HAL_RCC_OscConfig+0x8a>
 800739e:	4b7c      	ldr	r3, [pc, #496]	@ (8007590 <HAL_RCC_OscConfig+0x270>)
 80073a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80073a4:	091b      	lsrs	r3, r3, #4
 80073a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d223      	bcs.n	80073f6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a1b      	ldr	r3, [r3, #32]
 80073b2:	4618      	mov	r0, r3
 80073b4:	f000 fdcc 	bl	8007f50 <RCC_SetFlashLatencyFromMSIRange>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d001      	beq.n	80073c2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	e3c0      	b.n	8007b44 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80073c2:	4b73      	ldr	r3, [pc, #460]	@ (8007590 <HAL_RCC_OscConfig+0x270>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a72      	ldr	r2, [pc, #456]	@ (8007590 <HAL_RCC_OscConfig+0x270>)
 80073c8:	f043 0308 	orr.w	r3, r3, #8
 80073cc:	6013      	str	r3, [r2, #0]
 80073ce:	4b70      	ldr	r3, [pc, #448]	@ (8007590 <HAL_RCC_OscConfig+0x270>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a1b      	ldr	r3, [r3, #32]
 80073da:	496d      	ldr	r1, [pc, #436]	@ (8007590 <HAL_RCC_OscConfig+0x270>)
 80073dc:	4313      	orrs	r3, r2
 80073de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80073e0:	4b6b      	ldr	r3, [pc, #428]	@ (8007590 <HAL_RCC_OscConfig+0x270>)
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	69db      	ldr	r3, [r3, #28]
 80073ec:	021b      	lsls	r3, r3, #8
 80073ee:	4968      	ldr	r1, [pc, #416]	@ (8007590 <HAL_RCC_OscConfig+0x270>)
 80073f0:	4313      	orrs	r3, r2
 80073f2:	604b      	str	r3, [r1, #4]
 80073f4:	e025      	b.n	8007442 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80073f6:	4b66      	ldr	r3, [pc, #408]	@ (8007590 <HAL_RCC_OscConfig+0x270>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a65      	ldr	r2, [pc, #404]	@ (8007590 <HAL_RCC_OscConfig+0x270>)
 80073fc:	f043 0308 	orr.w	r3, r3, #8
 8007400:	6013      	str	r3, [r2, #0]
 8007402:	4b63      	ldr	r3, [pc, #396]	@ (8007590 <HAL_RCC_OscConfig+0x270>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6a1b      	ldr	r3, [r3, #32]
 800740e:	4960      	ldr	r1, [pc, #384]	@ (8007590 <HAL_RCC_OscConfig+0x270>)
 8007410:	4313      	orrs	r3, r2
 8007412:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007414:	4b5e      	ldr	r3, [pc, #376]	@ (8007590 <HAL_RCC_OscConfig+0x270>)
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	69db      	ldr	r3, [r3, #28]
 8007420:	021b      	lsls	r3, r3, #8
 8007422:	495b      	ldr	r1, [pc, #364]	@ (8007590 <HAL_RCC_OscConfig+0x270>)
 8007424:	4313      	orrs	r3, r2
 8007426:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007428:	69bb      	ldr	r3, [r7, #24]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d109      	bne.n	8007442 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a1b      	ldr	r3, [r3, #32]
 8007432:	4618      	mov	r0, r3
 8007434:	f000 fd8c 	bl	8007f50 <RCC_SetFlashLatencyFromMSIRange>
 8007438:	4603      	mov	r3, r0
 800743a:	2b00      	cmp	r3, #0
 800743c:	d001      	beq.n	8007442 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	e380      	b.n	8007b44 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007442:	f000 fcc1 	bl	8007dc8 <HAL_RCC_GetSysClockFreq>
 8007446:	4602      	mov	r2, r0
 8007448:	4b51      	ldr	r3, [pc, #324]	@ (8007590 <HAL_RCC_OscConfig+0x270>)
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	091b      	lsrs	r3, r3, #4
 800744e:	f003 030f 	and.w	r3, r3, #15
 8007452:	4950      	ldr	r1, [pc, #320]	@ (8007594 <HAL_RCC_OscConfig+0x274>)
 8007454:	5ccb      	ldrb	r3, [r1, r3]
 8007456:	f003 031f 	and.w	r3, r3, #31
 800745a:	fa22 f303 	lsr.w	r3, r2, r3
 800745e:	4a4e      	ldr	r2, [pc, #312]	@ (8007598 <HAL_RCC_OscConfig+0x278>)
 8007460:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007462:	4b4e      	ldr	r3, [pc, #312]	@ (800759c <HAL_RCC_OscConfig+0x27c>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4618      	mov	r0, r3
 8007468:	f7fb fdc8 	bl	8002ffc <HAL_InitTick>
 800746c:	4603      	mov	r3, r0
 800746e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007470:	7bfb      	ldrb	r3, [r7, #15]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d052      	beq.n	800751c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8007476:	7bfb      	ldrb	r3, [r7, #15]
 8007478:	e364      	b.n	8007b44 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	699b      	ldr	r3, [r3, #24]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d032      	beq.n	80074e8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007482:	4b43      	ldr	r3, [pc, #268]	@ (8007590 <HAL_RCC_OscConfig+0x270>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a42      	ldr	r2, [pc, #264]	@ (8007590 <HAL_RCC_OscConfig+0x270>)
 8007488:	f043 0301 	orr.w	r3, r3, #1
 800748c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800748e:	f7fb fe05 	bl	800309c <HAL_GetTick>
 8007492:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007494:	e008      	b.n	80074a8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007496:	f7fb fe01 	bl	800309c <HAL_GetTick>
 800749a:	4602      	mov	r2, r0
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	1ad3      	subs	r3, r2, r3
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	d901      	bls.n	80074a8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80074a4:	2303      	movs	r3, #3
 80074a6:	e34d      	b.n	8007b44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80074a8:	4b39      	ldr	r3, [pc, #228]	@ (8007590 <HAL_RCC_OscConfig+0x270>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 0302 	and.w	r3, r3, #2
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d0f0      	beq.n	8007496 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80074b4:	4b36      	ldr	r3, [pc, #216]	@ (8007590 <HAL_RCC_OscConfig+0x270>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a35      	ldr	r2, [pc, #212]	@ (8007590 <HAL_RCC_OscConfig+0x270>)
 80074ba:	f043 0308 	orr.w	r3, r3, #8
 80074be:	6013      	str	r3, [r2, #0]
 80074c0:	4b33      	ldr	r3, [pc, #204]	@ (8007590 <HAL_RCC_OscConfig+0x270>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6a1b      	ldr	r3, [r3, #32]
 80074cc:	4930      	ldr	r1, [pc, #192]	@ (8007590 <HAL_RCC_OscConfig+0x270>)
 80074ce:	4313      	orrs	r3, r2
 80074d0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80074d2:	4b2f      	ldr	r3, [pc, #188]	@ (8007590 <HAL_RCC_OscConfig+0x270>)
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	69db      	ldr	r3, [r3, #28]
 80074de:	021b      	lsls	r3, r3, #8
 80074e0:	492b      	ldr	r1, [pc, #172]	@ (8007590 <HAL_RCC_OscConfig+0x270>)
 80074e2:	4313      	orrs	r3, r2
 80074e4:	604b      	str	r3, [r1, #4]
 80074e6:	e01a      	b.n	800751e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80074e8:	4b29      	ldr	r3, [pc, #164]	@ (8007590 <HAL_RCC_OscConfig+0x270>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a28      	ldr	r2, [pc, #160]	@ (8007590 <HAL_RCC_OscConfig+0x270>)
 80074ee:	f023 0301 	bic.w	r3, r3, #1
 80074f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80074f4:	f7fb fdd2 	bl	800309c <HAL_GetTick>
 80074f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80074fa:	e008      	b.n	800750e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80074fc:	f7fb fdce 	bl	800309c <HAL_GetTick>
 8007500:	4602      	mov	r2, r0
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	1ad3      	subs	r3, r2, r3
 8007506:	2b02      	cmp	r3, #2
 8007508:	d901      	bls.n	800750e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800750a:	2303      	movs	r3, #3
 800750c:	e31a      	b.n	8007b44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800750e:	4b20      	ldr	r3, [pc, #128]	@ (8007590 <HAL_RCC_OscConfig+0x270>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f003 0302 	and.w	r3, r3, #2
 8007516:	2b00      	cmp	r3, #0
 8007518:	d1f0      	bne.n	80074fc <HAL_RCC_OscConfig+0x1dc>
 800751a:	e000      	b.n	800751e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800751c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 0301 	and.w	r3, r3, #1
 8007526:	2b00      	cmp	r3, #0
 8007528:	d073      	beq.n	8007612 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800752a:	69bb      	ldr	r3, [r7, #24]
 800752c:	2b08      	cmp	r3, #8
 800752e:	d005      	beq.n	800753c <HAL_RCC_OscConfig+0x21c>
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	2b0c      	cmp	r3, #12
 8007534:	d10e      	bne.n	8007554 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	2b03      	cmp	r3, #3
 800753a:	d10b      	bne.n	8007554 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800753c:	4b14      	ldr	r3, [pc, #80]	@ (8007590 <HAL_RCC_OscConfig+0x270>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007544:	2b00      	cmp	r3, #0
 8007546:	d063      	beq.n	8007610 <HAL_RCC_OscConfig+0x2f0>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d15f      	bne.n	8007610 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	e2f7      	b.n	8007b44 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800755c:	d106      	bne.n	800756c <HAL_RCC_OscConfig+0x24c>
 800755e:	4b0c      	ldr	r3, [pc, #48]	@ (8007590 <HAL_RCC_OscConfig+0x270>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a0b      	ldr	r2, [pc, #44]	@ (8007590 <HAL_RCC_OscConfig+0x270>)
 8007564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007568:	6013      	str	r3, [r2, #0]
 800756a:	e025      	b.n	80075b8 <HAL_RCC_OscConfig+0x298>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007574:	d114      	bne.n	80075a0 <HAL_RCC_OscConfig+0x280>
 8007576:	4b06      	ldr	r3, [pc, #24]	@ (8007590 <HAL_RCC_OscConfig+0x270>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a05      	ldr	r2, [pc, #20]	@ (8007590 <HAL_RCC_OscConfig+0x270>)
 800757c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007580:	6013      	str	r3, [r2, #0]
 8007582:	4b03      	ldr	r3, [pc, #12]	@ (8007590 <HAL_RCC_OscConfig+0x270>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a02      	ldr	r2, [pc, #8]	@ (8007590 <HAL_RCC_OscConfig+0x270>)
 8007588:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800758c:	6013      	str	r3, [r2, #0]
 800758e:	e013      	b.n	80075b8 <HAL_RCC_OscConfig+0x298>
 8007590:	40021000 	.word	0x40021000
 8007594:	0800cbfc 	.word	0x0800cbfc
 8007598:	20000054 	.word	0x20000054
 800759c:	2000008c 	.word	0x2000008c
 80075a0:	4ba0      	ldr	r3, [pc, #640]	@ (8007824 <HAL_RCC_OscConfig+0x504>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a9f      	ldr	r2, [pc, #636]	@ (8007824 <HAL_RCC_OscConfig+0x504>)
 80075a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075aa:	6013      	str	r3, [r2, #0]
 80075ac:	4b9d      	ldr	r3, [pc, #628]	@ (8007824 <HAL_RCC_OscConfig+0x504>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a9c      	ldr	r2, [pc, #624]	@ (8007824 <HAL_RCC_OscConfig+0x504>)
 80075b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80075b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d013      	beq.n	80075e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075c0:	f7fb fd6c 	bl	800309c <HAL_GetTick>
 80075c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80075c6:	e008      	b.n	80075da <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075c8:	f7fb fd68 	bl	800309c <HAL_GetTick>
 80075cc:	4602      	mov	r2, r0
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	2b64      	cmp	r3, #100	@ 0x64
 80075d4:	d901      	bls.n	80075da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80075d6:	2303      	movs	r3, #3
 80075d8:	e2b4      	b.n	8007b44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80075da:	4b92      	ldr	r3, [pc, #584]	@ (8007824 <HAL_RCC_OscConfig+0x504>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d0f0      	beq.n	80075c8 <HAL_RCC_OscConfig+0x2a8>
 80075e6:	e014      	b.n	8007612 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075e8:	f7fb fd58 	bl	800309c <HAL_GetTick>
 80075ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80075ee:	e008      	b.n	8007602 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075f0:	f7fb fd54 	bl	800309c <HAL_GetTick>
 80075f4:	4602      	mov	r2, r0
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	1ad3      	subs	r3, r2, r3
 80075fa:	2b64      	cmp	r3, #100	@ 0x64
 80075fc:	d901      	bls.n	8007602 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80075fe:	2303      	movs	r3, #3
 8007600:	e2a0      	b.n	8007b44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007602:	4b88      	ldr	r3, [pc, #544]	@ (8007824 <HAL_RCC_OscConfig+0x504>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800760a:	2b00      	cmp	r3, #0
 800760c:	d1f0      	bne.n	80075f0 <HAL_RCC_OscConfig+0x2d0>
 800760e:	e000      	b.n	8007612 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007610:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f003 0302 	and.w	r3, r3, #2
 800761a:	2b00      	cmp	r3, #0
 800761c:	d060      	beq.n	80076e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	2b04      	cmp	r3, #4
 8007622:	d005      	beq.n	8007630 <HAL_RCC_OscConfig+0x310>
 8007624:	69bb      	ldr	r3, [r7, #24]
 8007626:	2b0c      	cmp	r3, #12
 8007628:	d119      	bne.n	800765e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	2b02      	cmp	r3, #2
 800762e:	d116      	bne.n	800765e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007630:	4b7c      	ldr	r3, [pc, #496]	@ (8007824 <HAL_RCC_OscConfig+0x504>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007638:	2b00      	cmp	r3, #0
 800763a:	d005      	beq.n	8007648 <HAL_RCC_OscConfig+0x328>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d101      	bne.n	8007648 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	e27d      	b.n	8007b44 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007648:	4b76      	ldr	r3, [pc, #472]	@ (8007824 <HAL_RCC_OscConfig+0x504>)
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	061b      	lsls	r3, r3, #24
 8007656:	4973      	ldr	r1, [pc, #460]	@ (8007824 <HAL_RCC_OscConfig+0x504>)
 8007658:	4313      	orrs	r3, r2
 800765a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800765c:	e040      	b.n	80076e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d023      	beq.n	80076ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007666:	4b6f      	ldr	r3, [pc, #444]	@ (8007824 <HAL_RCC_OscConfig+0x504>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a6e      	ldr	r2, [pc, #440]	@ (8007824 <HAL_RCC_OscConfig+0x504>)
 800766c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007670:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007672:	f7fb fd13 	bl	800309c <HAL_GetTick>
 8007676:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007678:	e008      	b.n	800768c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800767a:	f7fb fd0f 	bl	800309c <HAL_GetTick>
 800767e:	4602      	mov	r2, r0
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	1ad3      	subs	r3, r2, r3
 8007684:	2b02      	cmp	r3, #2
 8007686:	d901      	bls.n	800768c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007688:	2303      	movs	r3, #3
 800768a:	e25b      	b.n	8007b44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800768c:	4b65      	ldr	r3, [pc, #404]	@ (8007824 <HAL_RCC_OscConfig+0x504>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007694:	2b00      	cmp	r3, #0
 8007696:	d0f0      	beq.n	800767a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007698:	4b62      	ldr	r3, [pc, #392]	@ (8007824 <HAL_RCC_OscConfig+0x504>)
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	691b      	ldr	r3, [r3, #16]
 80076a4:	061b      	lsls	r3, r3, #24
 80076a6:	495f      	ldr	r1, [pc, #380]	@ (8007824 <HAL_RCC_OscConfig+0x504>)
 80076a8:	4313      	orrs	r3, r2
 80076aa:	604b      	str	r3, [r1, #4]
 80076ac:	e018      	b.n	80076e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80076ae:	4b5d      	ldr	r3, [pc, #372]	@ (8007824 <HAL_RCC_OscConfig+0x504>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a5c      	ldr	r2, [pc, #368]	@ (8007824 <HAL_RCC_OscConfig+0x504>)
 80076b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076ba:	f7fb fcef 	bl	800309c <HAL_GetTick>
 80076be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80076c0:	e008      	b.n	80076d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80076c2:	f7fb fceb 	bl	800309c <HAL_GetTick>
 80076c6:	4602      	mov	r2, r0
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	1ad3      	subs	r3, r2, r3
 80076cc:	2b02      	cmp	r3, #2
 80076ce:	d901      	bls.n	80076d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80076d0:	2303      	movs	r3, #3
 80076d2:	e237      	b.n	8007b44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80076d4:	4b53      	ldr	r3, [pc, #332]	@ (8007824 <HAL_RCC_OscConfig+0x504>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d1f0      	bne.n	80076c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f003 0308 	and.w	r3, r3, #8
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d03c      	beq.n	8007766 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	695b      	ldr	r3, [r3, #20]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d01c      	beq.n	800772e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80076f4:	4b4b      	ldr	r3, [pc, #300]	@ (8007824 <HAL_RCC_OscConfig+0x504>)
 80076f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80076fa:	4a4a      	ldr	r2, [pc, #296]	@ (8007824 <HAL_RCC_OscConfig+0x504>)
 80076fc:	f043 0301 	orr.w	r3, r3, #1
 8007700:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007704:	f7fb fcca 	bl	800309c <HAL_GetTick>
 8007708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800770a:	e008      	b.n	800771e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800770c:	f7fb fcc6 	bl	800309c <HAL_GetTick>
 8007710:	4602      	mov	r2, r0
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	1ad3      	subs	r3, r2, r3
 8007716:	2b02      	cmp	r3, #2
 8007718:	d901      	bls.n	800771e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800771a:	2303      	movs	r3, #3
 800771c:	e212      	b.n	8007b44 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800771e:	4b41      	ldr	r3, [pc, #260]	@ (8007824 <HAL_RCC_OscConfig+0x504>)
 8007720:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007724:	f003 0302 	and.w	r3, r3, #2
 8007728:	2b00      	cmp	r3, #0
 800772a:	d0ef      	beq.n	800770c <HAL_RCC_OscConfig+0x3ec>
 800772c:	e01b      	b.n	8007766 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800772e:	4b3d      	ldr	r3, [pc, #244]	@ (8007824 <HAL_RCC_OscConfig+0x504>)
 8007730:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007734:	4a3b      	ldr	r2, [pc, #236]	@ (8007824 <HAL_RCC_OscConfig+0x504>)
 8007736:	f023 0301 	bic.w	r3, r3, #1
 800773a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800773e:	f7fb fcad 	bl	800309c <HAL_GetTick>
 8007742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007744:	e008      	b.n	8007758 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007746:	f7fb fca9 	bl	800309c <HAL_GetTick>
 800774a:	4602      	mov	r2, r0
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	2b02      	cmp	r3, #2
 8007752:	d901      	bls.n	8007758 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007754:	2303      	movs	r3, #3
 8007756:	e1f5      	b.n	8007b44 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007758:	4b32      	ldr	r3, [pc, #200]	@ (8007824 <HAL_RCC_OscConfig+0x504>)
 800775a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800775e:	f003 0302 	and.w	r3, r3, #2
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1ef      	bne.n	8007746 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f003 0304 	and.w	r3, r3, #4
 800776e:	2b00      	cmp	r3, #0
 8007770:	f000 80a6 	beq.w	80078c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007774:	2300      	movs	r3, #0
 8007776:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007778:	4b2a      	ldr	r3, [pc, #168]	@ (8007824 <HAL_RCC_OscConfig+0x504>)
 800777a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800777c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007780:	2b00      	cmp	r3, #0
 8007782:	d10d      	bne.n	80077a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007784:	4b27      	ldr	r3, [pc, #156]	@ (8007824 <HAL_RCC_OscConfig+0x504>)
 8007786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007788:	4a26      	ldr	r2, [pc, #152]	@ (8007824 <HAL_RCC_OscConfig+0x504>)
 800778a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800778e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007790:	4b24      	ldr	r3, [pc, #144]	@ (8007824 <HAL_RCC_OscConfig+0x504>)
 8007792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007794:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007798:	60bb      	str	r3, [r7, #8]
 800779a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800779c:	2301      	movs	r3, #1
 800779e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80077a0:	4b21      	ldr	r3, [pc, #132]	@ (8007828 <HAL_RCC_OscConfig+0x508>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d118      	bne.n	80077de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80077ac:	4b1e      	ldr	r3, [pc, #120]	@ (8007828 <HAL_RCC_OscConfig+0x508>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a1d      	ldr	r2, [pc, #116]	@ (8007828 <HAL_RCC_OscConfig+0x508>)
 80077b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80077b8:	f7fb fc70 	bl	800309c <HAL_GetTick>
 80077bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80077be:	e008      	b.n	80077d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077c0:	f7fb fc6c 	bl	800309c <HAL_GetTick>
 80077c4:	4602      	mov	r2, r0
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	1ad3      	subs	r3, r2, r3
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	d901      	bls.n	80077d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80077ce:	2303      	movs	r3, #3
 80077d0:	e1b8      	b.n	8007b44 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80077d2:	4b15      	ldr	r3, [pc, #84]	@ (8007828 <HAL_RCC_OscConfig+0x508>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d0f0      	beq.n	80077c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d108      	bne.n	80077f8 <HAL_RCC_OscConfig+0x4d8>
 80077e6:	4b0f      	ldr	r3, [pc, #60]	@ (8007824 <HAL_RCC_OscConfig+0x504>)
 80077e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077ec:	4a0d      	ldr	r2, [pc, #52]	@ (8007824 <HAL_RCC_OscConfig+0x504>)
 80077ee:	f043 0301 	orr.w	r3, r3, #1
 80077f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80077f6:	e029      	b.n	800784c <HAL_RCC_OscConfig+0x52c>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	2b05      	cmp	r3, #5
 80077fe:	d115      	bne.n	800782c <HAL_RCC_OscConfig+0x50c>
 8007800:	4b08      	ldr	r3, [pc, #32]	@ (8007824 <HAL_RCC_OscConfig+0x504>)
 8007802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007806:	4a07      	ldr	r2, [pc, #28]	@ (8007824 <HAL_RCC_OscConfig+0x504>)
 8007808:	f043 0304 	orr.w	r3, r3, #4
 800780c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007810:	4b04      	ldr	r3, [pc, #16]	@ (8007824 <HAL_RCC_OscConfig+0x504>)
 8007812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007816:	4a03      	ldr	r2, [pc, #12]	@ (8007824 <HAL_RCC_OscConfig+0x504>)
 8007818:	f043 0301 	orr.w	r3, r3, #1
 800781c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007820:	e014      	b.n	800784c <HAL_RCC_OscConfig+0x52c>
 8007822:	bf00      	nop
 8007824:	40021000 	.word	0x40021000
 8007828:	40007000 	.word	0x40007000
 800782c:	4b9d      	ldr	r3, [pc, #628]	@ (8007aa4 <HAL_RCC_OscConfig+0x784>)
 800782e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007832:	4a9c      	ldr	r2, [pc, #624]	@ (8007aa4 <HAL_RCC_OscConfig+0x784>)
 8007834:	f023 0301 	bic.w	r3, r3, #1
 8007838:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800783c:	4b99      	ldr	r3, [pc, #612]	@ (8007aa4 <HAL_RCC_OscConfig+0x784>)
 800783e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007842:	4a98      	ldr	r2, [pc, #608]	@ (8007aa4 <HAL_RCC_OscConfig+0x784>)
 8007844:	f023 0304 	bic.w	r3, r3, #4
 8007848:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d016      	beq.n	8007882 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007854:	f7fb fc22 	bl	800309c <HAL_GetTick>
 8007858:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800785a:	e00a      	b.n	8007872 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800785c:	f7fb fc1e 	bl	800309c <HAL_GetTick>
 8007860:	4602      	mov	r2, r0
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	1ad3      	subs	r3, r2, r3
 8007866:	f241 3288 	movw	r2, #5000	@ 0x1388
 800786a:	4293      	cmp	r3, r2
 800786c:	d901      	bls.n	8007872 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800786e:	2303      	movs	r3, #3
 8007870:	e168      	b.n	8007b44 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007872:	4b8c      	ldr	r3, [pc, #560]	@ (8007aa4 <HAL_RCC_OscConfig+0x784>)
 8007874:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007878:	f003 0302 	and.w	r3, r3, #2
 800787c:	2b00      	cmp	r3, #0
 800787e:	d0ed      	beq.n	800785c <HAL_RCC_OscConfig+0x53c>
 8007880:	e015      	b.n	80078ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007882:	f7fb fc0b 	bl	800309c <HAL_GetTick>
 8007886:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007888:	e00a      	b.n	80078a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800788a:	f7fb fc07 	bl	800309c <HAL_GetTick>
 800788e:	4602      	mov	r2, r0
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	1ad3      	subs	r3, r2, r3
 8007894:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007898:	4293      	cmp	r3, r2
 800789a:	d901      	bls.n	80078a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800789c:	2303      	movs	r3, #3
 800789e:	e151      	b.n	8007b44 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80078a0:	4b80      	ldr	r3, [pc, #512]	@ (8007aa4 <HAL_RCC_OscConfig+0x784>)
 80078a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078a6:	f003 0302 	and.w	r3, r3, #2
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d1ed      	bne.n	800788a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80078ae:	7ffb      	ldrb	r3, [r7, #31]
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d105      	bne.n	80078c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078b4:	4b7b      	ldr	r3, [pc, #492]	@ (8007aa4 <HAL_RCC_OscConfig+0x784>)
 80078b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078b8:	4a7a      	ldr	r2, [pc, #488]	@ (8007aa4 <HAL_RCC_OscConfig+0x784>)
 80078ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80078be:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f003 0320 	and.w	r3, r3, #32
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d03c      	beq.n	8007946 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d01c      	beq.n	800790e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80078d4:	4b73      	ldr	r3, [pc, #460]	@ (8007aa4 <HAL_RCC_OscConfig+0x784>)
 80078d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80078da:	4a72      	ldr	r2, [pc, #456]	@ (8007aa4 <HAL_RCC_OscConfig+0x784>)
 80078dc:	f043 0301 	orr.w	r3, r3, #1
 80078e0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078e4:	f7fb fbda 	bl	800309c <HAL_GetTick>
 80078e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80078ea:	e008      	b.n	80078fe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80078ec:	f7fb fbd6 	bl	800309c <HAL_GetTick>
 80078f0:	4602      	mov	r2, r0
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	1ad3      	subs	r3, r2, r3
 80078f6:	2b02      	cmp	r3, #2
 80078f8:	d901      	bls.n	80078fe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80078fa:	2303      	movs	r3, #3
 80078fc:	e122      	b.n	8007b44 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80078fe:	4b69      	ldr	r3, [pc, #420]	@ (8007aa4 <HAL_RCC_OscConfig+0x784>)
 8007900:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007904:	f003 0302 	and.w	r3, r3, #2
 8007908:	2b00      	cmp	r3, #0
 800790a:	d0ef      	beq.n	80078ec <HAL_RCC_OscConfig+0x5cc>
 800790c:	e01b      	b.n	8007946 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800790e:	4b65      	ldr	r3, [pc, #404]	@ (8007aa4 <HAL_RCC_OscConfig+0x784>)
 8007910:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007914:	4a63      	ldr	r2, [pc, #396]	@ (8007aa4 <HAL_RCC_OscConfig+0x784>)
 8007916:	f023 0301 	bic.w	r3, r3, #1
 800791a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800791e:	f7fb fbbd 	bl	800309c <HAL_GetTick>
 8007922:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007924:	e008      	b.n	8007938 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007926:	f7fb fbb9 	bl	800309c <HAL_GetTick>
 800792a:	4602      	mov	r2, r0
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	1ad3      	subs	r3, r2, r3
 8007930:	2b02      	cmp	r3, #2
 8007932:	d901      	bls.n	8007938 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8007934:	2303      	movs	r3, #3
 8007936:	e105      	b.n	8007b44 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007938:	4b5a      	ldr	r3, [pc, #360]	@ (8007aa4 <HAL_RCC_OscConfig+0x784>)
 800793a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800793e:	f003 0302 	and.w	r3, r3, #2
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1ef      	bne.n	8007926 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800794a:	2b00      	cmp	r3, #0
 800794c:	f000 80f9 	beq.w	8007b42 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007954:	2b02      	cmp	r3, #2
 8007956:	f040 80cf 	bne.w	8007af8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800795a:	4b52      	ldr	r3, [pc, #328]	@ (8007aa4 <HAL_RCC_OscConfig+0x784>)
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	f003 0203 	and.w	r2, r3, #3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800796a:	429a      	cmp	r2, r3
 800796c:	d12c      	bne.n	80079c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007978:	3b01      	subs	r3, #1
 800797a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800797c:	429a      	cmp	r2, r3
 800797e:	d123      	bne.n	80079c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800798a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800798c:	429a      	cmp	r2, r3
 800798e:	d11b      	bne.n	80079c8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800799a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800799c:	429a      	cmp	r2, r3
 800799e:	d113      	bne.n	80079c8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079aa:	085b      	lsrs	r3, r3, #1
 80079ac:	3b01      	subs	r3, #1
 80079ae:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d109      	bne.n	80079c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079be:	085b      	lsrs	r3, r3, #1
 80079c0:	3b01      	subs	r3, #1
 80079c2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d071      	beq.n	8007aac <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	2b0c      	cmp	r3, #12
 80079cc:	d068      	beq.n	8007aa0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80079ce:	4b35      	ldr	r3, [pc, #212]	@ (8007aa4 <HAL_RCC_OscConfig+0x784>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d105      	bne.n	80079e6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80079da:	4b32      	ldr	r3, [pc, #200]	@ (8007aa4 <HAL_RCC_OscConfig+0x784>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d001      	beq.n	80079ea <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	e0ac      	b.n	8007b44 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80079ea:	4b2e      	ldr	r3, [pc, #184]	@ (8007aa4 <HAL_RCC_OscConfig+0x784>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a2d      	ldr	r2, [pc, #180]	@ (8007aa4 <HAL_RCC_OscConfig+0x784>)
 80079f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80079f4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80079f6:	f7fb fb51 	bl	800309c <HAL_GetTick>
 80079fa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80079fc:	e008      	b.n	8007a10 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079fe:	f7fb fb4d 	bl	800309c <HAL_GetTick>
 8007a02:	4602      	mov	r2, r0
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	1ad3      	subs	r3, r2, r3
 8007a08:	2b02      	cmp	r3, #2
 8007a0a:	d901      	bls.n	8007a10 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	e099      	b.n	8007b44 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a10:	4b24      	ldr	r3, [pc, #144]	@ (8007aa4 <HAL_RCC_OscConfig+0x784>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d1f0      	bne.n	80079fe <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a1c:	4b21      	ldr	r3, [pc, #132]	@ (8007aa4 <HAL_RCC_OscConfig+0x784>)
 8007a1e:	68da      	ldr	r2, [r3, #12]
 8007a20:	4b21      	ldr	r3, [pc, #132]	@ (8007aa8 <HAL_RCC_OscConfig+0x788>)
 8007a22:	4013      	ands	r3, r2
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007a2c:	3a01      	subs	r2, #1
 8007a2e:	0112      	lsls	r2, r2, #4
 8007a30:	4311      	orrs	r1, r2
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007a36:	0212      	lsls	r2, r2, #8
 8007a38:	4311      	orrs	r1, r2
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007a3e:	0852      	lsrs	r2, r2, #1
 8007a40:	3a01      	subs	r2, #1
 8007a42:	0552      	lsls	r2, r2, #21
 8007a44:	4311      	orrs	r1, r2
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007a4a:	0852      	lsrs	r2, r2, #1
 8007a4c:	3a01      	subs	r2, #1
 8007a4e:	0652      	lsls	r2, r2, #25
 8007a50:	4311      	orrs	r1, r2
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007a56:	06d2      	lsls	r2, r2, #27
 8007a58:	430a      	orrs	r2, r1
 8007a5a:	4912      	ldr	r1, [pc, #72]	@ (8007aa4 <HAL_RCC_OscConfig+0x784>)
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007a60:	4b10      	ldr	r3, [pc, #64]	@ (8007aa4 <HAL_RCC_OscConfig+0x784>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a0f      	ldr	r2, [pc, #60]	@ (8007aa4 <HAL_RCC_OscConfig+0x784>)
 8007a66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007a6a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8007aa4 <HAL_RCC_OscConfig+0x784>)
 8007a6e:	68db      	ldr	r3, [r3, #12]
 8007a70:	4a0c      	ldr	r2, [pc, #48]	@ (8007aa4 <HAL_RCC_OscConfig+0x784>)
 8007a72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007a76:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007a78:	f7fb fb10 	bl	800309c <HAL_GetTick>
 8007a7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a7e:	e008      	b.n	8007a92 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a80:	f7fb fb0c 	bl	800309c <HAL_GetTick>
 8007a84:	4602      	mov	r2, r0
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	1ad3      	subs	r3, r2, r3
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d901      	bls.n	8007a92 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8007a8e:	2303      	movs	r3, #3
 8007a90:	e058      	b.n	8007b44 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a92:	4b04      	ldr	r3, [pc, #16]	@ (8007aa4 <HAL_RCC_OscConfig+0x784>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d0f0      	beq.n	8007a80 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007a9e:	e050      	b.n	8007b42 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	e04f      	b.n	8007b44 <HAL_RCC_OscConfig+0x824>
 8007aa4:	40021000 	.word	0x40021000
 8007aa8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007aac:	4b27      	ldr	r3, [pc, #156]	@ (8007b4c <HAL_RCC_OscConfig+0x82c>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d144      	bne.n	8007b42 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007ab8:	4b24      	ldr	r3, [pc, #144]	@ (8007b4c <HAL_RCC_OscConfig+0x82c>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a23      	ldr	r2, [pc, #140]	@ (8007b4c <HAL_RCC_OscConfig+0x82c>)
 8007abe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007ac2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007ac4:	4b21      	ldr	r3, [pc, #132]	@ (8007b4c <HAL_RCC_OscConfig+0x82c>)
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	4a20      	ldr	r2, [pc, #128]	@ (8007b4c <HAL_RCC_OscConfig+0x82c>)
 8007aca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007ace:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007ad0:	f7fb fae4 	bl	800309c <HAL_GetTick>
 8007ad4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007ad6:	e008      	b.n	8007aea <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ad8:	f7fb fae0 	bl	800309c <HAL_GetTick>
 8007adc:	4602      	mov	r2, r0
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	1ad3      	subs	r3, r2, r3
 8007ae2:	2b02      	cmp	r3, #2
 8007ae4:	d901      	bls.n	8007aea <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8007ae6:	2303      	movs	r3, #3
 8007ae8:	e02c      	b.n	8007b44 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007aea:	4b18      	ldr	r3, [pc, #96]	@ (8007b4c <HAL_RCC_OscConfig+0x82c>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d0f0      	beq.n	8007ad8 <HAL_RCC_OscConfig+0x7b8>
 8007af6:	e024      	b.n	8007b42 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007af8:	69bb      	ldr	r3, [r7, #24]
 8007afa:	2b0c      	cmp	r3, #12
 8007afc:	d01f      	beq.n	8007b3e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007afe:	4b13      	ldr	r3, [pc, #76]	@ (8007b4c <HAL_RCC_OscConfig+0x82c>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a12      	ldr	r2, [pc, #72]	@ (8007b4c <HAL_RCC_OscConfig+0x82c>)
 8007b04:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007b08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b0a:	f7fb fac7 	bl	800309c <HAL_GetTick>
 8007b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b10:	e008      	b.n	8007b24 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b12:	f7fb fac3 	bl	800309c <HAL_GetTick>
 8007b16:	4602      	mov	r2, r0
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	1ad3      	subs	r3, r2, r3
 8007b1c:	2b02      	cmp	r3, #2
 8007b1e:	d901      	bls.n	8007b24 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8007b20:	2303      	movs	r3, #3
 8007b22:	e00f      	b.n	8007b44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b24:	4b09      	ldr	r3, [pc, #36]	@ (8007b4c <HAL_RCC_OscConfig+0x82c>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d1f0      	bne.n	8007b12 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007b30:	4b06      	ldr	r3, [pc, #24]	@ (8007b4c <HAL_RCC_OscConfig+0x82c>)
 8007b32:	68da      	ldr	r2, [r3, #12]
 8007b34:	4905      	ldr	r1, [pc, #20]	@ (8007b4c <HAL_RCC_OscConfig+0x82c>)
 8007b36:	4b06      	ldr	r3, [pc, #24]	@ (8007b50 <HAL_RCC_OscConfig+0x830>)
 8007b38:	4013      	ands	r3, r2
 8007b3a:	60cb      	str	r3, [r1, #12]
 8007b3c:	e001      	b.n	8007b42 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e000      	b.n	8007b44 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8007b42:	2300      	movs	r3, #0
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3720      	adds	r7, #32
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}
 8007b4c:	40021000 	.word	0x40021000
 8007b50:	feeefffc 	.word	0xfeeefffc

08007b54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b086      	sub	sp, #24
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d101      	bne.n	8007b6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	e11d      	b.n	8007da8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007b6c:	4b90      	ldr	r3, [pc, #576]	@ (8007db0 <HAL_RCC_ClockConfig+0x25c>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f003 030f 	and.w	r3, r3, #15
 8007b74:	683a      	ldr	r2, [r7, #0]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d910      	bls.n	8007b9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b7a:	4b8d      	ldr	r3, [pc, #564]	@ (8007db0 <HAL_RCC_ClockConfig+0x25c>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f023 020f 	bic.w	r2, r3, #15
 8007b82:	498b      	ldr	r1, [pc, #556]	@ (8007db0 <HAL_RCC_ClockConfig+0x25c>)
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	4313      	orrs	r3, r2
 8007b88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b8a:	4b89      	ldr	r3, [pc, #548]	@ (8007db0 <HAL_RCC_ClockConfig+0x25c>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f003 030f 	and.w	r3, r3, #15
 8007b92:	683a      	ldr	r2, [r7, #0]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d001      	beq.n	8007b9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	e105      	b.n	8007da8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f003 0302 	and.w	r3, r3, #2
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d010      	beq.n	8007bca <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	689a      	ldr	r2, [r3, #8]
 8007bac:	4b81      	ldr	r3, [pc, #516]	@ (8007db4 <HAL_RCC_ClockConfig+0x260>)
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d908      	bls.n	8007bca <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007bb8:	4b7e      	ldr	r3, [pc, #504]	@ (8007db4 <HAL_RCC_ClockConfig+0x260>)
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	497b      	ldr	r1, [pc, #492]	@ (8007db4 <HAL_RCC_ClockConfig+0x260>)
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 0301 	and.w	r3, r3, #1
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d079      	beq.n	8007cca <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	2b03      	cmp	r3, #3
 8007bdc:	d11e      	bne.n	8007c1c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007bde:	4b75      	ldr	r3, [pc, #468]	@ (8007db4 <HAL_RCC_ClockConfig+0x260>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d101      	bne.n	8007bee <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	e0dc      	b.n	8007da8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8007bee:	f000 fa09 	bl	8008004 <RCC_GetSysClockFreqFromPLLSource>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	4a70      	ldr	r2, [pc, #448]	@ (8007db8 <HAL_RCC_ClockConfig+0x264>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d946      	bls.n	8007c88 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8007bfa:	4b6e      	ldr	r3, [pc, #440]	@ (8007db4 <HAL_RCC_ClockConfig+0x260>)
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d140      	bne.n	8007c88 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007c06:	4b6b      	ldr	r3, [pc, #428]	@ (8007db4 <HAL_RCC_ClockConfig+0x260>)
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007c0e:	4a69      	ldr	r2, [pc, #420]	@ (8007db4 <HAL_RCC_ClockConfig+0x260>)
 8007c10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c14:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007c16:	2380      	movs	r3, #128	@ 0x80
 8007c18:	617b      	str	r3, [r7, #20]
 8007c1a:	e035      	b.n	8007c88 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	d107      	bne.n	8007c34 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007c24:	4b63      	ldr	r3, [pc, #396]	@ (8007db4 <HAL_RCC_ClockConfig+0x260>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d115      	bne.n	8007c5c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	e0b9      	b.n	8007da8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d107      	bne.n	8007c4c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007c3c:	4b5d      	ldr	r3, [pc, #372]	@ (8007db4 <HAL_RCC_ClockConfig+0x260>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f003 0302 	and.w	r3, r3, #2
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d109      	bne.n	8007c5c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e0ad      	b.n	8007da8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007c4c:	4b59      	ldr	r3, [pc, #356]	@ (8007db4 <HAL_RCC_ClockConfig+0x260>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d101      	bne.n	8007c5c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e0a5      	b.n	8007da8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8007c5c:	f000 f8b4 	bl	8007dc8 <HAL_RCC_GetSysClockFreq>
 8007c60:	4603      	mov	r3, r0
 8007c62:	4a55      	ldr	r2, [pc, #340]	@ (8007db8 <HAL_RCC_ClockConfig+0x264>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d90f      	bls.n	8007c88 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8007c68:	4b52      	ldr	r3, [pc, #328]	@ (8007db4 <HAL_RCC_ClockConfig+0x260>)
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d109      	bne.n	8007c88 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007c74:	4b4f      	ldr	r3, [pc, #316]	@ (8007db4 <HAL_RCC_ClockConfig+0x260>)
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007c7c:	4a4d      	ldr	r2, [pc, #308]	@ (8007db4 <HAL_RCC_ClockConfig+0x260>)
 8007c7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c82:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007c84:	2380      	movs	r3, #128	@ 0x80
 8007c86:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007c88:	4b4a      	ldr	r3, [pc, #296]	@ (8007db4 <HAL_RCC_ClockConfig+0x260>)
 8007c8a:	689b      	ldr	r3, [r3, #8]
 8007c8c:	f023 0203 	bic.w	r2, r3, #3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	4947      	ldr	r1, [pc, #284]	@ (8007db4 <HAL_RCC_ClockConfig+0x260>)
 8007c96:	4313      	orrs	r3, r2
 8007c98:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c9a:	f7fb f9ff 	bl	800309c <HAL_GetTick>
 8007c9e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ca0:	e00a      	b.n	8007cb8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ca2:	f7fb f9fb 	bl	800309c <HAL_GetTick>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	1ad3      	subs	r3, r2, r3
 8007cac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d901      	bls.n	8007cb8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	e077      	b.n	8007da8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cb8:	4b3e      	ldr	r3, [pc, #248]	@ (8007db4 <HAL_RCC_ClockConfig+0x260>)
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	f003 020c 	and.w	r2, r3, #12
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	d1eb      	bne.n	8007ca2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	2b80      	cmp	r3, #128	@ 0x80
 8007cce:	d105      	bne.n	8007cdc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007cd0:	4b38      	ldr	r3, [pc, #224]	@ (8007db4 <HAL_RCC_ClockConfig+0x260>)
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	4a37      	ldr	r2, [pc, #220]	@ (8007db4 <HAL_RCC_ClockConfig+0x260>)
 8007cd6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007cda:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f003 0302 	and.w	r3, r3, #2
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d010      	beq.n	8007d0a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	689a      	ldr	r2, [r3, #8]
 8007cec:	4b31      	ldr	r3, [pc, #196]	@ (8007db4 <HAL_RCC_ClockConfig+0x260>)
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d208      	bcs.n	8007d0a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007cf8:	4b2e      	ldr	r3, [pc, #184]	@ (8007db4 <HAL_RCC_ClockConfig+0x260>)
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	492b      	ldr	r1, [pc, #172]	@ (8007db4 <HAL_RCC_ClockConfig+0x260>)
 8007d06:	4313      	orrs	r3, r2
 8007d08:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007d0a:	4b29      	ldr	r3, [pc, #164]	@ (8007db0 <HAL_RCC_ClockConfig+0x25c>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f003 030f 	and.w	r3, r3, #15
 8007d12:	683a      	ldr	r2, [r7, #0]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d210      	bcs.n	8007d3a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d18:	4b25      	ldr	r3, [pc, #148]	@ (8007db0 <HAL_RCC_ClockConfig+0x25c>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f023 020f 	bic.w	r2, r3, #15
 8007d20:	4923      	ldr	r1, [pc, #140]	@ (8007db0 <HAL_RCC_ClockConfig+0x25c>)
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	4313      	orrs	r3, r2
 8007d26:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d28:	4b21      	ldr	r3, [pc, #132]	@ (8007db0 <HAL_RCC_ClockConfig+0x25c>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f003 030f 	and.w	r3, r3, #15
 8007d30:	683a      	ldr	r2, [r7, #0]
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d001      	beq.n	8007d3a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e036      	b.n	8007da8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f003 0304 	and.w	r3, r3, #4
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d008      	beq.n	8007d58 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d46:	4b1b      	ldr	r3, [pc, #108]	@ (8007db4 <HAL_RCC_ClockConfig+0x260>)
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	68db      	ldr	r3, [r3, #12]
 8007d52:	4918      	ldr	r1, [pc, #96]	@ (8007db4 <HAL_RCC_ClockConfig+0x260>)
 8007d54:	4313      	orrs	r3, r2
 8007d56:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f003 0308 	and.w	r3, r3, #8
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d009      	beq.n	8007d78 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007d64:	4b13      	ldr	r3, [pc, #76]	@ (8007db4 <HAL_RCC_ClockConfig+0x260>)
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	691b      	ldr	r3, [r3, #16]
 8007d70:	00db      	lsls	r3, r3, #3
 8007d72:	4910      	ldr	r1, [pc, #64]	@ (8007db4 <HAL_RCC_ClockConfig+0x260>)
 8007d74:	4313      	orrs	r3, r2
 8007d76:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007d78:	f000 f826 	bl	8007dc8 <HAL_RCC_GetSysClockFreq>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8007db4 <HAL_RCC_ClockConfig+0x260>)
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	091b      	lsrs	r3, r3, #4
 8007d84:	f003 030f 	and.w	r3, r3, #15
 8007d88:	490c      	ldr	r1, [pc, #48]	@ (8007dbc <HAL_RCC_ClockConfig+0x268>)
 8007d8a:	5ccb      	ldrb	r3, [r1, r3]
 8007d8c:	f003 031f 	and.w	r3, r3, #31
 8007d90:	fa22 f303 	lsr.w	r3, r2, r3
 8007d94:	4a0a      	ldr	r2, [pc, #40]	@ (8007dc0 <HAL_RCC_ClockConfig+0x26c>)
 8007d96:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007d98:	4b0a      	ldr	r3, [pc, #40]	@ (8007dc4 <HAL_RCC_ClockConfig+0x270>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f7fb f92d 	bl	8002ffc <HAL_InitTick>
 8007da2:	4603      	mov	r3, r0
 8007da4:	73fb      	strb	r3, [r7, #15]

  return status;
 8007da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3718      	adds	r7, #24
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}
 8007db0:	40022000 	.word	0x40022000
 8007db4:	40021000 	.word	0x40021000
 8007db8:	04c4b400 	.word	0x04c4b400
 8007dbc:	0800cbfc 	.word	0x0800cbfc
 8007dc0:	20000054 	.word	0x20000054
 8007dc4:	2000008c 	.word	0x2000008c

08007dc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b089      	sub	sp, #36	@ 0x24
 8007dcc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	61fb      	str	r3, [r7, #28]
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007dd6:	4b3e      	ldr	r3, [pc, #248]	@ (8007ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	f003 030c 	and.w	r3, r3, #12
 8007dde:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007de0:	4b3b      	ldr	r3, [pc, #236]	@ (8007ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	f003 0303 	and.w	r3, r3, #3
 8007de8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d005      	beq.n	8007dfc <HAL_RCC_GetSysClockFreq+0x34>
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	2b0c      	cmp	r3, #12
 8007df4:	d121      	bne.n	8007e3a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d11e      	bne.n	8007e3a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007dfc:	4b34      	ldr	r3, [pc, #208]	@ (8007ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f003 0308 	and.w	r3, r3, #8
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d107      	bne.n	8007e18 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007e08:	4b31      	ldr	r3, [pc, #196]	@ (8007ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007e0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e0e:	0a1b      	lsrs	r3, r3, #8
 8007e10:	f003 030f 	and.w	r3, r3, #15
 8007e14:	61fb      	str	r3, [r7, #28]
 8007e16:	e005      	b.n	8007e24 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007e18:	4b2d      	ldr	r3, [pc, #180]	@ (8007ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	091b      	lsrs	r3, r3, #4
 8007e1e:	f003 030f 	and.w	r3, r3, #15
 8007e22:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007e24:	4a2b      	ldr	r2, [pc, #172]	@ (8007ed4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007e26:	69fb      	ldr	r3, [r7, #28]
 8007e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e2c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d10d      	bne.n	8007e50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007e34:	69fb      	ldr	r3, [r7, #28]
 8007e36:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007e38:	e00a      	b.n	8007e50 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	2b04      	cmp	r3, #4
 8007e3e:	d102      	bne.n	8007e46 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007e40:	4b25      	ldr	r3, [pc, #148]	@ (8007ed8 <HAL_RCC_GetSysClockFreq+0x110>)
 8007e42:	61bb      	str	r3, [r7, #24]
 8007e44:	e004      	b.n	8007e50 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	2b08      	cmp	r3, #8
 8007e4a:	d101      	bne.n	8007e50 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007e4c:	4b23      	ldr	r3, [pc, #140]	@ (8007edc <HAL_RCC_GetSysClockFreq+0x114>)
 8007e4e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	2b0c      	cmp	r3, #12
 8007e54:	d134      	bne.n	8007ec0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007e56:	4b1e      	ldr	r3, [pc, #120]	@ (8007ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007e58:	68db      	ldr	r3, [r3, #12]
 8007e5a:	f003 0303 	and.w	r3, r3, #3
 8007e5e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	2b02      	cmp	r3, #2
 8007e64:	d003      	beq.n	8007e6e <HAL_RCC_GetSysClockFreq+0xa6>
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	2b03      	cmp	r3, #3
 8007e6a:	d003      	beq.n	8007e74 <HAL_RCC_GetSysClockFreq+0xac>
 8007e6c:	e005      	b.n	8007e7a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8007ed8 <HAL_RCC_GetSysClockFreq+0x110>)
 8007e70:	617b      	str	r3, [r7, #20]
      break;
 8007e72:	e005      	b.n	8007e80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007e74:	4b19      	ldr	r3, [pc, #100]	@ (8007edc <HAL_RCC_GetSysClockFreq+0x114>)
 8007e76:	617b      	str	r3, [r7, #20]
      break;
 8007e78:	e002      	b.n	8007e80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	617b      	str	r3, [r7, #20]
      break;
 8007e7e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007e80:	4b13      	ldr	r3, [pc, #76]	@ (8007ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007e82:	68db      	ldr	r3, [r3, #12]
 8007e84:	091b      	lsrs	r3, r3, #4
 8007e86:	f003 030f 	and.w	r3, r3, #15
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007e8e:	4b10      	ldr	r3, [pc, #64]	@ (8007ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	0a1b      	lsrs	r3, r3, #8
 8007e94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e98:	697a      	ldr	r2, [r7, #20]
 8007e9a:	fb03 f202 	mul.w	r2, r3, r2
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ea4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8007ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007ea8:	68db      	ldr	r3, [r3, #12]
 8007eaa:	0e5b      	lsrs	r3, r3, #25
 8007eac:	f003 0303 	and.w	r3, r3, #3
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	005b      	lsls	r3, r3, #1
 8007eb4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007eb6:	697a      	ldr	r2, [r7, #20]
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ebe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007ec0:	69bb      	ldr	r3, [r7, #24]
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3724      	adds	r7, #36	@ 0x24
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr
 8007ece:	bf00      	nop
 8007ed0:	40021000 	.word	0x40021000
 8007ed4:	0800cc14 	.word	0x0800cc14
 8007ed8:	00f42400 	.word	0x00f42400
 8007edc:	007a1200 	.word	0x007a1200

08007ee0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ee4:	4b03      	ldr	r3, [pc, #12]	@ (8007ef4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr
 8007ef2:	bf00      	nop
 8007ef4:	20000054 	.word	0x20000054

08007ef8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007efc:	f7ff fff0 	bl	8007ee0 <HAL_RCC_GetHCLKFreq>
 8007f00:	4602      	mov	r2, r0
 8007f02:	4b06      	ldr	r3, [pc, #24]	@ (8007f1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	0a1b      	lsrs	r3, r3, #8
 8007f08:	f003 0307 	and.w	r3, r3, #7
 8007f0c:	4904      	ldr	r1, [pc, #16]	@ (8007f20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007f0e:	5ccb      	ldrb	r3, [r1, r3]
 8007f10:	f003 031f 	and.w	r3, r3, #31
 8007f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	bd80      	pop	{r7, pc}
 8007f1c:	40021000 	.word	0x40021000
 8007f20:	0800cc0c 	.word	0x0800cc0c

08007f24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007f28:	f7ff ffda 	bl	8007ee0 <HAL_RCC_GetHCLKFreq>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	4b06      	ldr	r3, [pc, #24]	@ (8007f48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	0adb      	lsrs	r3, r3, #11
 8007f34:	f003 0307 	and.w	r3, r3, #7
 8007f38:	4904      	ldr	r1, [pc, #16]	@ (8007f4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8007f3a:	5ccb      	ldrb	r3, [r1, r3]
 8007f3c:	f003 031f 	and.w	r3, r3, #31
 8007f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	40021000 	.word	0x40021000
 8007f4c:	0800cc0c 	.word	0x0800cc0c

08007f50 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b086      	sub	sp, #24
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007f58:	2300      	movs	r3, #0
 8007f5a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007f5c:	4b27      	ldr	r3, [pc, #156]	@ (8007ffc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d003      	beq.n	8007f70 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007f68:	f7ff f916 	bl	8007198 <HAL_PWREx_GetVoltageRange>
 8007f6c:	6178      	str	r0, [r7, #20]
 8007f6e:	e014      	b.n	8007f9a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007f70:	4b22      	ldr	r3, [pc, #136]	@ (8007ffc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f74:	4a21      	ldr	r2, [pc, #132]	@ (8007ffc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007f76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8007f7c:	4b1f      	ldr	r3, [pc, #124]	@ (8007ffc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f84:	60fb      	str	r3, [r7, #12]
 8007f86:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007f88:	f7ff f906 	bl	8007198 <HAL_PWREx_GetVoltageRange>
 8007f8c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007f8e:	4b1b      	ldr	r3, [pc, #108]	@ (8007ffc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f92:	4a1a      	ldr	r2, [pc, #104]	@ (8007ffc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007f94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f98:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fa0:	d10b      	bne.n	8007fba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2b80      	cmp	r3, #128	@ 0x80
 8007fa6:	d913      	bls.n	8007fd0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2ba0      	cmp	r3, #160	@ 0xa0
 8007fac:	d902      	bls.n	8007fb4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007fae:	2302      	movs	r3, #2
 8007fb0:	613b      	str	r3, [r7, #16]
 8007fb2:	e00d      	b.n	8007fd0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	613b      	str	r3, [r7, #16]
 8007fb8:	e00a      	b.n	8007fd0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2b7f      	cmp	r3, #127	@ 0x7f
 8007fbe:	d902      	bls.n	8007fc6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8007fc0:	2302      	movs	r3, #2
 8007fc2:	613b      	str	r3, [r7, #16]
 8007fc4:	e004      	b.n	8007fd0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2b70      	cmp	r3, #112	@ 0x70
 8007fca:	d101      	bne.n	8007fd0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007fcc:	2301      	movs	r3, #1
 8007fce:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8008000 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f023 020f 	bic.w	r2, r3, #15
 8007fd8:	4909      	ldr	r1, [pc, #36]	@ (8008000 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007fe0:	4b07      	ldr	r3, [pc, #28]	@ (8008000 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f003 030f 	and.w	r3, r3, #15
 8007fe8:	693a      	ldr	r2, [r7, #16]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d001      	beq.n	8007ff2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	e000      	b.n	8007ff4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8007ff2:	2300      	movs	r3, #0
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3718      	adds	r7, #24
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}
 8007ffc:	40021000 	.word	0x40021000
 8008000:	40022000 	.word	0x40022000

08008004 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008004:	b480      	push	{r7}
 8008006:	b087      	sub	sp, #28
 8008008:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800800a:	4b2d      	ldr	r3, [pc, #180]	@ (80080c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800800c:	68db      	ldr	r3, [r3, #12]
 800800e:	f003 0303 	and.w	r3, r3, #3
 8008012:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2b03      	cmp	r3, #3
 8008018:	d00b      	beq.n	8008032 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2b03      	cmp	r3, #3
 800801e:	d825      	bhi.n	800806c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2b01      	cmp	r3, #1
 8008024:	d008      	beq.n	8008038 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2b02      	cmp	r3, #2
 800802a:	d11f      	bne.n	800806c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800802c:	4b25      	ldr	r3, [pc, #148]	@ (80080c4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800802e:	613b      	str	r3, [r7, #16]
    break;
 8008030:	e01f      	b.n	8008072 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8008032:	4b25      	ldr	r3, [pc, #148]	@ (80080c8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8008034:	613b      	str	r3, [r7, #16]
    break;
 8008036:	e01c      	b.n	8008072 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008038:	4b21      	ldr	r3, [pc, #132]	@ (80080c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f003 0308 	and.w	r3, r3, #8
 8008040:	2b00      	cmp	r3, #0
 8008042:	d107      	bne.n	8008054 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008044:	4b1e      	ldr	r3, [pc, #120]	@ (80080c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008046:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800804a:	0a1b      	lsrs	r3, r3, #8
 800804c:	f003 030f 	and.w	r3, r3, #15
 8008050:	617b      	str	r3, [r7, #20]
 8008052:	e005      	b.n	8008060 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008054:	4b1a      	ldr	r3, [pc, #104]	@ (80080c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	091b      	lsrs	r3, r3, #4
 800805a:	f003 030f 	and.w	r3, r3, #15
 800805e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8008060:	4a1a      	ldr	r2, [pc, #104]	@ (80080cc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008068:	613b      	str	r3, [r7, #16]
    break;
 800806a:	e002      	b.n	8008072 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800806c:	2300      	movs	r3, #0
 800806e:	613b      	str	r3, [r7, #16]
    break;
 8008070:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008072:	4b13      	ldr	r3, [pc, #76]	@ (80080c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	091b      	lsrs	r3, r3, #4
 8008078:	f003 030f 	and.w	r3, r3, #15
 800807c:	3301      	adds	r3, #1
 800807e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008080:	4b0f      	ldr	r3, [pc, #60]	@ (80080c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008082:	68db      	ldr	r3, [r3, #12]
 8008084:	0a1b      	lsrs	r3, r3, #8
 8008086:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800808a:	693a      	ldr	r2, [r7, #16]
 800808c:	fb03 f202 	mul.w	r2, r3, r2
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	fbb2 f3f3 	udiv	r3, r2, r3
 8008096:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008098:	4b09      	ldr	r3, [pc, #36]	@ (80080c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	0e5b      	lsrs	r3, r3, #25
 800809e:	f003 0303 	and.w	r3, r3, #3
 80080a2:	3301      	adds	r3, #1
 80080a4:	005b      	lsls	r3, r3, #1
 80080a6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80080a8:	693a      	ldr	r2, [r7, #16]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80080b0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80080b2:	683b      	ldr	r3, [r7, #0]
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	371c      	adds	r7, #28
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr
 80080c0:	40021000 	.word	0x40021000
 80080c4:	00f42400 	.word	0x00f42400
 80080c8:	007a1200 	.word	0x007a1200
 80080cc:	0800cc14 	.word	0x0800cc14

080080d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b086      	sub	sp, #24
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80080d8:	2300      	movs	r3, #0
 80080da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80080dc:	2300      	movs	r3, #0
 80080de:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d040      	beq.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080f0:	2b80      	cmp	r3, #128	@ 0x80
 80080f2:	d02a      	beq.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80080f4:	2b80      	cmp	r3, #128	@ 0x80
 80080f6:	d825      	bhi.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80080f8:	2b60      	cmp	r3, #96	@ 0x60
 80080fa:	d026      	beq.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80080fc:	2b60      	cmp	r3, #96	@ 0x60
 80080fe:	d821      	bhi.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8008100:	2b40      	cmp	r3, #64	@ 0x40
 8008102:	d006      	beq.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8008104:	2b40      	cmp	r3, #64	@ 0x40
 8008106:	d81d      	bhi.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8008108:	2b00      	cmp	r3, #0
 800810a:	d009      	beq.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800810c:	2b20      	cmp	r3, #32
 800810e:	d010      	beq.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8008110:	e018      	b.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008112:	4b89      	ldr	r3, [pc, #548]	@ (8008338 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	4a88      	ldr	r2, [pc, #544]	@ (8008338 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008118:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800811c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800811e:	e015      	b.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	3304      	adds	r3, #4
 8008124:	2100      	movs	r1, #0
 8008126:	4618      	mov	r0, r3
 8008128:	f000 fb12 	bl	8008750 <RCCEx_PLLSAI1_Config>
 800812c:	4603      	mov	r3, r0
 800812e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008130:	e00c      	b.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	3320      	adds	r3, #32
 8008136:	2100      	movs	r1, #0
 8008138:	4618      	mov	r0, r3
 800813a:	f000 fbfd 	bl	8008938 <RCCEx_PLLSAI2_Config>
 800813e:	4603      	mov	r3, r0
 8008140:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008142:	e003      	b.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008144:	2301      	movs	r3, #1
 8008146:	74fb      	strb	r3, [r7, #19]
      break;
 8008148:	e000      	b.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800814a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800814c:	7cfb      	ldrb	r3, [r7, #19]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d10b      	bne.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008152:	4b79      	ldr	r3, [pc, #484]	@ (8008338 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008154:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008158:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008160:	4975      	ldr	r1, [pc, #468]	@ (8008338 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008162:	4313      	orrs	r3, r2
 8008164:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8008168:	e001      	b.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800816a:	7cfb      	ldrb	r3, [r7, #19]
 800816c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008176:	2b00      	cmp	r3, #0
 8008178:	d047      	beq.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800817e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008182:	d030      	beq.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8008184:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008188:	d82a      	bhi.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800818a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800818e:	d02a      	beq.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8008190:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008194:	d824      	bhi.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8008196:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800819a:	d008      	beq.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0xde>
 800819c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081a0:	d81e      	bhi.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d00a      	beq.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0xec>
 80081a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081aa:	d010      	beq.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80081ac:	e018      	b.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80081ae:	4b62      	ldr	r3, [pc, #392]	@ (8008338 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80081b0:	68db      	ldr	r3, [r3, #12]
 80081b2:	4a61      	ldr	r2, [pc, #388]	@ (8008338 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80081b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80081b8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80081ba:	e015      	b.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	3304      	adds	r3, #4
 80081c0:	2100      	movs	r1, #0
 80081c2:	4618      	mov	r0, r3
 80081c4:	f000 fac4 	bl	8008750 <RCCEx_PLLSAI1_Config>
 80081c8:	4603      	mov	r3, r0
 80081ca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80081cc:	e00c      	b.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	3320      	adds	r3, #32
 80081d2:	2100      	movs	r1, #0
 80081d4:	4618      	mov	r0, r3
 80081d6:	f000 fbaf 	bl	8008938 <RCCEx_PLLSAI2_Config>
 80081da:	4603      	mov	r3, r0
 80081dc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80081de:	e003      	b.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80081e0:	2301      	movs	r3, #1
 80081e2:	74fb      	strb	r3, [r7, #19]
      break;
 80081e4:	e000      	b.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80081e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081e8:	7cfb      	ldrb	r3, [r7, #19]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d10b      	bne.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80081ee:	4b52      	ldr	r3, [pc, #328]	@ (8008338 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80081f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80081f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081fc:	494e      	ldr	r1, [pc, #312]	@ (8008338 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80081fe:	4313      	orrs	r3, r2
 8008200:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8008204:	e001      	b.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008206:	7cfb      	ldrb	r3, [r7, #19]
 8008208:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008212:	2b00      	cmp	r3, #0
 8008214:	f000 809f 	beq.w	8008356 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008218:	2300      	movs	r3, #0
 800821a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800821c:	4b46      	ldr	r3, [pc, #280]	@ (8008338 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800821e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008220:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008224:	2b00      	cmp	r3, #0
 8008226:	d101      	bne.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8008228:	2301      	movs	r3, #1
 800822a:	e000      	b.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800822c:	2300      	movs	r3, #0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d00d      	beq.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008232:	4b41      	ldr	r3, [pc, #260]	@ (8008338 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008236:	4a40      	ldr	r2, [pc, #256]	@ (8008338 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008238:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800823c:	6593      	str	r3, [r2, #88]	@ 0x58
 800823e:	4b3e      	ldr	r3, [pc, #248]	@ (8008338 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008242:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008246:	60bb      	str	r3, [r7, #8]
 8008248:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800824a:	2301      	movs	r3, #1
 800824c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800824e:	4b3b      	ldr	r3, [pc, #236]	@ (800833c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a3a      	ldr	r2, [pc, #232]	@ (800833c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008254:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008258:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800825a:	f7fa ff1f 	bl	800309c <HAL_GetTick>
 800825e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008260:	e009      	b.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008262:	f7fa ff1b 	bl	800309c <HAL_GetTick>
 8008266:	4602      	mov	r2, r0
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	1ad3      	subs	r3, r2, r3
 800826c:	2b02      	cmp	r3, #2
 800826e:	d902      	bls.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8008270:	2303      	movs	r3, #3
 8008272:	74fb      	strb	r3, [r7, #19]
        break;
 8008274:	e005      	b.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008276:	4b31      	ldr	r3, [pc, #196]	@ (800833c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800827e:	2b00      	cmp	r3, #0
 8008280:	d0ef      	beq.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8008282:	7cfb      	ldrb	r3, [r7, #19]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d15b      	bne.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008288:	4b2b      	ldr	r3, [pc, #172]	@ (8008338 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800828a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800828e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008292:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d01f      	beq.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082a0:	697a      	ldr	r2, [r7, #20]
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d019      	beq.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80082a6:	4b24      	ldr	r3, [pc, #144]	@ (8008338 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80082a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082b0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80082b2:	4b21      	ldr	r3, [pc, #132]	@ (8008338 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80082b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082b8:	4a1f      	ldr	r2, [pc, #124]	@ (8008338 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80082ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80082be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80082c2:	4b1d      	ldr	r3, [pc, #116]	@ (8008338 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80082c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082c8:	4a1b      	ldr	r2, [pc, #108]	@ (8008338 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80082ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80082ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80082d2:	4a19      	ldr	r2, [pc, #100]	@ (8008338 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	f003 0301 	and.w	r3, r3, #1
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d016      	beq.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082e4:	f7fa feda 	bl	800309c <HAL_GetTick>
 80082e8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80082ea:	e00b      	b.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082ec:	f7fa fed6 	bl	800309c <HAL_GetTick>
 80082f0:	4602      	mov	r2, r0
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	1ad3      	subs	r3, r2, r3
 80082f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d902      	bls.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80082fe:	2303      	movs	r3, #3
 8008300:	74fb      	strb	r3, [r7, #19]
            break;
 8008302:	e006      	b.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008304:	4b0c      	ldr	r3, [pc, #48]	@ (8008338 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800830a:	f003 0302 	and.w	r3, r3, #2
 800830e:	2b00      	cmp	r3, #0
 8008310:	d0ec      	beq.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8008312:	7cfb      	ldrb	r3, [r7, #19]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d10c      	bne.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008318:	4b07      	ldr	r3, [pc, #28]	@ (8008338 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800831a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800831e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008328:	4903      	ldr	r1, [pc, #12]	@ (8008338 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800832a:	4313      	orrs	r3, r2
 800832c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008330:	e008      	b.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008332:	7cfb      	ldrb	r3, [r7, #19]
 8008334:	74bb      	strb	r3, [r7, #18]
 8008336:	e005      	b.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8008338:	40021000 	.word	0x40021000
 800833c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008340:	7cfb      	ldrb	r3, [r7, #19]
 8008342:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008344:	7c7b      	ldrb	r3, [r7, #17]
 8008346:	2b01      	cmp	r3, #1
 8008348:	d105      	bne.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800834a:	4ba0      	ldr	r3, [pc, #640]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800834c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800834e:	4a9f      	ldr	r2, [pc, #636]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008350:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008354:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f003 0301 	and.w	r3, r3, #1
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00a      	beq.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008362:	4b9a      	ldr	r3, [pc, #616]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008364:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008368:	f023 0203 	bic.w	r2, r3, #3
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008370:	4996      	ldr	r1, [pc, #600]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008372:	4313      	orrs	r3, r2
 8008374:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f003 0302 	and.w	r3, r3, #2
 8008380:	2b00      	cmp	r3, #0
 8008382:	d00a      	beq.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008384:	4b91      	ldr	r3, [pc, #580]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800838a:	f023 020c 	bic.w	r2, r3, #12
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008392:	498e      	ldr	r1, [pc, #568]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008394:	4313      	orrs	r3, r2
 8008396:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f003 0304 	and.w	r3, r3, #4
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d00a      	beq.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80083a6:	4b89      	ldr	r3, [pc, #548]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80083a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083b4:	4985      	ldr	r1, [pc, #532]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80083b6:	4313      	orrs	r3, r2
 80083b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f003 0308 	and.w	r3, r3, #8
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d00a      	beq.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80083c8:	4b80      	ldr	r3, [pc, #512]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80083ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083d6:	497d      	ldr	r1, [pc, #500]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80083d8:	4313      	orrs	r3, r2
 80083da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f003 0310 	and.w	r3, r3, #16
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00a      	beq.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80083ea:	4b78      	ldr	r3, [pc, #480]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80083ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083f8:	4974      	ldr	r1, [pc, #464]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80083fa:	4313      	orrs	r3, r2
 80083fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f003 0320 	and.w	r3, r3, #32
 8008408:	2b00      	cmp	r3, #0
 800840a:	d00a      	beq.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800840c:	4b6f      	ldr	r3, [pc, #444]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800840e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008412:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800841a:	496c      	ldr	r1, [pc, #432]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800841c:	4313      	orrs	r3, r2
 800841e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800842a:	2b00      	cmp	r3, #0
 800842c:	d00a      	beq.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800842e:	4b67      	ldr	r3, [pc, #412]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008430:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008434:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800843c:	4963      	ldr	r1, [pc, #396]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800843e:	4313      	orrs	r3, r2
 8008440:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800844c:	2b00      	cmp	r3, #0
 800844e:	d00a      	beq.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008450:	4b5e      	ldr	r3, [pc, #376]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008456:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800845e:	495b      	ldr	r1, [pc, #364]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008460:	4313      	orrs	r3, r2
 8008462:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800846e:	2b00      	cmp	r3, #0
 8008470:	d00a      	beq.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008472:	4b56      	ldr	r3, [pc, #344]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008478:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008480:	4952      	ldr	r1, [pc, #328]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008482:	4313      	orrs	r3, r2
 8008484:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008490:	2b00      	cmp	r3, #0
 8008492:	d00a      	beq.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008494:	4b4d      	ldr	r3, [pc, #308]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800849a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084a2:	494a      	ldr	r1, [pc, #296]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80084a4:	4313      	orrs	r3, r2
 80084a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d00a      	beq.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80084b6:	4b45      	ldr	r3, [pc, #276]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80084b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084c4:	4941      	ldr	r1, [pc, #260]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80084c6:	4313      	orrs	r3, r2
 80084c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d00a      	beq.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80084d8:	4b3c      	ldr	r3, [pc, #240]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80084da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80084de:	f023 0203 	bic.w	r2, r3, #3
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084e6:	4939      	ldr	r1, [pc, #228]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80084e8:	4313      	orrs	r3, r2
 80084ea:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d028      	beq.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80084fa:	4b34      	ldr	r3, [pc, #208]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80084fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008500:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008508:	4930      	ldr	r1, [pc, #192]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800850a:	4313      	orrs	r3, r2
 800850c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008514:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008518:	d106      	bne.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800851a:	4b2c      	ldr	r3, [pc, #176]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800851c:	68db      	ldr	r3, [r3, #12]
 800851e:	4a2b      	ldr	r2, [pc, #172]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008520:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008524:	60d3      	str	r3, [r2, #12]
 8008526:	e011      	b.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800852c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008530:	d10c      	bne.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	3304      	adds	r3, #4
 8008536:	2101      	movs	r1, #1
 8008538:	4618      	mov	r0, r3
 800853a:	f000 f909 	bl	8008750 <RCCEx_PLLSAI1_Config>
 800853e:	4603      	mov	r3, r0
 8008540:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008542:	7cfb      	ldrb	r3, [r7, #19]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d001      	beq.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8008548:	7cfb      	ldrb	r3, [r7, #19]
 800854a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008554:	2b00      	cmp	r3, #0
 8008556:	d04d      	beq.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800855c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008560:	d108      	bne.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8008562:	4b1a      	ldr	r3, [pc, #104]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008564:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008568:	4a18      	ldr	r2, [pc, #96]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800856a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800856e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8008572:	e012      	b.n	800859a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8008574:	4b15      	ldr	r3, [pc, #84]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008576:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800857a:	4a14      	ldr	r2, [pc, #80]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800857c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008580:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8008584:	4b11      	ldr	r3, [pc, #68]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800858a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008592:	490e      	ldr	r1, [pc, #56]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008594:	4313      	orrs	r3, r2
 8008596:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800859e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085a2:	d106      	bne.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80085a4:	4b09      	ldr	r3, [pc, #36]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80085a6:	68db      	ldr	r3, [r3, #12]
 80085a8:	4a08      	ldr	r2, [pc, #32]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80085aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80085ae:	60d3      	str	r3, [r2, #12]
 80085b0:	e020      	b.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80085b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80085ba:	d109      	bne.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80085bc:	4b03      	ldr	r3, [pc, #12]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80085be:	68db      	ldr	r3, [r3, #12]
 80085c0:	4a02      	ldr	r2, [pc, #8]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80085c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80085c6:	60d3      	str	r3, [r2, #12]
 80085c8:	e014      	b.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80085ca:	bf00      	nop
 80085cc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80085d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80085d8:	d10c      	bne.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	3304      	adds	r3, #4
 80085de:	2101      	movs	r1, #1
 80085e0:	4618      	mov	r0, r3
 80085e2:	f000 f8b5 	bl	8008750 <RCCEx_PLLSAI1_Config>
 80085e6:	4603      	mov	r3, r0
 80085e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80085ea:	7cfb      	ldrb	r3, [r7, #19]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d001      	beq.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80085f0:	7cfb      	ldrb	r3, [r7, #19]
 80085f2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d028      	beq.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008600:	4b4a      	ldr	r3, [pc, #296]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008606:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800860e:	4947      	ldr	r1, [pc, #284]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008610:	4313      	orrs	r3, r2
 8008612:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800861a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800861e:	d106      	bne.n	800862e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008620:	4b42      	ldr	r3, [pc, #264]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008622:	68db      	ldr	r3, [r3, #12]
 8008624:	4a41      	ldr	r2, [pc, #260]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008626:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800862a:	60d3      	str	r3, [r2, #12]
 800862c:	e011      	b.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008632:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008636:	d10c      	bne.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	3304      	adds	r3, #4
 800863c:	2101      	movs	r1, #1
 800863e:	4618      	mov	r0, r3
 8008640:	f000 f886 	bl	8008750 <RCCEx_PLLSAI1_Config>
 8008644:	4603      	mov	r3, r0
 8008646:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008648:	7cfb      	ldrb	r3, [r7, #19]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d001      	beq.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800864e:	7cfb      	ldrb	r3, [r7, #19]
 8008650:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800865a:	2b00      	cmp	r3, #0
 800865c:	d01e      	beq.n	800869c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800865e:	4b33      	ldr	r3, [pc, #204]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008660:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008664:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800866e:	492f      	ldr	r1, [pc, #188]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008670:	4313      	orrs	r3, r2
 8008672:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800867c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008680:	d10c      	bne.n	800869c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	3304      	adds	r3, #4
 8008686:	2102      	movs	r1, #2
 8008688:	4618      	mov	r0, r3
 800868a:	f000 f861 	bl	8008750 <RCCEx_PLLSAI1_Config>
 800868e:	4603      	mov	r3, r0
 8008690:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008692:	7cfb      	ldrb	r3, [r7, #19]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d001      	beq.n	800869c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8008698:	7cfb      	ldrb	r3, [r7, #19]
 800869a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d00b      	beq.n	80086c0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80086a8:	4b20      	ldr	r3, [pc, #128]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80086ae:	f023 0204 	bic.w	r2, r3, #4
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086b8:	491c      	ldr	r1, [pc, #112]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086ba:	4313      	orrs	r3, r2
 80086bc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d00b      	beq.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80086cc:	4b17      	ldr	r3, [pc, #92]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80086d2:	f023 0218 	bic.w	r2, r3, #24
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086dc:	4913      	ldr	r1, [pc, #76]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086de:	4313      	orrs	r3, r2
 80086e0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d017      	beq.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80086f0:	4b0e      	ldr	r3, [pc, #56]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80086f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008700:	490a      	ldr	r1, [pc, #40]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008702:	4313      	orrs	r3, r2
 8008704:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800870e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008712:	d105      	bne.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008714:	4b05      	ldr	r3, [pc, #20]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008716:	68db      	ldr	r3, [r3, #12]
 8008718:	4a04      	ldr	r2, [pc, #16]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800871a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800871e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008720:	7cbb      	ldrb	r3, [r7, #18]
}
 8008722:	4618      	mov	r0, r3
 8008724:	3718      	adds	r7, #24
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	40021000 	.word	0x40021000

08008730 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8008730:	b480      	push	{r7}
 8008732:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8008734:	4b05      	ldr	r3, [pc, #20]	@ (800874c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a04      	ldr	r2, [pc, #16]	@ (800874c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800873a:	f043 0304 	orr.w	r3, r3, #4
 800873e:	6013      	str	r3, [r2, #0]
}
 8008740:	bf00      	nop
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr
 800874a:	bf00      	nop
 800874c:	40021000 	.word	0x40021000

08008750 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b084      	sub	sp, #16
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800875a:	2300      	movs	r3, #0
 800875c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800875e:	4b72      	ldr	r3, [pc, #456]	@ (8008928 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	f003 0303 	and.w	r3, r3, #3
 8008766:	2b00      	cmp	r3, #0
 8008768:	d00e      	beq.n	8008788 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800876a:	4b6f      	ldr	r3, [pc, #444]	@ (8008928 <RCCEx_PLLSAI1_Config+0x1d8>)
 800876c:	68db      	ldr	r3, [r3, #12]
 800876e:	f003 0203 	and.w	r2, r3, #3
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	429a      	cmp	r2, r3
 8008778:	d103      	bne.n	8008782 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
       ||
 800877e:	2b00      	cmp	r3, #0
 8008780:	d142      	bne.n	8008808 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8008782:	2301      	movs	r3, #1
 8008784:	73fb      	strb	r3, [r7, #15]
 8008786:	e03f      	b.n	8008808 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	2b03      	cmp	r3, #3
 800878e:	d018      	beq.n	80087c2 <RCCEx_PLLSAI1_Config+0x72>
 8008790:	2b03      	cmp	r3, #3
 8008792:	d825      	bhi.n	80087e0 <RCCEx_PLLSAI1_Config+0x90>
 8008794:	2b01      	cmp	r3, #1
 8008796:	d002      	beq.n	800879e <RCCEx_PLLSAI1_Config+0x4e>
 8008798:	2b02      	cmp	r3, #2
 800879a:	d009      	beq.n	80087b0 <RCCEx_PLLSAI1_Config+0x60>
 800879c:	e020      	b.n	80087e0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800879e:	4b62      	ldr	r3, [pc, #392]	@ (8008928 <RCCEx_PLLSAI1_Config+0x1d8>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f003 0302 	and.w	r3, r3, #2
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d11d      	bne.n	80087e6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80087ae:	e01a      	b.n	80087e6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80087b0:	4b5d      	ldr	r3, [pc, #372]	@ (8008928 <RCCEx_PLLSAI1_Config+0x1d8>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d116      	bne.n	80087ea <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80087bc:	2301      	movs	r3, #1
 80087be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80087c0:	e013      	b.n	80087ea <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80087c2:	4b59      	ldr	r3, [pc, #356]	@ (8008928 <RCCEx_PLLSAI1_Config+0x1d8>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d10f      	bne.n	80087ee <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80087ce:	4b56      	ldr	r3, [pc, #344]	@ (8008928 <RCCEx_PLLSAI1_Config+0x1d8>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d109      	bne.n	80087ee <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80087da:	2301      	movs	r3, #1
 80087dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80087de:	e006      	b.n	80087ee <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	73fb      	strb	r3, [r7, #15]
      break;
 80087e4:	e004      	b.n	80087f0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80087e6:	bf00      	nop
 80087e8:	e002      	b.n	80087f0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80087ea:	bf00      	nop
 80087ec:	e000      	b.n	80087f0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80087ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80087f0:	7bfb      	ldrb	r3, [r7, #15]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d108      	bne.n	8008808 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80087f6:	4b4c      	ldr	r3, [pc, #304]	@ (8008928 <RCCEx_PLLSAI1_Config+0x1d8>)
 80087f8:	68db      	ldr	r3, [r3, #12]
 80087fa:	f023 0203 	bic.w	r2, r3, #3
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4949      	ldr	r1, [pc, #292]	@ (8008928 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008804:	4313      	orrs	r3, r2
 8008806:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8008808:	7bfb      	ldrb	r3, [r7, #15]
 800880a:	2b00      	cmp	r3, #0
 800880c:	f040 8086 	bne.w	800891c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008810:	4b45      	ldr	r3, [pc, #276]	@ (8008928 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a44      	ldr	r2, [pc, #272]	@ (8008928 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008816:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800881a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800881c:	f7fa fc3e 	bl	800309c <HAL_GetTick>
 8008820:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008822:	e009      	b.n	8008838 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008824:	f7fa fc3a 	bl	800309c <HAL_GetTick>
 8008828:	4602      	mov	r2, r0
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	1ad3      	subs	r3, r2, r3
 800882e:	2b02      	cmp	r3, #2
 8008830:	d902      	bls.n	8008838 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8008832:	2303      	movs	r3, #3
 8008834:	73fb      	strb	r3, [r7, #15]
        break;
 8008836:	e005      	b.n	8008844 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008838:	4b3b      	ldr	r3, [pc, #236]	@ (8008928 <RCCEx_PLLSAI1_Config+0x1d8>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008840:	2b00      	cmp	r3, #0
 8008842:	d1ef      	bne.n	8008824 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8008844:	7bfb      	ldrb	r3, [r7, #15]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d168      	bne.n	800891c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d113      	bne.n	8008878 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008850:	4b35      	ldr	r3, [pc, #212]	@ (8008928 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008852:	691a      	ldr	r2, [r3, #16]
 8008854:	4b35      	ldr	r3, [pc, #212]	@ (800892c <RCCEx_PLLSAI1_Config+0x1dc>)
 8008856:	4013      	ands	r3, r2
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	6892      	ldr	r2, [r2, #8]
 800885c:	0211      	lsls	r1, r2, #8
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	68d2      	ldr	r2, [r2, #12]
 8008862:	06d2      	lsls	r2, r2, #27
 8008864:	4311      	orrs	r1, r2
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	6852      	ldr	r2, [r2, #4]
 800886a:	3a01      	subs	r2, #1
 800886c:	0112      	lsls	r2, r2, #4
 800886e:	430a      	orrs	r2, r1
 8008870:	492d      	ldr	r1, [pc, #180]	@ (8008928 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008872:	4313      	orrs	r3, r2
 8008874:	610b      	str	r3, [r1, #16]
 8008876:	e02d      	b.n	80088d4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	2b01      	cmp	r3, #1
 800887c:	d115      	bne.n	80088aa <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800887e:	4b2a      	ldr	r3, [pc, #168]	@ (8008928 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008880:	691a      	ldr	r2, [r3, #16]
 8008882:	4b2b      	ldr	r3, [pc, #172]	@ (8008930 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008884:	4013      	ands	r3, r2
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	6892      	ldr	r2, [r2, #8]
 800888a:	0211      	lsls	r1, r2, #8
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	6912      	ldr	r2, [r2, #16]
 8008890:	0852      	lsrs	r2, r2, #1
 8008892:	3a01      	subs	r2, #1
 8008894:	0552      	lsls	r2, r2, #21
 8008896:	4311      	orrs	r1, r2
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	6852      	ldr	r2, [r2, #4]
 800889c:	3a01      	subs	r2, #1
 800889e:	0112      	lsls	r2, r2, #4
 80088a0:	430a      	orrs	r2, r1
 80088a2:	4921      	ldr	r1, [pc, #132]	@ (8008928 <RCCEx_PLLSAI1_Config+0x1d8>)
 80088a4:	4313      	orrs	r3, r2
 80088a6:	610b      	str	r3, [r1, #16]
 80088a8:	e014      	b.n	80088d4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80088aa:	4b1f      	ldr	r3, [pc, #124]	@ (8008928 <RCCEx_PLLSAI1_Config+0x1d8>)
 80088ac:	691a      	ldr	r2, [r3, #16]
 80088ae:	4b21      	ldr	r3, [pc, #132]	@ (8008934 <RCCEx_PLLSAI1_Config+0x1e4>)
 80088b0:	4013      	ands	r3, r2
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	6892      	ldr	r2, [r2, #8]
 80088b6:	0211      	lsls	r1, r2, #8
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	6952      	ldr	r2, [r2, #20]
 80088bc:	0852      	lsrs	r2, r2, #1
 80088be:	3a01      	subs	r2, #1
 80088c0:	0652      	lsls	r2, r2, #25
 80088c2:	4311      	orrs	r1, r2
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	6852      	ldr	r2, [r2, #4]
 80088c8:	3a01      	subs	r2, #1
 80088ca:	0112      	lsls	r2, r2, #4
 80088cc:	430a      	orrs	r2, r1
 80088ce:	4916      	ldr	r1, [pc, #88]	@ (8008928 <RCCEx_PLLSAI1_Config+0x1d8>)
 80088d0:	4313      	orrs	r3, r2
 80088d2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80088d4:	4b14      	ldr	r3, [pc, #80]	@ (8008928 <RCCEx_PLLSAI1_Config+0x1d8>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a13      	ldr	r2, [pc, #76]	@ (8008928 <RCCEx_PLLSAI1_Config+0x1d8>)
 80088da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80088de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088e0:	f7fa fbdc 	bl	800309c <HAL_GetTick>
 80088e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80088e6:	e009      	b.n	80088fc <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80088e8:	f7fa fbd8 	bl	800309c <HAL_GetTick>
 80088ec:	4602      	mov	r2, r0
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	1ad3      	subs	r3, r2, r3
 80088f2:	2b02      	cmp	r3, #2
 80088f4:	d902      	bls.n	80088fc <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80088f6:	2303      	movs	r3, #3
 80088f8:	73fb      	strb	r3, [r7, #15]
          break;
 80088fa:	e005      	b.n	8008908 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80088fc:	4b0a      	ldr	r3, [pc, #40]	@ (8008928 <RCCEx_PLLSAI1_Config+0x1d8>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008904:	2b00      	cmp	r3, #0
 8008906:	d0ef      	beq.n	80088e8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8008908:	7bfb      	ldrb	r3, [r7, #15]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d106      	bne.n	800891c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800890e:	4b06      	ldr	r3, [pc, #24]	@ (8008928 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008910:	691a      	ldr	r2, [r3, #16]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	699b      	ldr	r3, [r3, #24]
 8008916:	4904      	ldr	r1, [pc, #16]	@ (8008928 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008918:	4313      	orrs	r3, r2
 800891a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800891c:	7bfb      	ldrb	r3, [r7, #15]
}
 800891e:	4618      	mov	r0, r3
 8008920:	3710      	adds	r7, #16
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	40021000 	.word	0x40021000
 800892c:	07ff800f 	.word	0x07ff800f
 8008930:	ff9f800f 	.word	0xff9f800f
 8008934:	f9ff800f 	.word	0xf9ff800f

08008938 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008942:	2300      	movs	r3, #0
 8008944:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008946:	4b72      	ldr	r3, [pc, #456]	@ (8008b10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008948:	68db      	ldr	r3, [r3, #12]
 800894a:	f003 0303 	and.w	r3, r3, #3
 800894e:	2b00      	cmp	r3, #0
 8008950:	d00e      	beq.n	8008970 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008952:	4b6f      	ldr	r3, [pc, #444]	@ (8008b10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008954:	68db      	ldr	r3, [r3, #12]
 8008956:	f003 0203 	and.w	r2, r3, #3
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	429a      	cmp	r2, r3
 8008960:	d103      	bne.n	800896a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
       ||
 8008966:	2b00      	cmp	r3, #0
 8008968:	d142      	bne.n	80089f0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	73fb      	strb	r3, [r7, #15]
 800896e:	e03f      	b.n	80089f0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	2b03      	cmp	r3, #3
 8008976:	d018      	beq.n	80089aa <RCCEx_PLLSAI2_Config+0x72>
 8008978:	2b03      	cmp	r3, #3
 800897a:	d825      	bhi.n	80089c8 <RCCEx_PLLSAI2_Config+0x90>
 800897c:	2b01      	cmp	r3, #1
 800897e:	d002      	beq.n	8008986 <RCCEx_PLLSAI2_Config+0x4e>
 8008980:	2b02      	cmp	r3, #2
 8008982:	d009      	beq.n	8008998 <RCCEx_PLLSAI2_Config+0x60>
 8008984:	e020      	b.n	80089c8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008986:	4b62      	ldr	r3, [pc, #392]	@ (8008b10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f003 0302 	and.w	r3, r3, #2
 800898e:	2b00      	cmp	r3, #0
 8008990:	d11d      	bne.n	80089ce <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8008992:	2301      	movs	r3, #1
 8008994:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008996:	e01a      	b.n	80089ce <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008998:	4b5d      	ldr	r3, [pc, #372]	@ (8008b10 <RCCEx_PLLSAI2_Config+0x1d8>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d116      	bne.n	80089d2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80089a4:	2301      	movs	r3, #1
 80089a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80089a8:	e013      	b.n	80089d2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80089aa:	4b59      	ldr	r3, [pc, #356]	@ (8008b10 <RCCEx_PLLSAI2_Config+0x1d8>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d10f      	bne.n	80089d6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80089b6:	4b56      	ldr	r3, [pc, #344]	@ (8008b10 <RCCEx_PLLSAI2_Config+0x1d8>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d109      	bne.n	80089d6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80089c2:	2301      	movs	r3, #1
 80089c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80089c6:	e006      	b.n	80089d6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80089c8:	2301      	movs	r3, #1
 80089ca:	73fb      	strb	r3, [r7, #15]
      break;
 80089cc:	e004      	b.n	80089d8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80089ce:	bf00      	nop
 80089d0:	e002      	b.n	80089d8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80089d2:	bf00      	nop
 80089d4:	e000      	b.n	80089d8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80089d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80089d8:	7bfb      	ldrb	r3, [r7, #15]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d108      	bne.n	80089f0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80089de:	4b4c      	ldr	r3, [pc, #304]	@ (8008b10 <RCCEx_PLLSAI2_Config+0x1d8>)
 80089e0:	68db      	ldr	r3, [r3, #12]
 80089e2:	f023 0203 	bic.w	r2, r3, #3
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4949      	ldr	r1, [pc, #292]	@ (8008b10 <RCCEx_PLLSAI2_Config+0x1d8>)
 80089ec:	4313      	orrs	r3, r2
 80089ee:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80089f0:	7bfb      	ldrb	r3, [r7, #15]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	f040 8086 	bne.w	8008b04 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80089f8:	4b45      	ldr	r3, [pc, #276]	@ (8008b10 <RCCEx_PLLSAI2_Config+0x1d8>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a44      	ldr	r2, [pc, #272]	@ (8008b10 <RCCEx_PLLSAI2_Config+0x1d8>)
 80089fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a04:	f7fa fb4a 	bl	800309c <HAL_GetTick>
 8008a08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008a0a:	e009      	b.n	8008a20 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008a0c:	f7fa fb46 	bl	800309c <HAL_GetTick>
 8008a10:	4602      	mov	r2, r0
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	1ad3      	subs	r3, r2, r3
 8008a16:	2b02      	cmp	r3, #2
 8008a18:	d902      	bls.n	8008a20 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8008a1a:	2303      	movs	r3, #3
 8008a1c:	73fb      	strb	r3, [r7, #15]
        break;
 8008a1e:	e005      	b.n	8008a2c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008a20:	4b3b      	ldr	r3, [pc, #236]	@ (8008b10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d1ef      	bne.n	8008a0c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8008a2c:	7bfb      	ldrb	r3, [r7, #15]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d168      	bne.n	8008b04 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d113      	bne.n	8008a60 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008a38:	4b35      	ldr	r3, [pc, #212]	@ (8008b10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008a3a:	695a      	ldr	r2, [r3, #20]
 8008a3c:	4b35      	ldr	r3, [pc, #212]	@ (8008b14 <RCCEx_PLLSAI2_Config+0x1dc>)
 8008a3e:	4013      	ands	r3, r2
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	6892      	ldr	r2, [r2, #8]
 8008a44:	0211      	lsls	r1, r2, #8
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	68d2      	ldr	r2, [r2, #12]
 8008a4a:	06d2      	lsls	r2, r2, #27
 8008a4c:	4311      	orrs	r1, r2
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	6852      	ldr	r2, [r2, #4]
 8008a52:	3a01      	subs	r2, #1
 8008a54:	0112      	lsls	r2, r2, #4
 8008a56:	430a      	orrs	r2, r1
 8008a58:	492d      	ldr	r1, [pc, #180]	@ (8008b10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	614b      	str	r3, [r1, #20]
 8008a5e:	e02d      	b.n	8008abc <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d115      	bne.n	8008a92 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008a66:	4b2a      	ldr	r3, [pc, #168]	@ (8008b10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008a68:	695a      	ldr	r2, [r3, #20]
 8008a6a:	4b2b      	ldr	r3, [pc, #172]	@ (8008b18 <RCCEx_PLLSAI2_Config+0x1e0>)
 8008a6c:	4013      	ands	r3, r2
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	6892      	ldr	r2, [r2, #8]
 8008a72:	0211      	lsls	r1, r2, #8
 8008a74:	687a      	ldr	r2, [r7, #4]
 8008a76:	6912      	ldr	r2, [r2, #16]
 8008a78:	0852      	lsrs	r2, r2, #1
 8008a7a:	3a01      	subs	r2, #1
 8008a7c:	0552      	lsls	r2, r2, #21
 8008a7e:	4311      	orrs	r1, r2
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	6852      	ldr	r2, [r2, #4]
 8008a84:	3a01      	subs	r2, #1
 8008a86:	0112      	lsls	r2, r2, #4
 8008a88:	430a      	orrs	r2, r1
 8008a8a:	4921      	ldr	r1, [pc, #132]	@ (8008b10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	614b      	str	r3, [r1, #20]
 8008a90:	e014      	b.n	8008abc <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008a92:	4b1f      	ldr	r3, [pc, #124]	@ (8008b10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008a94:	695a      	ldr	r2, [r3, #20]
 8008a96:	4b21      	ldr	r3, [pc, #132]	@ (8008b1c <RCCEx_PLLSAI2_Config+0x1e4>)
 8008a98:	4013      	ands	r3, r2
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	6892      	ldr	r2, [r2, #8]
 8008a9e:	0211      	lsls	r1, r2, #8
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	6952      	ldr	r2, [r2, #20]
 8008aa4:	0852      	lsrs	r2, r2, #1
 8008aa6:	3a01      	subs	r2, #1
 8008aa8:	0652      	lsls	r2, r2, #25
 8008aaa:	4311      	orrs	r1, r2
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	6852      	ldr	r2, [r2, #4]
 8008ab0:	3a01      	subs	r2, #1
 8008ab2:	0112      	lsls	r2, r2, #4
 8008ab4:	430a      	orrs	r2, r1
 8008ab6:	4916      	ldr	r1, [pc, #88]	@ (8008b10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008abc:	4b14      	ldr	r3, [pc, #80]	@ (8008b10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a13      	ldr	r2, [pc, #76]	@ (8008b10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008ac2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ac6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ac8:	f7fa fae8 	bl	800309c <HAL_GetTick>
 8008acc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008ace:	e009      	b.n	8008ae4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008ad0:	f7fa fae4 	bl	800309c <HAL_GetTick>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	1ad3      	subs	r3, r2, r3
 8008ada:	2b02      	cmp	r3, #2
 8008adc:	d902      	bls.n	8008ae4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8008ade:	2303      	movs	r3, #3
 8008ae0:	73fb      	strb	r3, [r7, #15]
          break;
 8008ae2:	e005      	b.n	8008af0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8008b10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d0ef      	beq.n	8008ad0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8008af0:	7bfb      	ldrb	r3, [r7, #15]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d106      	bne.n	8008b04 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008af6:	4b06      	ldr	r3, [pc, #24]	@ (8008b10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008af8:	695a      	ldr	r2, [r3, #20]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	699b      	ldr	r3, [r3, #24]
 8008afe:	4904      	ldr	r1, [pc, #16]	@ (8008b10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008b00:	4313      	orrs	r3, r2
 8008b02:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3710      	adds	r7, #16
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
 8008b0e:	bf00      	nop
 8008b10:	40021000 	.word	0x40021000
 8008b14:	07ff800f 	.word	0x07ff800f
 8008b18:	ff9f800f 	.word	0xff9f800f
 8008b1c:	f9ff800f 	.word	0xf9ff800f

08008b20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d101      	bne.n	8008b32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b2e:	2301      	movs	r3, #1
 8008b30:	e049      	b.n	8008bc6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b38:	b2db      	uxtb	r3, r3
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d106      	bne.n	8008b4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2200      	movs	r2, #0
 8008b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f7f9 ff62 	bl	8002a10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2202      	movs	r2, #2
 8008b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	3304      	adds	r3, #4
 8008b5c:	4619      	mov	r1, r3
 8008b5e:	4610      	mov	r0, r2
 8008b60:	f000 f98e 	bl	8008e80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2201      	movs	r2, #1
 8008b78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2201      	movs	r2, #1
 8008b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008bc4:	2300      	movs	r3, #0
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3708      	adds	r7, #8
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
	...

08008bd0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b085      	sub	sp, #20
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008bde:	b2db      	uxtb	r3, r3
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d001      	beq.n	8008be8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008be4:	2301      	movs	r3, #1
 8008be6:	e047      	b.n	8008c78 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2202      	movs	r2, #2
 8008bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a23      	ldr	r2, [pc, #140]	@ (8008c84 <HAL_TIM_Base_Start+0xb4>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d01d      	beq.n	8008c36 <HAL_TIM_Base_Start+0x66>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c02:	d018      	beq.n	8008c36 <HAL_TIM_Base_Start+0x66>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a1f      	ldr	r2, [pc, #124]	@ (8008c88 <HAL_TIM_Base_Start+0xb8>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d013      	beq.n	8008c36 <HAL_TIM_Base_Start+0x66>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a1e      	ldr	r2, [pc, #120]	@ (8008c8c <HAL_TIM_Base_Start+0xbc>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d00e      	beq.n	8008c36 <HAL_TIM_Base_Start+0x66>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a1c      	ldr	r2, [pc, #112]	@ (8008c90 <HAL_TIM_Base_Start+0xc0>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d009      	beq.n	8008c36 <HAL_TIM_Base_Start+0x66>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4a1b      	ldr	r2, [pc, #108]	@ (8008c94 <HAL_TIM_Base_Start+0xc4>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d004      	beq.n	8008c36 <HAL_TIM_Base_Start+0x66>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a19      	ldr	r2, [pc, #100]	@ (8008c98 <HAL_TIM_Base_Start+0xc8>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d115      	bne.n	8008c62 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	689a      	ldr	r2, [r3, #8]
 8008c3c:	4b17      	ldr	r3, [pc, #92]	@ (8008c9c <HAL_TIM_Base_Start+0xcc>)
 8008c3e:	4013      	ands	r3, r2
 8008c40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2b06      	cmp	r3, #6
 8008c46:	d015      	beq.n	8008c74 <HAL_TIM_Base_Start+0xa4>
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c4e:	d011      	beq.n	8008c74 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f042 0201 	orr.w	r2, r2, #1
 8008c5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c60:	e008      	b.n	8008c74 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f042 0201 	orr.w	r2, r2, #1
 8008c70:	601a      	str	r2, [r3, #0]
 8008c72:	e000      	b.n	8008c76 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c74:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008c76:	2300      	movs	r3, #0
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3714      	adds	r7, #20
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr
 8008c84:	40012c00 	.word	0x40012c00
 8008c88:	40000400 	.word	0x40000400
 8008c8c:	40000800 	.word	0x40000800
 8008c90:	40000c00 	.word	0x40000c00
 8008c94:	40013400 	.word	0x40013400
 8008c98:	40014000 	.word	0x40014000
 8008c9c:	00010007 	.word	0x00010007

08008ca0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b083      	sub	sp, #12
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	6a1a      	ldr	r2, [r3, #32]
 8008cae:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d10f      	bne.n	8008cd8 <HAL_TIM_Base_Stop+0x38>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	6a1a      	ldr	r2, [r3, #32]
 8008cbe:	f240 4344 	movw	r3, #1092	@ 0x444
 8008cc2:	4013      	ands	r3, r2
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d107      	bne.n	8008cd8 <HAL_TIM_Base_Stop+0x38>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f022 0201 	bic.w	r2, r2, #1
 8008cd6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8008ce0:	2300      	movs	r3, #0
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	370c      	adds	r7, #12
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr

08008cee <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008cee:	b580      	push	{r7, lr}
 8008cf0:	b084      	sub	sp, #16
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	6078      	str	r0, [r7, #4]
 8008cf6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d101      	bne.n	8008d0a <HAL_TIM_ConfigClockSource+0x1c>
 8008d06:	2302      	movs	r3, #2
 8008d08:	e0b6      	b.n	8008e78 <HAL_TIM_ConfigClockSource+0x18a>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2202      	movs	r2, #2
 8008d16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	689b      	ldr	r3, [r3, #8]
 8008d20:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d28:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008d2c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008d34:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	68ba      	ldr	r2, [r7, #8]
 8008d3c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d46:	d03e      	beq.n	8008dc6 <HAL_TIM_ConfigClockSource+0xd8>
 8008d48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d4c:	f200 8087 	bhi.w	8008e5e <HAL_TIM_ConfigClockSource+0x170>
 8008d50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d54:	f000 8086 	beq.w	8008e64 <HAL_TIM_ConfigClockSource+0x176>
 8008d58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d5c:	d87f      	bhi.n	8008e5e <HAL_TIM_ConfigClockSource+0x170>
 8008d5e:	2b70      	cmp	r3, #112	@ 0x70
 8008d60:	d01a      	beq.n	8008d98 <HAL_TIM_ConfigClockSource+0xaa>
 8008d62:	2b70      	cmp	r3, #112	@ 0x70
 8008d64:	d87b      	bhi.n	8008e5e <HAL_TIM_ConfigClockSource+0x170>
 8008d66:	2b60      	cmp	r3, #96	@ 0x60
 8008d68:	d050      	beq.n	8008e0c <HAL_TIM_ConfigClockSource+0x11e>
 8008d6a:	2b60      	cmp	r3, #96	@ 0x60
 8008d6c:	d877      	bhi.n	8008e5e <HAL_TIM_ConfigClockSource+0x170>
 8008d6e:	2b50      	cmp	r3, #80	@ 0x50
 8008d70:	d03c      	beq.n	8008dec <HAL_TIM_ConfigClockSource+0xfe>
 8008d72:	2b50      	cmp	r3, #80	@ 0x50
 8008d74:	d873      	bhi.n	8008e5e <HAL_TIM_ConfigClockSource+0x170>
 8008d76:	2b40      	cmp	r3, #64	@ 0x40
 8008d78:	d058      	beq.n	8008e2c <HAL_TIM_ConfigClockSource+0x13e>
 8008d7a:	2b40      	cmp	r3, #64	@ 0x40
 8008d7c:	d86f      	bhi.n	8008e5e <HAL_TIM_ConfigClockSource+0x170>
 8008d7e:	2b30      	cmp	r3, #48	@ 0x30
 8008d80:	d064      	beq.n	8008e4c <HAL_TIM_ConfigClockSource+0x15e>
 8008d82:	2b30      	cmp	r3, #48	@ 0x30
 8008d84:	d86b      	bhi.n	8008e5e <HAL_TIM_ConfigClockSource+0x170>
 8008d86:	2b20      	cmp	r3, #32
 8008d88:	d060      	beq.n	8008e4c <HAL_TIM_ConfigClockSource+0x15e>
 8008d8a:	2b20      	cmp	r3, #32
 8008d8c:	d867      	bhi.n	8008e5e <HAL_TIM_ConfigClockSource+0x170>
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d05c      	beq.n	8008e4c <HAL_TIM_ConfigClockSource+0x15e>
 8008d92:	2b10      	cmp	r3, #16
 8008d94:	d05a      	beq.n	8008e4c <HAL_TIM_ConfigClockSource+0x15e>
 8008d96:	e062      	b.n	8008e5e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008da8:	f000 f98a 	bl	80090c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	689b      	ldr	r3, [r3, #8]
 8008db2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008dba:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	68ba      	ldr	r2, [r7, #8]
 8008dc2:	609a      	str	r2, [r3, #8]
      break;
 8008dc4:	e04f      	b.n	8008e66 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008dd6:	f000 f973 	bl	80090c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	689a      	ldr	r2, [r3, #8]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008de8:	609a      	str	r2, [r3, #8]
      break;
 8008dea:	e03c      	b.n	8008e66 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008df8:	461a      	mov	r2, r3
 8008dfa:	f000 f8e7 	bl	8008fcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	2150      	movs	r1, #80	@ 0x50
 8008e04:	4618      	mov	r0, r3
 8008e06:	f000 f940 	bl	800908a <TIM_ITRx_SetConfig>
      break;
 8008e0a:	e02c      	b.n	8008e66 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e18:	461a      	mov	r2, r3
 8008e1a:	f000 f906 	bl	800902a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	2160      	movs	r1, #96	@ 0x60
 8008e24:	4618      	mov	r0, r3
 8008e26:	f000 f930 	bl	800908a <TIM_ITRx_SetConfig>
      break;
 8008e2a:	e01c      	b.n	8008e66 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e38:	461a      	mov	r2, r3
 8008e3a:	f000 f8c7 	bl	8008fcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	2140      	movs	r1, #64	@ 0x40
 8008e44:	4618      	mov	r0, r3
 8008e46:	f000 f920 	bl	800908a <TIM_ITRx_SetConfig>
      break;
 8008e4a:	e00c      	b.n	8008e66 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4619      	mov	r1, r3
 8008e56:	4610      	mov	r0, r2
 8008e58:	f000 f917 	bl	800908a <TIM_ITRx_SetConfig>
      break;
 8008e5c:	e003      	b.n	8008e66 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	73fb      	strb	r3, [r7, #15]
      break;
 8008e62:	e000      	b.n	8008e66 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008e64:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2201      	movs	r2, #1
 8008e6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2200      	movs	r2, #0
 8008e72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3710      	adds	r7, #16
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b085      	sub	sp, #20
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	4a46      	ldr	r2, [pc, #280]	@ (8008fac <TIM_Base_SetConfig+0x12c>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d013      	beq.n	8008ec0 <TIM_Base_SetConfig+0x40>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e9e:	d00f      	beq.n	8008ec0 <TIM_Base_SetConfig+0x40>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	4a43      	ldr	r2, [pc, #268]	@ (8008fb0 <TIM_Base_SetConfig+0x130>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d00b      	beq.n	8008ec0 <TIM_Base_SetConfig+0x40>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	4a42      	ldr	r2, [pc, #264]	@ (8008fb4 <TIM_Base_SetConfig+0x134>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d007      	beq.n	8008ec0 <TIM_Base_SetConfig+0x40>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	4a41      	ldr	r2, [pc, #260]	@ (8008fb8 <TIM_Base_SetConfig+0x138>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d003      	beq.n	8008ec0 <TIM_Base_SetConfig+0x40>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	4a40      	ldr	r2, [pc, #256]	@ (8008fbc <TIM_Base_SetConfig+0x13c>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d108      	bne.n	8008ed2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ec6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	68fa      	ldr	r2, [r7, #12]
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	4a35      	ldr	r2, [pc, #212]	@ (8008fac <TIM_Base_SetConfig+0x12c>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d01f      	beq.n	8008f1a <TIM_Base_SetConfig+0x9a>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ee0:	d01b      	beq.n	8008f1a <TIM_Base_SetConfig+0x9a>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	4a32      	ldr	r2, [pc, #200]	@ (8008fb0 <TIM_Base_SetConfig+0x130>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d017      	beq.n	8008f1a <TIM_Base_SetConfig+0x9a>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	4a31      	ldr	r2, [pc, #196]	@ (8008fb4 <TIM_Base_SetConfig+0x134>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d013      	beq.n	8008f1a <TIM_Base_SetConfig+0x9a>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	4a30      	ldr	r2, [pc, #192]	@ (8008fb8 <TIM_Base_SetConfig+0x138>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d00f      	beq.n	8008f1a <TIM_Base_SetConfig+0x9a>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	4a2f      	ldr	r2, [pc, #188]	@ (8008fbc <TIM_Base_SetConfig+0x13c>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d00b      	beq.n	8008f1a <TIM_Base_SetConfig+0x9a>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	4a2e      	ldr	r2, [pc, #184]	@ (8008fc0 <TIM_Base_SetConfig+0x140>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d007      	beq.n	8008f1a <TIM_Base_SetConfig+0x9a>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	4a2d      	ldr	r2, [pc, #180]	@ (8008fc4 <TIM_Base_SetConfig+0x144>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d003      	beq.n	8008f1a <TIM_Base_SetConfig+0x9a>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	4a2c      	ldr	r2, [pc, #176]	@ (8008fc8 <TIM_Base_SetConfig+0x148>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d108      	bne.n	8008f2c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	68db      	ldr	r3, [r3, #12]
 8008f26:	68fa      	ldr	r2, [r7, #12]
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	695b      	ldr	r3, [r3, #20]
 8008f36:	4313      	orrs	r3, r2
 8008f38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	68fa      	ldr	r2, [r7, #12]
 8008f3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	689a      	ldr	r2, [r3, #8]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	4a16      	ldr	r2, [pc, #88]	@ (8008fac <TIM_Base_SetConfig+0x12c>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d00f      	beq.n	8008f78 <TIM_Base_SetConfig+0xf8>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	4a18      	ldr	r2, [pc, #96]	@ (8008fbc <TIM_Base_SetConfig+0x13c>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d00b      	beq.n	8008f78 <TIM_Base_SetConfig+0xf8>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	4a17      	ldr	r2, [pc, #92]	@ (8008fc0 <TIM_Base_SetConfig+0x140>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d007      	beq.n	8008f78 <TIM_Base_SetConfig+0xf8>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	4a16      	ldr	r2, [pc, #88]	@ (8008fc4 <TIM_Base_SetConfig+0x144>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d003      	beq.n	8008f78 <TIM_Base_SetConfig+0xf8>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	4a15      	ldr	r2, [pc, #84]	@ (8008fc8 <TIM_Base_SetConfig+0x148>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d103      	bne.n	8008f80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	691a      	ldr	r2, [r3, #16]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2201      	movs	r2, #1
 8008f84:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	691b      	ldr	r3, [r3, #16]
 8008f8a:	f003 0301 	and.w	r3, r3, #1
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d105      	bne.n	8008f9e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	691b      	ldr	r3, [r3, #16]
 8008f96:	f023 0201 	bic.w	r2, r3, #1
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	611a      	str	r2, [r3, #16]
  }
}
 8008f9e:	bf00      	nop
 8008fa0:	3714      	adds	r7, #20
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa8:	4770      	bx	lr
 8008faa:	bf00      	nop
 8008fac:	40012c00 	.word	0x40012c00
 8008fb0:	40000400 	.word	0x40000400
 8008fb4:	40000800 	.word	0x40000800
 8008fb8:	40000c00 	.word	0x40000c00
 8008fbc:	40013400 	.word	0x40013400
 8008fc0:	40014000 	.word	0x40014000
 8008fc4:	40014400 	.word	0x40014400
 8008fc8:	40014800 	.word	0x40014800

08008fcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b087      	sub	sp, #28
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	60f8      	str	r0, [r7, #12]
 8008fd4:	60b9      	str	r1, [r7, #8]
 8008fd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	6a1b      	ldr	r3, [r3, #32]
 8008fdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	6a1b      	ldr	r3, [r3, #32]
 8008fe2:	f023 0201 	bic.w	r2, r3, #1
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	699b      	ldr	r3, [r3, #24]
 8008fee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008ff6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	011b      	lsls	r3, r3, #4
 8008ffc:	693a      	ldr	r2, [r7, #16]
 8008ffe:	4313      	orrs	r3, r2
 8009000:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	f023 030a 	bic.w	r3, r3, #10
 8009008:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800900a:	697a      	ldr	r2, [r7, #20]
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	4313      	orrs	r3, r2
 8009010:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	693a      	ldr	r2, [r7, #16]
 8009016:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	697a      	ldr	r2, [r7, #20]
 800901c:	621a      	str	r2, [r3, #32]
}
 800901e:	bf00      	nop
 8009020:	371c      	adds	r7, #28
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr

0800902a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800902a:	b480      	push	{r7}
 800902c:	b087      	sub	sp, #28
 800902e:	af00      	add	r7, sp, #0
 8009030:	60f8      	str	r0, [r7, #12]
 8009032:	60b9      	str	r1, [r7, #8]
 8009034:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	6a1b      	ldr	r3, [r3, #32]
 800903a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	6a1b      	ldr	r3, [r3, #32]
 8009040:	f023 0210 	bic.w	r2, r3, #16
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	699b      	ldr	r3, [r3, #24]
 800904c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009054:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	031b      	lsls	r3, r3, #12
 800905a:	693a      	ldr	r2, [r7, #16]
 800905c:	4313      	orrs	r3, r2
 800905e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009066:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	011b      	lsls	r3, r3, #4
 800906c:	697a      	ldr	r2, [r7, #20]
 800906e:	4313      	orrs	r3, r2
 8009070:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	693a      	ldr	r2, [r7, #16]
 8009076:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	697a      	ldr	r2, [r7, #20]
 800907c:	621a      	str	r2, [r3, #32]
}
 800907e:	bf00      	nop
 8009080:	371c      	adds	r7, #28
 8009082:	46bd      	mov	sp, r7
 8009084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009088:	4770      	bx	lr

0800908a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800908a:	b480      	push	{r7}
 800908c:	b085      	sub	sp, #20
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
 8009092:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	689b      	ldr	r3, [r3, #8]
 8009098:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80090a2:	683a      	ldr	r2, [r7, #0]
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	4313      	orrs	r3, r2
 80090a8:	f043 0307 	orr.w	r3, r3, #7
 80090ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	68fa      	ldr	r2, [r7, #12]
 80090b2:	609a      	str	r2, [r3, #8]
}
 80090b4:	bf00      	nop
 80090b6:	3714      	adds	r7, #20
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b087      	sub	sp, #28
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	60f8      	str	r0, [r7, #12]
 80090c8:	60b9      	str	r1, [r7, #8]
 80090ca:	607a      	str	r2, [r7, #4]
 80090cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80090da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	021a      	lsls	r2, r3, #8
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	431a      	orrs	r2, r3
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	4313      	orrs	r3, r2
 80090e8:	697a      	ldr	r2, [r7, #20]
 80090ea:	4313      	orrs	r3, r2
 80090ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	697a      	ldr	r2, [r7, #20]
 80090f2:	609a      	str	r2, [r3, #8]
}
 80090f4:	bf00      	nop
 80090f6:	371c      	adds	r7, #28
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr

08009100 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009100:	b480      	push	{r7}
 8009102:	b085      	sub	sp, #20
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009110:	2b01      	cmp	r3, #1
 8009112:	d101      	bne.n	8009118 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009114:	2302      	movs	r3, #2
 8009116:	e068      	b.n	80091ea <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2201      	movs	r2, #1
 800911c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2202      	movs	r2, #2
 8009124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a2e      	ldr	r2, [pc, #184]	@ (80091f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d004      	beq.n	800914c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a2d      	ldr	r2, [pc, #180]	@ (80091fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d108      	bne.n	800915e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009152:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	68fa      	ldr	r2, [r7, #12]
 800915a:	4313      	orrs	r3, r2
 800915c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009164:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	68fa      	ldr	r2, [r7, #12]
 800916c:	4313      	orrs	r3, r2
 800916e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	68fa      	ldr	r2, [r7, #12]
 8009176:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a1e      	ldr	r2, [pc, #120]	@ (80091f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d01d      	beq.n	80091be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800918a:	d018      	beq.n	80091be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a1b      	ldr	r2, [pc, #108]	@ (8009200 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d013      	beq.n	80091be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a1a      	ldr	r2, [pc, #104]	@ (8009204 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d00e      	beq.n	80091be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a18      	ldr	r2, [pc, #96]	@ (8009208 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d009      	beq.n	80091be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a13      	ldr	r2, [pc, #76]	@ (80091fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d004      	beq.n	80091be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4a14      	ldr	r2, [pc, #80]	@ (800920c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d10c      	bne.n	80091d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80091c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	689b      	ldr	r3, [r3, #8]
 80091ca:	68ba      	ldr	r2, [r7, #8]
 80091cc:	4313      	orrs	r3, r2
 80091ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	68ba      	ldr	r2, [r7, #8]
 80091d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2201      	movs	r2, #1
 80091dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2200      	movs	r2, #0
 80091e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80091e8:	2300      	movs	r3, #0
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3714      	adds	r7, #20
 80091ee:	46bd      	mov	sp, r7
 80091f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f4:	4770      	bx	lr
 80091f6:	bf00      	nop
 80091f8:	40012c00 	.word	0x40012c00
 80091fc:	40013400 	.word	0x40013400
 8009200:	40000400 	.word	0x40000400
 8009204:	40000800 	.word	0x40000800
 8009208:	40000c00 	.word	0x40000c00
 800920c:	40014000 	.word	0x40014000

08009210 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d101      	bne.n	8009222 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800921e:	2301      	movs	r3, #1
 8009220:	e042      	b.n	80092a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009228:	2b00      	cmp	r3, #0
 800922a:	d106      	bne.n	800923a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2200      	movs	r2, #0
 8009230:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f7f9 fc09 	bl	8002a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2224      	movs	r2, #36	@ 0x24
 800923e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	681a      	ldr	r2, [r3, #0]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f022 0201 	bic.w	r2, r2, #1
 8009250:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009256:	2b00      	cmp	r3, #0
 8009258:	d002      	beq.n	8009260 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 fb24 	bl	80098a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f000 f825 	bl	80092b0 <UART_SetConfig>
 8009266:	4603      	mov	r3, r0
 8009268:	2b01      	cmp	r3, #1
 800926a:	d101      	bne.n	8009270 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800926c:	2301      	movs	r3, #1
 800926e:	e01b      	b.n	80092a8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	685a      	ldr	r2, [r3, #4]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800927e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	689a      	ldr	r2, [r3, #8]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800928e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f042 0201 	orr.w	r2, r2, #1
 800929e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 fba3 	bl	80099ec <UART_CheckIdleState>
 80092a6:	4603      	mov	r3, r0
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3708      	adds	r7, #8
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80092b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092b4:	b08c      	sub	sp, #48	@ 0x30
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80092ba:	2300      	movs	r3, #0
 80092bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	689a      	ldr	r2, [r3, #8]
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	691b      	ldr	r3, [r3, #16]
 80092c8:	431a      	orrs	r2, r3
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	695b      	ldr	r3, [r3, #20]
 80092ce:	431a      	orrs	r2, r3
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	69db      	ldr	r3, [r3, #28]
 80092d4:	4313      	orrs	r3, r2
 80092d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	681a      	ldr	r2, [r3, #0]
 80092de:	4baa      	ldr	r3, [pc, #680]	@ (8009588 <UART_SetConfig+0x2d8>)
 80092e0:	4013      	ands	r3, r2
 80092e2:	697a      	ldr	r2, [r7, #20]
 80092e4:	6812      	ldr	r2, [r2, #0]
 80092e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80092e8:	430b      	orrs	r3, r1
 80092ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	68da      	ldr	r2, [r3, #12]
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	430a      	orrs	r2, r1
 8009300:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	699b      	ldr	r3, [r3, #24]
 8009306:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a9f      	ldr	r2, [pc, #636]	@ (800958c <UART_SetConfig+0x2dc>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d004      	beq.n	800931c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	6a1b      	ldr	r3, [r3, #32]
 8009316:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009318:	4313      	orrs	r3, r2
 800931a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	689b      	ldr	r3, [r3, #8]
 8009322:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009326:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800932a:	697a      	ldr	r2, [r7, #20]
 800932c:	6812      	ldr	r2, [r2, #0]
 800932e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009330:	430b      	orrs	r3, r1
 8009332:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800933a:	f023 010f 	bic.w	r1, r3, #15
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	430a      	orrs	r2, r1
 8009348:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a90      	ldr	r2, [pc, #576]	@ (8009590 <UART_SetConfig+0x2e0>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d125      	bne.n	80093a0 <UART_SetConfig+0xf0>
 8009354:	4b8f      	ldr	r3, [pc, #572]	@ (8009594 <UART_SetConfig+0x2e4>)
 8009356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800935a:	f003 0303 	and.w	r3, r3, #3
 800935e:	2b03      	cmp	r3, #3
 8009360:	d81a      	bhi.n	8009398 <UART_SetConfig+0xe8>
 8009362:	a201      	add	r2, pc, #4	@ (adr r2, 8009368 <UART_SetConfig+0xb8>)
 8009364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009368:	08009379 	.word	0x08009379
 800936c:	08009389 	.word	0x08009389
 8009370:	08009381 	.word	0x08009381
 8009374:	08009391 	.word	0x08009391
 8009378:	2301      	movs	r3, #1
 800937a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800937e:	e116      	b.n	80095ae <UART_SetConfig+0x2fe>
 8009380:	2302      	movs	r3, #2
 8009382:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009386:	e112      	b.n	80095ae <UART_SetConfig+0x2fe>
 8009388:	2304      	movs	r3, #4
 800938a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800938e:	e10e      	b.n	80095ae <UART_SetConfig+0x2fe>
 8009390:	2308      	movs	r3, #8
 8009392:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009396:	e10a      	b.n	80095ae <UART_SetConfig+0x2fe>
 8009398:	2310      	movs	r3, #16
 800939a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800939e:	e106      	b.n	80095ae <UART_SetConfig+0x2fe>
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a7c      	ldr	r2, [pc, #496]	@ (8009598 <UART_SetConfig+0x2e8>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d138      	bne.n	800941c <UART_SetConfig+0x16c>
 80093aa:	4b7a      	ldr	r3, [pc, #488]	@ (8009594 <UART_SetConfig+0x2e4>)
 80093ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093b0:	f003 030c 	and.w	r3, r3, #12
 80093b4:	2b0c      	cmp	r3, #12
 80093b6:	d82d      	bhi.n	8009414 <UART_SetConfig+0x164>
 80093b8:	a201      	add	r2, pc, #4	@ (adr r2, 80093c0 <UART_SetConfig+0x110>)
 80093ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093be:	bf00      	nop
 80093c0:	080093f5 	.word	0x080093f5
 80093c4:	08009415 	.word	0x08009415
 80093c8:	08009415 	.word	0x08009415
 80093cc:	08009415 	.word	0x08009415
 80093d0:	08009405 	.word	0x08009405
 80093d4:	08009415 	.word	0x08009415
 80093d8:	08009415 	.word	0x08009415
 80093dc:	08009415 	.word	0x08009415
 80093e0:	080093fd 	.word	0x080093fd
 80093e4:	08009415 	.word	0x08009415
 80093e8:	08009415 	.word	0x08009415
 80093ec:	08009415 	.word	0x08009415
 80093f0:	0800940d 	.word	0x0800940d
 80093f4:	2300      	movs	r3, #0
 80093f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093fa:	e0d8      	b.n	80095ae <UART_SetConfig+0x2fe>
 80093fc:	2302      	movs	r3, #2
 80093fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009402:	e0d4      	b.n	80095ae <UART_SetConfig+0x2fe>
 8009404:	2304      	movs	r3, #4
 8009406:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800940a:	e0d0      	b.n	80095ae <UART_SetConfig+0x2fe>
 800940c:	2308      	movs	r3, #8
 800940e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009412:	e0cc      	b.n	80095ae <UART_SetConfig+0x2fe>
 8009414:	2310      	movs	r3, #16
 8009416:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800941a:	e0c8      	b.n	80095ae <UART_SetConfig+0x2fe>
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a5e      	ldr	r2, [pc, #376]	@ (800959c <UART_SetConfig+0x2ec>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d125      	bne.n	8009472 <UART_SetConfig+0x1c2>
 8009426:	4b5b      	ldr	r3, [pc, #364]	@ (8009594 <UART_SetConfig+0x2e4>)
 8009428:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800942c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009430:	2b30      	cmp	r3, #48	@ 0x30
 8009432:	d016      	beq.n	8009462 <UART_SetConfig+0x1b2>
 8009434:	2b30      	cmp	r3, #48	@ 0x30
 8009436:	d818      	bhi.n	800946a <UART_SetConfig+0x1ba>
 8009438:	2b20      	cmp	r3, #32
 800943a:	d00a      	beq.n	8009452 <UART_SetConfig+0x1a2>
 800943c:	2b20      	cmp	r3, #32
 800943e:	d814      	bhi.n	800946a <UART_SetConfig+0x1ba>
 8009440:	2b00      	cmp	r3, #0
 8009442:	d002      	beq.n	800944a <UART_SetConfig+0x19a>
 8009444:	2b10      	cmp	r3, #16
 8009446:	d008      	beq.n	800945a <UART_SetConfig+0x1aa>
 8009448:	e00f      	b.n	800946a <UART_SetConfig+0x1ba>
 800944a:	2300      	movs	r3, #0
 800944c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009450:	e0ad      	b.n	80095ae <UART_SetConfig+0x2fe>
 8009452:	2302      	movs	r3, #2
 8009454:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009458:	e0a9      	b.n	80095ae <UART_SetConfig+0x2fe>
 800945a:	2304      	movs	r3, #4
 800945c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009460:	e0a5      	b.n	80095ae <UART_SetConfig+0x2fe>
 8009462:	2308      	movs	r3, #8
 8009464:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009468:	e0a1      	b.n	80095ae <UART_SetConfig+0x2fe>
 800946a:	2310      	movs	r3, #16
 800946c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009470:	e09d      	b.n	80095ae <UART_SetConfig+0x2fe>
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4a4a      	ldr	r2, [pc, #296]	@ (80095a0 <UART_SetConfig+0x2f0>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d125      	bne.n	80094c8 <UART_SetConfig+0x218>
 800947c:	4b45      	ldr	r3, [pc, #276]	@ (8009594 <UART_SetConfig+0x2e4>)
 800947e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009482:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009486:	2bc0      	cmp	r3, #192	@ 0xc0
 8009488:	d016      	beq.n	80094b8 <UART_SetConfig+0x208>
 800948a:	2bc0      	cmp	r3, #192	@ 0xc0
 800948c:	d818      	bhi.n	80094c0 <UART_SetConfig+0x210>
 800948e:	2b80      	cmp	r3, #128	@ 0x80
 8009490:	d00a      	beq.n	80094a8 <UART_SetConfig+0x1f8>
 8009492:	2b80      	cmp	r3, #128	@ 0x80
 8009494:	d814      	bhi.n	80094c0 <UART_SetConfig+0x210>
 8009496:	2b00      	cmp	r3, #0
 8009498:	d002      	beq.n	80094a0 <UART_SetConfig+0x1f0>
 800949a:	2b40      	cmp	r3, #64	@ 0x40
 800949c:	d008      	beq.n	80094b0 <UART_SetConfig+0x200>
 800949e:	e00f      	b.n	80094c0 <UART_SetConfig+0x210>
 80094a0:	2300      	movs	r3, #0
 80094a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094a6:	e082      	b.n	80095ae <UART_SetConfig+0x2fe>
 80094a8:	2302      	movs	r3, #2
 80094aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094ae:	e07e      	b.n	80095ae <UART_SetConfig+0x2fe>
 80094b0:	2304      	movs	r3, #4
 80094b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094b6:	e07a      	b.n	80095ae <UART_SetConfig+0x2fe>
 80094b8:	2308      	movs	r3, #8
 80094ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094be:	e076      	b.n	80095ae <UART_SetConfig+0x2fe>
 80094c0:	2310      	movs	r3, #16
 80094c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094c6:	e072      	b.n	80095ae <UART_SetConfig+0x2fe>
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a35      	ldr	r2, [pc, #212]	@ (80095a4 <UART_SetConfig+0x2f4>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d12a      	bne.n	8009528 <UART_SetConfig+0x278>
 80094d2:	4b30      	ldr	r3, [pc, #192]	@ (8009594 <UART_SetConfig+0x2e4>)
 80094d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80094dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80094e0:	d01a      	beq.n	8009518 <UART_SetConfig+0x268>
 80094e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80094e6:	d81b      	bhi.n	8009520 <UART_SetConfig+0x270>
 80094e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094ec:	d00c      	beq.n	8009508 <UART_SetConfig+0x258>
 80094ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094f2:	d815      	bhi.n	8009520 <UART_SetConfig+0x270>
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d003      	beq.n	8009500 <UART_SetConfig+0x250>
 80094f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094fc:	d008      	beq.n	8009510 <UART_SetConfig+0x260>
 80094fe:	e00f      	b.n	8009520 <UART_SetConfig+0x270>
 8009500:	2300      	movs	r3, #0
 8009502:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009506:	e052      	b.n	80095ae <UART_SetConfig+0x2fe>
 8009508:	2302      	movs	r3, #2
 800950a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800950e:	e04e      	b.n	80095ae <UART_SetConfig+0x2fe>
 8009510:	2304      	movs	r3, #4
 8009512:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009516:	e04a      	b.n	80095ae <UART_SetConfig+0x2fe>
 8009518:	2308      	movs	r3, #8
 800951a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800951e:	e046      	b.n	80095ae <UART_SetConfig+0x2fe>
 8009520:	2310      	movs	r3, #16
 8009522:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009526:	e042      	b.n	80095ae <UART_SetConfig+0x2fe>
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a17      	ldr	r2, [pc, #92]	@ (800958c <UART_SetConfig+0x2dc>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d13a      	bne.n	80095a8 <UART_SetConfig+0x2f8>
 8009532:	4b18      	ldr	r3, [pc, #96]	@ (8009594 <UART_SetConfig+0x2e4>)
 8009534:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009538:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800953c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009540:	d01a      	beq.n	8009578 <UART_SetConfig+0x2c8>
 8009542:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009546:	d81b      	bhi.n	8009580 <UART_SetConfig+0x2d0>
 8009548:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800954c:	d00c      	beq.n	8009568 <UART_SetConfig+0x2b8>
 800954e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009552:	d815      	bhi.n	8009580 <UART_SetConfig+0x2d0>
 8009554:	2b00      	cmp	r3, #0
 8009556:	d003      	beq.n	8009560 <UART_SetConfig+0x2b0>
 8009558:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800955c:	d008      	beq.n	8009570 <UART_SetConfig+0x2c0>
 800955e:	e00f      	b.n	8009580 <UART_SetConfig+0x2d0>
 8009560:	2300      	movs	r3, #0
 8009562:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009566:	e022      	b.n	80095ae <UART_SetConfig+0x2fe>
 8009568:	2302      	movs	r3, #2
 800956a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800956e:	e01e      	b.n	80095ae <UART_SetConfig+0x2fe>
 8009570:	2304      	movs	r3, #4
 8009572:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009576:	e01a      	b.n	80095ae <UART_SetConfig+0x2fe>
 8009578:	2308      	movs	r3, #8
 800957a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800957e:	e016      	b.n	80095ae <UART_SetConfig+0x2fe>
 8009580:	2310      	movs	r3, #16
 8009582:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009586:	e012      	b.n	80095ae <UART_SetConfig+0x2fe>
 8009588:	cfff69f3 	.word	0xcfff69f3
 800958c:	40008000 	.word	0x40008000
 8009590:	40013800 	.word	0x40013800
 8009594:	40021000 	.word	0x40021000
 8009598:	40004400 	.word	0x40004400
 800959c:	40004800 	.word	0x40004800
 80095a0:	40004c00 	.word	0x40004c00
 80095a4:	40005000 	.word	0x40005000
 80095a8:	2310      	movs	r3, #16
 80095aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4aae      	ldr	r2, [pc, #696]	@ (800986c <UART_SetConfig+0x5bc>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	f040 8097 	bne.w	80096e8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80095ba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80095be:	2b08      	cmp	r3, #8
 80095c0:	d823      	bhi.n	800960a <UART_SetConfig+0x35a>
 80095c2:	a201      	add	r2, pc, #4	@ (adr r2, 80095c8 <UART_SetConfig+0x318>)
 80095c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095c8:	080095ed 	.word	0x080095ed
 80095cc:	0800960b 	.word	0x0800960b
 80095d0:	080095f5 	.word	0x080095f5
 80095d4:	0800960b 	.word	0x0800960b
 80095d8:	080095fb 	.word	0x080095fb
 80095dc:	0800960b 	.word	0x0800960b
 80095e0:	0800960b 	.word	0x0800960b
 80095e4:	0800960b 	.word	0x0800960b
 80095e8:	08009603 	.word	0x08009603
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80095ec:	f7fe fc84 	bl	8007ef8 <HAL_RCC_GetPCLK1Freq>
 80095f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80095f2:	e010      	b.n	8009616 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80095f4:	4b9e      	ldr	r3, [pc, #632]	@ (8009870 <UART_SetConfig+0x5c0>)
 80095f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80095f8:	e00d      	b.n	8009616 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80095fa:	f7fe fbe5 	bl	8007dc8 <HAL_RCC_GetSysClockFreq>
 80095fe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009600:	e009      	b.n	8009616 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009602:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009606:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009608:	e005      	b.n	8009616 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800960a:	2300      	movs	r3, #0
 800960c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800960e:	2301      	movs	r3, #1
 8009610:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009614:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009618:	2b00      	cmp	r3, #0
 800961a:	f000 8130 	beq.w	800987e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009622:	4a94      	ldr	r2, [pc, #592]	@ (8009874 <UART_SetConfig+0x5c4>)
 8009624:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009628:	461a      	mov	r2, r3
 800962a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800962c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009630:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	685a      	ldr	r2, [r3, #4]
 8009636:	4613      	mov	r3, r2
 8009638:	005b      	lsls	r3, r3, #1
 800963a:	4413      	add	r3, r2
 800963c:	69ba      	ldr	r2, [r7, #24]
 800963e:	429a      	cmp	r2, r3
 8009640:	d305      	bcc.n	800964e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009648:	69ba      	ldr	r2, [r7, #24]
 800964a:	429a      	cmp	r2, r3
 800964c:	d903      	bls.n	8009656 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800964e:	2301      	movs	r3, #1
 8009650:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009654:	e113      	b.n	800987e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009658:	2200      	movs	r2, #0
 800965a:	60bb      	str	r3, [r7, #8]
 800965c:	60fa      	str	r2, [r7, #12]
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009662:	4a84      	ldr	r2, [pc, #528]	@ (8009874 <UART_SetConfig+0x5c4>)
 8009664:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009668:	b29b      	uxth	r3, r3
 800966a:	2200      	movs	r2, #0
 800966c:	603b      	str	r3, [r7, #0]
 800966e:	607a      	str	r2, [r7, #4]
 8009670:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009674:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009678:	f7f7 faae 	bl	8000bd8 <__aeabi_uldivmod>
 800967c:	4602      	mov	r2, r0
 800967e:	460b      	mov	r3, r1
 8009680:	4610      	mov	r0, r2
 8009682:	4619      	mov	r1, r3
 8009684:	f04f 0200 	mov.w	r2, #0
 8009688:	f04f 0300 	mov.w	r3, #0
 800968c:	020b      	lsls	r3, r1, #8
 800968e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009692:	0202      	lsls	r2, r0, #8
 8009694:	6979      	ldr	r1, [r7, #20]
 8009696:	6849      	ldr	r1, [r1, #4]
 8009698:	0849      	lsrs	r1, r1, #1
 800969a:	2000      	movs	r0, #0
 800969c:	460c      	mov	r4, r1
 800969e:	4605      	mov	r5, r0
 80096a0:	eb12 0804 	adds.w	r8, r2, r4
 80096a4:	eb43 0905 	adc.w	r9, r3, r5
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	2200      	movs	r2, #0
 80096ae:	469a      	mov	sl, r3
 80096b0:	4693      	mov	fp, r2
 80096b2:	4652      	mov	r2, sl
 80096b4:	465b      	mov	r3, fp
 80096b6:	4640      	mov	r0, r8
 80096b8:	4649      	mov	r1, r9
 80096ba:	f7f7 fa8d 	bl	8000bd8 <__aeabi_uldivmod>
 80096be:	4602      	mov	r2, r0
 80096c0:	460b      	mov	r3, r1
 80096c2:	4613      	mov	r3, r2
 80096c4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80096c6:	6a3b      	ldr	r3, [r7, #32]
 80096c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80096cc:	d308      	bcc.n	80096e0 <UART_SetConfig+0x430>
 80096ce:	6a3b      	ldr	r3, [r7, #32]
 80096d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80096d4:	d204      	bcs.n	80096e0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	6a3a      	ldr	r2, [r7, #32]
 80096dc:	60da      	str	r2, [r3, #12]
 80096de:	e0ce      	b.n	800987e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80096e0:	2301      	movs	r3, #1
 80096e2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80096e6:	e0ca      	b.n	800987e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	69db      	ldr	r3, [r3, #28]
 80096ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80096f0:	d166      	bne.n	80097c0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80096f2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80096f6:	2b08      	cmp	r3, #8
 80096f8:	d827      	bhi.n	800974a <UART_SetConfig+0x49a>
 80096fa:	a201      	add	r2, pc, #4	@ (adr r2, 8009700 <UART_SetConfig+0x450>)
 80096fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009700:	08009725 	.word	0x08009725
 8009704:	0800972d 	.word	0x0800972d
 8009708:	08009735 	.word	0x08009735
 800970c:	0800974b 	.word	0x0800974b
 8009710:	0800973b 	.word	0x0800973b
 8009714:	0800974b 	.word	0x0800974b
 8009718:	0800974b 	.word	0x0800974b
 800971c:	0800974b 	.word	0x0800974b
 8009720:	08009743 	.word	0x08009743
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009724:	f7fe fbe8 	bl	8007ef8 <HAL_RCC_GetPCLK1Freq>
 8009728:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800972a:	e014      	b.n	8009756 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800972c:	f7fe fbfa 	bl	8007f24 <HAL_RCC_GetPCLK2Freq>
 8009730:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009732:	e010      	b.n	8009756 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009734:	4b4e      	ldr	r3, [pc, #312]	@ (8009870 <UART_SetConfig+0x5c0>)
 8009736:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009738:	e00d      	b.n	8009756 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800973a:	f7fe fb45 	bl	8007dc8 <HAL_RCC_GetSysClockFreq>
 800973e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009740:	e009      	b.n	8009756 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009742:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009746:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009748:	e005      	b.n	8009756 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800974a:	2300      	movs	r3, #0
 800974c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800974e:	2301      	movs	r3, #1
 8009750:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009754:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009758:	2b00      	cmp	r3, #0
 800975a:	f000 8090 	beq.w	800987e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009762:	4a44      	ldr	r2, [pc, #272]	@ (8009874 <UART_SetConfig+0x5c4>)
 8009764:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009768:	461a      	mov	r2, r3
 800976a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800976c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009770:	005a      	lsls	r2, r3, #1
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	085b      	lsrs	r3, r3, #1
 8009778:	441a      	add	r2, r3
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009782:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009784:	6a3b      	ldr	r3, [r7, #32]
 8009786:	2b0f      	cmp	r3, #15
 8009788:	d916      	bls.n	80097b8 <UART_SetConfig+0x508>
 800978a:	6a3b      	ldr	r3, [r7, #32]
 800978c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009790:	d212      	bcs.n	80097b8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009792:	6a3b      	ldr	r3, [r7, #32]
 8009794:	b29b      	uxth	r3, r3
 8009796:	f023 030f 	bic.w	r3, r3, #15
 800979a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800979c:	6a3b      	ldr	r3, [r7, #32]
 800979e:	085b      	lsrs	r3, r3, #1
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	f003 0307 	and.w	r3, r3, #7
 80097a6:	b29a      	uxth	r2, r3
 80097a8:	8bfb      	ldrh	r3, [r7, #30]
 80097aa:	4313      	orrs	r3, r2
 80097ac:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	8bfa      	ldrh	r2, [r7, #30]
 80097b4:	60da      	str	r2, [r3, #12]
 80097b6:	e062      	b.n	800987e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80097b8:	2301      	movs	r3, #1
 80097ba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80097be:	e05e      	b.n	800987e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80097c0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80097c4:	2b08      	cmp	r3, #8
 80097c6:	d828      	bhi.n	800981a <UART_SetConfig+0x56a>
 80097c8:	a201      	add	r2, pc, #4	@ (adr r2, 80097d0 <UART_SetConfig+0x520>)
 80097ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ce:	bf00      	nop
 80097d0:	080097f5 	.word	0x080097f5
 80097d4:	080097fd 	.word	0x080097fd
 80097d8:	08009805 	.word	0x08009805
 80097dc:	0800981b 	.word	0x0800981b
 80097e0:	0800980b 	.word	0x0800980b
 80097e4:	0800981b 	.word	0x0800981b
 80097e8:	0800981b 	.word	0x0800981b
 80097ec:	0800981b 	.word	0x0800981b
 80097f0:	08009813 	.word	0x08009813
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80097f4:	f7fe fb80 	bl	8007ef8 <HAL_RCC_GetPCLK1Freq>
 80097f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80097fa:	e014      	b.n	8009826 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80097fc:	f7fe fb92 	bl	8007f24 <HAL_RCC_GetPCLK2Freq>
 8009800:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009802:	e010      	b.n	8009826 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009804:	4b1a      	ldr	r3, [pc, #104]	@ (8009870 <UART_SetConfig+0x5c0>)
 8009806:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009808:	e00d      	b.n	8009826 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800980a:	f7fe fadd 	bl	8007dc8 <HAL_RCC_GetSysClockFreq>
 800980e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009810:	e009      	b.n	8009826 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009812:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009816:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009818:	e005      	b.n	8009826 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800981a:	2300      	movs	r3, #0
 800981c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800981e:	2301      	movs	r3, #1
 8009820:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009824:	bf00      	nop
    }

    if (pclk != 0U)
 8009826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009828:	2b00      	cmp	r3, #0
 800982a:	d028      	beq.n	800987e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009830:	4a10      	ldr	r2, [pc, #64]	@ (8009874 <UART_SetConfig+0x5c4>)
 8009832:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009836:	461a      	mov	r2, r3
 8009838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800983a:	fbb3 f2f2 	udiv	r2, r3, r2
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	085b      	lsrs	r3, r3, #1
 8009844:	441a      	add	r2, r3
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	fbb2 f3f3 	udiv	r3, r2, r3
 800984e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009850:	6a3b      	ldr	r3, [r7, #32]
 8009852:	2b0f      	cmp	r3, #15
 8009854:	d910      	bls.n	8009878 <UART_SetConfig+0x5c8>
 8009856:	6a3b      	ldr	r3, [r7, #32]
 8009858:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800985c:	d20c      	bcs.n	8009878 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800985e:	6a3b      	ldr	r3, [r7, #32]
 8009860:	b29a      	uxth	r2, r3
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	60da      	str	r2, [r3, #12]
 8009868:	e009      	b.n	800987e <UART_SetConfig+0x5ce>
 800986a:	bf00      	nop
 800986c:	40008000 	.word	0x40008000
 8009870:	00f42400 	.word	0x00f42400
 8009874:	0800cc44 	.word	0x0800cc44
      }
      else
      {
        ret = HAL_ERROR;
 8009878:	2301      	movs	r3, #1
 800987a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	2201      	movs	r2, #1
 8009882:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	2201      	movs	r2, #1
 800988a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	2200      	movs	r2, #0
 8009892:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	2200      	movs	r2, #0
 8009898:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800989a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3730      	adds	r7, #48	@ 0x30
 80098a2:	46bd      	mov	sp, r7
 80098a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080098a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b083      	sub	sp, #12
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098b4:	f003 0308 	and.w	r3, r3, #8
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d00a      	beq.n	80098d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	685b      	ldr	r3, [r3, #4]
 80098c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	430a      	orrs	r2, r1
 80098d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098d6:	f003 0301 	and.w	r3, r3, #1
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d00a      	beq.n	80098f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	430a      	orrs	r2, r1
 80098f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098f8:	f003 0302 	and.w	r3, r3, #2
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d00a      	beq.n	8009916 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	430a      	orrs	r2, r1
 8009914:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800991a:	f003 0304 	and.w	r3, r3, #4
 800991e:	2b00      	cmp	r3, #0
 8009920:	d00a      	beq.n	8009938 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	430a      	orrs	r2, r1
 8009936:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800993c:	f003 0310 	and.w	r3, r3, #16
 8009940:	2b00      	cmp	r3, #0
 8009942:	d00a      	beq.n	800995a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	689b      	ldr	r3, [r3, #8]
 800994a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	430a      	orrs	r2, r1
 8009958:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800995e:	f003 0320 	and.w	r3, r3, #32
 8009962:	2b00      	cmp	r3, #0
 8009964:	d00a      	beq.n	800997c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	689b      	ldr	r3, [r3, #8]
 800996c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	430a      	orrs	r2, r1
 800997a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009984:	2b00      	cmp	r3, #0
 8009986:	d01a      	beq.n	80099be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	430a      	orrs	r2, r1
 800999c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80099a6:	d10a      	bne.n	80099be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	430a      	orrs	r2, r1
 80099bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d00a      	beq.n	80099e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	430a      	orrs	r2, r1
 80099de:	605a      	str	r2, [r3, #4]
  }
}
 80099e0:	bf00      	nop
 80099e2:	370c      	adds	r7, #12
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr

080099ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b098      	sub	sp, #96	@ 0x60
 80099f0:	af02      	add	r7, sp, #8
 80099f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2200      	movs	r2, #0
 80099f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80099fc:	f7f9 fb4e 	bl	800309c <HAL_GetTick>
 8009a00:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f003 0308 	and.w	r3, r3, #8
 8009a0c:	2b08      	cmp	r3, #8
 8009a0e:	d12f      	bne.n	8009a70 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a10:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009a14:	9300      	str	r3, [sp, #0]
 8009a16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a18:	2200      	movs	r2, #0
 8009a1a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 f88e 	bl	8009b40 <UART_WaitOnFlagUntilTimeout>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d022      	beq.n	8009a70 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a32:	e853 3f00 	ldrex	r3, [r3]
 8009a36:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	461a      	mov	r2, r3
 8009a46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a48:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a4a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a4c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009a4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a50:	e841 2300 	strex	r3, r2, [r1]
 8009a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009a56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d1e6      	bne.n	8009a2a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2220      	movs	r2, #32
 8009a60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2200      	movs	r2, #0
 8009a68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a6c:	2303      	movs	r3, #3
 8009a6e:	e063      	b.n	8009b38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f003 0304 	and.w	r3, r3, #4
 8009a7a:	2b04      	cmp	r3, #4
 8009a7c:	d149      	bne.n	8009b12 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a7e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009a82:	9300      	str	r3, [sp, #0]
 8009a84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a86:	2200      	movs	r2, #0
 8009a88:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 f857 	bl	8009b40 <UART_WaitOnFlagUntilTimeout>
 8009a92:	4603      	mov	r3, r0
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d03c      	beq.n	8009b12 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aa0:	e853 3f00 	ldrex	r3, [r3]
 8009aa4:	623b      	str	r3, [r7, #32]
   return(result);
 8009aa6:	6a3b      	ldr	r3, [r7, #32]
 8009aa8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009aac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	461a      	mov	r2, r3
 8009ab4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ab6:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ab8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009abc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009abe:	e841 2300 	strex	r3, r2, [r1]
 8009ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d1e6      	bne.n	8009a98 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	3308      	adds	r3, #8
 8009ad0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	e853 3f00 	ldrex	r3, [r3]
 8009ad8:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f023 0301 	bic.w	r3, r3, #1
 8009ae0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	3308      	adds	r3, #8
 8009ae8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009aea:	61fa      	str	r2, [r7, #28]
 8009aec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aee:	69b9      	ldr	r1, [r7, #24]
 8009af0:	69fa      	ldr	r2, [r7, #28]
 8009af2:	e841 2300 	strex	r3, r2, [r1]
 8009af6:	617b      	str	r3, [r7, #20]
   return(result);
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d1e5      	bne.n	8009aca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2220      	movs	r2, #32
 8009b02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b0e:	2303      	movs	r3, #3
 8009b10:	e012      	b.n	8009b38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2220      	movs	r2, #32
 8009b16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2220      	movs	r2, #32
 8009b1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2200      	movs	r2, #0
 8009b26:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2200      	movs	r2, #0
 8009b32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009b36:	2300      	movs	r3, #0
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3758      	adds	r7, #88	@ 0x58
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b084      	sub	sp, #16
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	60f8      	str	r0, [r7, #12]
 8009b48:	60b9      	str	r1, [r7, #8]
 8009b4a:	603b      	str	r3, [r7, #0]
 8009b4c:	4613      	mov	r3, r2
 8009b4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b50:	e04f      	b.n	8009bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b52:	69bb      	ldr	r3, [r7, #24]
 8009b54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009b58:	d04b      	beq.n	8009bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b5a:	f7f9 fa9f 	bl	800309c <HAL_GetTick>
 8009b5e:	4602      	mov	r2, r0
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	1ad3      	subs	r3, r2, r3
 8009b64:	69ba      	ldr	r2, [r7, #24]
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d302      	bcc.n	8009b70 <UART_WaitOnFlagUntilTimeout+0x30>
 8009b6a:	69bb      	ldr	r3, [r7, #24]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d101      	bne.n	8009b74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009b70:	2303      	movs	r3, #3
 8009b72:	e04e      	b.n	8009c12 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f003 0304 	and.w	r3, r3, #4
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d037      	beq.n	8009bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	2b80      	cmp	r3, #128	@ 0x80
 8009b86:	d034      	beq.n	8009bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	2b40      	cmp	r3, #64	@ 0x40
 8009b8c:	d031      	beq.n	8009bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	69db      	ldr	r3, [r3, #28]
 8009b94:	f003 0308 	and.w	r3, r3, #8
 8009b98:	2b08      	cmp	r3, #8
 8009b9a:	d110      	bne.n	8009bbe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	2208      	movs	r2, #8
 8009ba2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009ba4:	68f8      	ldr	r0, [r7, #12]
 8009ba6:	f000 f838 	bl	8009c1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2208      	movs	r2, #8
 8009bae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009bba:	2301      	movs	r3, #1
 8009bbc:	e029      	b.n	8009c12 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	69db      	ldr	r3, [r3, #28]
 8009bc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009bc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009bcc:	d111      	bne.n	8009bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009bd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009bd8:	68f8      	ldr	r0, [r7, #12]
 8009bda:	f000 f81e 	bl	8009c1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2220      	movs	r2, #32
 8009be2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	2200      	movs	r2, #0
 8009bea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009bee:	2303      	movs	r3, #3
 8009bf0:	e00f      	b.n	8009c12 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	69da      	ldr	r2, [r3, #28]
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	4013      	ands	r3, r2
 8009bfc:	68ba      	ldr	r2, [r7, #8]
 8009bfe:	429a      	cmp	r2, r3
 8009c00:	bf0c      	ite	eq
 8009c02:	2301      	moveq	r3, #1
 8009c04:	2300      	movne	r3, #0
 8009c06:	b2db      	uxtb	r3, r3
 8009c08:	461a      	mov	r2, r3
 8009c0a:	79fb      	ldrb	r3, [r7, #7]
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	d0a0      	beq.n	8009b52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009c10:	2300      	movs	r3, #0
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3710      	adds	r7, #16
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}

08009c1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009c1a:	b480      	push	{r7}
 8009c1c:	b095      	sub	sp, #84	@ 0x54
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c2a:	e853 3f00 	ldrex	r3, [r3]
 8009c2e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009c36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c40:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c42:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c44:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009c46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009c48:	e841 2300 	strex	r3, r2, [r1]
 8009c4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d1e6      	bne.n	8009c22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	3308      	adds	r3, #8
 8009c5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c5c:	6a3b      	ldr	r3, [r7, #32]
 8009c5e:	e853 3f00 	ldrex	r3, [r3]
 8009c62:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c64:	69fb      	ldr	r3, [r7, #28]
 8009c66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009c6a:	f023 0301 	bic.w	r3, r3, #1
 8009c6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	3308      	adds	r3, #8
 8009c76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009c78:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c80:	e841 2300 	strex	r3, r2, [r1]
 8009c84:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d1e3      	bne.n	8009c54 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c90:	2b01      	cmp	r3, #1
 8009c92:	d118      	bne.n	8009cc6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	e853 3f00 	ldrex	r3, [r3]
 8009ca0:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	f023 0310 	bic.w	r3, r3, #16
 8009ca8:	647b      	str	r3, [r7, #68]	@ 0x44
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	461a      	mov	r2, r3
 8009cb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009cb2:	61bb      	str	r3, [r7, #24]
 8009cb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cb6:	6979      	ldr	r1, [r7, #20]
 8009cb8:	69ba      	ldr	r2, [r7, #24]
 8009cba:	e841 2300 	strex	r3, r2, [r1]
 8009cbe:	613b      	str	r3, [r7, #16]
   return(result);
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d1e6      	bne.n	8009c94 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2220      	movs	r2, #32
 8009cca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009cda:	bf00      	nop
 8009cdc:	3754      	adds	r7, #84	@ 0x54
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce4:	4770      	bx	lr

08009ce6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009ce6:	b480      	push	{r7}
 8009ce8:	b085      	sub	sp, #20
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009cf4:	2b01      	cmp	r3, #1
 8009cf6:	d101      	bne.n	8009cfc <HAL_UARTEx_DisableFifoMode+0x16>
 8009cf8:	2302      	movs	r3, #2
 8009cfa:	e027      	b.n	8009d4c <HAL_UARTEx_DisableFifoMode+0x66>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2201      	movs	r2, #1
 8009d00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2224      	movs	r2, #36	@ 0x24
 8009d08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	681a      	ldr	r2, [r3, #0]
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f022 0201 	bic.w	r2, r2, #1
 8009d22:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009d2a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	68fa      	ldr	r2, [r7, #12]
 8009d38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2220      	movs	r2, #32
 8009d3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2200      	movs	r2, #0
 8009d46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009d4a:	2300      	movs	r3, #0
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3714      	adds	r7, #20
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr

08009d58 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b084      	sub	sp, #16
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009d68:	2b01      	cmp	r3, #1
 8009d6a:	d101      	bne.n	8009d70 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009d6c:	2302      	movs	r3, #2
 8009d6e:	e02d      	b.n	8009dcc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2201      	movs	r2, #1
 8009d74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2224      	movs	r2, #36	@ 0x24
 8009d7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	681a      	ldr	r2, [r3, #0]
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f022 0201 	bic.w	r2, r2, #1
 8009d96:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	689b      	ldr	r3, [r3, #8]
 8009d9e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	683a      	ldr	r2, [r7, #0]
 8009da8:	430a      	orrs	r2, r1
 8009daa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f000 f84f 	bl	8009e50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	68fa      	ldr	r2, [r7, #12]
 8009db8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2220      	movs	r2, #32
 8009dbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009dca:	2300      	movs	r3, #0
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3710      	adds	r7, #16
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b084      	sub	sp, #16
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009de4:	2b01      	cmp	r3, #1
 8009de6:	d101      	bne.n	8009dec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009de8:	2302      	movs	r3, #2
 8009dea:	e02d      	b.n	8009e48 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2201      	movs	r2, #1
 8009df0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2224      	movs	r2, #36	@ 0x24
 8009df8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	681a      	ldr	r2, [r3, #0]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f022 0201 	bic.w	r2, r2, #1
 8009e12:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	689b      	ldr	r3, [r3, #8]
 8009e1a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	683a      	ldr	r2, [r7, #0]
 8009e24:	430a      	orrs	r2, r1
 8009e26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f000 f811 	bl	8009e50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	68fa      	ldr	r2, [r7, #12]
 8009e34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2220      	movs	r2, #32
 8009e3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2200      	movs	r2, #0
 8009e42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009e46:	2300      	movs	r3, #0
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3710      	adds	r7, #16
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b085      	sub	sp, #20
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d108      	bne.n	8009e72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2201      	movs	r2, #1
 8009e64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009e70:	e031      	b.n	8009ed6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009e72:	2308      	movs	r3, #8
 8009e74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009e76:	2308      	movs	r3, #8
 8009e78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	689b      	ldr	r3, [r3, #8]
 8009e80:	0e5b      	lsrs	r3, r3, #25
 8009e82:	b2db      	uxtb	r3, r3
 8009e84:	f003 0307 	and.w	r3, r3, #7
 8009e88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	689b      	ldr	r3, [r3, #8]
 8009e90:	0f5b      	lsrs	r3, r3, #29
 8009e92:	b2db      	uxtb	r3, r3
 8009e94:	f003 0307 	and.w	r3, r3, #7
 8009e98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e9a:	7bbb      	ldrb	r3, [r7, #14]
 8009e9c:	7b3a      	ldrb	r2, [r7, #12]
 8009e9e:	4911      	ldr	r1, [pc, #68]	@ (8009ee4 <UARTEx_SetNbDataToProcess+0x94>)
 8009ea0:	5c8a      	ldrb	r2, [r1, r2]
 8009ea2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009ea6:	7b3a      	ldrb	r2, [r7, #12]
 8009ea8:	490f      	ldr	r1, [pc, #60]	@ (8009ee8 <UARTEx_SetNbDataToProcess+0x98>)
 8009eaa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009eac:	fb93 f3f2 	sdiv	r3, r3, r2
 8009eb0:	b29a      	uxth	r2, r3
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009eb8:	7bfb      	ldrb	r3, [r7, #15]
 8009eba:	7b7a      	ldrb	r2, [r7, #13]
 8009ebc:	4909      	ldr	r1, [pc, #36]	@ (8009ee4 <UARTEx_SetNbDataToProcess+0x94>)
 8009ebe:	5c8a      	ldrb	r2, [r1, r2]
 8009ec0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009ec4:	7b7a      	ldrb	r2, [r7, #13]
 8009ec6:	4908      	ldr	r1, [pc, #32]	@ (8009ee8 <UARTEx_SetNbDataToProcess+0x98>)
 8009ec8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009eca:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ece:	b29a      	uxth	r2, r3
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009ed6:	bf00      	nop
 8009ed8:	3714      	adds	r7, #20
 8009eda:	46bd      	mov	sp, r7
 8009edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee0:	4770      	bx	lr
 8009ee2:	bf00      	nop
 8009ee4:	0800cc5c 	.word	0x0800cc5c
 8009ee8:	0800cc64 	.word	0x0800cc64

08009eec <__cvt>:
 8009eec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ef0:	ec57 6b10 	vmov	r6, r7, d0
 8009ef4:	2f00      	cmp	r7, #0
 8009ef6:	460c      	mov	r4, r1
 8009ef8:	4619      	mov	r1, r3
 8009efa:	463b      	mov	r3, r7
 8009efc:	bfbb      	ittet	lt
 8009efe:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009f02:	461f      	movlt	r7, r3
 8009f04:	2300      	movge	r3, #0
 8009f06:	232d      	movlt	r3, #45	@ 0x2d
 8009f08:	700b      	strb	r3, [r1, #0]
 8009f0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009f0c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009f10:	4691      	mov	r9, r2
 8009f12:	f023 0820 	bic.w	r8, r3, #32
 8009f16:	bfbc      	itt	lt
 8009f18:	4632      	movlt	r2, r6
 8009f1a:	4616      	movlt	r6, r2
 8009f1c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009f20:	d005      	beq.n	8009f2e <__cvt+0x42>
 8009f22:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009f26:	d100      	bne.n	8009f2a <__cvt+0x3e>
 8009f28:	3401      	adds	r4, #1
 8009f2a:	2102      	movs	r1, #2
 8009f2c:	e000      	b.n	8009f30 <__cvt+0x44>
 8009f2e:	2103      	movs	r1, #3
 8009f30:	ab03      	add	r3, sp, #12
 8009f32:	9301      	str	r3, [sp, #4]
 8009f34:	ab02      	add	r3, sp, #8
 8009f36:	9300      	str	r3, [sp, #0]
 8009f38:	ec47 6b10 	vmov	d0, r6, r7
 8009f3c:	4653      	mov	r3, sl
 8009f3e:	4622      	mov	r2, r4
 8009f40:	f000 fe2e 	bl	800aba0 <_dtoa_r>
 8009f44:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009f48:	4605      	mov	r5, r0
 8009f4a:	d119      	bne.n	8009f80 <__cvt+0x94>
 8009f4c:	f019 0f01 	tst.w	r9, #1
 8009f50:	d00e      	beq.n	8009f70 <__cvt+0x84>
 8009f52:	eb00 0904 	add.w	r9, r0, r4
 8009f56:	2200      	movs	r2, #0
 8009f58:	2300      	movs	r3, #0
 8009f5a:	4630      	mov	r0, r6
 8009f5c:	4639      	mov	r1, r7
 8009f5e:	f7f6 fdcb 	bl	8000af8 <__aeabi_dcmpeq>
 8009f62:	b108      	cbz	r0, 8009f68 <__cvt+0x7c>
 8009f64:	f8cd 900c 	str.w	r9, [sp, #12]
 8009f68:	2230      	movs	r2, #48	@ 0x30
 8009f6a:	9b03      	ldr	r3, [sp, #12]
 8009f6c:	454b      	cmp	r3, r9
 8009f6e:	d31e      	bcc.n	8009fae <__cvt+0xc2>
 8009f70:	9b03      	ldr	r3, [sp, #12]
 8009f72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f74:	1b5b      	subs	r3, r3, r5
 8009f76:	4628      	mov	r0, r5
 8009f78:	6013      	str	r3, [r2, #0]
 8009f7a:	b004      	add	sp, #16
 8009f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f80:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009f84:	eb00 0904 	add.w	r9, r0, r4
 8009f88:	d1e5      	bne.n	8009f56 <__cvt+0x6a>
 8009f8a:	7803      	ldrb	r3, [r0, #0]
 8009f8c:	2b30      	cmp	r3, #48	@ 0x30
 8009f8e:	d10a      	bne.n	8009fa6 <__cvt+0xba>
 8009f90:	2200      	movs	r2, #0
 8009f92:	2300      	movs	r3, #0
 8009f94:	4630      	mov	r0, r6
 8009f96:	4639      	mov	r1, r7
 8009f98:	f7f6 fdae 	bl	8000af8 <__aeabi_dcmpeq>
 8009f9c:	b918      	cbnz	r0, 8009fa6 <__cvt+0xba>
 8009f9e:	f1c4 0401 	rsb	r4, r4, #1
 8009fa2:	f8ca 4000 	str.w	r4, [sl]
 8009fa6:	f8da 3000 	ldr.w	r3, [sl]
 8009faa:	4499      	add	r9, r3
 8009fac:	e7d3      	b.n	8009f56 <__cvt+0x6a>
 8009fae:	1c59      	adds	r1, r3, #1
 8009fb0:	9103      	str	r1, [sp, #12]
 8009fb2:	701a      	strb	r2, [r3, #0]
 8009fb4:	e7d9      	b.n	8009f6a <__cvt+0x7e>

08009fb6 <__exponent>:
 8009fb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009fb8:	2900      	cmp	r1, #0
 8009fba:	bfba      	itte	lt
 8009fbc:	4249      	neglt	r1, r1
 8009fbe:	232d      	movlt	r3, #45	@ 0x2d
 8009fc0:	232b      	movge	r3, #43	@ 0x2b
 8009fc2:	2909      	cmp	r1, #9
 8009fc4:	7002      	strb	r2, [r0, #0]
 8009fc6:	7043      	strb	r3, [r0, #1]
 8009fc8:	dd29      	ble.n	800a01e <__exponent+0x68>
 8009fca:	f10d 0307 	add.w	r3, sp, #7
 8009fce:	461d      	mov	r5, r3
 8009fd0:	270a      	movs	r7, #10
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	fbb1 f6f7 	udiv	r6, r1, r7
 8009fd8:	fb07 1416 	mls	r4, r7, r6, r1
 8009fdc:	3430      	adds	r4, #48	@ 0x30
 8009fde:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009fe2:	460c      	mov	r4, r1
 8009fe4:	2c63      	cmp	r4, #99	@ 0x63
 8009fe6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8009fea:	4631      	mov	r1, r6
 8009fec:	dcf1      	bgt.n	8009fd2 <__exponent+0x1c>
 8009fee:	3130      	adds	r1, #48	@ 0x30
 8009ff0:	1e94      	subs	r4, r2, #2
 8009ff2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009ff6:	1c41      	adds	r1, r0, #1
 8009ff8:	4623      	mov	r3, r4
 8009ffa:	42ab      	cmp	r3, r5
 8009ffc:	d30a      	bcc.n	800a014 <__exponent+0x5e>
 8009ffe:	f10d 0309 	add.w	r3, sp, #9
 800a002:	1a9b      	subs	r3, r3, r2
 800a004:	42ac      	cmp	r4, r5
 800a006:	bf88      	it	hi
 800a008:	2300      	movhi	r3, #0
 800a00a:	3302      	adds	r3, #2
 800a00c:	4403      	add	r3, r0
 800a00e:	1a18      	subs	r0, r3, r0
 800a010:	b003      	add	sp, #12
 800a012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a014:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a018:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a01c:	e7ed      	b.n	8009ffa <__exponent+0x44>
 800a01e:	2330      	movs	r3, #48	@ 0x30
 800a020:	3130      	adds	r1, #48	@ 0x30
 800a022:	7083      	strb	r3, [r0, #2]
 800a024:	70c1      	strb	r1, [r0, #3]
 800a026:	1d03      	adds	r3, r0, #4
 800a028:	e7f1      	b.n	800a00e <__exponent+0x58>
	...

0800a02c <_printf_float>:
 800a02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a030:	b08d      	sub	sp, #52	@ 0x34
 800a032:	460c      	mov	r4, r1
 800a034:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a038:	4616      	mov	r6, r2
 800a03a:	461f      	mov	r7, r3
 800a03c:	4605      	mov	r5, r0
 800a03e:	f000 fce7 	bl	800aa10 <_localeconv_r>
 800a042:	6803      	ldr	r3, [r0, #0]
 800a044:	9304      	str	r3, [sp, #16]
 800a046:	4618      	mov	r0, r3
 800a048:	f7f6 f92a 	bl	80002a0 <strlen>
 800a04c:	2300      	movs	r3, #0
 800a04e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a050:	f8d8 3000 	ldr.w	r3, [r8]
 800a054:	9005      	str	r0, [sp, #20]
 800a056:	3307      	adds	r3, #7
 800a058:	f023 0307 	bic.w	r3, r3, #7
 800a05c:	f103 0208 	add.w	r2, r3, #8
 800a060:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a064:	f8d4 b000 	ldr.w	fp, [r4]
 800a068:	f8c8 2000 	str.w	r2, [r8]
 800a06c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a070:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a074:	9307      	str	r3, [sp, #28]
 800a076:	f8cd 8018 	str.w	r8, [sp, #24]
 800a07a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a07e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a082:	4b9c      	ldr	r3, [pc, #624]	@ (800a2f4 <_printf_float+0x2c8>)
 800a084:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a088:	f7f6 fd68 	bl	8000b5c <__aeabi_dcmpun>
 800a08c:	bb70      	cbnz	r0, 800a0ec <_printf_float+0xc0>
 800a08e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a092:	4b98      	ldr	r3, [pc, #608]	@ (800a2f4 <_printf_float+0x2c8>)
 800a094:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a098:	f7f6 fd42 	bl	8000b20 <__aeabi_dcmple>
 800a09c:	bb30      	cbnz	r0, 800a0ec <_printf_float+0xc0>
 800a09e:	2200      	movs	r2, #0
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	4640      	mov	r0, r8
 800a0a4:	4649      	mov	r1, r9
 800a0a6:	f7f6 fd31 	bl	8000b0c <__aeabi_dcmplt>
 800a0aa:	b110      	cbz	r0, 800a0b2 <_printf_float+0x86>
 800a0ac:	232d      	movs	r3, #45	@ 0x2d
 800a0ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a0b2:	4a91      	ldr	r2, [pc, #580]	@ (800a2f8 <_printf_float+0x2cc>)
 800a0b4:	4b91      	ldr	r3, [pc, #580]	@ (800a2fc <_printf_float+0x2d0>)
 800a0b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a0ba:	bf94      	ite	ls
 800a0bc:	4690      	movls	r8, r2
 800a0be:	4698      	movhi	r8, r3
 800a0c0:	2303      	movs	r3, #3
 800a0c2:	6123      	str	r3, [r4, #16]
 800a0c4:	f02b 0304 	bic.w	r3, fp, #4
 800a0c8:	6023      	str	r3, [r4, #0]
 800a0ca:	f04f 0900 	mov.w	r9, #0
 800a0ce:	9700      	str	r7, [sp, #0]
 800a0d0:	4633      	mov	r3, r6
 800a0d2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a0d4:	4621      	mov	r1, r4
 800a0d6:	4628      	mov	r0, r5
 800a0d8:	f000 f9d2 	bl	800a480 <_printf_common>
 800a0dc:	3001      	adds	r0, #1
 800a0de:	f040 808d 	bne.w	800a1fc <_printf_float+0x1d0>
 800a0e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a0e6:	b00d      	add	sp, #52	@ 0x34
 800a0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0ec:	4642      	mov	r2, r8
 800a0ee:	464b      	mov	r3, r9
 800a0f0:	4640      	mov	r0, r8
 800a0f2:	4649      	mov	r1, r9
 800a0f4:	f7f6 fd32 	bl	8000b5c <__aeabi_dcmpun>
 800a0f8:	b140      	cbz	r0, 800a10c <_printf_float+0xe0>
 800a0fa:	464b      	mov	r3, r9
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	bfbc      	itt	lt
 800a100:	232d      	movlt	r3, #45	@ 0x2d
 800a102:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a106:	4a7e      	ldr	r2, [pc, #504]	@ (800a300 <_printf_float+0x2d4>)
 800a108:	4b7e      	ldr	r3, [pc, #504]	@ (800a304 <_printf_float+0x2d8>)
 800a10a:	e7d4      	b.n	800a0b6 <_printf_float+0x8a>
 800a10c:	6863      	ldr	r3, [r4, #4]
 800a10e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a112:	9206      	str	r2, [sp, #24]
 800a114:	1c5a      	adds	r2, r3, #1
 800a116:	d13b      	bne.n	800a190 <_printf_float+0x164>
 800a118:	2306      	movs	r3, #6
 800a11a:	6063      	str	r3, [r4, #4]
 800a11c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a120:	2300      	movs	r3, #0
 800a122:	6022      	str	r2, [r4, #0]
 800a124:	9303      	str	r3, [sp, #12]
 800a126:	ab0a      	add	r3, sp, #40	@ 0x28
 800a128:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a12c:	ab09      	add	r3, sp, #36	@ 0x24
 800a12e:	9300      	str	r3, [sp, #0]
 800a130:	6861      	ldr	r1, [r4, #4]
 800a132:	ec49 8b10 	vmov	d0, r8, r9
 800a136:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a13a:	4628      	mov	r0, r5
 800a13c:	f7ff fed6 	bl	8009eec <__cvt>
 800a140:	9b06      	ldr	r3, [sp, #24]
 800a142:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a144:	2b47      	cmp	r3, #71	@ 0x47
 800a146:	4680      	mov	r8, r0
 800a148:	d129      	bne.n	800a19e <_printf_float+0x172>
 800a14a:	1cc8      	adds	r0, r1, #3
 800a14c:	db02      	blt.n	800a154 <_printf_float+0x128>
 800a14e:	6863      	ldr	r3, [r4, #4]
 800a150:	4299      	cmp	r1, r3
 800a152:	dd41      	ble.n	800a1d8 <_printf_float+0x1ac>
 800a154:	f1aa 0a02 	sub.w	sl, sl, #2
 800a158:	fa5f fa8a 	uxtb.w	sl, sl
 800a15c:	3901      	subs	r1, #1
 800a15e:	4652      	mov	r2, sl
 800a160:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a164:	9109      	str	r1, [sp, #36]	@ 0x24
 800a166:	f7ff ff26 	bl	8009fb6 <__exponent>
 800a16a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a16c:	1813      	adds	r3, r2, r0
 800a16e:	2a01      	cmp	r2, #1
 800a170:	4681      	mov	r9, r0
 800a172:	6123      	str	r3, [r4, #16]
 800a174:	dc02      	bgt.n	800a17c <_printf_float+0x150>
 800a176:	6822      	ldr	r2, [r4, #0]
 800a178:	07d2      	lsls	r2, r2, #31
 800a17a:	d501      	bpl.n	800a180 <_printf_float+0x154>
 800a17c:	3301      	adds	r3, #1
 800a17e:	6123      	str	r3, [r4, #16]
 800a180:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a184:	2b00      	cmp	r3, #0
 800a186:	d0a2      	beq.n	800a0ce <_printf_float+0xa2>
 800a188:	232d      	movs	r3, #45	@ 0x2d
 800a18a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a18e:	e79e      	b.n	800a0ce <_printf_float+0xa2>
 800a190:	9a06      	ldr	r2, [sp, #24]
 800a192:	2a47      	cmp	r2, #71	@ 0x47
 800a194:	d1c2      	bne.n	800a11c <_printf_float+0xf0>
 800a196:	2b00      	cmp	r3, #0
 800a198:	d1c0      	bne.n	800a11c <_printf_float+0xf0>
 800a19a:	2301      	movs	r3, #1
 800a19c:	e7bd      	b.n	800a11a <_printf_float+0xee>
 800a19e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a1a2:	d9db      	bls.n	800a15c <_printf_float+0x130>
 800a1a4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a1a8:	d118      	bne.n	800a1dc <_printf_float+0x1b0>
 800a1aa:	2900      	cmp	r1, #0
 800a1ac:	6863      	ldr	r3, [r4, #4]
 800a1ae:	dd0b      	ble.n	800a1c8 <_printf_float+0x19c>
 800a1b0:	6121      	str	r1, [r4, #16]
 800a1b2:	b913      	cbnz	r3, 800a1ba <_printf_float+0x18e>
 800a1b4:	6822      	ldr	r2, [r4, #0]
 800a1b6:	07d0      	lsls	r0, r2, #31
 800a1b8:	d502      	bpl.n	800a1c0 <_printf_float+0x194>
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	440b      	add	r3, r1
 800a1be:	6123      	str	r3, [r4, #16]
 800a1c0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a1c2:	f04f 0900 	mov.w	r9, #0
 800a1c6:	e7db      	b.n	800a180 <_printf_float+0x154>
 800a1c8:	b913      	cbnz	r3, 800a1d0 <_printf_float+0x1a4>
 800a1ca:	6822      	ldr	r2, [r4, #0]
 800a1cc:	07d2      	lsls	r2, r2, #31
 800a1ce:	d501      	bpl.n	800a1d4 <_printf_float+0x1a8>
 800a1d0:	3302      	adds	r3, #2
 800a1d2:	e7f4      	b.n	800a1be <_printf_float+0x192>
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	e7f2      	b.n	800a1be <_printf_float+0x192>
 800a1d8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a1dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a1de:	4299      	cmp	r1, r3
 800a1e0:	db05      	blt.n	800a1ee <_printf_float+0x1c2>
 800a1e2:	6823      	ldr	r3, [r4, #0]
 800a1e4:	6121      	str	r1, [r4, #16]
 800a1e6:	07d8      	lsls	r0, r3, #31
 800a1e8:	d5ea      	bpl.n	800a1c0 <_printf_float+0x194>
 800a1ea:	1c4b      	adds	r3, r1, #1
 800a1ec:	e7e7      	b.n	800a1be <_printf_float+0x192>
 800a1ee:	2900      	cmp	r1, #0
 800a1f0:	bfd4      	ite	le
 800a1f2:	f1c1 0202 	rsble	r2, r1, #2
 800a1f6:	2201      	movgt	r2, #1
 800a1f8:	4413      	add	r3, r2
 800a1fa:	e7e0      	b.n	800a1be <_printf_float+0x192>
 800a1fc:	6823      	ldr	r3, [r4, #0]
 800a1fe:	055a      	lsls	r2, r3, #21
 800a200:	d407      	bmi.n	800a212 <_printf_float+0x1e6>
 800a202:	6923      	ldr	r3, [r4, #16]
 800a204:	4642      	mov	r2, r8
 800a206:	4631      	mov	r1, r6
 800a208:	4628      	mov	r0, r5
 800a20a:	47b8      	blx	r7
 800a20c:	3001      	adds	r0, #1
 800a20e:	d12b      	bne.n	800a268 <_printf_float+0x23c>
 800a210:	e767      	b.n	800a0e2 <_printf_float+0xb6>
 800a212:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a216:	f240 80dd 	bls.w	800a3d4 <_printf_float+0x3a8>
 800a21a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a21e:	2200      	movs	r2, #0
 800a220:	2300      	movs	r3, #0
 800a222:	f7f6 fc69 	bl	8000af8 <__aeabi_dcmpeq>
 800a226:	2800      	cmp	r0, #0
 800a228:	d033      	beq.n	800a292 <_printf_float+0x266>
 800a22a:	4a37      	ldr	r2, [pc, #220]	@ (800a308 <_printf_float+0x2dc>)
 800a22c:	2301      	movs	r3, #1
 800a22e:	4631      	mov	r1, r6
 800a230:	4628      	mov	r0, r5
 800a232:	47b8      	blx	r7
 800a234:	3001      	adds	r0, #1
 800a236:	f43f af54 	beq.w	800a0e2 <_printf_float+0xb6>
 800a23a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a23e:	4543      	cmp	r3, r8
 800a240:	db02      	blt.n	800a248 <_printf_float+0x21c>
 800a242:	6823      	ldr	r3, [r4, #0]
 800a244:	07d8      	lsls	r0, r3, #31
 800a246:	d50f      	bpl.n	800a268 <_printf_float+0x23c>
 800a248:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a24c:	4631      	mov	r1, r6
 800a24e:	4628      	mov	r0, r5
 800a250:	47b8      	blx	r7
 800a252:	3001      	adds	r0, #1
 800a254:	f43f af45 	beq.w	800a0e2 <_printf_float+0xb6>
 800a258:	f04f 0900 	mov.w	r9, #0
 800a25c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800a260:	f104 0a1a 	add.w	sl, r4, #26
 800a264:	45c8      	cmp	r8, r9
 800a266:	dc09      	bgt.n	800a27c <_printf_float+0x250>
 800a268:	6823      	ldr	r3, [r4, #0]
 800a26a:	079b      	lsls	r3, r3, #30
 800a26c:	f100 8103 	bmi.w	800a476 <_printf_float+0x44a>
 800a270:	68e0      	ldr	r0, [r4, #12]
 800a272:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a274:	4298      	cmp	r0, r3
 800a276:	bfb8      	it	lt
 800a278:	4618      	movlt	r0, r3
 800a27a:	e734      	b.n	800a0e6 <_printf_float+0xba>
 800a27c:	2301      	movs	r3, #1
 800a27e:	4652      	mov	r2, sl
 800a280:	4631      	mov	r1, r6
 800a282:	4628      	mov	r0, r5
 800a284:	47b8      	blx	r7
 800a286:	3001      	adds	r0, #1
 800a288:	f43f af2b 	beq.w	800a0e2 <_printf_float+0xb6>
 800a28c:	f109 0901 	add.w	r9, r9, #1
 800a290:	e7e8      	b.n	800a264 <_printf_float+0x238>
 800a292:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a294:	2b00      	cmp	r3, #0
 800a296:	dc39      	bgt.n	800a30c <_printf_float+0x2e0>
 800a298:	4a1b      	ldr	r2, [pc, #108]	@ (800a308 <_printf_float+0x2dc>)
 800a29a:	2301      	movs	r3, #1
 800a29c:	4631      	mov	r1, r6
 800a29e:	4628      	mov	r0, r5
 800a2a0:	47b8      	blx	r7
 800a2a2:	3001      	adds	r0, #1
 800a2a4:	f43f af1d 	beq.w	800a0e2 <_printf_float+0xb6>
 800a2a8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a2ac:	ea59 0303 	orrs.w	r3, r9, r3
 800a2b0:	d102      	bne.n	800a2b8 <_printf_float+0x28c>
 800a2b2:	6823      	ldr	r3, [r4, #0]
 800a2b4:	07d9      	lsls	r1, r3, #31
 800a2b6:	d5d7      	bpl.n	800a268 <_printf_float+0x23c>
 800a2b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2bc:	4631      	mov	r1, r6
 800a2be:	4628      	mov	r0, r5
 800a2c0:	47b8      	blx	r7
 800a2c2:	3001      	adds	r0, #1
 800a2c4:	f43f af0d 	beq.w	800a0e2 <_printf_float+0xb6>
 800a2c8:	f04f 0a00 	mov.w	sl, #0
 800a2cc:	f104 0b1a 	add.w	fp, r4, #26
 800a2d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2d2:	425b      	negs	r3, r3
 800a2d4:	4553      	cmp	r3, sl
 800a2d6:	dc01      	bgt.n	800a2dc <_printf_float+0x2b0>
 800a2d8:	464b      	mov	r3, r9
 800a2da:	e793      	b.n	800a204 <_printf_float+0x1d8>
 800a2dc:	2301      	movs	r3, #1
 800a2de:	465a      	mov	r2, fp
 800a2e0:	4631      	mov	r1, r6
 800a2e2:	4628      	mov	r0, r5
 800a2e4:	47b8      	blx	r7
 800a2e6:	3001      	adds	r0, #1
 800a2e8:	f43f aefb 	beq.w	800a0e2 <_printf_float+0xb6>
 800a2ec:	f10a 0a01 	add.w	sl, sl, #1
 800a2f0:	e7ee      	b.n	800a2d0 <_printf_float+0x2a4>
 800a2f2:	bf00      	nop
 800a2f4:	7fefffff 	.word	0x7fefffff
 800a2f8:	0800cc6c 	.word	0x0800cc6c
 800a2fc:	0800cc70 	.word	0x0800cc70
 800a300:	0800cc74 	.word	0x0800cc74
 800a304:	0800cc78 	.word	0x0800cc78
 800a308:	0800cc7c 	.word	0x0800cc7c
 800a30c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a30e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a312:	4553      	cmp	r3, sl
 800a314:	bfa8      	it	ge
 800a316:	4653      	movge	r3, sl
 800a318:	2b00      	cmp	r3, #0
 800a31a:	4699      	mov	r9, r3
 800a31c:	dc36      	bgt.n	800a38c <_printf_float+0x360>
 800a31e:	f04f 0b00 	mov.w	fp, #0
 800a322:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a326:	f104 021a 	add.w	r2, r4, #26
 800a32a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a32c:	9306      	str	r3, [sp, #24]
 800a32e:	eba3 0309 	sub.w	r3, r3, r9
 800a332:	455b      	cmp	r3, fp
 800a334:	dc31      	bgt.n	800a39a <_printf_float+0x36e>
 800a336:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a338:	459a      	cmp	sl, r3
 800a33a:	dc3a      	bgt.n	800a3b2 <_printf_float+0x386>
 800a33c:	6823      	ldr	r3, [r4, #0]
 800a33e:	07da      	lsls	r2, r3, #31
 800a340:	d437      	bmi.n	800a3b2 <_printf_float+0x386>
 800a342:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a344:	ebaa 0903 	sub.w	r9, sl, r3
 800a348:	9b06      	ldr	r3, [sp, #24]
 800a34a:	ebaa 0303 	sub.w	r3, sl, r3
 800a34e:	4599      	cmp	r9, r3
 800a350:	bfa8      	it	ge
 800a352:	4699      	movge	r9, r3
 800a354:	f1b9 0f00 	cmp.w	r9, #0
 800a358:	dc33      	bgt.n	800a3c2 <_printf_float+0x396>
 800a35a:	f04f 0800 	mov.w	r8, #0
 800a35e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a362:	f104 0b1a 	add.w	fp, r4, #26
 800a366:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a368:	ebaa 0303 	sub.w	r3, sl, r3
 800a36c:	eba3 0309 	sub.w	r3, r3, r9
 800a370:	4543      	cmp	r3, r8
 800a372:	f77f af79 	ble.w	800a268 <_printf_float+0x23c>
 800a376:	2301      	movs	r3, #1
 800a378:	465a      	mov	r2, fp
 800a37a:	4631      	mov	r1, r6
 800a37c:	4628      	mov	r0, r5
 800a37e:	47b8      	blx	r7
 800a380:	3001      	adds	r0, #1
 800a382:	f43f aeae 	beq.w	800a0e2 <_printf_float+0xb6>
 800a386:	f108 0801 	add.w	r8, r8, #1
 800a38a:	e7ec      	b.n	800a366 <_printf_float+0x33a>
 800a38c:	4642      	mov	r2, r8
 800a38e:	4631      	mov	r1, r6
 800a390:	4628      	mov	r0, r5
 800a392:	47b8      	blx	r7
 800a394:	3001      	adds	r0, #1
 800a396:	d1c2      	bne.n	800a31e <_printf_float+0x2f2>
 800a398:	e6a3      	b.n	800a0e2 <_printf_float+0xb6>
 800a39a:	2301      	movs	r3, #1
 800a39c:	4631      	mov	r1, r6
 800a39e:	4628      	mov	r0, r5
 800a3a0:	9206      	str	r2, [sp, #24]
 800a3a2:	47b8      	blx	r7
 800a3a4:	3001      	adds	r0, #1
 800a3a6:	f43f ae9c 	beq.w	800a0e2 <_printf_float+0xb6>
 800a3aa:	9a06      	ldr	r2, [sp, #24]
 800a3ac:	f10b 0b01 	add.w	fp, fp, #1
 800a3b0:	e7bb      	b.n	800a32a <_printf_float+0x2fe>
 800a3b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3b6:	4631      	mov	r1, r6
 800a3b8:	4628      	mov	r0, r5
 800a3ba:	47b8      	blx	r7
 800a3bc:	3001      	adds	r0, #1
 800a3be:	d1c0      	bne.n	800a342 <_printf_float+0x316>
 800a3c0:	e68f      	b.n	800a0e2 <_printf_float+0xb6>
 800a3c2:	9a06      	ldr	r2, [sp, #24]
 800a3c4:	464b      	mov	r3, r9
 800a3c6:	4442      	add	r2, r8
 800a3c8:	4631      	mov	r1, r6
 800a3ca:	4628      	mov	r0, r5
 800a3cc:	47b8      	blx	r7
 800a3ce:	3001      	adds	r0, #1
 800a3d0:	d1c3      	bne.n	800a35a <_printf_float+0x32e>
 800a3d2:	e686      	b.n	800a0e2 <_printf_float+0xb6>
 800a3d4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a3d8:	f1ba 0f01 	cmp.w	sl, #1
 800a3dc:	dc01      	bgt.n	800a3e2 <_printf_float+0x3b6>
 800a3de:	07db      	lsls	r3, r3, #31
 800a3e0:	d536      	bpl.n	800a450 <_printf_float+0x424>
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	4642      	mov	r2, r8
 800a3e6:	4631      	mov	r1, r6
 800a3e8:	4628      	mov	r0, r5
 800a3ea:	47b8      	blx	r7
 800a3ec:	3001      	adds	r0, #1
 800a3ee:	f43f ae78 	beq.w	800a0e2 <_printf_float+0xb6>
 800a3f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3f6:	4631      	mov	r1, r6
 800a3f8:	4628      	mov	r0, r5
 800a3fa:	47b8      	blx	r7
 800a3fc:	3001      	adds	r0, #1
 800a3fe:	f43f ae70 	beq.w	800a0e2 <_printf_float+0xb6>
 800a402:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a406:	2200      	movs	r2, #0
 800a408:	2300      	movs	r3, #0
 800a40a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a40e:	f7f6 fb73 	bl	8000af8 <__aeabi_dcmpeq>
 800a412:	b9c0      	cbnz	r0, 800a446 <_printf_float+0x41a>
 800a414:	4653      	mov	r3, sl
 800a416:	f108 0201 	add.w	r2, r8, #1
 800a41a:	4631      	mov	r1, r6
 800a41c:	4628      	mov	r0, r5
 800a41e:	47b8      	blx	r7
 800a420:	3001      	adds	r0, #1
 800a422:	d10c      	bne.n	800a43e <_printf_float+0x412>
 800a424:	e65d      	b.n	800a0e2 <_printf_float+0xb6>
 800a426:	2301      	movs	r3, #1
 800a428:	465a      	mov	r2, fp
 800a42a:	4631      	mov	r1, r6
 800a42c:	4628      	mov	r0, r5
 800a42e:	47b8      	blx	r7
 800a430:	3001      	adds	r0, #1
 800a432:	f43f ae56 	beq.w	800a0e2 <_printf_float+0xb6>
 800a436:	f108 0801 	add.w	r8, r8, #1
 800a43a:	45d0      	cmp	r8, sl
 800a43c:	dbf3      	blt.n	800a426 <_printf_float+0x3fa>
 800a43e:	464b      	mov	r3, r9
 800a440:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a444:	e6df      	b.n	800a206 <_printf_float+0x1da>
 800a446:	f04f 0800 	mov.w	r8, #0
 800a44a:	f104 0b1a 	add.w	fp, r4, #26
 800a44e:	e7f4      	b.n	800a43a <_printf_float+0x40e>
 800a450:	2301      	movs	r3, #1
 800a452:	4642      	mov	r2, r8
 800a454:	e7e1      	b.n	800a41a <_printf_float+0x3ee>
 800a456:	2301      	movs	r3, #1
 800a458:	464a      	mov	r2, r9
 800a45a:	4631      	mov	r1, r6
 800a45c:	4628      	mov	r0, r5
 800a45e:	47b8      	blx	r7
 800a460:	3001      	adds	r0, #1
 800a462:	f43f ae3e 	beq.w	800a0e2 <_printf_float+0xb6>
 800a466:	f108 0801 	add.w	r8, r8, #1
 800a46a:	68e3      	ldr	r3, [r4, #12]
 800a46c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a46e:	1a5b      	subs	r3, r3, r1
 800a470:	4543      	cmp	r3, r8
 800a472:	dcf0      	bgt.n	800a456 <_printf_float+0x42a>
 800a474:	e6fc      	b.n	800a270 <_printf_float+0x244>
 800a476:	f04f 0800 	mov.w	r8, #0
 800a47a:	f104 0919 	add.w	r9, r4, #25
 800a47e:	e7f4      	b.n	800a46a <_printf_float+0x43e>

0800a480 <_printf_common>:
 800a480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a484:	4616      	mov	r6, r2
 800a486:	4698      	mov	r8, r3
 800a488:	688a      	ldr	r2, [r1, #8]
 800a48a:	690b      	ldr	r3, [r1, #16]
 800a48c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a490:	4293      	cmp	r3, r2
 800a492:	bfb8      	it	lt
 800a494:	4613      	movlt	r3, r2
 800a496:	6033      	str	r3, [r6, #0]
 800a498:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a49c:	4607      	mov	r7, r0
 800a49e:	460c      	mov	r4, r1
 800a4a0:	b10a      	cbz	r2, 800a4a6 <_printf_common+0x26>
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	6033      	str	r3, [r6, #0]
 800a4a6:	6823      	ldr	r3, [r4, #0]
 800a4a8:	0699      	lsls	r1, r3, #26
 800a4aa:	bf42      	ittt	mi
 800a4ac:	6833      	ldrmi	r3, [r6, #0]
 800a4ae:	3302      	addmi	r3, #2
 800a4b0:	6033      	strmi	r3, [r6, #0]
 800a4b2:	6825      	ldr	r5, [r4, #0]
 800a4b4:	f015 0506 	ands.w	r5, r5, #6
 800a4b8:	d106      	bne.n	800a4c8 <_printf_common+0x48>
 800a4ba:	f104 0a19 	add.w	sl, r4, #25
 800a4be:	68e3      	ldr	r3, [r4, #12]
 800a4c0:	6832      	ldr	r2, [r6, #0]
 800a4c2:	1a9b      	subs	r3, r3, r2
 800a4c4:	42ab      	cmp	r3, r5
 800a4c6:	dc26      	bgt.n	800a516 <_printf_common+0x96>
 800a4c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a4cc:	6822      	ldr	r2, [r4, #0]
 800a4ce:	3b00      	subs	r3, #0
 800a4d0:	bf18      	it	ne
 800a4d2:	2301      	movne	r3, #1
 800a4d4:	0692      	lsls	r2, r2, #26
 800a4d6:	d42b      	bmi.n	800a530 <_printf_common+0xb0>
 800a4d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a4dc:	4641      	mov	r1, r8
 800a4de:	4638      	mov	r0, r7
 800a4e0:	47c8      	blx	r9
 800a4e2:	3001      	adds	r0, #1
 800a4e4:	d01e      	beq.n	800a524 <_printf_common+0xa4>
 800a4e6:	6823      	ldr	r3, [r4, #0]
 800a4e8:	6922      	ldr	r2, [r4, #16]
 800a4ea:	f003 0306 	and.w	r3, r3, #6
 800a4ee:	2b04      	cmp	r3, #4
 800a4f0:	bf02      	ittt	eq
 800a4f2:	68e5      	ldreq	r5, [r4, #12]
 800a4f4:	6833      	ldreq	r3, [r6, #0]
 800a4f6:	1aed      	subeq	r5, r5, r3
 800a4f8:	68a3      	ldr	r3, [r4, #8]
 800a4fa:	bf0c      	ite	eq
 800a4fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a500:	2500      	movne	r5, #0
 800a502:	4293      	cmp	r3, r2
 800a504:	bfc4      	itt	gt
 800a506:	1a9b      	subgt	r3, r3, r2
 800a508:	18ed      	addgt	r5, r5, r3
 800a50a:	2600      	movs	r6, #0
 800a50c:	341a      	adds	r4, #26
 800a50e:	42b5      	cmp	r5, r6
 800a510:	d11a      	bne.n	800a548 <_printf_common+0xc8>
 800a512:	2000      	movs	r0, #0
 800a514:	e008      	b.n	800a528 <_printf_common+0xa8>
 800a516:	2301      	movs	r3, #1
 800a518:	4652      	mov	r2, sl
 800a51a:	4641      	mov	r1, r8
 800a51c:	4638      	mov	r0, r7
 800a51e:	47c8      	blx	r9
 800a520:	3001      	adds	r0, #1
 800a522:	d103      	bne.n	800a52c <_printf_common+0xac>
 800a524:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a52c:	3501      	adds	r5, #1
 800a52e:	e7c6      	b.n	800a4be <_printf_common+0x3e>
 800a530:	18e1      	adds	r1, r4, r3
 800a532:	1c5a      	adds	r2, r3, #1
 800a534:	2030      	movs	r0, #48	@ 0x30
 800a536:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a53a:	4422      	add	r2, r4
 800a53c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a540:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a544:	3302      	adds	r3, #2
 800a546:	e7c7      	b.n	800a4d8 <_printf_common+0x58>
 800a548:	2301      	movs	r3, #1
 800a54a:	4622      	mov	r2, r4
 800a54c:	4641      	mov	r1, r8
 800a54e:	4638      	mov	r0, r7
 800a550:	47c8      	blx	r9
 800a552:	3001      	adds	r0, #1
 800a554:	d0e6      	beq.n	800a524 <_printf_common+0xa4>
 800a556:	3601      	adds	r6, #1
 800a558:	e7d9      	b.n	800a50e <_printf_common+0x8e>
	...

0800a55c <_printf_i>:
 800a55c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a560:	7e0f      	ldrb	r7, [r1, #24]
 800a562:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a564:	2f78      	cmp	r7, #120	@ 0x78
 800a566:	4691      	mov	r9, r2
 800a568:	4680      	mov	r8, r0
 800a56a:	460c      	mov	r4, r1
 800a56c:	469a      	mov	sl, r3
 800a56e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a572:	d807      	bhi.n	800a584 <_printf_i+0x28>
 800a574:	2f62      	cmp	r7, #98	@ 0x62
 800a576:	d80a      	bhi.n	800a58e <_printf_i+0x32>
 800a578:	2f00      	cmp	r7, #0
 800a57a:	f000 80d2 	beq.w	800a722 <_printf_i+0x1c6>
 800a57e:	2f58      	cmp	r7, #88	@ 0x58
 800a580:	f000 80b9 	beq.w	800a6f6 <_printf_i+0x19a>
 800a584:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a588:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a58c:	e03a      	b.n	800a604 <_printf_i+0xa8>
 800a58e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a592:	2b15      	cmp	r3, #21
 800a594:	d8f6      	bhi.n	800a584 <_printf_i+0x28>
 800a596:	a101      	add	r1, pc, #4	@ (adr r1, 800a59c <_printf_i+0x40>)
 800a598:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a59c:	0800a5f5 	.word	0x0800a5f5
 800a5a0:	0800a609 	.word	0x0800a609
 800a5a4:	0800a585 	.word	0x0800a585
 800a5a8:	0800a585 	.word	0x0800a585
 800a5ac:	0800a585 	.word	0x0800a585
 800a5b0:	0800a585 	.word	0x0800a585
 800a5b4:	0800a609 	.word	0x0800a609
 800a5b8:	0800a585 	.word	0x0800a585
 800a5bc:	0800a585 	.word	0x0800a585
 800a5c0:	0800a585 	.word	0x0800a585
 800a5c4:	0800a585 	.word	0x0800a585
 800a5c8:	0800a709 	.word	0x0800a709
 800a5cc:	0800a633 	.word	0x0800a633
 800a5d0:	0800a6c3 	.word	0x0800a6c3
 800a5d4:	0800a585 	.word	0x0800a585
 800a5d8:	0800a585 	.word	0x0800a585
 800a5dc:	0800a72b 	.word	0x0800a72b
 800a5e0:	0800a585 	.word	0x0800a585
 800a5e4:	0800a633 	.word	0x0800a633
 800a5e8:	0800a585 	.word	0x0800a585
 800a5ec:	0800a585 	.word	0x0800a585
 800a5f0:	0800a6cb 	.word	0x0800a6cb
 800a5f4:	6833      	ldr	r3, [r6, #0]
 800a5f6:	1d1a      	adds	r2, r3, #4
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	6032      	str	r2, [r6, #0]
 800a5fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a600:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a604:	2301      	movs	r3, #1
 800a606:	e09d      	b.n	800a744 <_printf_i+0x1e8>
 800a608:	6833      	ldr	r3, [r6, #0]
 800a60a:	6820      	ldr	r0, [r4, #0]
 800a60c:	1d19      	adds	r1, r3, #4
 800a60e:	6031      	str	r1, [r6, #0]
 800a610:	0606      	lsls	r6, r0, #24
 800a612:	d501      	bpl.n	800a618 <_printf_i+0xbc>
 800a614:	681d      	ldr	r5, [r3, #0]
 800a616:	e003      	b.n	800a620 <_printf_i+0xc4>
 800a618:	0645      	lsls	r5, r0, #25
 800a61a:	d5fb      	bpl.n	800a614 <_printf_i+0xb8>
 800a61c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a620:	2d00      	cmp	r5, #0
 800a622:	da03      	bge.n	800a62c <_printf_i+0xd0>
 800a624:	232d      	movs	r3, #45	@ 0x2d
 800a626:	426d      	negs	r5, r5
 800a628:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a62c:	4859      	ldr	r0, [pc, #356]	@ (800a794 <_printf_i+0x238>)
 800a62e:	230a      	movs	r3, #10
 800a630:	e011      	b.n	800a656 <_printf_i+0xfa>
 800a632:	6821      	ldr	r1, [r4, #0]
 800a634:	6833      	ldr	r3, [r6, #0]
 800a636:	0608      	lsls	r0, r1, #24
 800a638:	f853 5b04 	ldr.w	r5, [r3], #4
 800a63c:	d402      	bmi.n	800a644 <_printf_i+0xe8>
 800a63e:	0649      	lsls	r1, r1, #25
 800a640:	bf48      	it	mi
 800a642:	b2ad      	uxthmi	r5, r5
 800a644:	2f6f      	cmp	r7, #111	@ 0x6f
 800a646:	4853      	ldr	r0, [pc, #332]	@ (800a794 <_printf_i+0x238>)
 800a648:	6033      	str	r3, [r6, #0]
 800a64a:	bf14      	ite	ne
 800a64c:	230a      	movne	r3, #10
 800a64e:	2308      	moveq	r3, #8
 800a650:	2100      	movs	r1, #0
 800a652:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a656:	6866      	ldr	r6, [r4, #4]
 800a658:	60a6      	str	r6, [r4, #8]
 800a65a:	2e00      	cmp	r6, #0
 800a65c:	bfa2      	ittt	ge
 800a65e:	6821      	ldrge	r1, [r4, #0]
 800a660:	f021 0104 	bicge.w	r1, r1, #4
 800a664:	6021      	strge	r1, [r4, #0]
 800a666:	b90d      	cbnz	r5, 800a66c <_printf_i+0x110>
 800a668:	2e00      	cmp	r6, #0
 800a66a:	d04b      	beq.n	800a704 <_printf_i+0x1a8>
 800a66c:	4616      	mov	r6, r2
 800a66e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a672:	fb03 5711 	mls	r7, r3, r1, r5
 800a676:	5dc7      	ldrb	r7, [r0, r7]
 800a678:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a67c:	462f      	mov	r7, r5
 800a67e:	42bb      	cmp	r3, r7
 800a680:	460d      	mov	r5, r1
 800a682:	d9f4      	bls.n	800a66e <_printf_i+0x112>
 800a684:	2b08      	cmp	r3, #8
 800a686:	d10b      	bne.n	800a6a0 <_printf_i+0x144>
 800a688:	6823      	ldr	r3, [r4, #0]
 800a68a:	07df      	lsls	r7, r3, #31
 800a68c:	d508      	bpl.n	800a6a0 <_printf_i+0x144>
 800a68e:	6923      	ldr	r3, [r4, #16]
 800a690:	6861      	ldr	r1, [r4, #4]
 800a692:	4299      	cmp	r1, r3
 800a694:	bfde      	ittt	le
 800a696:	2330      	movle	r3, #48	@ 0x30
 800a698:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a69c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a6a0:	1b92      	subs	r2, r2, r6
 800a6a2:	6122      	str	r2, [r4, #16]
 800a6a4:	f8cd a000 	str.w	sl, [sp]
 800a6a8:	464b      	mov	r3, r9
 800a6aa:	aa03      	add	r2, sp, #12
 800a6ac:	4621      	mov	r1, r4
 800a6ae:	4640      	mov	r0, r8
 800a6b0:	f7ff fee6 	bl	800a480 <_printf_common>
 800a6b4:	3001      	adds	r0, #1
 800a6b6:	d14a      	bne.n	800a74e <_printf_i+0x1f2>
 800a6b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a6bc:	b004      	add	sp, #16
 800a6be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6c2:	6823      	ldr	r3, [r4, #0]
 800a6c4:	f043 0320 	orr.w	r3, r3, #32
 800a6c8:	6023      	str	r3, [r4, #0]
 800a6ca:	4833      	ldr	r0, [pc, #204]	@ (800a798 <_printf_i+0x23c>)
 800a6cc:	2778      	movs	r7, #120	@ 0x78
 800a6ce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a6d2:	6823      	ldr	r3, [r4, #0]
 800a6d4:	6831      	ldr	r1, [r6, #0]
 800a6d6:	061f      	lsls	r7, r3, #24
 800a6d8:	f851 5b04 	ldr.w	r5, [r1], #4
 800a6dc:	d402      	bmi.n	800a6e4 <_printf_i+0x188>
 800a6de:	065f      	lsls	r7, r3, #25
 800a6e0:	bf48      	it	mi
 800a6e2:	b2ad      	uxthmi	r5, r5
 800a6e4:	6031      	str	r1, [r6, #0]
 800a6e6:	07d9      	lsls	r1, r3, #31
 800a6e8:	bf44      	itt	mi
 800a6ea:	f043 0320 	orrmi.w	r3, r3, #32
 800a6ee:	6023      	strmi	r3, [r4, #0]
 800a6f0:	b11d      	cbz	r5, 800a6fa <_printf_i+0x19e>
 800a6f2:	2310      	movs	r3, #16
 800a6f4:	e7ac      	b.n	800a650 <_printf_i+0xf4>
 800a6f6:	4827      	ldr	r0, [pc, #156]	@ (800a794 <_printf_i+0x238>)
 800a6f8:	e7e9      	b.n	800a6ce <_printf_i+0x172>
 800a6fa:	6823      	ldr	r3, [r4, #0]
 800a6fc:	f023 0320 	bic.w	r3, r3, #32
 800a700:	6023      	str	r3, [r4, #0]
 800a702:	e7f6      	b.n	800a6f2 <_printf_i+0x196>
 800a704:	4616      	mov	r6, r2
 800a706:	e7bd      	b.n	800a684 <_printf_i+0x128>
 800a708:	6833      	ldr	r3, [r6, #0]
 800a70a:	6825      	ldr	r5, [r4, #0]
 800a70c:	6961      	ldr	r1, [r4, #20]
 800a70e:	1d18      	adds	r0, r3, #4
 800a710:	6030      	str	r0, [r6, #0]
 800a712:	062e      	lsls	r6, r5, #24
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	d501      	bpl.n	800a71c <_printf_i+0x1c0>
 800a718:	6019      	str	r1, [r3, #0]
 800a71a:	e002      	b.n	800a722 <_printf_i+0x1c6>
 800a71c:	0668      	lsls	r0, r5, #25
 800a71e:	d5fb      	bpl.n	800a718 <_printf_i+0x1bc>
 800a720:	8019      	strh	r1, [r3, #0]
 800a722:	2300      	movs	r3, #0
 800a724:	6123      	str	r3, [r4, #16]
 800a726:	4616      	mov	r6, r2
 800a728:	e7bc      	b.n	800a6a4 <_printf_i+0x148>
 800a72a:	6833      	ldr	r3, [r6, #0]
 800a72c:	1d1a      	adds	r2, r3, #4
 800a72e:	6032      	str	r2, [r6, #0]
 800a730:	681e      	ldr	r6, [r3, #0]
 800a732:	6862      	ldr	r2, [r4, #4]
 800a734:	2100      	movs	r1, #0
 800a736:	4630      	mov	r0, r6
 800a738:	f7f5 fd62 	bl	8000200 <memchr>
 800a73c:	b108      	cbz	r0, 800a742 <_printf_i+0x1e6>
 800a73e:	1b80      	subs	r0, r0, r6
 800a740:	6060      	str	r0, [r4, #4]
 800a742:	6863      	ldr	r3, [r4, #4]
 800a744:	6123      	str	r3, [r4, #16]
 800a746:	2300      	movs	r3, #0
 800a748:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a74c:	e7aa      	b.n	800a6a4 <_printf_i+0x148>
 800a74e:	6923      	ldr	r3, [r4, #16]
 800a750:	4632      	mov	r2, r6
 800a752:	4649      	mov	r1, r9
 800a754:	4640      	mov	r0, r8
 800a756:	47d0      	blx	sl
 800a758:	3001      	adds	r0, #1
 800a75a:	d0ad      	beq.n	800a6b8 <_printf_i+0x15c>
 800a75c:	6823      	ldr	r3, [r4, #0]
 800a75e:	079b      	lsls	r3, r3, #30
 800a760:	d413      	bmi.n	800a78a <_printf_i+0x22e>
 800a762:	68e0      	ldr	r0, [r4, #12]
 800a764:	9b03      	ldr	r3, [sp, #12]
 800a766:	4298      	cmp	r0, r3
 800a768:	bfb8      	it	lt
 800a76a:	4618      	movlt	r0, r3
 800a76c:	e7a6      	b.n	800a6bc <_printf_i+0x160>
 800a76e:	2301      	movs	r3, #1
 800a770:	4632      	mov	r2, r6
 800a772:	4649      	mov	r1, r9
 800a774:	4640      	mov	r0, r8
 800a776:	47d0      	blx	sl
 800a778:	3001      	adds	r0, #1
 800a77a:	d09d      	beq.n	800a6b8 <_printf_i+0x15c>
 800a77c:	3501      	adds	r5, #1
 800a77e:	68e3      	ldr	r3, [r4, #12]
 800a780:	9903      	ldr	r1, [sp, #12]
 800a782:	1a5b      	subs	r3, r3, r1
 800a784:	42ab      	cmp	r3, r5
 800a786:	dcf2      	bgt.n	800a76e <_printf_i+0x212>
 800a788:	e7eb      	b.n	800a762 <_printf_i+0x206>
 800a78a:	2500      	movs	r5, #0
 800a78c:	f104 0619 	add.w	r6, r4, #25
 800a790:	e7f5      	b.n	800a77e <_printf_i+0x222>
 800a792:	bf00      	nop
 800a794:	0800cc7e 	.word	0x0800cc7e
 800a798:	0800cc8f 	.word	0x0800cc8f

0800a79c <std>:
 800a79c:	2300      	movs	r3, #0
 800a79e:	b510      	push	{r4, lr}
 800a7a0:	4604      	mov	r4, r0
 800a7a2:	e9c0 3300 	strd	r3, r3, [r0]
 800a7a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a7aa:	6083      	str	r3, [r0, #8]
 800a7ac:	8181      	strh	r1, [r0, #12]
 800a7ae:	6643      	str	r3, [r0, #100]	@ 0x64
 800a7b0:	81c2      	strh	r2, [r0, #14]
 800a7b2:	6183      	str	r3, [r0, #24]
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	2208      	movs	r2, #8
 800a7b8:	305c      	adds	r0, #92	@ 0x5c
 800a7ba:	f000 f921 	bl	800aa00 <memset>
 800a7be:	4b0d      	ldr	r3, [pc, #52]	@ (800a7f4 <std+0x58>)
 800a7c0:	6263      	str	r3, [r4, #36]	@ 0x24
 800a7c2:	4b0d      	ldr	r3, [pc, #52]	@ (800a7f8 <std+0x5c>)
 800a7c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a7c6:	4b0d      	ldr	r3, [pc, #52]	@ (800a7fc <std+0x60>)
 800a7c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a7ca:	4b0d      	ldr	r3, [pc, #52]	@ (800a800 <std+0x64>)
 800a7cc:	6323      	str	r3, [r4, #48]	@ 0x30
 800a7ce:	4b0d      	ldr	r3, [pc, #52]	@ (800a804 <std+0x68>)
 800a7d0:	6224      	str	r4, [r4, #32]
 800a7d2:	429c      	cmp	r4, r3
 800a7d4:	d006      	beq.n	800a7e4 <std+0x48>
 800a7d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a7da:	4294      	cmp	r4, r2
 800a7dc:	d002      	beq.n	800a7e4 <std+0x48>
 800a7de:	33d0      	adds	r3, #208	@ 0xd0
 800a7e0:	429c      	cmp	r4, r3
 800a7e2:	d105      	bne.n	800a7f0 <std+0x54>
 800a7e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a7e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7ec:	f000 b93e 	b.w	800aa6c <__retarget_lock_init_recursive>
 800a7f0:	bd10      	pop	{r4, pc}
 800a7f2:	bf00      	nop
 800a7f4:	0800c375 	.word	0x0800c375
 800a7f8:	0800c397 	.word	0x0800c397
 800a7fc:	0800c3cf 	.word	0x0800c3cf
 800a800:	0800c3f3 	.word	0x0800c3f3
 800a804:	200005d4 	.word	0x200005d4

0800a808 <stdio_exit_handler>:
 800a808:	4a02      	ldr	r2, [pc, #8]	@ (800a814 <stdio_exit_handler+0xc>)
 800a80a:	4903      	ldr	r1, [pc, #12]	@ (800a818 <stdio_exit_handler+0x10>)
 800a80c:	4803      	ldr	r0, [pc, #12]	@ (800a81c <stdio_exit_handler+0x14>)
 800a80e:	f000 b869 	b.w	800a8e4 <_fwalk_sglue>
 800a812:	bf00      	nop
 800a814:	20000094 	.word	0x20000094
 800a818:	0800bc09 	.word	0x0800bc09
 800a81c:	200000a4 	.word	0x200000a4

0800a820 <cleanup_stdio>:
 800a820:	6841      	ldr	r1, [r0, #4]
 800a822:	4b0c      	ldr	r3, [pc, #48]	@ (800a854 <cleanup_stdio+0x34>)
 800a824:	4299      	cmp	r1, r3
 800a826:	b510      	push	{r4, lr}
 800a828:	4604      	mov	r4, r0
 800a82a:	d001      	beq.n	800a830 <cleanup_stdio+0x10>
 800a82c:	f001 f9ec 	bl	800bc08 <_fflush_r>
 800a830:	68a1      	ldr	r1, [r4, #8]
 800a832:	4b09      	ldr	r3, [pc, #36]	@ (800a858 <cleanup_stdio+0x38>)
 800a834:	4299      	cmp	r1, r3
 800a836:	d002      	beq.n	800a83e <cleanup_stdio+0x1e>
 800a838:	4620      	mov	r0, r4
 800a83a:	f001 f9e5 	bl	800bc08 <_fflush_r>
 800a83e:	68e1      	ldr	r1, [r4, #12]
 800a840:	4b06      	ldr	r3, [pc, #24]	@ (800a85c <cleanup_stdio+0x3c>)
 800a842:	4299      	cmp	r1, r3
 800a844:	d004      	beq.n	800a850 <cleanup_stdio+0x30>
 800a846:	4620      	mov	r0, r4
 800a848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a84c:	f001 b9dc 	b.w	800bc08 <_fflush_r>
 800a850:	bd10      	pop	{r4, pc}
 800a852:	bf00      	nop
 800a854:	200005d4 	.word	0x200005d4
 800a858:	2000063c 	.word	0x2000063c
 800a85c:	200006a4 	.word	0x200006a4

0800a860 <global_stdio_init.part.0>:
 800a860:	b510      	push	{r4, lr}
 800a862:	4b0b      	ldr	r3, [pc, #44]	@ (800a890 <global_stdio_init.part.0+0x30>)
 800a864:	4c0b      	ldr	r4, [pc, #44]	@ (800a894 <global_stdio_init.part.0+0x34>)
 800a866:	4a0c      	ldr	r2, [pc, #48]	@ (800a898 <global_stdio_init.part.0+0x38>)
 800a868:	601a      	str	r2, [r3, #0]
 800a86a:	4620      	mov	r0, r4
 800a86c:	2200      	movs	r2, #0
 800a86e:	2104      	movs	r1, #4
 800a870:	f7ff ff94 	bl	800a79c <std>
 800a874:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a878:	2201      	movs	r2, #1
 800a87a:	2109      	movs	r1, #9
 800a87c:	f7ff ff8e 	bl	800a79c <std>
 800a880:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a884:	2202      	movs	r2, #2
 800a886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a88a:	2112      	movs	r1, #18
 800a88c:	f7ff bf86 	b.w	800a79c <std>
 800a890:	2000070c 	.word	0x2000070c
 800a894:	200005d4 	.word	0x200005d4
 800a898:	0800a809 	.word	0x0800a809

0800a89c <__sfp_lock_acquire>:
 800a89c:	4801      	ldr	r0, [pc, #4]	@ (800a8a4 <__sfp_lock_acquire+0x8>)
 800a89e:	f000 b8e6 	b.w	800aa6e <__retarget_lock_acquire_recursive>
 800a8a2:	bf00      	nop
 800a8a4:	20000711 	.word	0x20000711

0800a8a8 <__sfp_lock_release>:
 800a8a8:	4801      	ldr	r0, [pc, #4]	@ (800a8b0 <__sfp_lock_release+0x8>)
 800a8aa:	f000 b8e1 	b.w	800aa70 <__retarget_lock_release_recursive>
 800a8ae:	bf00      	nop
 800a8b0:	20000711 	.word	0x20000711

0800a8b4 <__sinit>:
 800a8b4:	b510      	push	{r4, lr}
 800a8b6:	4604      	mov	r4, r0
 800a8b8:	f7ff fff0 	bl	800a89c <__sfp_lock_acquire>
 800a8bc:	6a23      	ldr	r3, [r4, #32]
 800a8be:	b11b      	cbz	r3, 800a8c8 <__sinit+0x14>
 800a8c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8c4:	f7ff bff0 	b.w	800a8a8 <__sfp_lock_release>
 800a8c8:	4b04      	ldr	r3, [pc, #16]	@ (800a8dc <__sinit+0x28>)
 800a8ca:	6223      	str	r3, [r4, #32]
 800a8cc:	4b04      	ldr	r3, [pc, #16]	@ (800a8e0 <__sinit+0x2c>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d1f5      	bne.n	800a8c0 <__sinit+0xc>
 800a8d4:	f7ff ffc4 	bl	800a860 <global_stdio_init.part.0>
 800a8d8:	e7f2      	b.n	800a8c0 <__sinit+0xc>
 800a8da:	bf00      	nop
 800a8dc:	0800a821 	.word	0x0800a821
 800a8e0:	2000070c 	.word	0x2000070c

0800a8e4 <_fwalk_sglue>:
 800a8e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8e8:	4607      	mov	r7, r0
 800a8ea:	4688      	mov	r8, r1
 800a8ec:	4614      	mov	r4, r2
 800a8ee:	2600      	movs	r6, #0
 800a8f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a8f4:	f1b9 0901 	subs.w	r9, r9, #1
 800a8f8:	d505      	bpl.n	800a906 <_fwalk_sglue+0x22>
 800a8fa:	6824      	ldr	r4, [r4, #0]
 800a8fc:	2c00      	cmp	r4, #0
 800a8fe:	d1f7      	bne.n	800a8f0 <_fwalk_sglue+0xc>
 800a900:	4630      	mov	r0, r6
 800a902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a906:	89ab      	ldrh	r3, [r5, #12]
 800a908:	2b01      	cmp	r3, #1
 800a90a:	d907      	bls.n	800a91c <_fwalk_sglue+0x38>
 800a90c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a910:	3301      	adds	r3, #1
 800a912:	d003      	beq.n	800a91c <_fwalk_sglue+0x38>
 800a914:	4629      	mov	r1, r5
 800a916:	4638      	mov	r0, r7
 800a918:	47c0      	blx	r8
 800a91a:	4306      	orrs	r6, r0
 800a91c:	3568      	adds	r5, #104	@ 0x68
 800a91e:	e7e9      	b.n	800a8f4 <_fwalk_sglue+0x10>

0800a920 <iprintf>:
 800a920:	b40f      	push	{r0, r1, r2, r3}
 800a922:	b507      	push	{r0, r1, r2, lr}
 800a924:	4906      	ldr	r1, [pc, #24]	@ (800a940 <iprintf+0x20>)
 800a926:	ab04      	add	r3, sp, #16
 800a928:	6808      	ldr	r0, [r1, #0]
 800a92a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a92e:	6881      	ldr	r1, [r0, #8]
 800a930:	9301      	str	r3, [sp, #4]
 800a932:	f000 ff23 	bl	800b77c <_vfiprintf_r>
 800a936:	b003      	add	sp, #12
 800a938:	f85d eb04 	ldr.w	lr, [sp], #4
 800a93c:	b004      	add	sp, #16
 800a93e:	4770      	bx	lr
 800a940:	200000a0 	.word	0x200000a0

0800a944 <_puts_r>:
 800a944:	6a03      	ldr	r3, [r0, #32]
 800a946:	b570      	push	{r4, r5, r6, lr}
 800a948:	6884      	ldr	r4, [r0, #8]
 800a94a:	4605      	mov	r5, r0
 800a94c:	460e      	mov	r6, r1
 800a94e:	b90b      	cbnz	r3, 800a954 <_puts_r+0x10>
 800a950:	f7ff ffb0 	bl	800a8b4 <__sinit>
 800a954:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a956:	07db      	lsls	r3, r3, #31
 800a958:	d405      	bmi.n	800a966 <_puts_r+0x22>
 800a95a:	89a3      	ldrh	r3, [r4, #12]
 800a95c:	0598      	lsls	r0, r3, #22
 800a95e:	d402      	bmi.n	800a966 <_puts_r+0x22>
 800a960:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a962:	f000 f884 	bl	800aa6e <__retarget_lock_acquire_recursive>
 800a966:	89a3      	ldrh	r3, [r4, #12]
 800a968:	0719      	lsls	r1, r3, #28
 800a96a:	d502      	bpl.n	800a972 <_puts_r+0x2e>
 800a96c:	6923      	ldr	r3, [r4, #16]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d135      	bne.n	800a9de <_puts_r+0x9a>
 800a972:	4621      	mov	r1, r4
 800a974:	4628      	mov	r0, r5
 800a976:	f001 fd7f 	bl	800c478 <__swsetup_r>
 800a97a:	b380      	cbz	r0, 800a9de <_puts_r+0x9a>
 800a97c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800a980:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a982:	07da      	lsls	r2, r3, #31
 800a984:	d405      	bmi.n	800a992 <_puts_r+0x4e>
 800a986:	89a3      	ldrh	r3, [r4, #12]
 800a988:	059b      	lsls	r3, r3, #22
 800a98a:	d402      	bmi.n	800a992 <_puts_r+0x4e>
 800a98c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a98e:	f000 f86f 	bl	800aa70 <__retarget_lock_release_recursive>
 800a992:	4628      	mov	r0, r5
 800a994:	bd70      	pop	{r4, r5, r6, pc}
 800a996:	2b00      	cmp	r3, #0
 800a998:	da04      	bge.n	800a9a4 <_puts_r+0x60>
 800a99a:	69a2      	ldr	r2, [r4, #24]
 800a99c:	429a      	cmp	r2, r3
 800a99e:	dc17      	bgt.n	800a9d0 <_puts_r+0x8c>
 800a9a0:	290a      	cmp	r1, #10
 800a9a2:	d015      	beq.n	800a9d0 <_puts_r+0x8c>
 800a9a4:	6823      	ldr	r3, [r4, #0]
 800a9a6:	1c5a      	adds	r2, r3, #1
 800a9a8:	6022      	str	r2, [r4, #0]
 800a9aa:	7019      	strb	r1, [r3, #0]
 800a9ac:	68a3      	ldr	r3, [r4, #8]
 800a9ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a9b2:	3b01      	subs	r3, #1
 800a9b4:	60a3      	str	r3, [r4, #8]
 800a9b6:	2900      	cmp	r1, #0
 800a9b8:	d1ed      	bne.n	800a996 <_puts_r+0x52>
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	da11      	bge.n	800a9e2 <_puts_r+0x9e>
 800a9be:	4622      	mov	r2, r4
 800a9c0:	210a      	movs	r1, #10
 800a9c2:	4628      	mov	r0, r5
 800a9c4:	f001 fd19 	bl	800c3fa <__swbuf_r>
 800a9c8:	3001      	adds	r0, #1
 800a9ca:	d0d7      	beq.n	800a97c <_puts_r+0x38>
 800a9cc:	250a      	movs	r5, #10
 800a9ce:	e7d7      	b.n	800a980 <_puts_r+0x3c>
 800a9d0:	4622      	mov	r2, r4
 800a9d2:	4628      	mov	r0, r5
 800a9d4:	f001 fd11 	bl	800c3fa <__swbuf_r>
 800a9d8:	3001      	adds	r0, #1
 800a9da:	d1e7      	bne.n	800a9ac <_puts_r+0x68>
 800a9dc:	e7ce      	b.n	800a97c <_puts_r+0x38>
 800a9de:	3e01      	subs	r6, #1
 800a9e0:	e7e4      	b.n	800a9ac <_puts_r+0x68>
 800a9e2:	6823      	ldr	r3, [r4, #0]
 800a9e4:	1c5a      	adds	r2, r3, #1
 800a9e6:	6022      	str	r2, [r4, #0]
 800a9e8:	220a      	movs	r2, #10
 800a9ea:	701a      	strb	r2, [r3, #0]
 800a9ec:	e7ee      	b.n	800a9cc <_puts_r+0x88>
	...

0800a9f0 <puts>:
 800a9f0:	4b02      	ldr	r3, [pc, #8]	@ (800a9fc <puts+0xc>)
 800a9f2:	4601      	mov	r1, r0
 800a9f4:	6818      	ldr	r0, [r3, #0]
 800a9f6:	f7ff bfa5 	b.w	800a944 <_puts_r>
 800a9fa:	bf00      	nop
 800a9fc:	200000a0 	.word	0x200000a0

0800aa00 <memset>:
 800aa00:	4402      	add	r2, r0
 800aa02:	4603      	mov	r3, r0
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d100      	bne.n	800aa0a <memset+0xa>
 800aa08:	4770      	bx	lr
 800aa0a:	f803 1b01 	strb.w	r1, [r3], #1
 800aa0e:	e7f9      	b.n	800aa04 <memset+0x4>

0800aa10 <_localeconv_r>:
 800aa10:	4800      	ldr	r0, [pc, #0]	@ (800aa14 <_localeconv_r+0x4>)
 800aa12:	4770      	bx	lr
 800aa14:	200001e0 	.word	0x200001e0

0800aa18 <__errno>:
 800aa18:	4b01      	ldr	r3, [pc, #4]	@ (800aa20 <__errno+0x8>)
 800aa1a:	6818      	ldr	r0, [r3, #0]
 800aa1c:	4770      	bx	lr
 800aa1e:	bf00      	nop
 800aa20:	200000a0 	.word	0x200000a0

0800aa24 <__libc_init_array>:
 800aa24:	b570      	push	{r4, r5, r6, lr}
 800aa26:	4d0d      	ldr	r5, [pc, #52]	@ (800aa5c <__libc_init_array+0x38>)
 800aa28:	4c0d      	ldr	r4, [pc, #52]	@ (800aa60 <__libc_init_array+0x3c>)
 800aa2a:	1b64      	subs	r4, r4, r5
 800aa2c:	10a4      	asrs	r4, r4, #2
 800aa2e:	2600      	movs	r6, #0
 800aa30:	42a6      	cmp	r6, r4
 800aa32:	d109      	bne.n	800aa48 <__libc_init_array+0x24>
 800aa34:	4d0b      	ldr	r5, [pc, #44]	@ (800aa64 <__libc_init_array+0x40>)
 800aa36:	4c0c      	ldr	r4, [pc, #48]	@ (800aa68 <__libc_init_array+0x44>)
 800aa38:	f001 ff46 	bl	800c8c8 <_init>
 800aa3c:	1b64      	subs	r4, r4, r5
 800aa3e:	10a4      	asrs	r4, r4, #2
 800aa40:	2600      	movs	r6, #0
 800aa42:	42a6      	cmp	r6, r4
 800aa44:	d105      	bne.n	800aa52 <__libc_init_array+0x2e>
 800aa46:	bd70      	pop	{r4, r5, r6, pc}
 800aa48:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa4c:	4798      	blx	r3
 800aa4e:	3601      	adds	r6, #1
 800aa50:	e7ee      	b.n	800aa30 <__libc_init_array+0xc>
 800aa52:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa56:	4798      	blx	r3
 800aa58:	3601      	adds	r6, #1
 800aa5a:	e7f2      	b.n	800aa42 <__libc_init_array+0x1e>
 800aa5c:	0800cfe8 	.word	0x0800cfe8
 800aa60:	0800cfe8 	.word	0x0800cfe8
 800aa64:	0800cfe8 	.word	0x0800cfe8
 800aa68:	0800cfec 	.word	0x0800cfec

0800aa6c <__retarget_lock_init_recursive>:
 800aa6c:	4770      	bx	lr

0800aa6e <__retarget_lock_acquire_recursive>:
 800aa6e:	4770      	bx	lr

0800aa70 <__retarget_lock_release_recursive>:
 800aa70:	4770      	bx	lr

0800aa72 <memcpy>:
 800aa72:	440a      	add	r2, r1
 800aa74:	4291      	cmp	r1, r2
 800aa76:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800aa7a:	d100      	bne.n	800aa7e <memcpy+0xc>
 800aa7c:	4770      	bx	lr
 800aa7e:	b510      	push	{r4, lr}
 800aa80:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa84:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa88:	4291      	cmp	r1, r2
 800aa8a:	d1f9      	bne.n	800aa80 <memcpy+0xe>
 800aa8c:	bd10      	pop	{r4, pc}

0800aa8e <quorem>:
 800aa8e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa92:	6903      	ldr	r3, [r0, #16]
 800aa94:	690c      	ldr	r4, [r1, #16]
 800aa96:	42a3      	cmp	r3, r4
 800aa98:	4607      	mov	r7, r0
 800aa9a:	db7e      	blt.n	800ab9a <quorem+0x10c>
 800aa9c:	3c01      	subs	r4, #1
 800aa9e:	f101 0814 	add.w	r8, r1, #20
 800aaa2:	00a3      	lsls	r3, r4, #2
 800aaa4:	f100 0514 	add.w	r5, r0, #20
 800aaa8:	9300      	str	r3, [sp, #0]
 800aaaa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aaae:	9301      	str	r3, [sp, #4]
 800aab0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aab4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aab8:	3301      	adds	r3, #1
 800aaba:	429a      	cmp	r2, r3
 800aabc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aac0:	fbb2 f6f3 	udiv	r6, r2, r3
 800aac4:	d32e      	bcc.n	800ab24 <quorem+0x96>
 800aac6:	f04f 0a00 	mov.w	sl, #0
 800aaca:	46c4      	mov	ip, r8
 800aacc:	46ae      	mov	lr, r5
 800aace:	46d3      	mov	fp, sl
 800aad0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aad4:	b298      	uxth	r0, r3
 800aad6:	fb06 a000 	mla	r0, r6, r0, sl
 800aada:	0c02      	lsrs	r2, r0, #16
 800aadc:	0c1b      	lsrs	r3, r3, #16
 800aade:	fb06 2303 	mla	r3, r6, r3, r2
 800aae2:	f8de 2000 	ldr.w	r2, [lr]
 800aae6:	b280      	uxth	r0, r0
 800aae8:	b292      	uxth	r2, r2
 800aaea:	1a12      	subs	r2, r2, r0
 800aaec:	445a      	add	r2, fp
 800aaee:	f8de 0000 	ldr.w	r0, [lr]
 800aaf2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aaf6:	b29b      	uxth	r3, r3
 800aaf8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800aafc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ab00:	b292      	uxth	r2, r2
 800ab02:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ab06:	45e1      	cmp	r9, ip
 800ab08:	f84e 2b04 	str.w	r2, [lr], #4
 800ab0c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ab10:	d2de      	bcs.n	800aad0 <quorem+0x42>
 800ab12:	9b00      	ldr	r3, [sp, #0]
 800ab14:	58eb      	ldr	r3, [r5, r3]
 800ab16:	b92b      	cbnz	r3, 800ab24 <quorem+0x96>
 800ab18:	9b01      	ldr	r3, [sp, #4]
 800ab1a:	3b04      	subs	r3, #4
 800ab1c:	429d      	cmp	r5, r3
 800ab1e:	461a      	mov	r2, r3
 800ab20:	d32f      	bcc.n	800ab82 <quorem+0xf4>
 800ab22:	613c      	str	r4, [r7, #16]
 800ab24:	4638      	mov	r0, r7
 800ab26:	f001 fb1d 	bl	800c164 <__mcmp>
 800ab2a:	2800      	cmp	r0, #0
 800ab2c:	db25      	blt.n	800ab7a <quorem+0xec>
 800ab2e:	4629      	mov	r1, r5
 800ab30:	2000      	movs	r0, #0
 800ab32:	f858 2b04 	ldr.w	r2, [r8], #4
 800ab36:	f8d1 c000 	ldr.w	ip, [r1]
 800ab3a:	fa1f fe82 	uxth.w	lr, r2
 800ab3e:	fa1f f38c 	uxth.w	r3, ip
 800ab42:	eba3 030e 	sub.w	r3, r3, lr
 800ab46:	4403      	add	r3, r0
 800ab48:	0c12      	lsrs	r2, r2, #16
 800ab4a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ab4e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ab52:	b29b      	uxth	r3, r3
 800ab54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab58:	45c1      	cmp	r9, r8
 800ab5a:	f841 3b04 	str.w	r3, [r1], #4
 800ab5e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ab62:	d2e6      	bcs.n	800ab32 <quorem+0xa4>
 800ab64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ab68:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ab6c:	b922      	cbnz	r2, 800ab78 <quorem+0xea>
 800ab6e:	3b04      	subs	r3, #4
 800ab70:	429d      	cmp	r5, r3
 800ab72:	461a      	mov	r2, r3
 800ab74:	d30b      	bcc.n	800ab8e <quorem+0x100>
 800ab76:	613c      	str	r4, [r7, #16]
 800ab78:	3601      	adds	r6, #1
 800ab7a:	4630      	mov	r0, r6
 800ab7c:	b003      	add	sp, #12
 800ab7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab82:	6812      	ldr	r2, [r2, #0]
 800ab84:	3b04      	subs	r3, #4
 800ab86:	2a00      	cmp	r2, #0
 800ab88:	d1cb      	bne.n	800ab22 <quorem+0x94>
 800ab8a:	3c01      	subs	r4, #1
 800ab8c:	e7c6      	b.n	800ab1c <quorem+0x8e>
 800ab8e:	6812      	ldr	r2, [r2, #0]
 800ab90:	3b04      	subs	r3, #4
 800ab92:	2a00      	cmp	r2, #0
 800ab94:	d1ef      	bne.n	800ab76 <quorem+0xe8>
 800ab96:	3c01      	subs	r4, #1
 800ab98:	e7ea      	b.n	800ab70 <quorem+0xe2>
 800ab9a:	2000      	movs	r0, #0
 800ab9c:	e7ee      	b.n	800ab7c <quorem+0xee>
	...

0800aba0 <_dtoa_r>:
 800aba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aba4:	69c7      	ldr	r7, [r0, #28]
 800aba6:	b099      	sub	sp, #100	@ 0x64
 800aba8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800abac:	ec55 4b10 	vmov	r4, r5, d0
 800abb0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800abb2:	9109      	str	r1, [sp, #36]	@ 0x24
 800abb4:	4683      	mov	fp, r0
 800abb6:	920e      	str	r2, [sp, #56]	@ 0x38
 800abb8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800abba:	b97f      	cbnz	r7, 800abdc <_dtoa_r+0x3c>
 800abbc:	2010      	movs	r0, #16
 800abbe:	f000 fef5 	bl	800b9ac <malloc>
 800abc2:	4602      	mov	r2, r0
 800abc4:	f8cb 001c 	str.w	r0, [fp, #28]
 800abc8:	b920      	cbnz	r0, 800abd4 <_dtoa_r+0x34>
 800abca:	4ba7      	ldr	r3, [pc, #668]	@ (800ae68 <_dtoa_r+0x2c8>)
 800abcc:	21ef      	movs	r1, #239	@ 0xef
 800abce:	48a7      	ldr	r0, [pc, #668]	@ (800ae6c <_dtoa_r+0x2cc>)
 800abd0:	f001 fd82 	bl	800c6d8 <__assert_func>
 800abd4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800abd8:	6007      	str	r7, [r0, #0]
 800abda:	60c7      	str	r7, [r0, #12]
 800abdc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800abe0:	6819      	ldr	r1, [r3, #0]
 800abe2:	b159      	cbz	r1, 800abfc <_dtoa_r+0x5c>
 800abe4:	685a      	ldr	r2, [r3, #4]
 800abe6:	604a      	str	r2, [r1, #4]
 800abe8:	2301      	movs	r3, #1
 800abea:	4093      	lsls	r3, r2
 800abec:	608b      	str	r3, [r1, #8]
 800abee:	4658      	mov	r0, fp
 800abf0:	f001 f87e 	bl	800bcf0 <_Bfree>
 800abf4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800abf8:	2200      	movs	r2, #0
 800abfa:	601a      	str	r2, [r3, #0]
 800abfc:	1e2b      	subs	r3, r5, #0
 800abfe:	bfb9      	ittee	lt
 800ac00:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ac04:	9303      	strlt	r3, [sp, #12]
 800ac06:	2300      	movge	r3, #0
 800ac08:	6033      	strge	r3, [r6, #0]
 800ac0a:	9f03      	ldr	r7, [sp, #12]
 800ac0c:	4b98      	ldr	r3, [pc, #608]	@ (800ae70 <_dtoa_r+0x2d0>)
 800ac0e:	bfbc      	itt	lt
 800ac10:	2201      	movlt	r2, #1
 800ac12:	6032      	strlt	r2, [r6, #0]
 800ac14:	43bb      	bics	r3, r7
 800ac16:	d112      	bne.n	800ac3e <_dtoa_r+0x9e>
 800ac18:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ac1a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ac1e:	6013      	str	r3, [r2, #0]
 800ac20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ac24:	4323      	orrs	r3, r4
 800ac26:	f000 854d 	beq.w	800b6c4 <_dtoa_r+0xb24>
 800ac2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ac2c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800ae84 <_dtoa_r+0x2e4>
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	f000 854f 	beq.w	800b6d4 <_dtoa_r+0xb34>
 800ac36:	f10a 0303 	add.w	r3, sl, #3
 800ac3a:	f000 bd49 	b.w	800b6d0 <_dtoa_r+0xb30>
 800ac3e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ac42:	2200      	movs	r2, #0
 800ac44:	ec51 0b17 	vmov	r0, r1, d7
 800ac48:	2300      	movs	r3, #0
 800ac4a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ac4e:	f7f5 ff53 	bl	8000af8 <__aeabi_dcmpeq>
 800ac52:	4680      	mov	r8, r0
 800ac54:	b158      	cbz	r0, 800ac6e <_dtoa_r+0xce>
 800ac56:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ac58:	2301      	movs	r3, #1
 800ac5a:	6013      	str	r3, [r2, #0]
 800ac5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ac5e:	b113      	cbz	r3, 800ac66 <_dtoa_r+0xc6>
 800ac60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ac62:	4b84      	ldr	r3, [pc, #528]	@ (800ae74 <_dtoa_r+0x2d4>)
 800ac64:	6013      	str	r3, [r2, #0]
 800ac66:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800ae88 <_dtoa_r+0x2e8>
 800ac6a:	f000 bd33 	b.w	800b6d4 <_dtoa_r+0xb34>
 800ac6e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ac72:	aa16      	add	r2, sp, #88	@ 0x58
 800ac74:	a917      	add	r1, sp, #92	@ 0x5c
 800ac76:	4658      	mov	r0, fp
 800ac78:	f001 fb24 	bl	800c2c4 <__d2b>
 800ac7c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ac80:	4681      	mov	r9, r0
 800ac82:	2e00      	cmp	r6, #0
 800ac84:	d077      	beq.n	800ad76 <_dtoa_r+0x1d6>
 800ac86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ac88:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800ac8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac94:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ac98:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ac9c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800aca0:	4619      	mov	r1, r3
 800aca2:	2200      	movs	r2, #0
 800aca4:	4b74      	ldr	r3, [pc, #464]	@ (800ae78 <_dtoa_r+0x2d8>)
 800aca6:	f7f5 fb07 	bl	80002b8 <__aeabi_dsub>
 800acaa:	a369      	add	r3, pc, #420	@ (adr r3, 800ae50 <_dtoa_r+0x2b0>)
 800acac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb0:	f7f5 fcba 	bl	8000628 <__aeabi_dmul>
 800acb4:	a368      	add	r3, pc, #416	@ (adr r3, 800ae58 <_dtoa_r+0x2b8>)
 800acb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acba:	f7f5 faff 	bl	80002bc <__adddf3>
 800acbe:	4604      	mov	r4, r0
 800acc0:	4630      	mov	r0, r6
 800acc2:	460d      	mov	r5, r1
 800acc4:	f7f5 fc46 	bl	8000554 <__aeabi_i2d>
 800acc8:	a365      	add	r3, pc, #404	@ (adr r3, 800ae60 <_dtoa_r+0x2c0>)
 800acca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acce:	f7f5 fcab 	bl	8000628 <__aeabi_dmul>
 800acd2:	4602      	mov	r2, r0
 800acd4:	460b      	mov	r3, r1
 800acd6:	4620      	mov	r0, r4
 800acd8:	4629      	mov	r1, r5
 800acda:	f7f5 faef 	bl	80002bc <__adddf3>
 800acde:	4604      	mov	r4, r0
 800ace0:	460d      	mov	r5, r1
 800ace2:	f7f5 ff51 	bl	8000b88 <__aeabi_d2iz>
 800ace6:	2200      	movs	r2, #0
 800ace8:	4607      	mov	r7, r0
 800acea:	2300      	movs	r3, #0
 800acec:	4620      	mov	r0, r4
 800acee:	4629      	mov	r1, r5
 800acf0:	f7f5 ff0c 	bl	8000b0c <__aeabi_dcmplt>
 800acf4:	b140      	cbz	r0, 800ad08 <_dtoa_r+0x168>
 800acf6:	4638      	mov	r0, r7
 800acf8:	f7f5 fc2c 	bl	8000554 <__aeabi_i2d>
 800acfc:	4622      	mov	r2, r4
 800acfe:	462b      	mov	r3, r5
 800ad00:	f7f5 fefa 	bl	8000af8 <__aeabi_dcmpeq>
 800ad04:	b900      	cbnz	r0, 800ad08 <_dtoa_r+0x168>
 800ad06:	3f01      	subs	r7, #1
 800ad08:	2f16      	cmp	r7, #22
 800ad0a:	d851      	bhi.n	800adb0 <_dtoa_r+0x210>
 800ad0c:	4b5b      	ldr	r3, [pc, #364]	@ (800ae7c <_dtoa_r+0x2dc>)
 800ad0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ad12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ad1a:	f7f5 fef7 	bl	8000b0c <__aeabi_dcmplt>
 800ad1e:	2800      	cmp	r0, #0
 800ad20:	d048      	beq.n	800adb4 <_dtoa_r+0x214>
 800ad22:	3f01      	subs	r7, #1
 800ad24:	2300      	movs	r3, #0
 800ad26:	9312      	str	r3, [sp, #72]	@ 0x48
 800ad28:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ad2a:	1b9b      	subs	r3, r3, r6
 800ad2c:	1e5a      	subs	r2, r3, #1
 800ad2e:	bf44      	itt	mi
 800ad30:	f1c3 0801 	rsbmi	r8, r3, #1
 800ad34:	2300      	movmi	r3, #0
 800ad36:	9208      	str	r2, [sp, #32]
 800ad38:	bf54      	ite	pl
 800ad3a:	f04f 0800 	movpl.w	r8, #0
 800ad3e:	9308      	strmi	r3, [sp, #32]
 800ad40:	2f00      	cmp	r7, #0
 800ad42:	db39      	blt.n	800adb8 <_dtoa_r+0x218>
 800ad44:	9b08      	ldr	r3, [sp, #32]
 800ad46:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ad48:	443b      	add	r3, r7
 800ad4a:	9308      	str	r3, [sp, #32]
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad52:	2b09      	cmp	r3, #9
 800ad54:	d864      	bhi.n	800ae20 <_dtoa_r+0x280>
 800ad56:	2b05      	cmp	r3, #5
 800ad58:	bfc4      	itt	gt
 800ad5a:	3b04      	subgt	r3, #4
 800ad5c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ad5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad60:	f1a3 0302 	sub.w	r3, r3, #2
 800ad64:	bfcc      	ite	gt
 800ad66:	2400      	movgt	r4, #0
 800ad68:	2401      	movle	r4, #1
 800ad6a:	2b03      	cmp	r3, #3
 800ad6c:	d863      	bhi.n	800ae36 <_dtoa_r+0x296>
 800ad6e:	e8df f003 	tbb	[pc, r3]
 800ad72:	372a      	.short	0x372a
 800ad74:	5535      	.short	0x5535
 800ad76:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ad7a:	441e      	add	r6, r3
 800ad7c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ad80:	2b20      	cmp	r3, #32
 800ad82:	bfc1      	itttt	gt
 800ad84:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ad88:	409f      	lslgt	r7, r3
 800ad8a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ad8e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ad92:	bfd6      	itet	le
 800ad94:	f1c3 0320 	rsble	r3, r3, #32
 800ad98:	ea47 0003 	orrgt.w	r0, r7, r3
 800ad9c:	fa04 f003 	lslle.w	r0, r4, r3
 800ada0:	f7f5 fbc8 	bl	8000534 <__aeabi_ui2d>
 800ada4:	2201      	movs	r2, #1
 800ada6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800adaa:	3e01      	subs	r6, #1
 800adac:	9214      	str	r2, [sp, #80]	@ 0x50
 800adae:	e777      	b.n	800aca0 <_dtoa_r+0x100>
 800adb0:	2301      	movs	r3, #1
 800adb2:	e7b8      	b.n	800ad26 <_dtoa_r+0x186>
 800adb4:	9012      	str	r0, [sp, #72]	@ 0x48
 800adb6:	e7b7      	b.n	800ad28 <_dtoa_r+0x188>
 800adb8:	427b      	negs	r3, r7
 800adba:	930a      	str	r3, [sp, #40]	@ 0x28
 800adbc:	2300      	movs	r3, #0
 800adbe:	eba8 0807 	sub.w	r8, r8, r7
 800adc2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800adc4:	e7c4      	b.n	800ad50 <_dtoa_r+0x1b0>
 800adc6:	2300      	movs	r3, #0
 800adc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800adca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800adcc:	2b00      	cmp	r3, #0
 800adce:	dc35      	bgt.n	800ae3c <_dtoa_r+0x29c>
 800add0:	2301      	movs	r3, #1
 800add2:	9300      	str	r3, [sp, #0]
 800add4:	9307      	str	r3, [sp, #28]
 800add6:	461a      	mov	r2, r3
 800add8:	920e      	str	r2, [sp, #56]	@ 0x38
 800adda:	e00b      	b.n	800adf4 <_dtoa_r+0x254>
 800addc:	2301      	movs	r3, #1
 800adde:	e7f3      	b.n	800adc8 <_dtoa_r+0x228>
 800ade0:	2300      	movs	r3, #0
 800ade2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ade4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ade6:	18fb      	adds	r3, r7, r3
 800ade8:	9300      	str	r3, [sp, #0]
 800adea:	3301      	adds	r3, #1
 800adec:	2b01      	cmp	r3, #1
 800adee:	9307      	str	r3, [sp, #28]
 800adf0:	bfb8      	it	lt
 800adf2:	2301      	movlt	r3, #1
 800adf4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800adf8:	2100      	movs	r1, #0
 800adfa:	2204      	movs	r2, #4
 800adfc:	f102 0514 	add.w	r5, r2, #20
 800ae00:	429d      	cmp	r5, r3
 800ae02:	d91f      	bls.n	800ae44 <_dtoa_r+0x2a4>
 800ae04:	6041      	str	r1, [r0, #4]
 800ae06:	4658      	mov	r0, fp
 800ae08:	f000 ff32 	bl	800bc70 <_Balloc>
 800ae0c:	4682      	mov	sl, r0
 800ae0e:	2800      	cmp	r0, #0
 800ae10:	d13c      	bne.n	800ae8c <_dtoa_r+0x2ec>
 800ae12:	4b1b      	ldr	r3, [pc, #108]	@ (800ae80 <_dtoa_r+0x2e0>)
 800ae14:	4602      	mov	r2, r0
 800ae16:	f240 11af 	movw	r1, #431	@ 0x1af
 800ae1a:	e6d8      	b.n	800abce <_dtoa_r+0x2e>
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	e7e0      	b.n	800ade2 <_dtoa_r+0x242>
 800ae20:	2401      	movs	r4, #1
 800ae22:	2300      	movs	r3, #0
 800ae24:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae26:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ae28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ae2c:	9300      	str	r3, [sp, #0]
 800ae2e:	9307      	str	r3, [sp, #28]
 800ae30:	2200      	movs	r2, #0
 800ae32:	2312      	movs	r3, #18
 800ae34:	e7d0      	b.n	800add8 <_dtoa_r+0x238>
 800ae36:	2301      	movs	r3, #1
 800ae38:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ae3a:	e7f5      	b.n	800ae28 <_dtoa_r+0x288>
 800ae3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae3e:	9300      	str	r3, [sp, #0]
 800ae40:	9307      	str	r3, [sp, #28]
 800ae42:	e7d7      	b.n	800adf4 <_dtoa_r+0x254>
 800ae44:	3101      	adds	r1, #1
 800ae46:	0052      	lsls	r2, r2, #1
 800ae48:	e7d8      	b.n	800adfc <_dtoa_r+0x25c>
 800ae4a:	bf00      	nop
 800ae4c:	f3af 8000 	nop.w
 800ae50:	636f4361 	.word	0x636f4361
 800ae54:	3fd287a7 	.word	0x3fd287a7
 800ae58:	8b60c8b3 	.word	0x8b60c8b3
 800ae5c:	3fc68a28 	.word	0x3fc68a28
 800ae60:	509f79fb 	.word	0x509f79fb
 800ae64:	3fd34413 	.word	0x3fd34413
 800ae68:	0800ccad 	.word	0x0800ccad
 800ae6c:	0800ccc4 	.word	0x0800ccc4
 800ae70:	7ff00000 	.word	0x7ff00000
 800ae74:	0800cc7d 	.word	0x0800cc7d
 800ae78:	3ff80000 	.word	0x3ff80000
 800ae7c:	0800cdd0 	.word	0x0800cdd0
 800ae80:	0800cd1c 	.word	0x0800cd1c
 800ae84:	0800cca9 	.word	0x0800cca9
 800ae88:	0800cc7c 	.word	0x0800cc7c
 800ae8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ae90:	6018      	str	r0, [r3, #0]
 800ae92:	9b07      	ldr	r3, [sp, #28]
 800ae94:	2b0e      	cmp	r3, #14
 800ae96:	f200 80a4 	bhi.w	800afe2 <_dtoa_r+0x442>
 800ae9a:	2c00      	cmp	r4, #0
 800ae9c:	f000 80a1 	beq.w	800afe2 <_dtoa_r+0x442>
 800aea0:	2f00      	cmp	r7, #0
 800aea2:	dd33      	ble.n	800af0c <_dtoa_r+0x36c>
 800aea4:	4bad      	ldr	r3, [pc, #692]	@ (800b15c <_dtoa_r+0x5bc>)
 800aea6:	f007 020f 	and.w	r2, r7, #15
 800aeaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aeae:	ed93 7b00 	vldr	d7, [r3]
 800aeb2:	05f8      	lsls	r0, r7, #23
 800aeb4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800aeb8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800aebc:	d516      	bpl.n	800aeec <_dtoa_r+0x34c>
 800aebe:	4ba8      	ldr	r3, [pc, #672]	@ (800b160 <_dtoa_r+0x5c0>)
 800aec0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aec4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aec8:	f7f5 fcd8 	bl	800087c <__aeabi_ddiv>
 800aecc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aed0:	f004 040f 	and.w	r4, r4, #15
 800aed4:	2603      	movs	r6, #3
 800aed6:	4da2      	ldr	r5, [pc, #648]	@ (800b160 <_dtoa_r+0x5c0>)
 800aed8:	b954      	cbnz	r4, 800aef0 <_dtoa_r+0x350>
 800aeda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aede:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aee2:	f7f5 fccb 	bl	800087c <__aeabi_ddiv>
 800aee6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aeea:	e028      	b.n	800af3e <_dtoa_r+0x39e>
 800aeec:	2602      	movs	r6, #2
 800aeee:	e7f2      	b.n	800aed6 <_dtoa_r+0x336>
 800aef0:	07e1      	lsls	r1, r4, #31
 800aef2:	d508      	bpl.n	800af06 <_dtoa_r+0x366>
 800aef4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aef8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aefc:	f7f5 fb94 	bl	8000628 <__aeabi_dmul>
 800af00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800af04:	3601      	adds	r6, #1
 800af06:	1064      	asrs	r4, r4, #1
 800af08:	3508      	adds	r5, #8
 800af0a:	e7e5      	b.n	800aed8 <_dtoa_r+0x338>
 800af0c:	f000 80d2 	beq.w	800b0b4 <_dtoa_r+0x514>
 800af10:	427c      	negs	r4, r7
 800af12:	4b92      	ldr	r3, [pc, #584]	@ (800b15c <_dtoa_r+0x5bc>)
 800af14:	4d92      	ldr	r5, [pc, #584]	@ (800b160 <_dtoa_r+0x5c0>)
 800af16:	f004 020f 	and.w	r2, r4, #15
 800af1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af22:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af26:	f7f5 fb7f 	bl	8000628 <__aeabi_dmul>
 800af2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af2e:	1124      	asrs	r4, r4, #4
 800af30:	2300      	movs	r3, #0
 800af32:	2602      	movs	r6, #2
 800af34:	2c00      	cmp	r4, #0
 800af36:	f040 80b2 	bne.w	800b09e <_dtoa_r+0x4fe>
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d1d3      	bne.n	800aee6 <_dtoa_r+0x346>
 800af3e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800af40:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800af44:	2b00      	cmp	r3, #0
 800af46:	f000 80b7 	beq.w	800b0b8 <_dtoa_r+0x518>
 800af4a:	4b86      	ldr	r3, [pc, #536]	@ (800b164 <_dtoa_r+0x5c4>)
 800af4c:	2200      	movs	r2, #0
 800af4e:	4620      	mov	r0, r4
 800af50:	4629      	mov	r1, r5
 800af52:	f7f5 fddb 	bl	8000b0c <__aeabi_dcmplt>
 800af56:	2800      	cmp	r0, #0
 800af58:	f000 80ae 	beq.w	800b0b8 <_dtoa_r+0x518>
 800af5c:	9b07      	ldr	r3, [sp, #28]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	f000 80aa 	beq.w	800b0b8 <_dtoa_r+0x518>
 800af64:	9b00      	ldr	r3, [sp, #0]
 800af66:	2b00      	cmp	r3, #0
 800af68:	dd37      	ble.n	800afda <_dtoa_r+0x43a>
 800af6a:	1e7b      	subs	r3, r7, #1
 800af6c:	9304      	str	r3, [sp, #16]
 800af6e:	4620      	mov	r0, r4
 800af70:	4b7d      	ldr	r3, [pc, #500]	@ (800b168 <_dtoa_r+0x5c8>)
 800af72:	2200      	movs	r2, #0
 800af74:	4629      	mov	r1, r5
 800af76:	f7f5 fb57 	bl	8000628 <__aeabi_dmul>
 800af7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af7e:	9c00      	ldr	r4, [sp, #0]
 800af80:	3601      	adds	r6, #1
 800af82:	4630      	mov	r0, r6
 800af84:	f7f5 fae6 	bl	8000554 <__aeabi_i2d>
 800af88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af8c:	f7f5 fb4c 	bl	8000628 <__aeabi_dmul>
 800af90:	4b76      	ldr	r3, [pc, #472]	@ (800b16c <_dtoa_r+0x5cc>)
 800af92:	2200      	movs	r2, #0
 800af94:	f7f5 f992 	bl	80002bc <__adddf3>
 800af98:	4605      	mov	r5, r0
 800af9a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800af9e:	2c00      	cmp	r4, #0
 800afa0:	f040 808d 	bne.w	800b0be <_dtoa_r+0x51e>
 800afa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afa8:	4b71      	ldr	r3, [pc, #452]	@ (800b170 <_dtoa_r+0x5d0>)
 800afaa:	2200      	movs	r2, #0
 800afac:	f7f5 f984 	bl	80002b8 <__aeabi_dsub>
 800afb0:	4602      	mov	r2, r0
 800afb2:	460b      	mov	r3, r1
 800afb4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800afb8:	462a      	mov	r2, r5
 800afba:	4633      	mov	r3, r6
 800afbc:	f7f5 fdc4 	bl	8000b48 <__aeabi_dcmpgt>
 800afc0:	2800      	cmp	r0, #0
 800afc2:	f040 828b 	bne.w	800b4dc <_dtoa_r+0x93c>
 800afc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afca:	462a      	mov	r2, r5
 800afcc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800afd0:	f7f5 fd9c 	bl	8000b0c <__aeabi_dcmplt>
 800afd4:	2800      	cmp	r0, #0
 800afd6:	f040 8128 	bne.w	800b22a <_dtoa_r+0x68a>
 800afda:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800afde:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800afe2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	f2c0 815a 	blt.w	800b29e <_dtoa_r+0x6fe>
 800afea:	2f0e      	cmp	r7, #14
 800afec:	f300 8157 	bgt.w	800b29e <_dtoa_r+0x6fe>
 800aff0:	4b5a      	ldr	r3, [pc, #360]	@ (800b15c <_dtoa_r+0x5bc>)
 800aff2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aff6:	ed93 7b00 	vldr	d7, [r3]
 800affa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800affc:	2b00      	cmp	r3, #0
 800affe:	ed8d 7b00 	vstr	d7, [sp]
 800b002:	da03      	bge.n	800b00c <_dtoa_r+0x46c>
 800b004:	9b07      	ldr	r3, [sp, #28]
 800b006:	2b00      	cmp	r3, #0
 800b008:	f340 8101 	ble.w	800b20e <_dtoa_r+0x66e>
 800b00c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b010:	4656      	mov	r6, sl
 800b012:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b016:	4620      	mov	r0, r4
 800b018:	4629      	mov	r1, r5
 800b01a:	f7f5 fc2f 	bl	800087c <__aeabi_ddiv>
 800b01e:	f7f5 fdb3 	bl	8000b88 <__aeabi_d2iz>
 800b022:	4680      	mov	r8, r0
 800b024:	f7f5 fa96 	bl	8000554 <__aeabi_i2d>
 800b028:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b02c:	f7f5 fafc 	bl	8000628 <__aeabi_dmul>
 800b030:	4602      	mov	r2, r0
 800b032:	460b      	mov	r3, r1
 800b034:	4620      	mov	r0, r4
 800b036:	4629      	mov	r1, r5
 800b038:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b03c:	f7f5 f93c 	bl	80002b8 <__aeabi_dsub>
 800b040:	f806 4b01 	strb.w	r4, [r6], #1
 800b044:	9d07      	ldr	r5, [sp, #28]
 800b046:	eba6 040a 	sub.w	r4, r6, sl
 800b04a:	42a5      	cmp	r5, r4
 800b04c:	4602      	mov	r2, r0
 800b04e:	460b      	mov	r3, r1
 800b050:	f040 8117 	bne.w	800b282 <_dtoa_r+0x6e2>
 800b054:	f7f5 f932 	bl	80002bc <__adddf3>
 800b058:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b05c:	4604      	mov	r4, r0
 800b05e:	460d      	mov	r5, r1
 800b060:	f7f5 fd72 	bl	8000b48 <__aeabi_dcmpgt>
 800b064:	2800      	cmp	r0, #0
 800b066:	f040 80f9 	bne.w	800b25c <_dtoa_r+0x6bc>
 800b06a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b06e:	4620      	mov	r0, r4
 800b070:	4629      	mov	r1, r5
 800b072:	f7f5 fd41 	bl	8000af8 <__aeabi_dcmpeq>
 800b076:	b118      	cbz	r0, 800b080 <_dtoa_r+0x4e0>
 800b078:	f018 0f01 	tst.w	r8, #1
 800b07c:	f040 80ee 	bne.w	800b25c <_dtoa_r+0x6bc>
 800b080:	4649      	mov	r1, r9
 800b082:	4658      	mov	r0, fp
 800b084:	f000 fe34 	bl	800bcf0 <_Bfree>
 800b088:	2300      	movs	r3, #0
 800b08a:	7033      	strb	r3, [r6, #0]
 800b08c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b08e:	3701      	adds	r7, #1
 800b090:	601f      	str	r7, [r3, #0]
 800b092:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b094:	2b00      	cmp	r3, #0
 800b096:	f000 831d 	beq.w	800b6d4 <_dtoa_r+0xb34>
 800b09a:	601e      	str	r6, [r3, #0]
 800b09c:	e31a      	b.n	800b6d4 <_dtoa_r+0xb34>
 800b09e:	07e2      	lsls	r2, r4, #31
 800b0a0:	d505      	bpl.n	800b0ae <_dtoa_r+0x50e>
 800b0a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b0a6:	f7f5 fabf 	bl	8000628 <__aeabi_dmul>
 800b0aa:	3601      	adds	r6, #1
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	1064      	asrs	r4, r4, #1
 800b0b0:	3508      	adds	r5, #8
 800b0b2:	e73f      	b.n	800af34 <_dtoa_r+0x394>
 800b0b4:	2602      	movs	r6, #2
 800b0b6:	e742      	b.n	800af3e <_dtoa_r+0x39e>
 800b0b8:	9c07      	ldr	r4, [sp, #28]
 800b0ba:	9704      	str	r7, [sp, #16]
 800b0bc:	e761      	b.n	800af82 <_dtoa_r+0x3e2>
 800b0be:	4b27      	ldr	r3, [pc, #156]	@ (800b15c <_dtoa_r+0x5bc>)
 800b0c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b0c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b0c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b0ca:	4454      	add	r4, sl
 800b0cc:	2900      	cmp	r1, #0
 800b0ce:	d053      	beq.n	800b178 <_dtoa_r+0x5d8>
 800b0d0:	4928      	ldr	r1, [pc, #160]	@ (800b174 <_dtoa_r+0x5d4>)
 800b0d2:	2000      	movs	r0, #0
 800b0d4:	f7f5 fbd2 	bl	800087c <__aeabi_ddiv>
 800b0d8:	4633      	mov	r3, r6
 800b0da:	462a      	mov	r2, r5
 800b0dc:	f7f5 f8ec 	bl	80002b8 <__aeabi_dsub>
 800b0e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b0e4:	4656      	mov	r6, sl
 800b0e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0ea:	f7f5 fd4d 	bl	8000b88 <__aeabi_d2iz>
 800b0ee:	4605      	mov	r5, r0
 800b0f0:	f7f5 fa30 	bl	8000554 <__aeabi_i2d>
 800b0f4:	4602      	mov	r2, r0
 800b0f6:	460b      	mov	r3, r1
 800b0f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0fc:	f7f5 f8dc 	bl	80002b8 <__aeabi_dsub>
 800b100:	3530      	adds	r5, #48	@ 0x30
 800b102:	4602      	mov	r2, r0
 800b104:	460b      	mov	r3, r1
 800b106:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b10a:	f806 5b01 	strb.w	r5, [r6], #1
 800b10e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b112:	f7f5 fcfb 	bl	8000b0c <__aeabi_dcmplt>
 800b116:	2800      	cmp	r0, #0
 800b118:	d171      	bne.n	800b1fe <_dtoa_r+0x65e>
 800b11a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b11e:	4911      	ldr	r1, [pc, #68]	@ (800b164 <_dtoa_r+0x5c4>)
 800b120:	2000      	movs	r0, #0
 800b122:	f7f5 f8c9 	bl	80002b8 <__aeabi_dsub>
 800b126:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b12a:	f7f5 fcef 	bl	8000b0c <__aeabi_dcmplt>
 800b12e:	2800      	cmp	r0, #0
 800b130:	f040 8095 	bne.w	800b25e <_dtoa_r+0x6be>
 800b134:	42a6      	cmp	r6, r4
 800b136:	f43f af50 	beq.w	800afda <_dtoa_r+0x43a>
 800b13a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b13e:	4b0a      	ldr	r3, [pc, #40]	@ (800b168 <_dtoa_r+0x5c8>)
 800b140:	2200      	movs	r2, #0
 800b142:	f7f5 fa71 	bl	8000628 <__aeabi_dmul>
 800b146:	4b08      	ldr	r3, [pc, #32]	@ (800b168 <_dtoa_r+0x5c8>)
 800b148:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b14c:	2200      	movs	r2, #0
 800b14e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b152:	f7f5 fa69 	bl	8000628 <__aeabi_dmul>
 800b156:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b15a:	e7c4      	b.n	800b0e6 <_dtoa_r+0x546>
 800b15c:	0800cdd0 	.word	0x0800cdd0
 800b160:	0800cda8 	.word	0x0800cda8
 800b164:	3ff00000 	.word	0x3ff00000
 800b168:	40240000 	.word	0x40240000
 800b16c:	401c0000 	.word	0x401c0000
 800b170:	40140000 	.word	0x40140000
 800b174:	3fe00000 	.word	0x3fe00000
 800b178:	4631      	mov	r1, r6
 800b17a:	4628      	mov	r0, r5
 800b17c:	f7f5 fa54 	bl	8000628 <__aeabi_dmul>
 800b180:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b184:	9415      	str	r4, [sp, #84]	@ 0x54
 800b186:	4656      	mov	r6, sl
 800b188:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b18c:	f7f5 fcfc 	bl	8000b88 <__aeabi_d2iz>
 800b190:	4605      	mov	r5, r0
 800b192:	f7f5 f9df 	bl	8000554 <__aeabi_i2d>
 800b196:	4602      	mov	r2, r0
 800b198:	460b      	mov	r3, r1
 800b19a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b19e:	f7f5 f88b 	bl	80002b8 <__aeabi_dsub>
 800b1a2:	3530      	adds	r5, #48	@ 0x30
 800b1a4:	f806 5b01 	strb.w	r5, [r6], #1
 800b1a8:	4602      	mov	r2, r0
 800b1aa:	460b      	mov	r3, r1
 800b1ac:	42a6      	cmp	r6, r4
 800b1ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b1b2:	f04f 0200 	mov.w	r2, #0
 800b1b6:	d124      	bne.n	800b202 <_dtoa_r+0x662>
 800b1b8:	4bac      	ldr	r3, [pc, #688]	@ (800b46c <_dtoa_r+0x8cc>)
 800b1ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b1be:	f7f5 f87d 	bl	80002bc <__adddf3>
 800b1c2:	4602      	mov	r2, r0
 800b1c4:	460b      	mov	r3, r1
 800b1c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1ca:	f7f5 fcbd 	bl	8000b48 <__aeabi_dcmpgt>
 800b1ce:	2800      	cmp	r0, #0
 800b1d0:	d145      	bne.n	800b25e <_dtoa_r+0x6be>
 800b1d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b1d6:	49a5      	ldr	r1, [pc, #660]	@ (800b46c <_dtoa_r+0x8cc>)
 800b1d8:	2000      	movs	r0, #0
 800b1da:	f7f5 f86d 	bl	80002b8 <__aeabi_dsub>
 800b1de:	4602      	mov	r2, r0
 800b1e0:	460b      	mov	r3, r1
 800b1e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1e6:	f7f5 fc91 	bl	8000b0c <__aeabi_dcmplt>
 800b1ea:	2800      	cmp	r0, #0
 800b1ec:	f43f aef5 	beq.w	800afda <_dtoa_r+0x43a>
 800b1f0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b1f2:	1e73      	subs	r3, r6, #1
 800b1f4:	9315      	str	r3, [sp, #84]	@ 0x54
 800b1f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b1fa:	2b30      	cmp	r3, #48	@ 0x30
 800b1fc:	d0f8      	beq.n	800b1f0 <_dtoa_r+0x650>
 800b1fe:	9f04      	ldr	r7, [sp, #16]
 800b200:	e73e      	b.n	800b080 <_dtoa_r+0x4e0>
 800b202:	4b9b      	ldr	r3, [pc, #620]	@ (800b470 <_dtoa_r+0x8d0>)
 800b204:	f7f5 fa10 	bl	8000628 <__aeabi_dmul>
 800b208:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b20c:	e7bc      	b.n	800b188 <_dtoa_r+0x5e8>
 800b20e:	d10c      	bne.n	800b22a <_dtoa_r+0x68a>
 800b210:	4b98      	ldr	r3, [pc, #608]	@ (800b474 <_dtoa_r+0x8d4>)
 800b212:	2200      	movs	r2, #0
 800b214:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b218:	f7f5 fa06 	bl	8000628 <__aeabi_dmul>
 800b21c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b220:	f7f5 fc88 	bl	8000b34 <__aeabi_dcmpge>
 800b224:	2800      	cmp	r0, #0
 800b226:	f000 8157 	beq.w	800b4d8 <_dtoa_r+0x938>
 800b22a:	2400      	movs	r4, #0
 800b22c:	4625      	mov	r5, r4
 800b22e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b230:	43db      	mvns	r3, r3
 800b232:	9304      	str	r3, [sp, #16]
 800b234:	4656      	mov	r6, sl
 800b236:	2700      	movs	r7, #0
 800b238:	4621      	mov	r1, r4
 800b23a:	4658      	mov	r0, fp
 800b23c:	f000 fd58 	bl	800bcf0 <_Bfree>
 800b240:	2d00      	cmp	r5, #0
 800b242:	d0dc      	beq.n	800b1fe <_dtoa_r+0x65e>
 800b244:	b12f      	cbz	r7, 800b252 <_dtoa_r+0x6b2>
 800b246:	42af      	cmp	r7, r5
 800b248:	d003      	beq.n	800b252 <_dtoa_r+0x6b2>
 800b24a:	4639      	mov	r1, r7
 800b24c:	4658      	mov	r0, fp
 800b24e:	f000 fd4f 	bl	800bcf0 <_Bfree>
 800b252:	4629      	mov	r1, r5
 800b254:	4658      	mov	r0, fp
 800b256:	f000 fd4b 	bl	800bcf0 <_Bfree>
 800b25a:	e7d0      	b.n	800b1fe <_dtoa_r+0x65e>
 800b25c:	9704      	str	r7, [sp, #16]
 800b25e:	4633      	mov	r3, r6
 800b260:	461e      	mov	r6, r3
 800b262:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b266:	2a39      	cmp	r2, #57	@ 0x39
 800b268:	d107      	bne.n	800b27a <_dtoa_r+0x6da>
 800b26a:	459a      	cmp	sl, r3
 800b26c:	d1f8      	bne.n	800b260 <_dtoa_r+0x6c0>
 800b26e:	9a04      	ldr	r2, [sp, #16]
 800b270:	3201      	adds	r2, #1
 800b272:	9204      	str	r2, [sp, #16]
 800b274:	2230      	movs	r2, #48	@ 0x30
 800b276:	f88a 2000 	strb.w	r2, [sl]
 800b27a:	781a      	ldrb	r2, [r3, #0]
 800b27c:	3201      	adds	r2, #1
 800b27e:	701a      	strb	r2, [r3, #0]
 800b280:	e7bd      	b.n	800b1fe <_dtoa_r+0x65e>
 800b282:	4b7b      	ldr	r3, [pc, #492]	@ (800b470 <_dtoa_r+0x8d0>)
 800b284:	2200      	movs	r2, #0
 800b286:	f7f5 f9cf 	bl	8000628 <__aeabi_dmul>
 800b28a:	2200      	movs	r2, #0
 800b28c:	2300      	movs	r3, #0
 800b28e:	4604      	mov	r4, r0
 800b290:	460d      	mov	r5, r1
 800b292:	f7f5 fc31 	bl	8000af8 <__aeabi_dcmpeq>
 800b296:	2800      	cmp	r0, #0
 800b298:	f43f aebb 	beq.w	800b012 <_dtoa_r+0x472>
 800b29c:	e6f0      	b.n	800b080 <_dtoa_r+0x4e0>
 800b29e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b2a0:	2a00      	cmp	r2, #0
 800b2a2:	f000 80db 	beq.w	800b45c <_dtoa_r+0x8bc>
 800b2a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b2a8:	2a01      	cmp	r2, #1
 800b2aa:	f300 80bf 	bgt.w	800b42c <_dtoa_r+0x88c>
 800b2ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b2b0:	2a00      	cmp	r2, #0
 800b2b2:	f000 80b7 	beq.w	800b424 <_dtoa_r+0x884>
 800b2b6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b2ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b2bc:	4646      	mov	r6, r8
 800b2be:	9a08      	ldr	r2, [sp, #32]
 800b2c0:	2101      	movs	r1, #1
 800b2c2:	441a      	add	r2, r3
 800b2c4:	4658      	mov	r0, fp
 800b2c6:	4498      	add	r8, r3
 800b2c8:	9208      	str	r2, [sp, #32]
 800b2ca:	f000 fdc5 	bl	800be58 <__i2b>
 800b2ce:	4605      	mov	r5, r0
 800b2d0:	b15e      	cbz	r6, 800b2ea <_dtoa_r+0x74a>
 800b2d2:	9b08      	ldr	r3, [sp, #32]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	dd08      	ble.n	800b2ea <_dtoa_r+0x74a>
 800b2d8:	42b3      	cmp	r3, r6
 800b2da:	9a08      	ldr	r2, [sp, #32]
 800b2dc:	bfa8      	it	ge
 800b2de:	4633      	movge	r3, r6
 800b2e0:	eba8 0803 	sub.w	r8, r8, r3
 800b2e4:	1af6      	subs	r6, r6, r3
 800b2e6:	1ad3      	subs	r3, r2, r3
 800b2e8:	9308      	str	r3, [sp, #32]
 800b2ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2ec:	b1f3      	cbz	r3, 800b32c <_dtoa_r+0x78c>
 800b2ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	f000 80b7 	beq.w	800b464 <_dtoa_r+0x8c4>
 800b2f6:	b18c      	cbz	r4, 800b31c <_dtoa_r+0x77c>
 800b2f8:	4629      	mov	r1, r5
 800b2fa:	4622      	mov	r2, r4
 800b2fc:	4658      	mov	r0, fp
 800b2fe:	f000 fe6b 	bl	800bfd8 <__pow5mult>
 800b302:	464a      	mov	r2, r9
 800b304:	4601      	mov	r1, r0
 800b306:	4605      	mov	r5, r0
 800b308:	4658      	mov	r0, fp
 800b30a:	f000 fdbb 	bl	800be84 <__multiply>
 800b30e:	4649      	mov	r1, r9
 800b310:	9004      	str	r0, [sp, #16]
 800b312:	4658      	mov	r0, fp
 800b314:	f000 fcec 	bl	800bcf0 <_Bfree>
 800b318:	9b04      	ldr	r3, [sp, #16]
 800b31a:	4699      	mov	r9, r3
 800b31c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b31e:	1b1a      	subs	r2, r3, r4
 800b320:	d004      	beq.n	800b32c <_dtoa_r+0x78c>
 800b322:	4649      	mov	r1, r9
 800b324:	4658      	mov	r0, fp
 800b326:	f000 fe57 	bl	800bfd8 <__pow5mult>
 800b32a:	4681      	mov	r9, r0
 800b32c:	2101      	movs	r1, #1
 800b32e:	4658      	mov	r0, fp
 800b330:	f000 fd92 	bl	800be58 <__i2b>
 800b334:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b336:	4604      	mov	r4, r0
 800b338:	2b00      	cmp	r3, #0
 800b33a:	f000 81cf 	beq.w	800b6dc <_dtoa_r+0xb3c>
 800b33e:	461a      	mov	r2, r3
 800b340:	4601      	mov	r1, r0
 800b342:	4658      	mov	r0, fp
 800b344:	f000 fe48 	bl	800bfd8 <__pow5mult>
 800b348:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b34a:	2b01      	cmp	r3, #1
 800b34c:	4604      	mov	r4, r0
 800b34e:	f300 8095 	bgt.w	800b47c <_dtoa_r+0x8dc>
 800b352:	9b02      	ldr	r3, [sp, #8]
 800b354:	2b00      	cmp	r3, #0
 800b356:	f040 8087 	bne.w	800b468 <_dtoa_r+0x8c8>
 800b35a:	9b03      	ldr	r3, [sp, #12]
 800b35c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b360:	2b00      	cmp	r3, #0
 800b362:	f040 8089 	bne.w	800b478 <_dtoa_r+0x8d8>
 800b366:	9b03      	ldr	r3, [sp, #12]
 800b368:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b36c:	0d1b      	lsrs	r3, r3, #20
 800b36e:	051b      	lsls	r3, r3, #20
 800b370:	b12b      	cbz	r3, 800b37e <_dtoa_r+0x7de>
 800b372:	9b08      	ldr	r3, [sp, #32]
 800b374:	3301      	adds	r3, #1
 800b376:	9308      	str	r3, [sp, #32]
 800b378:	f108 0801 	add.w	r8, r8, #1
 800b37c:	2301      	movs	r3, #1
 800b37e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b380:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b382:	2b00      	cmp	r3, #0
 800b384:	f000 81b0 	beq.w	800b6e8 <_dtoa_r+0xb48>
 800b388:	6923      	ldr	r3, [r4, #16]
 800b38a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b38e:	6918      	ldr	r0, [r3, #16]
 800b390:	f000 fd16 	bl	800bdc0 <__hi0bits>
 800b394:	f1c0 0020 	rsb	r0, r0, #32
 800b398:	9b08      	ldr	r3, [sp, #32]
 800b39a:	4418      	add	r0, r3
 800b39c:	f010 001f 	ands.w	r0, r0, #31
 800b3a0:	d077      	beq.n	800b492 <_dtoa_r+0x8f2>
 800b3a2:	f1c0 0320 	rsb	r3, r0, #32
 800b3a6:	2b04      	cmp	r3, #4
 800b3a8:	dd6b      	ble.n	800b482 <_dtoa_r+0x8e2>
 800b3aa:	9b08      	ldr	r3, [sp, #32]
 800b3ac:	f1c0 001c 	rsb	r0, r0, #28
 800b3b0:	4403      	add	r3, r0
 800b3b2:	4480      	add	r8, r0
 800b3b4:	4406      	add	r6, r0
 800b3b6:	9308      	str	r3, [sp, #32]
 800b3b8:	f1b8 0f00 	cmp.w	r8, #0
 800b3bc:	dd05      	ble.n	800b3ca <_dtoa_r+0x82a>
 800b3be:	4649      	mov	r1, r9
 800b3c0:	4642      	mov	r2, r8
 800b3c2:	4658      	mov	r0, fp
 800b3c4:	f000 fe62 	bl	800c08c <__lshift>
 800b3c8:	4681      	mov	r9, r0
 800b3ca:	9b08      	ldr	r3, [sp, #32]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	dd05      	ble.n	800b3dc <_dtoa_r+0x83c>
 800b3d0:	4621      	mov	r1, r4
 800b3d2:	461a      	mov	r2, r3
 800b3d4:	4658      	mov	r0, fp
 800b3d6:	f000 fe59 	bl	800c08c <__lshift>
 800b3da:	4604      	mov	r4, r0
 800b3dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d059      	beq.n	800b496 <_dtoa_r+0x8f6>
 800b3e2:	4621      	mov	r1, r4
 800b3e4:	4648      	mov	r0, r9
 800b3e6:	f000 febd 	bl	800c164 <__mcmp>
 800b3ea:	2800      	cmp	r0, #0
 800b3ec:	da53      	bge.n	800b496 <_dtoa_r+0x8f6>
 800b3ee:	1e7b      	subs	r3, r7, #1
 800b3f0:	9304      	str	r3, [sp, #16]
 800b3f2:	4649      	mov	r1, r9
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	220a      	movs	r2, #10
 800b3f8:	4658      	mov	r0, fp
 800b3fa:	f000 fc9b 	bl	800bd34 <__multadd>
 800b3fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b400:	4681      	mov	r9, r0
 800b402:	2b00      	cmp	r3, #0
 800b404:	f000 8172 	beq.w	800b6ec <_dtoa_r+0xb4c>
 800b408:	2300      	movs	r3, #0
 800b40a:	4629      	mov	r1, r5
 800b40c:	220a      	movs	r2, #10
 800b40e:	4658      	mov	r0, fp
 800b410:	f000 fc90 	bl	800bd34 <__multadd>
 800b414:	9b00      	ldr	r3, [sp, #0]
 800b416:	2b00      	cmp	r3, #0
 800b418:	4605      	mov	r5, r0
 800b41a:	dc67      	bgt.n	800b4ec <_dtoa_r+0x94c>
 800b41c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b41e:	2b02      	cmp	r3, #2
 800b420:	dc41      	bgt.n	800b4a6 <_dtoa_r+0x906>
 800b422:	e063      	b.n	800b4ec <_dtoa_r+0x94c>
 800b424:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b426:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b42a:	e746      	b.n	800b2ba <_dtoa_r+0x71a>
 800b42c:	9b07      	ldr	r3, [sp, #28]
 800b42e:	1e5c      	subs	r4, r3, #1
 800b430:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b432:	42a3      	cmp	r3, r4
 800b434:	bfbf      	itttt	lt
 800b436:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b438:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b43a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b43c:	1ae3      	sublt	r3, r4, r3
 800b43e:	bfb4      	ite	lt
 800b440:	18d2      	addlt	r2, r2, r3
 800b442:	1b1c      	subge	r4, r3, r4
 800b444:	9b07      	ldr	r3, [sp, #28]
 800b446:	bfbc      	itt	lt
 800b448:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b44a:	2400      	movlt	r4, #0
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	bfb5      	itete	lt
 800b450:	eba8 0603 	sublt.w	r6, r8, r3
 800b454:	9b07      	ldrge	r3, [sp, #28]
 800b456:	2300      	movlt	r3, #0
 800b458:	4646      	movge	r6, r8
 800b45a:	e730      	b.n	800b2be <_dtoa_r+0x71e>
 800b45c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b45e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b460:	4646      	mov	r6, r8
 800b462:	e735      	b.n	800b2d0 <_dtoa_r+0x730>
 800b464:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b466:	e75c      	b.n	800b322 <_dtoa_r+0x782>
 800b468:	2300      	movs	r3, #0
 800b46a:	e788      	b.n	800b37e <_dtoa_r+0x7de>
 800b46c:	3fe00000 	.word	0x3fe00000
 800b470:	40240000 	.word	0x40240000
 800b474:	40140000 	.word	0x40140000
 800b478:	9b02      	ldr	r3, [sp, #8]
 800b47a:	e780      	b.n	800b37e <_dtoa_r+0x7de>
 800b47c:	2300      	movs	r3, #0
 800b47e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b480:	e782      	b.n	800b388 <_dtoa_r+0x7e8>
 800b482:	d099      	beq.n	800b3b8 <_dtoa_r+0x818>
 800b484:	9a08      	ldr	r2, [sp, #32]
 800b486:	331c      	adds	r3, #28
 800b488:	441a      	add	r2, r3
 800b48a:	4498      	add	r8, r3
 800b48c:	441e      	add	r6, r3
 800b48e:	9208      	str	r2, [sp, #32]
 800b490:	e792      	b.n	800b3b8 <_dtoa_r+0x818>
 800b492:	4603      	mov	r3, r0
 800b494:	e7f6      	b.n	800b484 <_dtoa_r+0x8e4>
 800b496:	9b07      	ldr	r3, [sp, #28]
 800b498:	9704      	str	r7, [sp, #16]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	dc20      	bgt.n	800b4e0 <_dtoa_r+0x940>
 800b49e:	9300      	str	r3, [sp, #0]
 800b4a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4a2:	2b02      	cmp	r3, #2
 800b4a4:	dd1e      	ble.n	800b4e4 <_dtoa_r+0x944>
 800b4a6:	9b00      	ldr	r3, [sp, #0]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	f47f aec0 	bne.w	800b22e <_dtoa_r+0x68e>
 800b4ae:	4621      	mov	r1, r4
 800b4b0:	2205      	movs	r2, #5
 800b4b2:	4658      	mov	r0, fp
 800b4b4:	f000 fc3e 	bl	800bd34 <__multadd>
 800b4b8:	4601      	mov	r1, r0
 800b4ba:	4604      	mov	r4, r0
 800b4bc:	4648      	mov	r0, r9
 800b4be:	f000 fe51 	bl	800c164 <__mcmp>
 800b4c2:	2800      	cmp	r0, #0
 800b4c4:	f77f aeb3 	ble.w	800b22e <_dtoa_r+0x68e>
 800b4c8:	4656      	mov	r6, sl
 800b4ca:	2331      	movs	r3, #49	@ 0x31
 800b4cc:	f806 3b01 	strb.w	r3, [r6], #1
 800b4d0:	9b04      	ldr	r3, [sp, #16]
 800b4d2:	3301      	adds	r3, #1
 800b4d4:	9304      	str	r3, [sp, #16]
 800b4d6:	e6ae      	b.n	800b236 <_dtoa_r+0x696>
 800b4d8:	9c07      	ldr	r4, [sp, #28]
 800b4da:	9704      	str	r7, [sp, #16]
 800b4dc:	4625      	mov	r5, r4
 800b4de:	e7f3      	b.n	800b4c8 <_dtoa_r+0x928>
 800b4e0:	9b07      	ldr	r3, [sp, #28]
 800b4e2:	9300      	str	r3, [sp, #0]
 800b4e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	f000 8104 	beq.w	800b6f4 <_dtoa_r+0xb54>
 800b4ec:	2e00      	cmp	r6, #0
 800b4ee:	dd05      	ble.n	800b4fc <_dtoa_r+0x95c>
 800b4f0:	4629      	mov	r1, r5
 800b4f2:	4632      	mov	r2, r6
 800b4f4:	4658      	mov	r0, fp
 800b4f6:	f000 fdc9 	bl	800c08c <__lshift>
 800b4fa:	4605      	mov	r5, r0
 800b4fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d05a      	beq.n	800b5b8 <_dtoa_r+0xa18>
 800b502:	6869      	ldr	r1, [r5, #4]
 800b504:	4658      	mov	r0, fp
 800b506:	f000 fbb3 	bl	800bc70 <_Balloc>
 800b50a:	4606      	mov	r6, r0
 800b50c:	b928      	cbnz	r0, 800b51a <_dtoa_r+0x97a>
 800b50e:	4b84      	ldr	r3, [pc, #528]	@ (800b720 <_dtoa_r+0xb80>)
 800b510:	4602      	mov	r2, r0
 800b512:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b516:	f7ff bb5a 	b.w	800abce <_dtoa_r+0x2e>
 800b51a:	692a      	ldr	r2, [r5, #16]
 800b51c:	3202      	adds	r2, #2
 800b51e:	0092      	lsls	r2, r2, #2
 800b520:	f105 010c 	add.w	r1, r5, #12
 800b524:	300c      	adds	r0, #12
 800b526:	f7ff faa4 	bl	800aa72 <memcpy>
 800b52a:	2201      	movs	r2, #1
 800b52c:	4631      	mov	r1, r6
 800b52e:	4658      	mov	r0, fp
 800b530:	f000 fdac 	bl	800c08c <__lshift>
 800b534:	f10a 0301 	add.w	r3, sl, #1
 800b538:	9307      	str	r3, [sp, #28]
 800b53a:	9b00      	ldr	r3, [sp, #0]
 800b53c:	4453      	add	r3, sl
 800b53e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b540:	9b02      	ldr	r3, [sp, #8]
 800b542:	f003 0301 	and.w	r3, r3, #1
 800b546:	462f      	mov	r7, r5
 800b548:	930a      	str	r3, [sp, #40]	@ 0x28
 800b54a:	4605      	mov	r5, r0
 800b54c:	9b07      	ldr	r3, [sp, #28]
 800b54e:	4621      	mov	r1, r4
 800b550:	3b01      	subs	r3, #1
 800b552:	4648      	mov	r0, r9
 800b554:	9300      	str	r3, [sp, #0]
 800b556:	f7ff fa9a 	bl	800aa8e <quorem>
 800b55a:	4639      	mov	r1, r7
 800b55c:	9002      	str	r0, [sp, #8]
 800b55e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b562:	4648      	mov	r0, r9
 800b564:	f000 fdfe 	bl	800c164 <__mcmp>
 800b568:	462a      	mov	r2, r5
 800b56a:	9008      	str	r0, [sp, #32]
 800b56c:	4621      	mov	r1, r4
 800b56e:	4658      	mov	r0, fp
 800b570:	f000 fe14 	bl	800c19c <__mdiff>
 800b574:	68c2      	ldr	r2, [r0, #12]
 800b576:	4606      	mov	r6, r0
 800b578:	bb02      	cbnz	r2, 800b5bc <_dtoa_r+0xa1c>
 800b57a:	4601      	mov	r1, r0
 800b57c:	4648      	mov	r0, r9
 800b57e:	f000 fdf1 	bl	800c164 <__mcmp>
 800b582:	4602      	mov	r2, r0
 800b584:	4631      	mov	r1, r6
 800b586:	4658      	mov	r0, fp
 800b588:	920e      	str	r2, [sp, #56]	@ 0x38
 800b58a:	f000 fbb1 	bl	800bcf0 <_Bfree>
 800b58e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b590:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b592:	9e07      	ldr	r6, [sp, #28]
 800b594:	ea43 0102 	orr.w	r1, r3, r2
 800b598:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b59a:	4319      	orrs	r1, r3
 800b59c:	d110      	bne.n	800b5c0 <_dtoa_r+0xa20>
 800b59e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b5a2:	d029      	beq.n	800b5f8 <_dtoa_r+0xa58>
 800b5a4:	9b08      	ldr	r3, [sp, #32]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	dd02      	ble.n	800b5b0 <_dtoa_r+0xa10>
 800b5aa:	9b02      	ldr	r3, [sp, #8]
 800b5ac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b5b0:	9b00      	ldr	r3, [sp, #0]
 800b5b2:	f883 8000 	strb.w	r8, [r3]
 800b5b6:	e63f      	b.n	800b238 <_dtoa_r+0x698>
 800b5b8:	4628      	mov	r0, r5
 800b5ba:	e7bb      	b.n	800b534 <_dtoa_r+0x994>
 800b5bc:	2201      	movs	r2, #1
 800b5be:	e7e1      	b.n	800b584 <_dtoa_r+0x9e4>
 800b5c0:	9b08      	ldr	r3, [sp, #32]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	db04      	blt.n	800b5d0 <_dtoa_r+0xa30>
 800b5c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b5c8:	430b      	orrs	r3, r1
 800b5ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b5cc:	430b      	orrs	r3, r1
 800b5ce:	d120      	bne.n	800b612 <_dtoa_r+0xa72>
 800b5d0:	2a00      	cmp	r2, #0
 800b5d2:	dded      	ble.n	800b5b0 <_dtoa_r+0xa10>
 800b5d4:	4649      	mov	r1, r9
 800b5d6:	2201      	movs	r2, #1
 800b5d8:	4658      	mov	r0, fp
 800b5da:	f000 fd57 	bl	800c08c <__lshift>
 800b5de:	4621      	mov	r1, r4
 800b5e0:	4681      	mov	r9, r0
 800b5e2:	f000 fdbf 	bl	800c164 <__mcmp>
 800b5e6:	2800      	cmp	r0, #0
 800b5e8:	dc03      	bgt.n	800b5f2 <_dtoa_r+0xa52>
 800b5ea:	d1e1      	bne.n	800b5b0 <_dtoa_r+0xa10>
 800b5ec:	f018 0f01 	tst.w	r8, #1
 800b5f0:	d0de      	beq.n	800b5b0 <_dtoa_r+0xa10>
 800b5f2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b5f6:	d1d8      	bne.n	800b5aa <_dtoa_r+0xa0a>
 800b5f8:	9a00      	ldr	r2, [sp, #0]
 800b5fa:	2339      	movs	r3, #57	@ 0x39
 800b5fc:	7013      	strb	r3, [r2, #0]
 800b5fe:	4633      	mov	r3, r6
 800b600:	461e      	mov	r6, r3
 800b602:	3b01      	subs	r3, #1
 800b604:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b608:	2a39      	cmp	r2, #57	@ 0x39
 800b60a:	d052      	beq.n	800b6b2 <_dtoa_r+0xb12>
 800b60c:	3201      	adds	r2, #1
 800b60e:	701a      	strb	r2, [r3, #0]
 800b610:	e612      	b.n	800b238 <_dtoa_r+0x698>
 800b612:	2a00      	cmp	r2, #0
 800b614:	dd07      	ble.n	800b626 <_dtoa_r+0xa86>
 800b616:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b61a:	d0ed      	beq.n	800b5f8 <_dtoa_r+0xa58>
 800b61c:	9a00      	ldr	r2, [sp, #0]
 800b61e:	f108 0301 	add.w	r3, r8, #1
 800b622:	7013      	strb	r3, [r2, #0]
 800b624:	e608      	b.n	800b238 <_dtoa_r+0x698>
 800b626:	9b07      	ldr	r3, [sp, #28]
 800b628:	9a07      	ldr	r2, [sp, #28]
 800b62a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b62e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b630:	4293      	cmp	r3, r2
 800b632:	d028      	beq.n	800b686 <_dtoa_r+0xae6>
 800b634:	4649      	mov	r1, r9
 800b636:	2300      	movs	r3, #0
 800b638:	220a      	movs	r2, #10
 800b63a:	4658      	mov	r0, fp
 800b63c:	f000 fb7a 	bl	800bd34 <__multadd>
 800b640:	42af      	cmp	r7, r5
 800b642:	4681      	mov	r9, r0
 800b644:	f04f 0300 	mov.w	r3, #0
 800b648:	f04f 020a 	mov.w	r2, #10
 800b64c:	4639      	mov	r1, r7
 800b64e:	4658      	mov	r0, fp
 800b650:	d107      	bne.n	800b662 <_dtoa_r+0xac2>
 800b652:	f000 fb6f 	bl	800bd34 <__multadd>
 800b656:	4607      	mov	r7, r0
 800b658:	4605      	mov	r5, r0
 800b65a:	9b07      	ldr	r3, [sp, #28]
 800b65c:	3301      	adds	r3, #1
 800b65e:	9307      	str	r3, [sp, #28]
 800b660:	e774      	b.n	800b54c <_dtoa_r+0x9ac>
 800b662:	f000 fb67 	bl	800bd34 <__multadd>
 800b666:	4629      	mov	r1, r5
 800b668:	4607      	mov	r7, r0
 800b66a:	2300      	movs	r3, #0
 800b66c:	220a      	movs	r2, #10
 800b66e:	4658      	mov	r0, fp
 800b670:	f000 fb60 	bl	800bd34 <__multadd>
 800b674:	4605      	mov	r5, r0
 800b676:	e7f0      	b.n	800b65a <_dtoa_r+0xaba>
 800b678:	9b00      	ldr	r3, [sp, #0]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	bfcc      	ite	gt
 800b67e:	461e      	movgt	r6, r3
 800b680:	2601      	movle	r6, #1
 800b682:	4456      	add	r6, sl
 800b684:	2700      	movs	r7, #0
 800b686:	4649      	mov	r1, r9
 800b688:	2201      	movs	r2, #1
 800b68a:	4658      	mov	r0, fp
 800b68c:	f000 fcfe 	bl	800c08c <__lshift>
 800b690:	4621      	mov	r1, r4
 800b692:	4681      	mov	r9, r0
 800b694:	f000 fd66 	bl	800c164 <__mcmp>
 800b698:	2800      	cmp	r0, #0
 800b69a:	dcb0      	bgt.n	800b5fe <_dtoa_r+0xa5e>
 800b69c:	d102      	bne.n	800b6a4 <_dtoa_r+0xb04>
 800b69e:	f018 0f01 	tst.w	r8, #1
 800b6a2:	d1ac      	bne.n	800b5fe <_dtoa_r+0xa5e>
 800b6a4:	4633      	mov	r3, r6
 800b6a6:	461e      	mov	r6, r3
 800b6a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b6ac:	2a30      	cmp	r2, #48	@ 0x30
 800b6ae:	d0fa      	beq.n	800b6a6 <_dtoa_r+0xb06>
 800b6b0:	e5c2      	b.n	800b238 <_dtoa_r+0x698>
 800b6b2:	459a      	cmp	sl, r3
 800b6b4:	d1a4      	bne.n	800b600 <_dtoa_r+0xa60>
 800b6b6:	9b04      	ldr	r3, [sp, #16]
 800b6b8:	3301      	adds	r3, #1
 800b6ba:	9304      	str	r3, [sp, #16]
 800b6bc:	2331      	movs	r3, #49	@ 0x31
 800b6be:	f88a 3000 	strb.w	r3, [sl]
 800b6c2:	e5b9      	b.n	800b238 <_dtoa_r+0x698>
 800b6c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b6c6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b724 <_dtoa_r+0xb84>
 800b6ca:	b11b      	cbz	r3, 800b6d4 <_dtoa_r+0xb34>
 800b6cc:	f10a 0308 	add.w	r3, sl, #8
 800b6d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b6d2:	6013      	str	r3, [r2, #0]
 800b6d4:	4650      	mov	r0, sl
 800b6d6:	b019      	add	sp, #100	@ 0x64
 800b6d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6de:	2b01      	cmp	r3, #1
 800b6e0:	f77f ae37 	ble.w	800b352 <_dtoa_r+0x7b2>
 800b6e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b6e8:	2001      	movs	r0, #1
 800b6ea:	e655      	b.n	800b398 <_dtoa_r+0x7f8>
 800b6ec:	9b00      	ldr	r3, [sp, #0]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	f77f aed6 	ble.w	800b4a0 <_dtoa_r+0x900>
 800b6f4:	4656      	mov	r6, sl
 800b6f6:	4621      	mov	r1, r4
 800b6f8:	4648      	mov	r0, r9
 800b6fa:	f7ff f9c8 	bl	800aa8e <quorem>
 800b6fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b702:	f806 8b01 	strb.w	r8, [r6], #1
 800b706:	9b00      	ldr	r3, [sp, #0]
 800b708:	eba6 020a 	sub.w	r2, r6, sl
 800b70c:	4293      	cmp	r3, r2
 800b70e:	ddb3      	ble.n	800b678 <_dtoa_r+0xad8>
 800b710:	4649      	mov	r1, r9
 800b712:	2300      	movs	r3, #0
 800b714:	220a      	movs	r2, #10
 800b716:	4658      	mov	r0, fp
 800b718:	f000 fb0c 	bl	800bd34 <__multadd>
 800b71c:	4681      	mov	r9, r0
 800b71e:	e7ea      	b.n	800b6f6 <_dtoa_r+0xb56>
 800b720:	0800cd1c 	.word	0x0800cd1c
 800b724:	0800cca0 	.word	0x0800cca0

0800b728 <__sfputc_r>:
 800b728:	6893      	ldr	r3, [r2, #8]
 800b72a:	3b01      	subs	r3, #1
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	b410      	push	{r4}
 800b730:	6093      	str	r3, [r2, #8]
 800b732:	da08      	bge.n	800b746 <__sfputc_r+0x1e>
 800b734:	6994      	ldr	r4, [r2, #24]
 800b736:	42a3      	cmp	r3, r4
 800b738:	db01      	blt.n	800b73e <__sfputc_r+0x16>
 800b73a:	290a      	cmp	r1, #10
 800b73c:	d103      	bne.n	800b746 <__sfputc_r+0x1e>
 800b73e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b742:	f000 be5a 	b.w	800c3fa <__swbuf_r>
 800b746:	6813      	ldr	r3, [r2, #0]
 800b748:	1c58      	adds	r0, r3, #1
 800b74a:	6010      	str	r0, [r2, #0]
 800b74c:	7019      	strb	r1, [r3, #0]
 800b74e:	4608      	mov	r0, r1
 800b750:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b754:	4770      	bx	lr

0800b756 <__sfputs_r>:
 800b756:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b758:	4606      	mov	r6, r0
 800b75a:	460f      	mov	r7, r1
 800b75c:	4614      	mov	r4, r2
 800b75e:	18d5      	adds	r5, r2, r3
 800b760:	42ac      	cmp	r4, r5
 800b762:	d101      	bne.n	800b768 <__sfputs_r+0x12>
 800b764:	2000      	movs	r0, #0
 800b766:	e007      	b.n	800b778 <__sfputs_r+0x22>
 800b768:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b76c:	463a      	mov	r2, r7
 800b76e:	4630      	mov	r0, r6
 800b770:	f7ff ffda 	bl	800b728 <__sfputc_r>
 800b774:	1c43      	adds	r3, r0, #1
 800b776:	d1f3      	bne.n	800b760 <__sfputs_r+0xa>
 800b778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b77c <_vfiprintf_r>:
 800b77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b780:	460d      	mov	r5, r1
 800b782:	b09d      	sub	sp, #116	@ 0x74
 800b784:	4614      	mov	r4, r2
 800b786:	4698      	mov	r8, r3
 800b788:	4606      	mov	r6, r0
 800b78a:	b118      	cbz	r0, 800b794 <_vfiprintf_r+0x18>
 800b78c:	6a03      	ldr	r3, [r0, #32]
 800b78e:	b90b      	cbnz	r3, 800b794 <_vfiprintf_r+0x18>
 800b790:	f7ff f890 	bl	800a8b4 <__sinit>
 800b794:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b796:	07d9      	lsls	r1, r3, #31
 800b798:	d405      	bmi.n	800b7a6 <_vfiprintf_r+0x2a>
 800b79a:	89ab      	ldrh	r3, [r5, #12]
 800b79c:	059a      	lsls	r2, r3, #22
 800b79e:	d402      	bmi.n	800b7a6 <_vfiprintf_r+0x2a>
 800b7a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b7a2:	f7ff f964 	bl	800aa6e <__retarget_lock_acquire_recursive>
 800b7a6:	89ab      	ldrh	r3, [r5, #12]
 800b7a8:	071b      	lsls	r3, r3, #28
 800b7aa:	d501      	bpl.n	800b7b0 <_vfiprintf_r+0x34>
 800b7ac:	692b      	ldr	r3, [r5, #16]
 800b7ae:	b99b      	cbnz	r3, 800b7d8 <_vfiprintf_r+0x5c>
 800b7b0:	4629      	mov	r1, r5
 800b7b2:	4630      	mov	r0, r6
 800b7b4:	f000 fe60 	bl	800c478 <__swsetup_r>
 800b7b8:	b170      	cbz	r0, 800b7d8 <_vfiprintf_r+0x5c>
 800b7ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b7bc:	07dc      	lsls	r4, r3, #31
 800b7be:	d504      	bpl.n	800b7ca <_vfiprintf_r+0x4e>
 800b7c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b7c4:	b01d      	add	sp, #116	@ 0x74
 800b7c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ca:	89ab      	ldrh	r3, [r5, #12]
 800b7cc:	0598      	lsls	r0, r3, #22
 800b7ce:	d4f7      	bmi.n	800b7c0 <_vfiprintf_r+0x44>
 800b7d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b7d2:	f7ff f94d 	bl	800aa70 <__retarget_lock_release_recursive>
 800b7d6:	e7f3      	b.n	800b7c0 <_vfiprintf_r+0x44>
 800b7d8:	2300      	movs	r3, #0
 800b7da:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7dc:	2320      	movs	r3, #32
 800b7de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b7e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7e6:	2330      	movs	r3, #48	@ 0x30
 800b7e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b998 <_vfiprintf_r+0x21c>
 800b7ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b7f0:	f04f 0901 	mov.w	r9, #1
 800b7f4:	4623      	mov	r3, r4
 800b7f6:	469a      	mov	sl, r3
 800b7f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7fc:	b10a      	cbz	r2, 800b802 <_vfiprintf_r+0x86>
 800b7fe:	2a25      	cmp	r2, #37	@ 0x25
 800b800:	d1f9      	bne.n	800b7f6 <_vfiprintf_r+0x7a>
 800b802:	ebba 0b04 	subs.w	fp, sl, r4
 800b806:	d00b      	beq.n	800b820 <_vfiprintf_r+0xa4>
 800b808:	465b      	mov	r3, fp
 800b80a:	4622      	mov	r2, r4
 800b80c:	4629      	mov	r1, r5
 800b80e:	4630      	mov	r0, r6
 800b810:	f7ff ffa1 	bl	800b756 <__sfputs_r>
 800b814:	3001      	adds	r0, #1
 800b816:	f000 80a7 	beq.w	800b968 <_vfiprintf_r+0x1ec>
 800b81a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b81c:	445a      	add	r2, fp
 800b81e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b820:	f89a 3000 	ldrb.w	r3, [sl]
 800b824:	2b00      	cmp	r3, #0
 800b826:	f000 809f 	beq.w	800b968 <_vfiprintf_r+0x1ec>
 800b82a:	2300      	movs	r3, #0
 800b82c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b830:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b834:	f10a 0a01 	add.w	sl, sl, #1
 800b838:	9304      	str	r3, [sp, #16]
 800b83a:	9307      	str	r3, [sp, #28]
 800b83c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b840:	931a      	str	r3, [sp, #104]	@ 0x68
 800b842:	4654      	mov	r4, sl
 800b844:	2205      	movs	r2, #5
 800b846:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b84a:	4853      	ldr	r0, [pc, #332]	@ (800b998 <_vfiprintf_r+0x21c>)
 800b84c:	f7f4 fcd8 	bl	8000200 <memchr>
 800b850:	9a04      	ldr	r2, [sp, #16]
 800b852:	b9d8      	cbnz	r0, 800b88c <_vfiprintf_r+0x110>
 800b854:	06d1      	lsls	r1, r2, #27
 800b856:	bf44      	itt	mi
 800b858:	2320      	movmi	r3, #32
 800b85a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b85e:	0713      	lsls	r3, r2, #28
 800b860:	bf44      	itt	mi
 800b862:	232b      	movmi	r3, #43	@ 0x2b
 800b864:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b868:	f89a 3000 	ldrb.w	r3, [sl]
 800b86c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b86e:	d015      	beq.n	800b89c <_vfiprintf_r+0x120>
 800b870:	9a07      	ldr	r2, [sp, #28]
 800b872:	4654      	mov	r4, sl
 800b874:	2000      	movs	r0, #0
 800b876:	f04f 0c0a 	mov.w	ip, #10
 800b87a:	4621      	mov	r1, r4
 800b87c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b880:	3b30      	subs	r3, #48	@ 0x30
 800b882:	2b09      	cmp	r3, #9
 800b884:	d94b      	bls.n	800b91e <_vfiprintf_r+0x1a2>
 800b886:	b1b0      	cbz	r0, 800b8b6 <_vfiprintf_r+0x13a>
 800b888:	9207      	str	r2, [sp, #28]
 800b88a:	e014      	b.n	800b8b6 <_vfiprintf_r+0x13a>
 800b88c:	eba0 0308 	sub.w	r3, r0, r8
 800b890:	fa09 f303 	lsl.w	r3, r9, r3
 800b894:	4313      	orrs	r3, r2
 800b896:	9304      	str	r3, [sp, #16]
 800b898:	46a2      	mov	sl, r4
 800b89a:	e7d2      	b.n	800b842 <_vfiprintf_r+0xc6>
 800b89c:	9b03      	ldr	r3, [sp, #12]
 800b89e:	1d19      	adds	r1, r3, #4
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	9103      	str	r1, [sp, #12]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	bfbb      	ittet	lt
 800b8a8:	425b      	neglt	r3, r3
 800b8aa:	f042 0202 	orrlt.w	r2, r2, #2
 800b8ae:	9307      	strge	r3, [sp, #28]
 800b8b0:	9307      	strlt	r3, [sp, #28]
 800b8b2:	bfb8      	it	lt
 800b8b4:	9204      	strlt	r2, [sp, #16]
 800b8b6:	7823      	ldrb	r3, [r4, #0]
 800b8b8:	2b2e      	cmp	r3, #46	@ 0x2e
 800b8ba:	d10a      	bne.n	800b8d2 <_vfiprintf_r+0x156>
 800b8bc:	7863      	ldrb	r3, [r4, #1]
 800b8be:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8c0:	d132      	bne.n	800b928 <_vfiprintf_r+0x1ac>
 800b8c2:	9b03      	ldr	r3, [sp, #12]
 800b8c4:	1d1a      	adds	r2, r3, #4
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	9203      	str	r2, [sp, #12]
 800b8ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b8ce:	3402      	adds	r4, #2
 800b8d0:	9305      	str	r3, [sp, #20]
 800b8d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b9a8 <_vfiprintf_r+0x22c>
 800b8d6:	7821      	ldrb	r1, [r4, #0]
 800b8d8:	2203      	movs	r2, #3
 800b8da:	4650      	mov	r0, sl
 800b8dc:	f7f4 fc90 	bl	8000200 <memchr>
 800b8e0:	b138      	cbz	r0, 800b8f2 <_vfiprintf_r+0x176>
 800b8e2:	9b04      	ldr	r3, [sp, #16]
 800b8e4:	eba0 000a 	sub.w	r0, r0, sl
 800b8e8:	2240      	movs	r2, #64	@ 0x40
 800b8ea:	4082      	lsls	r2, r0
 800b8ec:	4313      	orrs	r3, r2
 800b8ee:	3401      	adds	r4, #1
 800b8f0:	9304      	str	r3, [sp, #16]
 800b8f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8f6:	4829      	ldr	r0, [pc, #164]	@ (800b99c <_vfiprintf_r+0x220>)
 800b8f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b8fc:	2206      	movs	r2, #6
 800b8fe:	f7f4 fc7f 	bl	8000200 <memchr>
 800b902:	2800      	cmp	r0, #0
 800b904:	d03f      	beq.n	800b986 <_vfiprintf_r+0x20a>
 800b906:	4b26      	ldr	r3, [pc, #152]	@ (800b9a0 <_vfiprintf_r+0x224>)
 800b908:	bb1b      	cbnz	r3, 800b952 <_vfiprintf_r+0x1d6>
 800b90a:	9b03      	ldr	r3, [sp, #12]
 800b90c:	3307      	adds	r3, #7
 800b90e:	f023 0307 	bic.w	r3, r3, #7
 800b912:	3308      	adds	r3, #8
 800b914:	9303      	str	r3, [sp, #12]
 800b916:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b918:	443b      	add	r3, r7
 800b91a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b91c:	e76a      	b.n	800b7f4 <_vfiprintf_r+0x78>
 800b91e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b922:	460c      	mov	r4, r1
 800b924:	2001      	movs	r0, #1
 800b926:	e7a8      	b.n	800b87a <_vfiprintf_r+0xfe>
 800b928:	2300      	movs	r3, #0
 800b92a:	3401      	adds	r4, #1
 800b92c:	9305      	str	r3, [sp, #20]
 800b92e:	4619      	mov	r1, r3
 800b930:	f04f 0c0a 	mov.w	ip, #10
 800b934:	4620      	mov	r0, r4
 800b936:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b93a:	3a30      	subs	r2, #48	@ 0x30
 800b93c:	2a09      	cmp	r2, #9
 800b93e:	d903      	bls.n	800b948 <_vfiprintf_r+0x1cc>
 800b940:	2b00      	cmp	r3, #0
 800b942:	d0c6      	beq.n	800b8d2 <_vfiprintf_r+0x156>
 800b944:	9105      	str	r1, [sp, #20]
 800b946:	e7c4      	b.n	800b8d2 <_vfiprintf_r+0x156>
 800b948:	fb0c 2101 	mla	r1, ip, r1, r2
 800b94c:	4604      	mov	r4, r0
 800b94e:	2301      	movs	r3, #1
 800b950:	e7f0      	b.n	800b934 <_vfiprintf_r+0x1b8>
 800b952:	ab03      	add	r3, sp, #12
 800b954:	9300      	str	r3, [sp, #0]
 800b956:	462a      	mov	r2, r5
 800b958:	4b12      	ldr	r3, [pc, #72]	@ (800b9a4 <_vfiprintf_r+0x228>)
 800b95a:	a904      	add	r1, sp, #16
 800b95c:	4630      	mov	r0, r6
 800b95e:	f7fe fb65 	bl	800a02c <_printf_float>
 800b962:	4607      	mov	r7, r0
 800b964:	1c78      	adds	r0, r7, #1
 800b966:	d1d6      	bne.n	800b916 <_vfiprintf_r+0x19a>
 800b968:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b96a:	07d9      	lsls	r1, r3, #31
 800b96c:	d405      	bmi.n	800b97a <_vfiprintf_r+0x1fe>
 800b96e:	89ab      	ldrh	r3, [r5, #12]
 800b970:	059a      	lsls	r2, r3, #22
 800b972:	d402      	bmi.n	800b97a <_vfiprintf_r+0x1fe>
 800b974:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b976:	f7ff f87b 	bl	800aa70 <__retarget_lock_release_recursive>
 800b97a:	89ab      	ldrh	r3, [r5, #12]
 800b97c:	065b      	lsls	r3, r3, #25
 800b97e:	f53f af1f 	bmi.w	800b7c0 <_vfiprintf_r+0x44>
 800b982:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b984:	e71e      	b.n	800b7c4 <_vfiprintf_r+0x48>
 800b986:	ab03      	add	r3, sp, #12
 800b988:	9300      	str	r3, [sp, #0]
 800b98a:	462a      	mov	r2, r5
 800b98c:	4b05      	ldr	r3, [pc, #20]	@ (800b9a4 <_vfiprintf_r+0x228>)
 800b98e:	a904      	add	r1, sp, #16
 800b990:	4630      	mov	r0, r6
 800b992:	f7fe fde3 	bl	800a55c <_printf_i>
 800b996:	e7e4      	b.n	800b962 <_vfiprintf_r+0x1e6>
 800b998:	0800cd2d 	.word	0x0800cd2d
 800b99c:	0800cd37 	.word	0x0800cd37
 800b9a0:	0800a02d 	.word	0x0800a02d
 800b9a4:	0800b757 	.word	0x0800b757
 800b9a8:	0800cd33 	.word	0x0800cd33

0800b9ac <malloc>:
 800b9ac:	4b02      	ldr	r3, [pc, #8]	@ (800b9b8 <malloc+0xc>)
 800b9ae:	4601      	mov	r1, r0
 800b9b0:	6818      	ldr	r0, [r3, #0]
 800b9b2:	f000 b825 	b.w	800ba00 <_malloc_r>
 800b9b6:	bf00      	nop
 800b9b8:	200000a0 	.word	0x200000a0

0800b9bc <sbrk_aligned>:
 800b9bc:	b570      	push	{r4, r5, r6, lr}
 800b9be:	4e0f      	ldr	r6, [pc, #60]	@ (800b9fc <sbrk_aligned+0x40>)
 800b9c0:	460c      	mov	r4, r1
 800b9c2:	6831      	ldr	r1, [r6, #0]
 800b9c4:	4605      	mov	r5, r0
 800b9c6:	b911      	cbnz	r1, 800b9ce <sbrk_aligned+0x12>
 800b9c8:	f000 fe64 	bl	800c694 <_sbrk_r>
 800b9cc:	6030      	str	r0, [r6, #0]
 800b9ce:	4621      	mov	r1, r4
 800b9d0:	4628      	mov	r0, r5
 800b9d2:	f000 fe5f 	bl	800c694 <_sbrk_r>
 800b9d6:	1c43      	adds	r3, r0, #1
 800b9d8:	d103      	bne.n	800b9e2 <sbrk_aligned+0x26>
 800b9da:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b9de:	4620      	mov	r0, r4
 800b9e0:	bd70      	pop	{r4, r5, r6, pc}
 800b9e2:	1cc4      	adds	r4, r0, #3
 800b9e4:	f024 0403 	bic.w	r4, r4, #3
 800b9e8:	42a0      	cmp	r0, r4
 800b9ea:	d0f8      	beq.n	800b9de <sbrk_aligned+0x22>
 800b9ec:	1a21      	subs	r1, r4, r0
 800b9ee:	4628      	mov	r0, r5
 800b9f0:	f000 fe50 	bl	800c694 <_sbrk_r>
 800b9f4:	3001      	adds	r0, #1
 800b9f6:	d1f2      	bne.n	800b9de <sbrk_aligned+0x22>
 800b9f8:	e7ef      	b.n	800b9da <sbrk_aligned+0x1e>
 800b9fa:	bf00      	nop
 800b9fc:	20000714 	.word	0x20000714

0800ba00 <_malloc_r>:
 800ba00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba04:	1ccd      	adds	r5, r1, #3
 800ba06:	f025 0503 	bic.w	r5, r5, #3
 800ba0a:	3508      	adds	r5, #8
 800ba0c:	2d0c      	cmp	r5, #12
 800ba0e:	bf38      	it	cc
 800ba10:	250c      	movcc	r5, #12
 800ba12:	2d00      	cmp	r5, #0
 800ba14:	4606      	mov	r6, r0
 800ba16:	db01      	blt.n	800ba1c <_malloc_r+0x1c>
 800ba18:	42a9      	cmp	r1, r5
 800ba1a:	d904      	bls.n	800ba26 <_malloc_r+0x26>
 800ba1c:	230c      	movs	r3, #12
 800ba1e:	6033      	str	r3, [r6, #0]
 800ba20:	2000      	movs	r0, #0
 800ba22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bafc <_malloc_r+0xfc>
 800ba2a:	f000 f915 	bl	800bc58 <__malloc_lock>
 800ba2e:	f8d8 3000 	ldr.w	r3, [r8]
 800ba32:	461c      	mov	r4, r3
 800ba34:	bb44      	cbnz	r4, 800ba88 <_malloc_r+0x88>
 800ba36:	4629      	mov	r1, r5
 800ba38:	4630      	mov	r0, r6
 800ba3a:	f7ff ffbf 	bl	800b9bc <sbrk_aligned>
 800ba3e:	1c43      	adds	r3, r0, #1
 800ba40:	4604      	mov	r4, r0
 800ba42:	d158      	bne.n	800baf6 <_malloc_r+0xf6>
 800ba44:	f8d8 4000 	ldr.w	r4, [r8]
 800ba48:	4627      	mov	r7, r4
 800ba4a:	2f00      	cmp	r7, #0
 800ba4c:	d143      	bne.n	800bad6 <_malloc_r+0xd6>
 800ba4e:	2c00      	cmp	r4, #0
 800ba50:	d04b      	beq.n	800baea <_malloc_r+0xea>
 800ba52:	6823      	ldr	r3, [r4, #0]
 800ba54:	4639      	mov	r1, r7
 800ba56:	4630      	mov	r0, r6
 800ba58:	eb04 0903 	add.w	r9, r4, r3
 800ba5c:	f000 fe1a 	bl	800c694 <_sbrk_r>
 800ba60:	4581      	cmp	r9, r0
 800ba62:	d142      	bne.n	800baea <_malloc_r+0xea>
 800ba64:	6821      	ldr	r1, [r4, #0]
 800ba66:	1a6d      	subs	r5, r5, r1
 800ba68:	4629      	mov	r1, r5
 800ba6a:	4630      	mov	r0, r6
 800ba6c:	f7ff ffa6 	bl	800b9bc <sbrk_aligned>
 800ba70:	3001      	adds	r0, #1
 800ba72:	d03a      	beq.n	800baea <_malloc_r+0xea>
 800ba74:	6823      	ldr	r3, [r4, #0]
 800ba76:	442b      	add	r3, r5
 800ba78:	6023      	str	r3, [r4, #0]
 800ba7a:	f8d8 3000 	ldr.w	r3, [r8]
 800ba7e:	685a      	ldr	r2, [r3, #4]
 800ba80:	bb62      	cbnz	r2, 800badc <_malloc_r+0xdc>
 800ba82:	f8c8 7000 	str.w	r7, [r8]
 800ba86:	e00f      	b.n	800baa8 <_malloc_r+0xa8>
 800ba88:	6822      	ldr	r2, [r4, #0]
 800ba8a:	1b52      	subs	r2, r2, r5
 800ba8c:	d420      	bmi.n	800bad0 <_malloc_r+0xd0>
 800ba8e:	2a0b      	cmp	r2, #11
 800ba90:	d917      	bls.n	800bac2 <_malloc_r+0xc2>
 800ba92:	1961      	adds	r1, r4, r5
 800ba94:	42a3      	cmp	r3, r4
 800ba96:	6025      	str	r5, [r4, #0]
 800ba98:	bf18      	it	ne
 800ba9a:	6059      	strne	r1, [r3, #4]
 800ba9c:	6863      	ldr	r3, [r4, #4]
 800ba9e:	bf08      	it	eq
 800baa0:	f8c8 1000 	streq.w	r1, [r8]
 800baa4:	5162      	str	r2, [r4, r5]
 800baa6:	604b      	str	r3, [r1, #4]
 800baa8:	4630      	mov	r0, r6
 800baaa:	f000 f8db 	bl	800bc64 <__malloc_unlock>
 800baae:	f104 000b 	add.w	r0, r4, #11
 800bab2:	1d23      	adds	r3, r4, #4
 800bab4:	f020 0007 	bic.w	r0, r0, #7
 800bab8:	1ac2      	subs	r2, r0, r3
 800baba:	bf1c      	itt	ne
 800babc:	1a1b      	subne	r3, r3, r0
 800babe:	50a3      	strne	r3, [r4, r2]
 800bac0:	e7af      	b.n	800ba22 <_malloc_r+0x22>
 800bac2:	6862      	ldr	r2, [r4, #4]
 800bac4:	42a3      	cmp	r3, r4
 800bac6:	bf0c      	ite	eq
 800bac8:	f8c8 2000 	streq.w	r2, [r8]
 800bacc:	605a      	strne	r2, [r3, #4]
 800bace:	e7eb      	b.n	800baa8 <_malloc_r+0xa8>
 800bad0:	4623      	mov	r3, r4
 800bad2:	6864      	ldr	r4, [r4, #4]
 800bad4:	e7ae      	b.n	800ba34 <_malloc_r+0x34>
 800bad6:	463c      	mov	r4, r7
 800bad8:	687f      	ldr	r7, [r7, #4]
 800bada:	e7b6      	b.n	800ba4a <_malloc_r+0x4a>
 800badc:	461a      	mov	r2, r3
 800bade:	685b      	ldr	r3, [r3, #4]
 800bae0:	42a3      	cmp	r3, r4
 800bae2:	d1fb      	bne.n	800badc <_malloc_r+0xdc>
 800bae4:	2300      	movs	r3, #0
 800bae6:	6053      	str	r3, [r2, #4]
 800bae8:	e7de      	b.n	800baa8 <_malloc_r+0xa8>
 800baea:	230c      	movs	r3, #12
 800baec:	6033      	str	r3, [r6, #0]
 800baee:	4630      	mov	r0, r6
 800baf0:	f000 f8b8 	bl	800bc64 <__malloc_unlock>
 800baf4:	e794      	b.n	800ba20 <_malloc_r+0x20>
 800baf6:	6005      	str	r5, [r0, #0]
 800baf8:	e7d6      	b.n	800baa8 <_malloc_r+0xa8>
 800bafa:	bf00      	nop
 800bafc:	20000718 	.word	0x20000718

0800bb00 <__sflush_r>:
 800bb00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bb04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb08:	0716      	lsls	r6, r2, #28
 800bb0a:	4605      	mov	r5, r0
 800bb0c:	460c      	mov	r4, r1
 800bb0e:	d454      	bmi.n	800bbba <__sflush_r+0xba>
 800bb10:	684b      	ldr	r3, [r1, #4]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	dc02      	bgt.n	800bb1c <__sflush_r+0x1c>
 800bb16:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	dd48      	ble.n	800bbae <__sflush_r+0xae>
 800bb1c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bb1e:	2e00      	cmp	r6, #0
 800bb20:	d045      	beq.n	800bbae <__sflush_r+0xae>
 800bb22:	2300      	movs	r3, #0
 800bb24:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bb28:	682f      	ldr	r7, [r5, #0]
 800bb2a:	6a21      	ldr	r1, [r4, #32]
 800bb2c:	602b      	str	r3, [r5, #0]
 800bb2e:	d030      	beq.n	800bb92 <__sflush_r+0x92>
 800bb30:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bb32:	89a3      	ldrh	r3, [r4, #12]
 800bb34:	0759      	lsls	r1, r3, #29
 800bb36:	d505      	bpl.n	800bb44 <__sflush_r+0x44>
 800bb38:	6863      	ldr	r3, [r4, #4]
 800bb3a:	1ad2      	subs	r2, r2, r3
 800bb3c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bb3e:	b10b      	cbz	r3, 800bb44 <__sflush_r+0x44>
 800bb40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bb42:	1ad2      	subs	r2, r2, r3
 800bb44:	2300      	movs	r3, #0
 800bb46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bb48:	6a21      	ldr	r1, [r4, #32]
 800bb4a:	4628      	mov	r0, r5
 800bb4c:	47b0      	blx	r6
 800bb4e:	1c43      	adds	r3, r0, #1
 800bb50:	89a3      	ldrh	r3, [r4, #12]
 800bb52:	d106      	bne.n	800bb62 <__sflush_r+0x62>
 800bb54:	6829      	ldr	r1, [r5, #0]
 800bb56:	291d      	cmp	r1, #29
 800bb58:	d82b      	bhi.n	800bbb2 <__sflush_r+0xb2>
 800bb5a:	4a2a      	ldr	r2, [pc, #168]	@ (800bc04 <__sflush_r+0x104>)
 800bb5c:	410a      	asrs	r2, r1
 800bb5e:	07d6      	lsls	r6, r2, #31
 800bb60:	d427      	bmi.n	800bbb2 <__sflush_r+0xb2>
 800bb62:	2200      	movs	r2, #0
 800bb64:	6062      	str	r2, [r4, #4]
 800bb66:	04d9      	lsls	r1, r3, #19
 800bb68:	6922      	ldr	r2, [r4, #16]
 800bb6a:	6022      	str	r2, [r4, #0]
 800bb6c:	d504      	bpl.n	800bb78 <__sflush_r+0x78>
 800bb6e:	1c42      	adds	r2, r0, #1
 800bb70:	d101      	bne.n	800bb76 <__sflush_r+0x76>
 800bb72:	682b      	ldr	r3, [r5, #0]
 800bb74:	b903      	cbnz	r3, 800bb78 <__sflush_r+0x78>
 800bb76:	6560      	str	r0, [r4, #84]	@ 0x54
 800bb78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bb7a:	602f      	str	r7, [r5, #0]
 800bb7c:	b1b9      	cbz	r1, 800bbae <__sflush_r+0xae>
 800bb7e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bb82:	4299      	cmp	r1, r3
 800bb84:	d002      	beq.n	800bb8c <__sflush_r+0x8c>
 800bb86:	4628      	mov	r0, r5
 800bb88:	f000 fdd8 	bl	800c73c <_free_r>
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	6363      	str	r3, [r4, #52]	@ 0x34
 800bb90:	e00d      	b.n	800bbae <__sflush_r+0xae>
 800bb92:	2301      	movs	r3, #1
 800bb94:	4628      	mov	r0, r5
 800bb96:	47b0      	blx	r6
 800bb98:	4602      	mov	r2, r0
 800bb9a:	1c50      	adds	r0, r2, #1
 800bb9c:	d1c9      	bne.n	800bb32 <__sflush_r+0x32>
 800bb9e:	682b      	ldr	r3, [r5, #0]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d0c6      	beq.n	800bb32 <__sflush_r+0x32>
 800bba4:	2b1d      	cmp	r3, #29
 800bba6:	d001      	beq.n	800bbac <__sflush_r+0xac>
 800bba8:	2b16      	cmp	r3, #22
 800bbaa:	d11e      	bne.n	800bbea <__sflush_r+0xea>
 800bbac:	602f      	str	r7, [r5, #0]
 800bbae:	2000      	movs	r0, #0
 800bbb0:	e022      	b.n	800bbf8 <__sflush_r+0xf8>
 800bbb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbb6:	b21b      	sxth	r3, r3
 800bbb8:	e01b      	b.n	800bbf2 <__sflush_r+0xf2>
 800bbba:	690f      	ldr	r7, [r1, #16]
 800bbbc:	2f00      	cmp	r7, #0
 800bbbe:	d0f6      	beq.n	800bbae <__sflush_r+0xae>
 800bbc0:	0793      	lsls	r3, r2, #30
 800bbc2:	680e      	ldr	r6, [r1, #0]
 800bbc4:	bf08      	it	eq
 800bbc6:	694b      	ldreq	r3, [r1, #20]
 800bbc8:	600f      	str	r7, [r1, #0]
 800bbca:	bf18      	it	ne
 800bbcc:	2300      	movne	r3, #0
 800bbce:	eba6 0807 	sub.w	r8, r6, r7
 800bbd2:	608b      	str	r3, [r1, #8]
 800bbd4:	f1b8 0f00 	cmp.w	r8, #0
 800bbd8:	dde9      	ble.n	800bbae <__sflush_r+0xae>
 800bbda:	6a21      	ldr	r1, [r4, #32]
 800bbdc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bbde:	4643      	mov	r3, r8
 800bbe0:	463a      	mov	r2, r7
 800bbe2:	4628      	mov	r0, r5
 800bbe4:	47b0      	blx	r6
 800bbe6:	2800      	cmp	r0, #0
 800bbe8:	dc08      	bgt.n	800bbfc <__sflush_r+0xfc>
 800bbea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbf2:	81a3      	strh	r3, [r4, #12]
 800bbf4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bbf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbfc:	4407      	add	r7, r0
 800bbfe:	eba8 0800 	sub.w	r8, r8, r0
 800bc02:	e7e7      	b.n	800bbd4 <__sflush_r+0xd4>
 800bc04:	dfbffffe 	.word	0xdfbffffe

0800bc08 <_fflush_r>:
 800bc08:	b538      	push	{r3, r4, r5, lr}
 800bc0a:	690b      	ldr	r3, [r1, #16]
 800bc0c:	4605      	mov	r5, r0
 800bc0e:	460c      	mov	r4, r1
 800bc10:	b913      	cbnz	r3, 800bc18 <_fflush_r+0x10>
 800bc12:	2500      	movs	r5, #0
 800bc14:	4628      	mov	r0, r5
 800bc16:	bd38      	pop	{r3, r4, r5, pc}
 800bc18:	b118      	cbz	r0, 800bc22 <_fflush_r+0x1a>
 800bc1a:	6a03      	ldr	r3, [r0, #32]
 800bc1c:	b90b      	cbnz	r3, 800bc22 <_fflush_r+0x1a>
 800bc1e:	f7fe fe49 	bl	800a8b4 <__sinit>
 800bc22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d0f3      	beq.n	800bc12 <_fflush_r+0xa>
 800bc2a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bc2c:	07d0      	lsls	r0, r2, #31
 800bc2e:	d404      	bmi.n	800bc3a <_fflush_r+0x32>
 800bc30:	0599      	lsls	r1, r3, #22
 800bc32:	d402      	bmi.n	800bc3a <_fflush_r+0x32>
 800bc34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc36:	f7fe ff1a 	bl	800aa6e <__retarget_lock_acquire_recursive>
 800bc3a:	4628      	mov	r0, r5
 800bc3c:	4621      	mov	r1, r4
 800bc3e:	f7ff ff5f 	bl	800bb00 <__sflush_r>
 800bc42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bc44:	07da      	lsls	r2, r3, #31
 800bc46:	4605      	mov	r5, r0
 800bc48:	d4e4      	bmi.n	800bc14 <_fflush_r+0xc>
 800bc4a:	89a3      	ldrh	r3, [r4, #12]
 800bc4c:	059b      	lsls	r3, r3, #22
 800bc4e:	d4e1      	bmi.n	800bc14 <_fflush_r+0xc>
 800bc50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc52:	f7fe ff0d 	bl	800aa70 <__retarget_lock_release_recursive>
 800bc56:	e7dd      	b.n	800bc14 <_fflush_r+0xc>

0800bc58 <__malloc_lock>:
 800bc58:	4801      	ldr	r0, [pc, #4]	@ (800bc60 <__malloc_lock+0x8>)
 800bc5a:	f7fe bf08 	b.w	800aa6e <__retarget_lock_acquire_recursive>
 800bc5e:	bf00      	nop
 800bc60:	20000710 	.word	0x20000710

0800bc64 <__malloc_unlock>:
 800bc64:	4801      	ldr	r0, [pc, #4]	@ (800bc6c <__malloc_unlock+0x8>)
 800bc66:	f7fe bf03 	b.w	800aa70 <__retarget_lock_release_recursive>
 800bc6a:	bf00      	nop
 800bc6c:	20000710 	.word	0x20000710

0800bc70 <_Balloc>:
 800bc70:	b570      	push	{r4, r5, r6, lr}
 800bc72:	69c6      	ldr	r6, [r0, #28]
 800bc74:	4604      	mov	r4, r0
 800bc76:	460d      	mov	r5, r1
 800bc78:	b976      	cbnz	r6, 800bc98 <_Balloc+0x28>
 800bc7a:	2010      	movs	r0, #16
 800bc7c:	f7ff fe96 	bl	800b9ac <malloc>
 800bc80:	4602      	mov	r2, r0
 800bc82:	61e0      	str	r0, [r4, #28]
 800bc84:	b920      	cbnz	r0, 800bc90 <_Balloc+0x20>
 800bc86:	4b18      	ldr	r3, [pc, #96]	@ (800bce8 <_Balloc+0x78>)
 800bc88:	4818      	ldr	r0, [pc, #96]	@ (800bcec <_Balloc+0x7c>)
 800bc8a:	216b      	movs	r1, #107	@ 0x6b
 800bc8c:	f000 fd24 	bl	800c6d8 <__assert_func>
 800bc90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc94:	6006      	str	r6, [r0, #0]
 800bc96:	60c6      	str	r6, [r0, #12]
 800bc98:	69e6      	ldr	r6, [r4, #28]
 800bc9a:	68f3      	ldr	r3, [r6, #12]
 800bc9c:	b183      	cbz	r3, 800bcc0 <_Balloc+0x50>
 800bc9e:	69e3      	ldr	r3, [r4, #28]
 800bca0:	68db      	ldr	r3, [r3, #12]
 800bca2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bca6:	b9b8      	cbnz	r0, 800bcd8 <_Balloc+0x68>
 800bca8:	2101      	movs	r1, #1
 800bcaa:	fa01 f605 	lsl.w	r6, r1, r5
 800bcae:	1d72      	adds	r2, r6, #5
 800bcb0:	0092      	lsls	r2, r2, #2
 800bcb2:	4620      	mov	r0, r4
 800bcb4:	f000 fd2e 	bl	800c714 <_calloc_r>
 800bcb8:	b160      	cbz	r0, 800bcd4 <_Balloc+0x64>
 800bcba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bcbe:	e00e      	b.n	800bcde <_Balloc+0x6e>
 800bcc0:	2221      	movs	r2, #33	@ 0x21
 800bcc2:	2104      	movs	r1, #4
 800bcc4:	4620      	mov	r0, r4
 800bcc6:	f000 fd25 	bl	800c714 <_calloc_r>
 800bcca:	69e3      	ldr	r3, [r4, #28]
 800bccc:	60f0      	str	r0, [r6, #12]
 800bcce:	68db      	ldr	r3, [r3, #12]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d1e4      	bne.n	800bc9e <_Balloc+0x2e>
 800bcd4:	2000      	movs	r0, #0
 800bcd6:	bd70      	pop	{r4, r5, r6, pc}
 800bcd8:	6802      	ldr	r2, [r0, #0]
 800bcda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bcde:	2300      	movs	r3, #0
 800bce0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bce4:	e7f7      	b.n	800bcd6 <_Balloc+0x66>
 800bce6:	bf00      	nop
 800bce8:	0800ccad 	.word	0x0800ccad
 800bcec:	0800cd3e 	.word	0x0800cd3e

0800bcf0 <_Bfree>:
 800bcf0:	b570      	push	{r4, r5, r6, lr}
 800bcf2:	69c6      	ldr	r6, [r0, #28]
 800bcf4:	4605      	mov	r5, r0
 800bcf6:	460c      	mov	r4, r1
 800bcf8:	b976      	cbnz	r6, 800bd18 <_Bfree+0x28>
 800bcfa:	2010      	movs	r0, #16
 800bcfc:	f7ff fe56 	bl	800b9ac <malloc>
 800bd00:	4602      	mov	r2, r0
 800bd02:	61e8      	str	r0, [r5, #28]
 800bd04:	b920      	cbnz	r0, 800bd10 <_Bfree+0x20>
 800bd06:	4b09      	ldr	r3, [pc, #36]	@ (800bd2c <_Bfree+0x3c>)
 800bd08:	4809      	ldr	r0, [pc, #36]	@ (800bd30 <_Bfree+0x40>)
 800bd0a:	218f      	movs	r1, #143	@ 0x8f
 800bd0c:	f000 fce4 	bl	800c6d8 <__assert_func>
 800bd10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd14:	6006      	str	r6, [r0, #0]
 800bd16:	60c6      	str	r6, [r0, #12]
 800bd18:	b13c      	cbz	r4, 800bd2a <_Bfree+0x3a>
 800bd1a:	69eb      	ldr	r3, [r5, #28]
 800bd1c:	6862      	ldr	r2, [r4, #4]
 800bd1e:	68db      	ldr	r3, [r3, #12]
 800bd20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bd24:	6021      	str	r1, [r4, #0]
 800bd26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bd2a:	bd70      	pop	{r4, r5, r6, pc}
 800bd2c:	0800ccad 	.word	0x0800ccad
 800bd30:	0800cd3e 	.word	0x0800cd3e

0800bd34 <__multadd>:
 800bd34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd38:	690d      	ldr	r5, [r1, #16]
 800bd3a:	4607      	mov	r7, r0
 800bd3c:	460c      	mov	r4, r1
 800bd3e:	461e      	mov	r6, r3
 800bd40:	f101 0c14 	add.w	ip, r1, #20
 800bd44:	2000      	movs	r0, #0
 800bd46:	f8dc 3000 	ldr.w	r3, [ip]
 800bd4a:	b299      	uxth	r1, r3
 800bd4c:	fb02 6101 	mla	r1, r2, r1, r6
 800bd50:	0c1e      	lsrs	r6, r3, #16
 800bd52:	0c0b      	lsrs	r3, r1, #16
 800bd54:	fb02 3306 	mla	r3, r2, r6, r3
 800bd58:	b289      	uxth	r1, r1
 800bd5a:	3001      	adds	r0, #1
 800bd5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bd60:	4285      	cmp	r5, r0
 800bd62:	f84c 1b04 	str.w	r1, [ip], #4
 800bd66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bd6a:	dcec      	bgt.n	800bd46 <__multadd+0x12>
 800bd6c:	b30e      	cbz	r6, 800bdb2 <__multadd+0x7e>
 800bd6e:	68a3      	ldr	r3, [r4, #8]
 800bd70:	42ab      	cmp	r3, r5
 800bd72:	dc19      	bgt.n	800bda8 <__multadd+0x74>
 800bd74:	6861      	ldr	r1, [r4, #4]
 800bd76:	4638      	mov	r0, r7
 800bd78:	3101      	adds	r1, #1
 800bd7a:	f7ff ff79 	bl	800bc70 <_Balloc>
 800bd7e:	4680      	mov	r8, r0
 800bd80:	b928      	cbnz	r0, 800bd8e <__multadd+0x5a>
 800bd82:	4602      	mov	r2, r0
 800bd84:	4b0c      	ldr	r3, [pc, #48]	@ (800bdb8 <__multadd+0x84>)
 800bd86:	480d      	ldr	r0, [pc, #52]	@ (800bdbc <__multadd+0x88>)
 800bd88:	21ba      	movs	r1, #186	@ 0xba
 800bd8a:	f000 fca5 	bl	800c6d8 <__assert_func>
 800bd8e:	6922      	ldr	r2, [r4, #16]
 800bd90:	3202      	adds	r2, #2
 800bd92:	f104 010c 	add.w	r1, r4, #12
 800bd96:	0092      	lsls	r2, r2, #2
 800bd98:	300c      	adds	r0, #12
 800bd9a:	f7fe fe6a 	bl	800aa72 <memcpy>
 800bd9e:	4621      	mov	r1, r4
 800bda0:	4638      	mov	r0, r7
 800bda2:	f7ff ffa5 	bl	800bcf0 <_Bfree>
 800bda6:	4644      	mov	r4, r8
 800bda8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bdac:	3501      	adds	r5, #1
 800bdae:	615e      	str	r6, [r3, #20]
 800bdb0:	6125      	str	r5, [r4, #16]
 800bdb2:	4620      	mov	r0, r4
 800bdb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdb8:	0800cd1c 	.word	0x0800cd1c
 800bdbc:	0800cd3e 	.word	0x0800cd3e

0800bdc0 <__hi0bits>:
 800bdc0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	bf36      	itet	cc
 800bdc8:	0403      	lslcc	r3, r0, #16
 800bdca:	2000      	movcs	r0, #0
 800bdcc:	2010      	movcc	r0, #16
 800bdce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bdd2:	bf3c      	itt	cc
 800bdd4:	021b      	lslcc	r3, r3, #8
 800bdd6:	3008      	addcc	r0, #8
 800bdd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bddc:	bf3c      	itt	cc
 800bdde:	011b      	lslcc	r3, r3, #4
 800bde0:	3004      	addcc	r0, #4
 800bde2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bde6:	bf3c      	itt	cc
 800bde8:	009b      	lslcc	r3, r3, #2
 800bdea:	3002      	addcc	r0, #2
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	db05      	blt.n	800bdfc <__hi0bits+0x3c>
 800bdf0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bdf4:	f100 0001 	add.w	r0, r0, #1
 800bdf8:	bf08      	it	eq
 800bdfa:	2020      	moveq	r0, #32
 800bdfc:	4770      	bx	lr

0800bdfe <__lo0bits>:
 800bdfe:	6803      	ldr	r3, [r0, #0]
 800be00:	4602      	mov	r2, r0
 800be02:	f013 0007 	ands.w	r0, r3, #7
 800be06:	d00b      	beq.n	800be20 <__lo0bits+0x22>
 800be08:	07d9      	lsls	r1, r3, #31
 800be0a:	d421      	bmi.n	800be50 <__lo0bits+0x52>
 800be0c:	0798      	lsls	r0, r3, #30
 800be0e:	bf49      	itett	mi
 800be10:	085b      	lsrmi	r3, r3, #1
 800be12:	089b      	lsrpl	r3, r3, #2
 800be14:	2001      	movmi	r0, #1
 800be16:	6013      	strmi	r3, [r2, #0]
 800be18:	bf5c      	itt	pl
 800be1a:	6013      	strpl	r3, [r2, #0]
 800be1c:	2002      	movpl	r0, #2
 800be1e:	4770      	bx	lr
 800be20:	b299      	uxth	r1, r3
 800be22:	b909      	cbnz	r1, 800be28 <__lo0bits+0x2a>
 800be24:	0c1b      	lsrs	r3, r3, #16
 800be26:	2010      	movs	r0, #16
 800be28:	b2d9      	uxtb	r1, r3
 800be2a:	b909      	cbnz	r1, 800be30 <__lo0bits+0x32>
 800be2c:	3008      	adds	r0, #8
 800be2e:	0a1b      	lsrs	r3, r3, #8
 800be30:	0719      	lsls	r1, r3, #28
 800be32:	bf04      	itt	eq
 800be34:	091b      	lsreq	r3, r3, #4
 800be36:	3004      	addeq	r0, #4
 800be38:	0799      	lsls	r1, r3, #30
 800be3a:	bf04      	itt	eq
 800be3c:	089b      	lsreq	r3, r3, #2
 800be3e:	3002      	addeq	r0, #2
 800be40:	07d9      	lsls	r1, r3, #31
 800be42:	d403      	bmi.n	800be4c <__lo0bits+0x4e>
 800be44:	085b      	lsrs	r3, r3, #1
 800be46:	f100 0001 	add.w	r0, r0, #1
 800be4a:	d003      	beq.n	800be54 <__lo0bits+0x56>
 800be4c:	6013      	str	r3, [r2, #0]
 800be4e:	4770      	bx	lr
 800be50:	2000      	movs	r0, #0
 800be52:	4770      	bx	lr
 800be54:	2020      	movs	r0, #32
 800be56:	4770      	bx	lr

0800be58 <__i2b>:
 800be58:	b510      	push	{r4, lr}
 800be5a:	460c      	mov	r4, r1
 800be5c:	2101      	movs	r1, #1
 800be5e:	f7ff ff07 	bl	800bc70 <_Balloc>
 800be62:	4602      	mov	r2, r0
 800be64:	b928      	cbnz	r0, 800be72 <__i2b+0x1a>
 800be66:	4b05      	ldr	r3, [pc, #20]	@ (800be7c <__i2b+0x24>)
 800be68:	4805      	ldr	r0, [pc, #20]	@ (800be80 <__i2b+0x28>)
 800be6a:	f240 1145 	movw	r1, #325	@ 0x145
 800be6e:	f000 fc33 	bl	800c6d8 <__assert_func>
 800be72:	2301      	movs	r3, #1
 800be74:	6144      	str	r4, [r0, #20]
 800be76:	6103      	str	r3, [r0, #16]
 800be78:	bd10      	pop	{r4, pc}
 800be7a:	bf00      	nop
 800be7c:	0800cd1c 	.word	0x0800cd1c
 800be80:	0800cd3e 	.word	0x0800cd3e

0800be84 <__multiply>:
 800be84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be88:	4614      	mov	r4, r2
 800be8a:	690a      	ldr	r2, [r1, #16]
 800be8c:	6923      	ldr	r3, [r4, #16]
 800be8e:	429a      	cmp	r2, r3
 800be90:	bfa8      	it	ge
 800be92:	4623      	movge	r3, r4
 800be94:	460f      	mov	r7, r1
 800be96:	bfa4      	itt	ge
 800be98:	460c      	movge	r4, r1
 800be9a:	461f      	movge	r7, r3
 800be9c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800bea0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800bea4:	68a3      	ldr	r3, [r4, #8]
 800bea6:	6861      	ldr	r1, [r4, #4]
 800bea8:	eb0a 0609 	add.w	r6, sl, r9
 800beac:	42b3      	cmp	r3, r6
 800beae:	b085      	sub	sp, #20
 800beb0:	bfb8      	it	lt
 800beb2:	3101      	addlt	r1, #1
 800beb4:	f7ff fedc 	bl	800bc70 <_Balloc>
 800beb8:	b930      	cbnz	r0, 800bec8 <__multiply+0x44>
 800beba:	4602      	mov	r2, r0
 800bebc:	4b44      	ldr	r3, [pc, #272]	@ (800bfd0 <__multiply+0x14c>)
 800bebe:	4845      	ldr	r0, [pc, #276]	@ (800bfd4 <__multiply+0x150>)
 800bec0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bec4:	f000 fc08 	bl	800c6d8 <__assert_func>
 800bec8:	f100 0514 	add.w	r5, r0, #20
 800becc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bed0:	462b      	mov	r3, r5
 800bed2:	2200      	movs	r2, #0
 800bed4:	4543      	cmp	r3, r8
 800bed6:	d321      	bcc.n	800bf1c <__multiply+0x98>
 800bed8:	f107 0114 	add.w	r1, r7, #20
 800bedc:	f104 0214 	add.w	r2, r4, #20
 800bee0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800bee4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800bee8:	9302      	str	r3, [sp, #8]
 800beea:	1b13      	subs	r3, r2, r4
 800beec:	3b15      	subs	r3, #21
 800beee:	f023 0303 	bic.w	r3, r3, #3
 800bef2:	3304      	adds	r3, #4
 800bef4:	f104 0715 	add.w	r7, r4, #21
 800bef8:	42ba      	cmp	r2, r7
 800befa:	bf38      	it	cc
 800befc:	2304      	movcc	r3, #4
 800befe:	9301      	str	r3, [sp, #4]
 800bf00:	9b02      	ldr	r3, [sp, #8]
 800bf02:	9103      	str	r1, [sp, #12]
 800bf04:	428b      	cmp	r3, r1
 800bf06:	d80c      	bhi.n	800bf22 <__multiply+0x9e>
 800bf08:	2e00      	cmp	r6, #0
 800bf0a:	dd03      	ble.n	800bf14 <__multiply+0x90>
 800bf0c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d05b      	beq.n	800bfcc <__multiply+0x148>
 800bf14:	6106      	str	r6, [r0, #16]
 800bf16:	b005      	add	sp, #20
 800bf18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf1c:	f843 2b04 	str.w	r2, [r3], #4
 800bf20:	e7d8      	b.n	800bed4 <__multiply+0x50>
 800bf22:	f8b1 a000 	ldrh.w	sl, [r1]
 800bf26:	f1ba 0f00 	cmp.w	sl, #0
 800bf2a:	d024      	beq.n	800bf76 <__multiply+0xf2>
 800bf2c:	f104 0e14 	add.w	lr, r4, #20
 800bf30:	46a9      	mov	r9, r5
 800bf32:	f04f 0c00 	mov.w	ip, #0
 800bf36:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bf3a:	f8d9 3000 	ldr.w	r3, [r9]
 800bf3e:	fa1f fb87 	uxth.w	fp, r7
 800bf42:	b29b      	uxth	r3, r3
 800bf44:	fb0a 330b 	mla	r3, sl, fp, r3
 800bf48:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800bf4c:	f8d9 7000 	ldr.w	r7, [r9]
 800bf50:	4463      	add	r3, ip
 800bf52:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bf56:	fb0a c70b 	mla	r7, sl, fp, ip
 800bf5a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bf5e:	b29b      	uxth	r3, r3
 800bf60:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bf64:	4572      	cmp	r2, lr
 800bf66:	f849 3b04 	str.w	r3, [r9], #4
 800bf6a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bf6e:	d8e2      	bhi.n	800bf36 <__multiply+0xb2>
 800bf70:	9b01      	ldr	r3, [sp, #4]
 800bf72:	f845 c003 	str.w	ip, [r5, r3]
 800bf76:	9b03      	ldr	r3, [sp, #12]
 800bf78:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bf7c:	3104      	adds	r1, #4
 800bf7e:	f1b9 0f00 	cmp.w	r9, #0
 800bf82:	d021      	beq.n	800bfc8 <__multiply+0x144>
 800bf84:	682b      	ldr	r3, [r5, #0]
 800bf86:	f104 0c14 	add.w	ip, r4, #20
 800bf8a:	46ae      	mov	lr, r5
 800bf8c:	f04f 0a00 	mov.w	sl, #0
 800bf90:	f8bc b000 	ldrh.w	fp, [ip]
 800bf94:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bf98:	fb09 770b 	mla	r7, r9, fp, r7
 800bf9c:	4457      	add	r7, sl
 800bf9e:	b29b      	uxth	r3, r3
 800bfa0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bfa4:	f84e 3b04 	str.w	r3, [lr], #4
 800bfa8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bfac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bfb0:	f8be 3000 	ldrh.w	r3, [lr]
 800bfb4:	fb09 330a 	mla	r3, r9, sl, r3
 800bfb8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bfbc:	4562      	cmp	r2, ip
 800bfbe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bfc2:	d8e5      	bhi.n	800bf90 <__multiply+0x10c>
 800bfc4:	9f01      	ldr	r7, [sp, #4]
 800bfc6:	51eb      	str	r3, [r5, r7]
 800bfc8:	3504      	adds	r5, #4
 800bfca:	e799      	b.n	800bf00 <__multiply+0x7c>
 800bfcc:	3e01      	subs	r6, #1
 800bfce:	e79b      	b.n	800bf08 <__multiply+0x84>
 800bfd0:	0800cd1c 	.word	0x0800cd1c
 800bfd4:	0800cd3e 	.word	0x0800cd3e

0800bfd8 <__pow5mult>:
 800bfd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfdc:	4615      	mov	r5, r2
 800bfde:	f012 0203 	ands.w	r2, r2, #3
 800bfe2:	4607      	mov	r7, r0
 800bfe4:	460e      	mov	r6, r1
 800bfe6:	d007      	beq.n	800bff8 <__pow5mult+0x20>
 800bfe8:	4c25      	ldr	r4, [pc, #148]	@ (800c080 <__pow5mult+0xa8>)
 800bfea:	3a01      	subs	r2, #1
 800bfec:	2300      	movs	r3, #0
 800bfee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bff2:	f7ff fe9f 	bl	800bd34 <__multadd>
 800bff6:	4606      	mov	r6, r0
 800bff8:	10ad      	asrs	r5, r5, #2
 800bffa:	d03d      	beq.n	800c078 <__pow5mult+0xa0>
 800bffc:	69fc      	ldr	r4, [r7, #28]
 800bffe:	b97c      	cbnz	r4, 800c020 <__pow5mult+0x48>
 800c000:	2010      	movs	r0, #16
 800c002:	f7ff fcd3 	bl	800b9ac <malloc>
 800c006:	4602      	mov	r2, r0
 800c008:	61f8      	str	r0, [r7, #28]
 800c00a:	b928      	cbnz	r0, 800c018 <__pow5mult+0x40>
 800c00c:	4b1d      	ldr	r3, [pc, #116]	@ (800c084 <__pow5mult+0xac>)
 800c00e:	481e      	ldr	r0, [pc, #120]	@ (800c088 <__pow5mult+0xb0>)
 800c010:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c014:	f000 fb60 	bl	800c6d8 <__assert_func>
 800c018:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c01c:	6004      	str	r4, [r0, #0]
 800c01e:	60c4      	str	r4, [r0, #12]
 800c020:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c024:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c028:	b94c      	cbnz	r4, 800c03e <__pow5mult+0x66>
 800c02a:	f240 2171 	movw	r1, #625	@ 0x271
 800c02e:	4638      	mov	r0, r7
 800c030:	f7ff ff12 	bl	800be58 <__i2b>
 800c034:	2300      	movs	r3, #0
 800c036:	f8c8 0008 	str.w	r0, [r8, #8]
 800c03a:	4604      	mov	r4, r0
 800c03c:	6003      	str	r3, [r0, #0]
 800c03e:	f04f 0900 	mov.w	r9, #0
 800c042:	07eb      	lsls	r3, r5, #31
 800c044:	d50a      	bpl.n	800c05c <__pow5mult+0x84>
 800c046:	4631      	mov	r1, r6
 800c048:	4622      	mov	r2, r4
 800c04a:	4638      	mov	r0, r7
 800c04c:	f7ff ff1a 	bl	800be84 <__multiply>
 800c050:	4631      	mov	r1, r6
 800c052:	4680      	mov	r8, r0
 800c054:	4638      	mov	r0, r7
 800c056:	f7ff fe4b 	bl	800bcf0 <_Bfree>
 800c05a:	4646      	mov	r6, r8
 800c05c:	106d      	asrs	r5, r5, #1
 800c05e:	d00b      	beq.n	800c078 <__pow5mult+0xa0>
 800c060:	6820      	ldr	r0, [r4, #0]
 800c062:	b938      	cbnz	r0, 800c074 <__pow5mult+0x9c>
 800c064:	4622      	mov	r2, r4
 800c066:	4621      	mov	r1, r4
 800c068:	4638      	mov	r0, r7
 800c06a:	f7ff ff0b 	bl	800be84 <__multiply>
 800c06e:	6020      	str	r0, [r4, #0]
 800c070:	f8c0 9000 	str.w	r9, [r0]
 800c074:	4604      	mov	r4, r0
 800c076:	e7e4      	b.n	800c042 <__pow5mult+0x6a>
 800c078:	4630      	mov	r0, r6
 800c07a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c07e:	bf00      	nop
 800c080:	0800cd98 	.word	0x0800cd98
 800c084:	0800ccad 	.word	0x0800ccad
 800c088:	0800cd3e 	.word	0x0800cd3e

0800c08c <__lshift>:
 800c08c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c090:	460c      	mov	r4, r1
 800c092:	6849      	ldr	r1, [r1, #4]
 800c094:	6923      	ldr	r3, [r4, #16]
 800c096:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c09a:	68a3      	ldr	r3, [r4, #8]
 800c09c:	4607      	mov	r7, r0
 800c09e:	4691      	mov	r9, r2
 800c0a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c0a4:	f108 0601 	add.w	r6, r8, #1
 800c0a8:	42b3      	cmp	r3, r6
 800c0aa:	db0b      	blt.n	800c0c4 <__lshift+0x38>
 800c0ac:	4638      	mov	r0, r7
 800c0ae:	f7ff fddf 	bl	800bc70 <_Balloc>
 800c0b2:	4605      	mov	r5, r0
 800c0b4:	b948      	cbnz	r0, 800c0ca <__lshift+0x3e>
 800c0b6:	4602      	mov	r2, r0
 800c0b8:	4b28      	ldr	r3, [pc, #160]	@ (800c15c <__lshift+0xd0>)
 800c0ba:	4829      	ldr	r0, [pc, #164]	@ (800c160 <__lshift+0xd4>)
 800c0bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c0c0:	f000 fb0a 	bl	800c6d8 <__assert_func>
 800c0c4:	3101      	adds	r1, #1
 800c0c6:	005b      	lsls	r3, r3, #1
 800c0c8:	e7ee      	b.n	800c0a8 <__lshift+0x1c>
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	f100 0114 	add.w	r1, r0, #20
 800c0d0:	f100 0210 	add.w	r2, r0, #16
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	4553      	cmp	r3, sl
 800c0d8:	db33      	blt.n	800c142 <__lshift+0xb6>
 800c0da:	6920      	ldr	r0, [r4, #16]
 800c0dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c0e0:	f104 0314 	add.w	r3, r4, #20
 800c0e4:	f019 091f 	ands.w	r9, r9, #31
 800c0e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c0ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c0f0:	d02b      	beq.n	800c14a <__lshift+0xbe>
 800c0f2:	f1c9 0e20 	rsb	lr, r9, #32
 800c0f6:	468a      	mov	sl, r1
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	6818      	ldr	r0, [r3, #0]
 800c0fc:	fa00 f009 	lsl.w	r0, r0, r9
 800c100:	4310      	orrs	r0, r2
 800c102:	f84a 0b04 	str.w	r0, [sl], #4
 800c106:	f853 2b04 	ldr.w	r2, [r3], #4
 800c10a:	459c      	cmp	ip, r3
 800c10c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c110:	d8f3      	bhi.n	800c0fa <__lshift+0x6e>
 800c112:	ebac 0304 	sub.w	r3, ip, r4
 800c116:	3b15      	subs	r3, #21
 800c118:	f023 0303 	bic.w	r3, r3, #3
 800c11c:	3304      	adds	r3, #4
 800c11e:	f104 0015 	add.w	r0, r4, #21
 800c122:	4584      	cmp	ip, r0
 800c124:	bf38      	it	cc
 800c126:	2304      	movcc	r3, #4
 800c128:	50ca      	str	r2, [r1, r3]
 800c12a:	b10a      	cbz	r2, 800c130 <__lshift+0xa4>
 800c12c:	f108 0602 	add.w	r6, r8, #2
 800c130:	3e01      	subs	r6, #1
 800c132:	4638      	mov	r0, r7
 800c134:	612e      	str	r6, [r5, #16]
 800c136:	4621      	mov	r1, r4
 800c138:	f7ff fdda 	bl	800bcf0 <_Bfree>
 800c13c:	4628      	mov	r0, r5
 800c13e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c142:	f842 0f04 	str.w	r0, [r2, #4]!
 800c146:	3301      	adds	r3, #1
 800c148:	e7c5      	b.n	800c0d6 <__lshift+0x4a>
 800c14a:	3904      	subs	r1, #4
 800c14c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c150:	f841 2f04 	str.w	r2, [r1, #4]!
 800c154:	459c      	cmp	ip, r3
 800c156:	d8f9      	bhi.n	800c14c <__lshift+0xc0>
 800c158:	e7ea      	b.n	800c130 <__lshift+0xa4>
 800c15a:	bf00      	nop
 800c15c:	0800cd1c 	.word	0x0800cd1c
 800c160:	0800cd3e 	.word	0x0800cd3e

0800c164 <__mcmp>:
 800c164:	690a      	ldr	r2, [r1, #16]
 800c166:	4603      	mov	r3, r0
 800c168:	6900      	ldr	r0, [r0, #16]
 800c16a:	1a80      	subs	r0, r0, r2
 800c16c:	b530      	push	{r4, r5, lr}
 800c16e:	d10e      	bne.n	800c18e <__mcmp+0x2a>
 800c170:	3314      	adds	r3, #20
 800c172:	3114      	adds	r1, #20
 800c174:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c178:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c17c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c180:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c184:	4295      	cmp	r5, r2
 800c186:	d003      	beq.n	800c190 <__mcmp+0x2c>
 800c188:	d205      	bcs.n	800c196 <__mcmp+0x32>
 800c18a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c18e:	bd30      	pop	{r4, r5, pc}
 800c190:	42a3      	cmp	r3, r4
 800c192:	d3f3      	bcc.n	800c17c <__mcmp+0x18>
 800c194:	e7fb      	b.n	800c18e <__mcmp+0x2a>
 800c196:	2001      	movs	r0, #1
 800c198:	e7f9      	b.n	800c18e <__mcmp+0x2a>
	...

0800c19c <__mdiff>:
 800c19c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1a0:	4689      	mov	r9, r1
 800c1a2:	4606      	mov	r6, r0
 800c1a4:	4611      	mov	r1, r2
 800c1a6:	4648      	mov	r0, r9
 800c1a8:	4614      	mov	r4, r2
 800c1aa:	f7ff ffdb 	bl	800c164 <__mcmp>
 800c1ae:	1e05      	subs	r5, r0, #0
 800c1b0:	d112      	bne.n	800c1d8 <__mdiff+0x3c>
 800c1b2:	4629      	mov	r1, r5
 800c1b4:	4630      	mov	r0, r6
 800c1b6:	f7ff fd5b 	bl	800bc70 <_Balloc>
 800c1ba:	4602      	mov	r2, r0
 800c1bc:	b928      	cbnz	r0, 800c1ca <__mdiff+0x2e>
 800c1be:	4b3f      	ldr	r3, [pc, #252]	@ (800c2bc <__mdiff+0x120>)
 800c1c0:	f240 2137 	movw	r1, #567	@ 0x237
 800c1c4:	483e      	ldr	r0, [pc, #248]	@ (800c2c0 <__mdiff+0x124>)
 800c1c6:	f000 fa87 	bl	800c6d8 <__assert_func>
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c1d0:	4610      	mov	r0, r2
 800c1d2:	b003      	add	sp, #12
 800c1d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1d8:	bfbc      	itt	lt
 800c1da:	464b      	movlt	r3, r9
 800c1dc:	46a1      	movlt	r9, r4
 800c1de:	4630      	mov	r0, r6
 800c1e0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c1e4:	bfba      	itte	lt
 800c1e6:	461c      	movlt	r4, r3
 800c1e8:	2501      	movlt	r5, #1
 800c1ea:	2500      	movge	r5, #0
 800c1ec:	f7ff fd40 	bl	800bc70 <_Balloc>
 800c1f0:	4602      	mov	r2, r0
 800c1f2:	b918      	cbnz	r0, 800c1fc <__mdiff+0x60>
 800c1f4:	4b31      	ldr	r3, [pc, #196]	@ (800c2bc <__mdiff+0x120>)
 800c1f6:	f240 2145 	movw	r1, #581	@ 0x245
 800c1fa:	e7e3      	b.n	800c1c4 <__mdiff+0x28>
 800c1fc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c200:	6926      	ldr	r6, [r4, #16]
 800c202:	60c5      	str	r5, [r0, #12]
 800c204:	f109 0310 	add.w	r3, r9, #16
 800c208:	f109 0514 	add.w	r5, r9, #20
 800c20c:	f104 0e14 	add.w	lr, r4, #20
 800c210:	f100 0b14 	add.w	fp, r0, #20
 800c214:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c218:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c21c:	9301      	str	r3, [sp, #4]
 800c21e:	46d9      	mov	r9, fp
 800c220:	f04f 0c00 	mov.w	ip, #0
 800c224:	9b01      	ldr	r3, [sp, #4]
 800c226:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c22a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c22e:	9301      	str	r3, [sp, #4]
 800c230:	fa1f f38a 	uxth.w	r3, sl
 800c234:	4619      	mov	r1, r3
 800c236:	b283      	uxth	r3, r0
 800c238:	1acb      	subs	r3, r1, r3
 800c23a:	0c00      	lsrs	r0, r0, #16
 800c23c:	4463      	add	r3, ip
 800c23e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c242:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c246:	b29b      	uxth	r3, r3
 800c248:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c24c:	4576      	cmp	r6, lr
 800c24e:	f849 3b04 	str.w	r3, [r9], #4
 800c252:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c256:	d8e5      	bhi.n	800c224 <__mdiff+0x88>
 800c258:	1b33      	subs	r3, r6, r4
 800c25a:	3b15      	subs	r3, #21
 800c25c:	f023 0303 	bic.w	r3, r3, #3
 800c260:	3415      	adds	r4, #21
 800c262:	3304      	adds	r3, #4
 800c264:	42a6      	cmp	r6, r4
 800c266:	bf38      	it	cc
 800c268:	2304      	movcc	r3, #4
 800c26a:	441d      	add	r5, r3
 800c26c:	445b      	add	r3, fp
 800c26e:	461e      	mov	r6, r3
 800c270:	462c      	mov	r4, r5
 800c272:	4544      	cmp	r4, r8
 800c274:	d30e      	bcc.n	800c294 <__mdiff+0xf8>
 800c276:	f108 0103 	add.w	r1, r8, #3
 800c27a:	1b49      	subs	r1, r1, r5
 800c27c:	f021 0103 	bic.w	r1, r1, #3
 800c280:	3d03      	subs	r5, #3
 800c282:	45a8      	cmp	r8, r5
 800c284:	bf38      	it	cc
 800c286:	2100      	movcc	r1, #0
 800c288:	440b      	add	r3, r1
 800c28a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c28e:	b191      	cbz	r1, 800c2b6 <__mdiff+0x11a>
 800c290:	6117      	str	r7, [r2, #16]
 800c292:	e79d      	b.n	800c1d0 <__mdiff+0x34>
 800c294:	f854 1b04 	ldr.w	r1, [r4], #4
 800c298:	46e6      	mov	lr, ip
 800c29a:	0c08      	lsrs	r0, r1, #16
 800c29c:	fa1c fc81 	uxtah	ip, ip, r1
 800c2a0:	4471      	add	r1, lr
 800c2a2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c2a6:	b289      	uxth	r1, r1
 800c2a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c2ac:	f846 1b04 	str.w	r1, [r6], #4
 800c2b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c2b4:	e7dd      	b.n	800c272 <__mdiff+0xd6>
 800c2b6:	3f01      	subs	r7, #1
 800c2b8:	e7e7      	b.n	800c28a <__mdiff+0xee>
 800c2ba:	bf00      	nop
 800c2bc:	0800cd1c 	.word	0x0800cd1c
 800c2c0:	0800cd3e 	.word	0x0800cd3e

0800c2c4 <__d2b>:
 800c2c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c2c8:	460f      	mov	r7, r1
 800c2ca:	2101      	movs	r1, #1
 800c2cc:	ec59 8b10 	vmov	r8, r9, d0
 800c2d0:	4616      	mov	r6, r2
 800c2d2:	f7ff fccd 	bl	800bc70 <_Balloc>
 800c2d6:	4604      	mov	r4, r0
 800c2d8:	b930      	cbnz	r0, 800c2e8 <__d2b+0x24>
 800c2da:	4602      	mov	r2, r0
 800c2dc:	4b23      	ldr	r3, [pc, #140]	@ (800c36c <__d2b+0xa8>)
 800c2de:	4824      	ldr	r0, [pc, #144]	@ (800c370 <__d2b+0xac>)
 800c2e0:	f240 310f 	movw	r1, #783	@ 0x30f
 800c2e4:	f000 f9f8 	bl	800c6d8 <__assert_func>
 800c2e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c2ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c2f0:	b10d      	cbz	r5, 800c2f6 <__d2b+0x32>
 800c2f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c2f6:	9301      	str	r3, [sp, #4]
 800c2f8:	f1b8 0300 	subs.w	r3, r8, #0
 800c2fc:	d023      	beq.n	800c346 <__d2b+0x82>
 800c2fe:	4668      	mov	r0, sp
 800c300:	9300      	str	r3, [sp, #0]
 800c302:	f7ff fd7c 	bl	800bdfe <__lo0bits>
 800c306:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c30a:	b1d0      	cbz	r0, 800c342 <__d2b+0x7e>
 800c30c:	f1c0 0320 	rsb	r3, r0, #32
 800c310:	fa02 f303 	lsl.w	r3, r2, r3
 800c314:	430b      	orrs	r3, r1
 800c316:	40c2      	lsrs	r2, r0
 800c318:	6163      	str	r3, [r4, #20]
 800c31a:	9201      	str	r2, [sp, #4]
 800c31c:	9b01      	ldr	r3, [sp, #4]
 800c31e:	61a3      	str	r3, [r4, #24]
 800c320:	2b00      	cmp	r3, #0
 800c322:	bf0c      	ite	eq
 800c324:	2201      	moveq	r2, #1
 800c326:	2202      	movne	r2, #2
 800c328:	6122      	str	r2, [r4, #16]
 800c32a:	b1a5      	cbz	r5, 800c356 <__d2b+0x92>
 800c32c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c330:	4405      	add	r5, r0
 800c332:	603d      	str	r5, [r7, #0]
 800c334:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c338:	6030      	str	r0, [r6, #0]
 800c33a:	4620      	mov	r0, r4
 800c33c:	b003      	add	sp, #12
 800c33e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c342:	6161      	str	r1, [r4, #20]
 800c344:	e7ea      	b.n	800c31c <__d2b+0x58>
 800c346:	a801      	add	r0, sp, #4
 800c348:	f7ff fd59 	bl	800bdfe <__lo0bits>
 800c34c:	9b01      	ldr	r3, [sp, #4]
 800c34e:	6163      	str	r3, [r4, #20]
 800c350:	3020      	adds	r0, #32
 800c352:	2201      	movs	r2, #1
 800c354:	e7e8      	b.n	800c328 <__d2b+0x64>
 800c356:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c35a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c35e:	6038      	str	r0, [r7, #0]
 800c360:	6918      	ldr	r0, [r3, #16]
 800c362:	f7ff fd2d 	bl	800bdc0 <__hi0bits>
 800c366:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c36a:	e7e5      	b.n	800c338 <__d2b+0x74>
 800c36c:	0800cd1c 	.word	0x0800cd1c
 800c370:	0800cd3e 	.word	0x0800cd3e

0800c374 <__sread>:
 800c374:	b510      	push	{r4, lr}
 800c376:	460c      	mov	r4, r1
 800c378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c37c:	f000 f978 	bl	800c670 <_read_r>
 800c380:	2800      	cmp	r0, #0
 800c382:	bfab      	itete	ge
 800c384:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c386:	89a3      	ldrhlt	r3, [r4, #12]
 800c388:	181b      	addge	r3, r3, r0
 800c38a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c38e:	bfac      	ite	ge
 800c390:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c392:	81a3      	strhlt	r3, [r4, #12]
 800c394:	bd10      	pop	{r4, pc}

0800c396 <__swrite>:
 800c396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c39a:	461f      	mov	r7, r3
 800c39c:	898b      	ldrh	r3, [r1, #12]
 800c39e:	05db      	lsls	r3, r3, #23
 800c3a0:	4605      	mov	r5, r0
 800c3a2:	460c      	mov	r4, r1
 800c3a4:	4616      	mov	r6, r2
 800c3a6:	d505      	bpl.n	800c3b4 <__swrite+0x1e>
 800c3a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3ac:	2302      	movs	r3, #2
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	f000 f94c 	bl	800c64c <_lseek_r>
 800c3b4:	89a3      	ldrh	r3, [r4, #12]
 800c3b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c3be:	81a3      	strh	r3, [r4, #12]
 800c3c0:	4632      	mov	r2, r6
 800c3c2:	463b      	mov	r3, r7
 800c3c4:	4628      	mov	r0, r5
 800c3c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3ca:	f000 b973 	b.w	800c6b4 <_write_r>

0800c3ce <__sseek>:
 800c3ce:	b510      	push	{r4, lr}
 800c3d0:	460c      	mov	r4, r1
 800c3d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3d6:	f000 f939 	bl	800c64c <_lseek_r>
 800c3da:	1c43      	adds	r3, r0, #1
 800c3dc:	89a3      	ldrh	r3, [r4, #12]
 800c3de:	bf15      	itete	ne
 800c3e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c3e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c3e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c3ea:	81a3      	strheq	r3, [r4, #12]
 800c3ec:	bf18      	it	ne
 800c3ee:	81a3      	strhne	r3, [r4, #12]
 800c3f0:	bd10      	pop	{r4, pc}

0800c3f2 <__sclose>:
 800c3f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3f6:	f000 b8f7 	b.w	800c5e8 <_close_r>

0800c3fa <__swbuf_r>:
 800c3fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3fc:	460e      	mov	r6, r1
 800c3fe:	4614      	mov	r4, r2
 800c400:	4605      	mov	r5, r0
 800c402:	b118      	cbz	r0, 800c40c <__swbuf_r+0x12>
 800c404:	6a03      	ldr	r3, [r0, #32]
 800c406:	b90b      	cbnz	r3, 800c40c <__swbuf_r+0x12>
 800c408:	f7fe fa54 	bl	800a8b4 <__sinit>
 800c40c:	69a3      	ldr	r3, [r4, #24]
 800c40e:	60a3      	str	r3, [r4, #8]
 800c410:	89a3      	ldrh	r3, [r4, #12]
 800c412:	071a      	lsls	r2, r3, #28
 800c414:	d501      	bpl.n	800c41a <__swbuf_r+0x20>
 800c416:	6923      	ldr	r3, [r4, #16]
 800c418:	b943      	cbnz	r3, 800c42c <__swbuf_r+0x32>
 800c41a:	4621      	mov	r1, r4
 800c41c:	4628      	mov	r0, r5
 800c41e:	f000 f82b 	bl	800c478 <__swsetup_r>
 800c422:	b118      	cbz	r0, 800c42c <__swbuf_r+0x32>
 800c424:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c428:	4638      	mov	r0, r7
 800c42a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c42c:	6823      	ldr	r3, [r4, #0]
 800c42e:	6922      	ldr	r2, [r4, #16]
 800c430:	1a98      	subs	r0, r3, r2
 800c432:	6963      	ldr	r3, [r4, #20]
 800c434:	b2f6      	uxtb	r6, r6
 800c436:	4283      	cmp	r3, r0
 800c438:	4637      	mov	r7, r6
 800c43a:	dc05      	bgt.n	800c448 <__swbuf_r+0x4e>
 800c43c:	4621      	mov	r1, r4
 800c43e:	4628      	mov	r0, r5
 800c440:	f7ff fbe2 	bl	800bc08 <_fflush_r>
 800c444:	2800      	cmp	r0, #0
 800c446:	d1ed      	bne.n	800c424 <__swbuf_r+0x2a>
 800c448:	68a3      	ldr	r3, [r4, #8]
 800c44a:	3b01      	subs	r3, #1
 800c44c:	60a3      	str	r3, [r4, #8]
 800c44e:	6823      	ldr	r3, [r4, #0]
 800c450:	1c5a      	adds	r2, r3, #1
 800c452:	6022      	str	r2, [r4, #0]
 800c454:	701e      	strb	r6, [r3, #0]
 800c456:	6962      	ldr	r2, [r4, #20]
 800c458:	1c43      	adds	r3, r0, #1
 800c45a:	429a      	cmp	r2, r3
 800c45c:	d004      	beq.n	800c468 <__swbuf_r+0x6e>
 800c45e:	89a3      	ldrh	r3, [r4, #12]
 800c460:	07db      	lsls	r3, r3, #31
 800c462:	d5e1      	bpl.n	800c428 <__swbuf_r+0x2e>
 800c464:	2e0a      	cmp	r6, #10
 800c466:	d1df      	bne.n	800c428 <__swbuf_r+0x2e>
 800c468:	4621      	mov	r1, r4
 800c46a:	4628      	mov	r0, r5
 800c46c:	f7ff fbcc 	bl	800bc08 <_fflush_r>
 800c470:	2800      	cmp	r0, #0
 800c472:	d0d9      	beq.n	800c428 <__swbuf_r+0x2e>
 800c474:	e7d6      	b.n	800c424 <__swbuf_r+0x2a>
	...

0800c478 <__swsetup_r>:
 800c478:	b538      	push	{r3, r4, r5, lr}
 800c47a:	4b29      	ldr	r3, [pc, #164]	@ (800c520 <__swsetup_r+0xa8>)
 800c47c:	4605      	mov	r5, r0
 800c47e:	6818      	ldr	r0, [r3, #0]
 800c480:	460c      	mov	r4, r1
 800c482:	b118      	cbz	r0, 800c48c <__swsetup_r+0x14>
 800c484:	6a03      	ldr	r3, [r0, #32]
 800c486:	b90b      	cbnz	r3, 800c48c <__swsetup_r+0x14>
 800c488:	f7fe fa14 	bl	800a8b4 <__sinit>
 800c48c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c490:	0719      	lsls	r1, r3, #28
 800c492:	d422      	bmi.n	800c4da <__swsetup_r+0x62>
 800c494:	06da      	lsls	r2, r3, #27
 800c496:	d407      	bmi.n	800c4a8 <__swsetup_r+0x30>
 800c498:	2209      	movs	r2, #9
 800c49a:	602a      	str	r2, [r5, #0]
 800c49c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c4a0:	81a3      	strh	r3, [r4, #12]
 800c4a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c4a6:	e033      	b.n	800c510 <__swsetup_r+0x98>
 800c4a8:	0758      	lsls	r0, r3, #29
 800c4aa:	d512      	bpl.n	800c4d2 <__swsetup_r+0x5a>
 800c4ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c4ae:	b141      	cbz	r1, 800c4c2 <__swsetup_r+0x4a>
 800c4b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c4b4:	4299      	cmp	r1, r3
 800c4b6:	d002      	beq.n	800c4be <__swsetup_r+0x46>
 800c4b8:	4628      	mov	r0, r5
 800c4ba:	f000 f93f 	bl	800c73c <_free_r>
 800c4be:	2300      	movs	r3, #0
 800c4c0:	6363      	str	r3, [r4, #52]	@ 0x34
 800c4c2:	89a3      	ldrh	r3, [r4, #12]
 800c4c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c4c8:	81a3      	strh	r3, [r4, #12]
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	6063      	str	r3, [r4, #4]
 800c4ce:	6923      	ldr	r3, [r4, #16]
 800c4d0:	6023      	str	r3, [r4, #0]
 800c4d2:	89a3      	ldrh	r3, [r4, #12]
 800c4d4:	f043 0308 	orr.w	r3, r3, #8
 800c4d8:	81a3      	strh	r3, [r4, #12]
 800c4da:	6923      	ldr	r3, [r4, #16]
 800c4dc:	b94b      	cbnz	r3, 800c4f2 <__swsetup_r+0x7a>
 800c4de:	89a3      	ldrh	r3, [r4, #12]
 800c4e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c4e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c4e8:	d003      	beq.n	800c4f2 <__swsetup_r+0x7a>
 800c4ea:	4621      	mov	r1, r4
 800c4ec:	4628      	mov	r0, r5
 800c4ee:	f000 f83f 	bl	800c570 <__smakebuf_r>
 800c4f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4f6:	f013 0201 	ands.w	r2, r3, #1
 800c4fa:	d00a      	beq.n	800c512 <__swsetup_r+0x9a>
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	60a2      	str	r2, [r4, #8]
 800c500:	6962      	ldr	r2, [r4, #20]
 800c502:	4252      	negs	r2, r2
 800c504:	61a2      	str	r2, [r4, #24]
 800c506:	6922      	ldr	r2, [r4, #16]
 800c508:	b942      	cbnz	r2, 800c51c <__swsetup_r+0xa4>
 800c50a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c50e:	d1c5      	bne.n	800c49c <__swsetup_r+0x24>
 800c510:	bd38      	pop	{r3, r4, r5, pc}
 800c512:	0799      	lsls	r1, r3, #30
 800c514:	bf58      	it	pl
 800c516:	6962      	ldrpl	r2, [r4, #20]
 800c518:	60a2      	str	r2, [r4, #8]
 800c51a:	e7f4      	b.n	800c506 <__swsetup_r+0x8e>
 800c51c:	2000      	movs	r0, #0
 800c51e:	e7f7      	b.n	800c510 <__swsetup_r+0x98>
 800c520:	200000a0 	.word	0x200000a0

0800c524 <__swhatbuf_r>:
 800c524:	b570      	push	{r4, r5, r6, lr}
 800c526:	460c      	mov	r4, r1
 800c528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c52c:	2900      	cmp	r1, #0
 800c52e:	b096      	sub	sp, #88	@ 0x58
 800c530:	4615      	mov	r5, r2
 800c532:	461e      	mov	r6, r3
 800c534:	da0d      	bge.n	800c552 <__swhatbuf_r+0x2e>
 800c536:	89a3      	ldrh	r3, [r4, #12]
 800c538:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c53c:	f04f 0100 	mov.w	r1, #0
 800c540:	bf14      	ite	ne
 800c542:	2340      	movne	r3, #64	@ 0x40
 800c544:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c548:	2000      	movs	r0, #0
 800c54a:	6031      	str	r1, [r6, #0]
 800c54c:	602b      	str	r3, [r5, #0]
 800c54e:	b016      	add	sp, #88	@ 0x58
 800c550:	bd70      	pop	{r4, r5, r6, pc}
 800c552:	466a      	mov	r2, sp
 800c554:	f000 f858 	bl	800c608 <_fstat_r>
 800c558:	2800      	cmp	r0, #0
 800c55a:	dbec      	blt.n	800c536 <__swhatbuf_r+0x12>
 800c55c:	9901      	ldr	r1, [sp, #4]
 800c55e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c562:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c566:	4259      	negs	r1, r3
 800c568:	4159      	adcs	r1, r3
 800c56a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c56e:	e7eb      	b.n	800c548 <__swhatbuf_r+0x24>

0800c570 <__smakebuf_r>:
 800c570:	898b      	ldrh	r3, [r1, #12]
 800c572:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c574:	079d      	lsls	r5, r3, #30
 800c576:	4606      	mov	r6, r0
 800c578:	460c      	mov	r4, r1
 800c57a:	d507      	bpl.n	800c58c <__smakebuf_r+0x1c>
 800c57c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c580:	6023      	str	r3, [r4, #0]
 800c582:	6123      	str	r3, [r4, #16]
 800c584:	2301      	movs	r3, #1
 800c586:	6163      	str	r3, [r4, #20]
 800c588:	b003      	add	sp, #12
 800c58a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c58c:	ab01      	add	r3, sp, #4
 800c58e:	466a      	mov	r2, sp
 800c590:	f7ff ffc8 	bl	800c524 <__swhatbuf_r>
 800c594:	9f00      	ldr	r7, [sp, #0]
 800c596:	4605      	mov	r5, r0
 800c598:	4639      	mov	r1, r7
 800c59a:	4630      	mov	r0, r6
 800c59c:	f7ff fa30 	bl	800ba00 <_malloc_r>
 800c5a0:	b948      	cbnz	r0, 800c5b6 <__smakebuf_r+0x46>
 800c5a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5a6:	059a      	lsls	r2, r3, #22
 800c5a8:	d4ee      	bmi.n	800c588 <__smakebuf_r+0x18>
 800c5aa:	f023 0303 	bic.w	r3, r3, #3
 800c5ae:	f043 0302 	orr.w	r3, r3, #2
 800c5b2:	81a3      	strh	r3, [r4, #12]
 800c5b4:	e7e2      	b.n	800c57c <__smakebuf_r+0xc>
 800c5b6:	89a3      	ldrh	r3, [r4, #12]
 800c5b8:	6020      	str	r0, [r4, #0]
 800c5ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5be:	81a3      	strh	r3, [r4, #12]
 800c5c0:	9b01      	ldr	r3, [sp, #4]
 800c5c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c5c6:	b15b      	cbz	r3, 800c5e0 <__smakebuf_r+0x70>
 800c5c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5cc:	4630      	mov	r0, r6
 800c5ce:	f000 f82d 	bl	800c62c <_isatty_r>
 800c5d2:	b128      	cbz	r0, 800c5e0 <__smakebuf_r+0x70>
 800c5d4:	89a3      	ldrh	r3, [r4, #12]
 800c5d6:	f023 0303 	bic.w	r3, r3, #3
 800c5da:	f043 0301 	orr.w	r3, r3, #1
 800c5de:	81a3      	strh	r3, [r4, #12]
 800c5e0:	89a3      	ldrh	r3, [r4, #12]
 800c5e2:	431d      	orrs	r5, r3
 800c5e4:	81a5      	strh	r5, [r4, #12]
 800c5e6:	e7cf      	b.n	800c588 <__smakebuf_r+0x18>

0800c5e8 <_close_r>:
 800c5e8:	b538      	push	{r3, r4, r5, lr}
 800c5ea:	4d06      	ldr	r5, [pc, #24]	@ (800c604 <_close_r+0x1c>)
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	4604      	mov	r4, r0
 800c5f0:	4608      	mov	r0, r1
 800c5f2:	602b      	str	r3, [r5, #0]
 800c5f4:	f7f6 fb2f 	bl	8002c56 <_close>
 800c5f8:	1c43      	adds	r3, r0, #1
 800c5fa:	d102      	bne.n	800c602 <_close_r+0x1a>
 800c5fc:	682b      	ldr	r3, [r5, #0]
 800c5fe:	b103      	cbz	r3, 800c602 <_close_r+0x1a>
 800c600:	6023      	str	r3, [r4, #0]
 800c602:	bd38      	pop	{r3, r4, r5, pc}
 800c604:	2000071c 	.word	0x2000071c

0800c608 <_fstat_r>:
 800c608:	b538      	push	{r3, r4, r5, lr}
 800c60a:	4d07      	ldr	r5, [pc, #28]	@ (800c628 <_fstat_r+0x20>)
 800c60c:	2300      	movs	r3, #0
 800c60e:	4604      	mov	r4, r0
 800c610:	4608      	mov	r0, r1
 800c612:	4611      	mov	r1, r2
 800c614:	602b      	str	r3, [r5, #0]
 800c616:	f7f6 fb2a 	bl	8002c6e <_fstat>
 800c61a:	1c43      	adds	r3, r0, #1
 800c61c:	d102      	bne.n	800c624 <_fstat_r+0x1c>
 800c61e:	682b      	ldr	r3, [r5, #0]
 800c620:	b103      	cbz	r3, 800c624 <_fstat_r+0x1c>
 800c622:	6023      	str	r3, [r4, #0]
 800c624:	bd38      	pop	{r3, r4, r5, pc}
 800c626:	bf00      	nop
 800c628:	2000071c 	.word	0x2000071c

0800c62c <_isatty_r>:
 800c62c:	b538      	push	{r3, r4, r5, lr}
 800c62e:	4d06      	ldr	r5, [pc, #24]	@ (800c648 <_isatty_r+0x1c>)
 800c630:	2300      	movs	r3, #0
 800c632:	4604      	mov	r4, r0
 800c634:	4608      	mov	r0, r1
 800c636:	602b      	str	r3, [r5, #0]
 800c638:	f7f6 fb29 	bl	8002c8e <_isatty>
 800c63c:	1c43      	adds	r3, r0, #1
 800c63e:	d102      	bne.n	800c646 <_isatty_r+0x1a>
 800c640:	682b      	ldr	r3, [r5, #0]
 800c642:	b103      	cbz	r3, 800c646 <_isatty_r+0x1a>
 800c644:	6023      	str	r3, [r4, #0]
 800c646:	bd38      	pop	{r3, r4, r5, pc}
 800c648:	2000071c 	.word	0x2000071c

0800c64c <_lseek_r>:
 800c64c:	b538      	push	{r3, r4, r5, lr}
 800c64e:	4d07      	ldr	r5, [pc, #28]	@ (800c66c <_lseek_r+0x20>)
 800c650:	4604      	mov	r4, r0
 800c652:	4608      	mov	r0, r1
 800c654:	4611      	mov	r1, r2
 800c656:	2200      	movs	r2, #0
 800c658:	602a      	str	r2, [r5, #0]
 800c65a:	461a      	mov	r2, r3
 800c65c:	f7f6 fb22 	bl	8002ca4 <_lseek>
 800c660:	1c43      	adds	r3, r0, #1
 800c662:	d102      	bne.n	800c66a <_lseek_r+0x1e>
 800c664:	682b      	ldr	r3, [r5, #0]
 800c666:	b103      	cbz	r3, 800c66a <_lseek_r+0x1e>
 800c668:	6023      	str	r3, [r4, #0]
 800c66a:	bd38      	pop	{r3, r4, r5, pc}
 800c66c:	2000071c 	.word	0x2000071c

0800c670 <_read_r>:
 800c670:	b538      	push	{r3, r4, r5, lr}
 800c672:	4d07      	ldr	r5, [pc, #28]	@ (800c690 <_read_r+0x20>)
 800c674:	4604      	mov	r4, r0
 800c676:	4608      	mov	r0, r1
 800c678:	4611      	mov	r1, r2
 800c67a:	2200      	movs	r2, #0
 800c67c:	602a      	str	r2, [r5, #0]
 800c67e:	461a      	mov	r2, r3
 800c680:	f7f6 facc 	bl	8002c1c <_read>
 800c684:	1c43      	adds	r3, r0, #1
 800c686:	d102      	bne.n	800c68e <_read_r+0x1e>
 800c688:	682b      	ldr	r3, [r5, #0]
 800c68a:	b103      	cbz	r3, 800c68e <_read_r+0x1e>
 800c68c:	6023      	str	r3, [r4, #0]
 800c68e:	bd38      	pop	{r3, r4, r5, pc}
 800c690:	2000071c 	.word	0x2000071c

0800c694 <_sbrk_r>:
 800c694:	b538      	push	{r3, r4, r5, lr}
 800c696:	4d06      	ldr	r5, [pc, #24]	@ (800c6b0 <_sbrk_r+0x1c>)
 800c698:	2300      	movs	r3, #0
 800c69a:	4604      	mov	r4, r0
 800c69c:	4608      	mov	r0, r1
 800c69e:	602b      	str	r3, [r5, #0]
 800c6a0:	f7f6 fb0e 	bl	8002cc0 <_sbrk>
 800c6a4:	1c43      	adds	r3, r0, #1
 800c6a6:	d102      	bne.n	800c6ae <_sbrk_r+0x1a>
 800c6a8:	682b      	ldr	r3, [r5, #0]
 800c6aa:	b103      	cbz	r3, 800c6ae <_sbrk_r+0x1a>
 800c6ac:	6023      	str	r3, [r4, #0]
 800c6ae:	bd38      	pop	{r3, r4, r5, pc}
 800c6b0:	2000071c 	.word	0x2000071c

0800c6b4 <_write_r>:
 800c6b4:	b538      	push	{r3, r4, r5, lr}
 800c6b6:	4d07      	ldr	r5, [pc, #28]	@ (800c6d4 <_write_r+0x20>)
 800c6b8:	4604      	mov	r4, r0
 800c6ba:	4608      	mov	r0, r1
 800c6bc:	4611      	mov	r1, r2
 800c6be:	2200      	movs	r2, #0
 800c6c0:	602a      	str	r2, [r5, #0]
 800c6c2:	461a      	mov	r2, r3
 800c6c4:	f7f4 ff16 	bl	80014f4 <_write>
 800c6c8:	1c43      	adds	r3, r0, #1
 800c6ca:	d102      	bne.n	800c6d2 <_write_r+0x1e>
 800c6cc:	682b      	ldr	r3, [r5, #0]
 800c6ce:	b103      	cbz	r3, 800c6d2 <_write_r+0x1e>
 800c6d0:	6023      	str	r3, [r4, #0]
 800c6d2:	bd38      	pop	{r3, r4, r5, pc}
 800c6d4:	2000071c 	.word	0x2000071c

0800c6d8 <__assert_func>:
 800c6d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c6da:	4614      	mov	r4, r2
 800c6dc:	461a      	mov	r2, r3
 800c6de:	4b09      	ldr	r3, [pc, #36]	@ (800c704 <__assert_func+0x2c>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	4605      	mov	r5, r0
 800c6e4:	68d8      	ldr	r0, [r3, #12]
 800c6e6:	b954      	cbnz	r4, 800c6fe <__assert_func+0x26>
 800c6e8:	4b07      	ldr	r3, [pc, #28]	@ (800c708 <__assert_func+0x30>)
 800c6ea:	461c      	mov	r4, r3
 800c6ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c6f0:	9100      	str	r1, [sp, #0]
 800c6f2:	462b      	mov	r3, r5
 800c6f4:	4905      	ldr	r1, [pc, #20]	@ (800c70c <__assert_func+0x34>)
 800c6f6:	f000 f87d 	bl	800c7f4 <fiprintf>
 800c6fa:	f000 f89a 	bl	800c832 <abort>
 800c6fe:	4b04      	ldr	r3, [pc, #16]	@ (800c710 <__assert_func+0x38>)
 800c700:	e7f4      	b.n	800c6ec <__assert_func+0x14>
 800c702:	bf00      	nop
 800c704:	200000a0 	.word	0x200000a0
 800c708:	0800cfde 	.word	0x0800cfde
 800c70c:	0800cfb0 	.word	0x0800cfb0
 800c710:	0800cfa3 	.word	0x0800cfa3

0800c714 <_calloc_r>:
 800c714:	b570      	push	{r4, r5, r6, lr}
 800c716:	fba1 5402 	umull	r5, r4, r1, r2
 800c71a:	b93c      	cbnz	r4, 800c72c <_calloc_r+0x18>
 800c71c:	4629      	mov	r1, r5
 800c71e:	f7ff f96f 	bl	800ba00 <_malloc_r>
 800c722:	4606      	mov	r6, r0
 800c724:	b928      	cbnz	r0, 800c732 <_calloc_r+0x1e>
 800c726:	2600      	movs	r6, #0
 800c728:	4630      	mov	r0, r6
 800c72a:	bd70      	pop	{r4, r5, r6, pc}
 800c72c:	220c      	movs	r2, #12
 800c72e:	6002      	str	r2, [r0, #0]
 800c730:	e7f9      	b.n	800c726 <_calloc_r+0x12>
 800c732:	462a      	mov	r2, r5
 800c734:	4621      	mov	r1, r4
 800c736:	f7fe f963 	bl	800aa00 <memset>
 800c73a:	e7f5      	b.n	800c728 <_calloc_r+0x14>

0800c73c <_free_r>:
 800c73c:	b538      	push	{r3, r4, r5, lr}
 800c73e:	4605      	mov	r5, r0
 800c740:	2900      	cmp	r1, #0
 800c742:	d041      	beq.n	800c7c8 <_free_r+0x8c>
 800c744:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c748:	1f0c      	subs	r4, r1, #4
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	bfb8      	it	lt
 800c74e:	18e4      	addlt	r4, r4, r3
 800c750:	f7ff fa82 	bl	800bc58 <__malloc_lock>
 800c754:	4a1d      	ldr	r2, [pc, #116]	@ (800c7cc <_free_r+0x90>)
 800c756:	6813      	ldr	r3, [r2, #0]
 800c758:	b933      	cbnz	r3, 800c768 <_free_r+0x2c>
 800c75a:	6063      	str	r3, [r4, #4]
 800c75c:	6014      	str	r4, [r2, #0]
 800c75e:	4628      	mov	r0, r5
 800c760:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c764:	f7ff ba7e 	b.w	800bc64 <__malloc_unlock>
 800c768:	42a3      	cmp	r3, r4
 800c76a:	d908      	bls.n	800c77e <_free_r+0x42>
 800c76c:	6820      	ldr	r0, [r4, #0]
 800c76e:	1821      	adds	r1, r4, r0
 800c770:	428b      	cmp	r3, r1
 800c772:	bf01      	itttt	eq
 800c774:	6819      	ldreq	r1, [r3, #0]
 800c776:	685b      	ldreq	r3, [r3, #4]
 800c778:	1809      	addeq	r1, r1, r0
 800c77a:	6021      	streq	r1, [r4, #0]
 800c77c:	e7ed      	b.n	800c75a <_free_r+0x1e>
 800c77e:	461a      	mov	r2, r3
 800c780:	685b      	ldr	r3, [r3, #4]
 800c782:	b10b      	cbz	r3, 800c788 <_free_r+0x4c>
 800c784:	42a3      	cmp	r3, r4
 800c786:	d9fa      	bls.n	800c77e <_free_r+0x42>
 800c788:	6811      	ldr	r1, [r2, #0]
 800c78a:	1850      	adds	r0, r2, r1
 800c78c:	42a0      	cmp	r0, r4
 800c78e:	d10b      	bne.n	800c7a8 <_free_r+0x6c>
 800c790:	6820      	ldr	r0, [r4, #0]
 800c792:	4401      	add	r1, r0
 800c794:	1850      	adds	r0, r2, r1
 800c796:	4283      	cmp	r3, r0
 800c798:	6011      	str	r1, [r2, #0]
 800c79a:	d1e0      	bne.n	800c75e <_free_r+0x22>
 800c79c:	6818      	ldr	r0, [r3, #0]
 800c79e:	685b      	ldr	r3, [r3, #4]
 800c7a0:	6053      	str	r3, [r2, #4]
 800c7a2:	4408      	add	r0, r1
 800c7a4:	6010      	str	r0, [r2, #0]
 800c7a6:	e7da      	b.n	800c75e <_free_r+0x22>
 800c7a8:	d902      	bls.n	800c7b0 <_free_r+0x74>
 800c7aa:	230c      	movs	r3, #12
 800c7ac:	602b      	str	r3, [r5, #0]
 800c7ae:	e7d6      	b.n	800c75e <_free_r+0x22>
 800c7b0:	6820      	ldr	r0, [r4, #0]
 800c7b2:	1821      	adds	r1, r4, r0
 800c7b4:	428b      	cmp	r3, r1
 800c7b6:	bf04      	itt	eq
 800c7b8:	6819      	ldreq	r1, [r3, #0]
 800c7ba:	685b      	ldreq	r3, [r3, #4]
 800c7bc:	6063      	str	r3, [r4, #4]
 800c7be:	bf04      	itt	eq
 800c7c0:	1809      	addeq	r1, r1, r0
 800c7c2:	6021      	streq	r1, [r4, #0]
 800c7c4:	6054      	str	r4, [r2, #4]
 800c7c6:	e7ca      	b.n	800c75e <_free_r+0x22>
 800c7c8:	bd38      	pop	{r3, r4, r5, pc}
 800c7ca:	bf00      	nop
 800c7cc:	20000718 	.word	0x20000718

0800c7d0 <__ascii_mbtowc>:
 800c7d0:	b082      	sub	sp, #8
 800c7d2:	b901      	cbnz	r1, 800c7d6 <__ascii_mbtowc+0x6>
 800c7d4:	a901      	add	r1, sp, #4
 800c7d6:	b142      	cbz	r2, 800c7ea <__ascii_mbtowc+0x1a>
 800c7d8:	b14b      	cbz	r3, 800c7ee <__ascii_mbtowc+0x1e>
 800c7da:	7813      	ldrb	r3, [r2, #0]
 800c7dc:	600b      	str	r3, [r1, #0]
 800c7de:	7812      	ldrb	r2, [r2, #0]
 800c7e0:	1e10      	subs	r0, r2, #0
 800c7e2:	bf18      	it	ne
 800c7e4:	2001      	movne	r0, #1
 800c7e6:	b002      	add	sp, #8
 800c7e8:	4770      	bx	lr
 800c7ea:	4610      	mov	r0, r2
 800c7ec:	e7fb      	b.n	800c7e6 <__ascii_mbtowc+0x16>
 800c7ee:	f06f 0001 	mvn.w	r0, #1
 800c7f2:	e7f8      	b.n	800c7e6 <__ascii_mbtowc+0x16>

0800c7f4 <fiprintf>:
 800c7f4:	b40e      	push	{r1, r2, r3}
 800c7f6:	b503      	push	{r0, r1, lr}
 800c7f8:	4601      	mov	r1, r0
 800c7fa:	ab03      	add	r3, sp, #12
 800c7fc:	4805      	ldr	r0, [pc, #20]	@ (800c814 <fiprintf+0x20>)
 800c7fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800c802:	6800      	ldr	r0, [r0, #0]
 800c804:	9301      	str	r3, [sp, #4]
 800c806:	f7fe ffb9 	bl	800b77c <_vfiprintf_r>
 800c80a:	b002      	add	sp, #8
 800c80c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c810:	b003      	add	sp, #12
 800c812:	4770      	bx	lr
 800c814:	200000a0 	.word	0x200000a0

0800c818 <__ascii_wctomb>:
 800c818:	4603      	mov	r3, r0
 800c81a:	4608      	mov	r0, r1
 800c81c:	b141      	cbz	r1, 800c830 <__ascii_wctomb+0x18>
 800c81e:	2aff      	cmp	r2, #255	@ 0xff
 800c820:	d904      	bls.n	800c82c <__ascii_wctomb+0x14>
 800c822:	228a      	movs	r2, #138	@ 0x8a
 800c824:	601a      	str	r2, [r3, #0]
 800c826:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c82a:	4770      	bx	lr
 800c82c:	700a      	strb	r2, [r1, #0]
 800c82e:	2001      	movs	r0, #1
 800c830:	4770      	bx	lr

0800c832 <abort>:
 800c832:	b508      	push	{r3, lr}
 800c834:	2006      	movs	r0, #6
 800c836:	f000 f82b 	bl	800c890 <raise>
 800c83a:	2001      	movs	r0, #1
 800c83c:	f7f6 f9e3 	bl	8002c06 <_exit>

0800c840 <_raise_r>:
 800c840:	291f      	cmp	r1, #31
 800c842:	b538      	push	{r3, r4, r5, lr}
 800c844:	4605      	mov	r5, r0
 800c846:	460c      	mov	r4, r1
 800c848:	d904      	bls.n	800c854 <_raise_r+0x14>
 800c84a:	2316      	movs	r3, #22
 800c84c:	6003      	str	r3, [r0, #0]
 800c84e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c852:	bd38      	pop	{r3, r4, r5, pc}
 800c854:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c856:	b112      	cbz	r2, 800c85e <_raise_r+0x1e>
 800c858:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c85c:	b94b      	cbnz	r3, 800c872 <_raise_r+0x32>
 800c85e:	4628      	mov	r0, r5
 800c860:	f000 f830 	bl	800c8c4 <_getpid_r>
 800c864:	4622      	mov	r2, r4
 800c866:	4601      	mov	r1, r0
 800c868:	4628      	mov	r0, r5
 800c86a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c86e:	f000 b817 	b.w	800c8a0 <_kill_r>
 800c872:	2b01      	cmp	r3, #1
 800c874:	d00a      	beq.n	800c88c <_raise_r+0x4c>
 800c876:	1c59      	adds	r1, r3, #1
 800c878:	d103      	bne.n	800c882 <_raise_r+0x42>
 800c87a:	2316      	movs	r3, #22
 800c87c:	6003      	str	r3, [r0, #0]
 800c87e:	2001      	movs	r0, #1
 800c880:	e7e7      	b.n	800c852 <_raise_r+0x12>
 800c882:	2100      	movs	r1, #0
 800c884:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c888:	4620      	mov	r0, r4
 800c88a:	4798      	blx	r3
 800c88c:	2000      	movs	r0, #0
 800c88e:	e7e0      	b.n	800c852 <_raise_r+0x12>

0800c890 <raise>:
 800c890:	4b02      	ldr	r3, [pc, #8]	@ (800c89c <raise+0xc>)
 800c892:	4601      	mov	r1, r0
 800c894:	6818      	ldr	r0, [r3, #0]
 800c896:	f7ff bfd3 	b.w	800c840 <_raise_r>
 800c89a:	bf00      	nop
 800c89c:	200000a0 	.word	0x200000a0

0800c8a0 <_kill_r>:
 800c8a0:	b538      	push	{r3, r4, r5, lr}
 800c8a2:	4d07      	ldr	r5, [pc, #28]	@ (800c8c0 <_kill_r+0x20>)
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	4604      	mov	r4, r0
 800c8a8:	4608      	mov	r0, r1
 800c8aa:	4611      	mov	r1, r2
 800c8ac:	602b      	str	r3, [r5, #0]
 800c8ae:	f7f6 f99a 	bl	8002be6 <_kill>
 800c8b2:	1c43      	adds	r3, r0, #1
 800c8b4:	d102      	bne.n	800c8bc <_kill_r+0x1c>
 800c8b6:	682b      	ldr	r3, [r5, #0]
 800c8b8:	b103      	cbz	r3, 800c8bc <_kill_r+0x1c>
 800c8ba:	6023      	str	r3, [r4, #0]
 800c8bc:	bd38      	pop	{r3, r4, r5, pc}
 800c8be:	bf00      	nop
 800c8c0:	2000071c 	.word	0x2000071c

0800c8c4 <_getpid_r>:
 800c8c4:	f7f6 b987 	b.w	8002bd6 <_getpid>

0800c8c8 <_init>:
 800c8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ca:	bf00      	nop
 800c8cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8ce:	bc08      	pop	{r3}
 800c8d0:	469e      	mov	lr, r3
 800c8d2:	4770      	bx	lr

0800c8d4 <_fini>:
 800c8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8d6:	bf00      	nop
 800c8d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8da:	bc08      	pop	{r3}
 800c8dc:	469e      	mov	lr, r3
 800c8de:	4770      	bx	lr
