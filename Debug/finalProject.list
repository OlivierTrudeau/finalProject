
finalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afa8  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e0  0800b168  0800b168  0000c168  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b848  0800b848  0000d21c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b848  0800b848  0000c848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b850  0800b850  0000d21c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b850  0800b850  0000c850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b854  0800b854  0000c854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000021c  20000000  0800b858  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000400  2000021c  0800ba74  0000d21c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000061c  0800ba74  0000d61c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d21c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aa2e  00000000  00000000  0000d24c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033e4  00000000  00000000  00027c7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001688  00000000  00000000  0002b060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001162  00000000  00000000  0002c6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ee3b  00000000  00000000  0002d84a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019f69  00000000  00000000  0005c685  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011fd6e  00000000  00000000  000765ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019635c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fe0  00000000  00000000  001963a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0019d380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000021c 	.word	0x2000021c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800b150 	.word	0x0800b150

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000220 	.word	0x20000220
 80001fc:	0800b150 	.word	0x0800b150

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bec:	f000 b96a 	b.w	8000ec4 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	460c      	mov	r4, r1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d14e      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c14:	4694      	mov	ip, r2
 8000c16:	458c      	cmp	ip, r1
 8000c18:	4686      	mov	lr, r0
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	d962      	bls.n	8000ce6 <__udivmoddi4+0xde>
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0320 	rsb	r3, r2, #32
 8000c26:	4091      	lsls	r1, r2
 8000c28:	fa20 f303 	lsr.w	r3, r0, r3
 8000c2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c30:	4319      	orrs	r1, r3
 8000c32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f f68c 	uxth.w	r6, ip
 8000c3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	fb07 1114 	mls	r1, r7, r4, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb04 f106 	mul.w	r1, r4, r6
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c5e:	f080 8112 	bcs.w	8000e86 <__udivmoddi4+0x27e>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 810f 	bls.w	8000e86 <__udivmoddi4+0x27e>
 8000c68:	3c02      	subs	r4, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a59      	subs	r1, r3, r1
 8000c6e:	fa1f f38e 	uxth.w	r3, lr
 8000c72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c76:	fb07 1110 	mls	r1, r7, r0, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb00 f606 	mul.w	r6, r0, r6
 8000c82:	429e      	cmp	r6, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x94>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c8e:	f080 80fc 	bcs.w	8000e8a <__udivmoddi4+0x282>
 8000c92:	429e      	cmp	r6, r3
 8000c94:	f240 80f9 	bls.w	8000e8a <__udivmoddi4+0x282>
 8000c98:	4463      	add	r3, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11d      	cbz	r5, 8000cae <__udivmoddi4+0xa6>
 8000ca6:	40d3      	lsrs	r3, r2
 8000ca8:	2200      	movs	r2, #0
 8000caa:	e9c5 3200 	strd	r3, r2, [r5]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d905      	bls.n	8000cc2 <__udivmoddi4+0xba>
 8000cb6:	b10d      	cbz	r5, 8000cbc <__udivmoddi4+0xb4>
 8000cb8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e7f5      	b.n	8000cae <__udivmoddi4+0xa6>
 8000cc2:	fab3 f183 	clz	r1, r3
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	d146      	bne.n	8000d58 <__udivmoddi4+0x150>
 8000cca:	42a3      	cmp	r3, r4
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xcc>
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	f0c0 80f0 	bcc.w	8000eb4 <__udivmoddi4+0x2ac>
 8000cd4:	1a86      	subs	r6, r0, r2
 8000cd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	2d00      	cmp	r5, #0
 8000cde:	d0e6      	beq.n	8000cae <__udivmoddi4+0xa6>
 8000ce0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ce4:	e7e3      	b.n	8000cae <__udivmoddi4+0xa6>
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	f040 8090 	bne.w	8000e0c <__udivmoddi4+0x204>
 8000cec:	eba1 040c 	sub.w	r4, r1, ip
 8000cf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d02:	fb08 4416 	mls	r4, r8, r6, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb07 f006 	mul.w	r0, r7, r6
 8000d0e:	4298      	cmp	r0, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x11c>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x11a>
 8000d1c:	4298      	cmp	r0, r3
 8000d1e:	f200 80cd 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000d22:	4626      	mov	r6, r4
 8000d24:	1a1c      	subs	r4, r3, r0
 8000d26:	fa1f f38e 	uxth.w	r3, lr
 8000d2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d36:	fb00 f707 	mul.w	r7, r0, r7
 8000d3a:	429f      	cmp	r7, r3
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x148>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x146>
 8000d48:	429f      	cmp	r7, r3
 8000d4a:	f200 80b0 	bhi.w	8000eae <__udivmoddi4+0x2a6>
 8000d4e:	4620      	mov	r0, r4
 8000d50:	1bdb      	subs	r3, r3, r7
 8000d52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d56:	e7a5      	b.n	8000ca4 <__udivmoddi4+0x9c>
 8000d58:	f1c1 0620 	rsb	r6, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d68:	fa04 f301 	lsl.w	r3, r4, r1
 8000d6c:	ea43 030c 	orr.w	r3, r3, ip
 8000d70:	40f4      	lsrs	r4, r6
 8000d72:	fa00 f801 	lsl.w	r8, r0, r1
 8000d76:	0c38      	lsrs	r0, r7, #16
 8000d78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d80:	fa1f fc87 	uxth.w	ip, r7
 8000d84:	fb00 441e 	mls	r4, r0, lr, r4
 8000d88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	fa02 f201 	lsl.w	r2, r2, r1
 8000d96:	d90a      	bls.n	8000dae <__udivmoddi4+0x1a6>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d9e:	f080 8084 	bcs.w	8000eaa <__udivmoddi4+0x2a2>
 8000da2:	45a1      	cmp	r9, r4
 8000da4:	f240 8081 	bls.w	8000eaa <__udivmoddi4+0x2a2>
 8000da8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	eba4 0409 	sub.w	r4, r4, r9
 8000db2:	fa1f f983 	uxth.w	r9, r3
 8000db6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dba:	fb00 4413 	mls	r4, r0, r3, r4
 8000dbe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x1d2>
 8000dca:	193c      	adds	r4, r7, r4
 8000dcc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000dd0:	d267      	bcs.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd2:	45a4      	cmp	ip, r4
 8000dd4:	d965      	bls.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd6:	3b02      	subs	r3, #2
 8000dd8:	443c      	add	r4, r7
 8000dda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dde:	fba0 9302 	umull	r9, r3, r0, r2
 8000de2:	eba4 040c 	sub.w	r4, r4, ip
 8000de6:	429c      	cmp	r4, r3
 8000de8:	46ce      	mov	lr, r9
 8000dea:	469c      	mov	ip, r3
 8000dec:	d351      	bcc.n	8000e92 <__udivmoddi4+0x28a>
 8000dee:	d04e      	beq.n	8000e8e <__udivmoddi4+0x286>
 8000df0:	b155      	cbz	r5, 8000e08 <__udivmoddi4+0x200>
 8000df2:	ebb8 030e 	subs.w	r3, r8, lr
 8000df6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dfa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dfe:	40cb      	lsrs	r3, r1
 8000e00:	431e      	orrs	r6, r3
 8000e02:	40cc      	lsrs	r4, r1
 8000e04:	e9c5 6400 	strd	r6, r4, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e750      	b.n	8000cae <__udivmoddi4+0xa6>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f103 	lsr.w	r1, r0, r3
 8000e14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e18:	fa24 f303 	lsr.w	r3, r4, r3
 8000e1c:	4094      	lsls	r4, r2
 8000e1e:	430c      	orrs	r4, r1
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3110 	mls	r1, r8, r0, r3
 8000e34:	0c23      	lsrs	r3, r4, #16
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb00 f107 	mul.w	r1, r0, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x24c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e4a:	d22c      	bcs.n	8000ea6 <__udivmoddi4+0x29e>
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d92a      	bls.n	8000ea6 <__udivmoddi4+0x29e>
 8000e50:	3802      	subs	r0, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e64:	fb01 f307 	mul.w	r3, r1, r7
 8000e68:	42a3      	cmp	r3, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x276>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e74:	d213      	bcs.n	8000e9e <__udivmoddi4+0x296>
 8000e76:	42a3      	cmp	r3, r4
 8000e78:	d911      	bls.n	8000e9e <__udivmoddi4+0x296>
 8000e7a:	3902      	subs	r1, #2
 8000e7c:	4464      	add	r4, ip
 8000e7e:	1ae4      	subs	r4, r4, r3
 8000e80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e84:	e739      	b.n	8000cfa <__udivmoddi4+0xf2>
 8000e86:	4604      	mov	r4, r0
 8000e88:	e6f0      	b.n	8000c6c <__udivmoddi4+0x64>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e706      	b.n	8000c9c <__udivmoddi4+0x94>
 8000e8e:	45c8      	cmp	r8, r9
 8000e90:	d2ae      	bcs.n	8000df0 <__udivmoddi4+0x1e8>
 8000e92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e9a:	3801      	subs	r0, #1
 8000e9c:	e7a8      	b.n	8000df0 <__udivmoddi4+0x1e8>
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	e7ed      	b.n	8000e7e <__udivmoddi4+0x276>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	e799      	b.n	8000dda <__udivmoddi4+0x1d2>
 8000ea6:	4630      	mov	r0, r6
 8000ea8:	e7d4      	b.n	8000e54 <__udivmoddi4+0x24c>
 8000eaa:	46d6      	mov	lr, sl
 8000eac:	e77f      	b.n	8000dae <__udivmoddi4+0x1a6>
 8000eae:	4463      	add	r3, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e74d      	b.n	8000d50 <__udivmoddi4+0x148>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e70f      	b.n	8000cdc <__udivmoddi4+0xd4>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	e730      	b.n	8000d24 <__udivmoddi4+0x11c>
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ed0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ed4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000ed8:	f003 0301 	and.w	r3, r3, #1
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d013      	beq.n	8000f08 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ee0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ee4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000ee8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d00b      	beq.n	8000f08 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ef0:	e000      	b.n	8000ef4 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000ef2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ef4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d0f9      	beq.n	8000ef2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000efe:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	b2d2      	uxtb	r2, r2
 8000f06:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f08:	687b      	ldr	r3, [r7, #4]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
	...

08000f18 <detect_shake>:
#define TS_CAL2 ((uint16_t*)(uint32_t)0x1FFF75CA)
#define TS_CAL1_TEMP ((float)30.0)
#define TS_CAL2_TEMP ((float) 130.0)

// Function to detect shaking motion
bool detect_shake(int16_t* acc) {
 8000f18:	b480      	push	{r7}
 8000f1a:	b087      	sub	sp, #28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  // Calculate absolute differences from previous reading
  int32_t delta_x = abs((int32_t)acc[0] - (int32_t)prev_acc[0]);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f26:	461a      	mov	r2, r3
 8000f28:	4b29      	ldr	r3, [pc, #164]	@ (8000fd0 <detect_shake+0xb8>)
 8000f2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f2e:	1ad3      	subs	r3, r2, r3
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	bfb8      	it	lt
 8000f34:	425b      	neglt	r3, r3
 8000f36:	613b      	str	r3, [r7, #16]
  int32_t delta_y = abs((int32_t)acc[1] - (int32_t)prev_acc[1]);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3302      	adds	r3, #2
 8000f3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f40:	461a      	mov	r2, r3
 8000f42:	4b23      	ldr	r3, [pc, #140]	@ (8000fd0 <detect_shake+0xb8>)
 8000f44:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	bfb8      	it	lt
 8000f4e:	425b      	neglt	r3, r3
 8000f50:	60fb      	str	r3, [r7, #12]
  int32_t delta_z = abs((int32_t)acc[2] - (int32_t)prev_acc[2]);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	3304      	adds	r3, #4
 8000f56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <detect_shake+0xb8>)
 8000f5e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	bfb8      	it	lt
 8000f68:	425b      	neglt	r3, r3
 8000f6a:	60bb      	str	r3, [r7, #8]
//           delta_x, delta_y, delta_z, SHAKE_THRESHOLD);
//    last_debug = now;
//  }

  // Save current values as previous for next time
  prev_acc[0] = acc[0];
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f72:	4b17      	ldr	r3, [pc, #92]	@ (8000fd0 <detect_shake+0xb8>)
 8000f74:	801a      	strh	r2, [r3, #0]
  prev_acc[1] = acc[1];
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000f7c:	4b14      	ldr	r3, [pc, #80]	@ (8000fd0 <detect_shake+0xb8>)
 8000f7e:	805a      	strh	r2, [r3, #2]
  prev_acc[2] = acc[2];
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000f86:	4b12      	ldr	r3, [pc, #72]	@ (8000fd0 <detect_shake+0xb8>)
 8000f88:	809a      	strh	r2, [r3, #4]

  // Look for rapid movement on at least one axis (changed from two axes)
  int movement_axes = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
  if (delta_x > SHAKE_THRESHOLD) movement_axes++;
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000f94:	dd02      	ble.n	8000f9c <detect_shake+0x84>
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	617b      	str	r3, [r7, #20]
  if (delta_y > SHAKE_THRESHOLD) movement_axes++;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000fa2:	dd02      	ble.n	8000faa <detect_shake+0x92>
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	617b      	str	r3, [r7, #20]
  if (delta_z > SHAKE_THRESHOLD) movement_axes++;
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000fb0:	dd02      	ble.n	8000fb8 <detect_shake+0xa0>
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	617b      	str	r3, [r7, #20]

  return (movement_axes >= 1);  // True if significant movement on at least 1 axis (changed from 2)
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	bfcc      	ite	gt
 8000fbe:	2301      	movgt	r3, #1
 8000fc0:	2300      	movle	r3, #0
 8000fc2:	b2db      	uxtb	r3, r3
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	371c      	adds	r7, #28
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	20000410 	.word	0x20000410

08000fd4 <blink_led>:

// Function to blink LED for visual feedback
void blink_led(uint32_t times, uint32_t delay_ms) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
  for (uint32_t i = 0; i < times; i++) {
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	e014      	b.n	800100e <blink_led+0x3a>
    HAL_GPIO_WritePin(GPIOB, greenLed_Pin, GPIO_PIN_SET);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fea:	480d      	ldr	r0, [pc, #52]	@ (8001020 <blink_led+0x4c>)
 8000fec:	f003 fd18 	bl	8004a20 <HAL_GPIO_WritePin>
    HAL_Delay(delay_ms);
 8000ff0:	6838      	ldr	r0, [r7, #0]
 8000ff2:	f001 fe11 	bl	8002c18 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, greenLed_Pin, GPIO_PIN_RESET);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ffc:	4808      	ldr	r0, [pc, #32]	@ (8001020 <blink_led+0x4c>)
 8000ffe:	f003 fd0f 	bl	8004a20 <HAL_GPIO_WritePin>
    HAL_Delay(delay_ms);
 8001002:	6838      	ldr	r0, [r7, #0]
 8001004:	f001 fe08 	bl	8002c18 <HAL_Delay>
  for (uint32_t i = 0; i < times; i++) {
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	3301      	adds	r3, #1
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	429a      	cmp	r2, r3
 8001014:	d3e6      	bcc.n	8000fe4 <blink_led+0x10>
  }
}
 8001016:	bf00      	nop
 8001018:	bf00      	nop
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	48000400 	.word	0x48000400

08001024 <play_shake_detected_sound>:

// This function would be called for audio feedback when a shake is detected
void play_shake_detected_sound() {
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  // TODO: Implement this using DAC
  // This will involve generating a tone to indicate shake detection

  // For now, just blink the LED to provide feedback
  blink_led(3, 100);
 8001028:	2164      	movs	r1, #100	@ 0x64
 800102a:	2003      	movs	r0, #3
 800102c:	f7ff ffd2 	bl	8000fd4 <blink_led>
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}

08001034 <play_countdown_sound>:

// This function would be called for audio countdown during temperature reading
void play_countdown_sound(uint32_t seconds_remaining) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  // TODO: Implement this using DAC
  // This will involve generating a tone pattern indicating time remaining

  // For now, just blink the LED to provide feedback
  blink_led(1, 50);
 800103c:	2132      	movs	r1, #50	@ 0x32
 800103e:	2001      	movs	r0, #1
 8001040:	f7ff ffc8 	bl	8000fd4 <blink_led>
}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <play_success_sound>:

// This function would be called for temperature reading success
void play_success_sound() {
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  // TODO: Implement this using DAC
  // This will involve generating a success tone pattern

  // For now, just blink the LED to provide feedback
  blink_led(5, 100);
 8001050:	2164      	movs	r1, #100	@ 0x64
 8001052:	2005      	movs	r0, #5
 8001054:	f7ff ffbe 	bl	8000fd4 <blink_led>
}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}

0800105c <update_state_machine>:

// Function to process state machine
void update_state_machine(float current_temp) {
 800105c:	b5b0      	push	{r4, r5, r7, lr}
 800105e:	b08a      	sub	sp, #40	@ 0x28
 8001060:	af02      	add	r7, sp, #8
 8001062:	ed87 0a01 	vstr	s0, [r7, #4]
  uint32_t current_time = HAL_GetTick();
 8001066:	f001 fdcb 	bl	8002c00 <HAL_GetTick>
 800106a:	6178      	str	r0, [r7, #20]

  switch (current_state) {
 800106c:	4b91      	ldr	r3, [pc, #580]	@ (80012b4 <update_state_machine+0x258>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b03      	cmp	r3, #3
 8001072:	f200 811a 	bhi.w	80012aa <update_state_machine+0x24e>
 8001076:	a201      	add	r2, pc, #4	@ (adr r2, 800107c <update_state_machine+0x20>)
 8001078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800107c:	0800108d 	.word	0x0800108d
 8001080:	0800109b 	.word	0x0800109b
 8001084:	08001103 	.word	0x08001103
 8001088:	080011e1 	.word	0x080011e1
    case STATE_IDLE:
      // In idle state, waiting for shake to be detected
      HAL_GPIO_WritePin(GPIOB, greenLed_Pin, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001092:	4889      	ldr	r0, [pc, #548]	@ (80012b8 <update_state_machine+0x25c>)
 8001094:	f003 fcc4 	bl	8004a20 <HAL_GPIO_WritePin>
      break;
 8001098:	e107      	b.n	80012aa <update_state_machine+0x24e>

    case STATE_SHAKING:
      // Detecting continuous shaking
      HAL_GPIO_WritePin(GPIOB, greenLed_Pin, GPIO_PIN_SET);
 800109a:	2201      	movs	r2, #1
 800109c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010a0:	4885      	ldr	r0, [pc, #532]	@ (80012b8 <update_state_machine+0x25c>)
 80010a2:	f003 fcbd 	bl	8004a20 <HAL_GPIO_WritePin>

      // If user has been shaking for too long without qualifying, reset
      if (current_time - shake_time_start > 3000 && shake_count < MIN_SHAKE_COUNT) {
 80010a6:	4b85      	ldr	r3, [pc, #532]	@ (80012bc <update_state_machine+0x260>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	697a      	ldr	r2, [r7, #20]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d911      	bls.n	80010da <update_state_machine+0x7e>
 80010b6:	4b82      	ldr	r3, [pc, #520]	@ (80012c0 <update_state_machine+0x264>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d80d      	bhi.n	80010da <update_state_machine+0x7e>
        current_state = STATE_IDLE;
 80010be:	4b7d      	ldr	r3, [pc, #500]	@ (80012b4 <update_state_machine+0x258>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]
        shake_count = 0;
 80010c4:	4b7e      	ldr	r3, [pc, #504]	@ (80012c0 <update_state_machine+0x264>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
        printf("Shake timeout - please try again\n");
 80010ca:	487e      	ldr	r0, [pc, #504]	@ (80012c4 <update_state_machine+0x268>)
 80010cc:	f008 f8d4 	bl	8009278 <puts>
        blink_led(2, 200); // Error indication
 80010d0:	21c8      	movs	r1, #200	@ 0xc8
 80010d2:	2002      	movs	r0, #2
 80010d4:	f7ff ff7e 	bl	8000fd4 <blink_led>
        temp_reading_start = current_time;
        temp_reading_index = 0;
        printf("Shake detected! Please place finger on temperature sensor\n");
        play_shake_detected_sound(); // Audio feedback
      }
      break;
 80010d8:	e0e4      	b.n	80012a4 <update_state_machine+0x248>
      else if (shake_count >= MIN_SHAKE_COUNT) {
 80010da:	4b79      	ldr	r3, [pc, #484]	@ (80012c0 <update_state_machine+0x264>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b02      	cmp	r3, #2
 80010e0:	f240 80e0 	bls.w	80012a4 <update_state_machine+0x248>
        current_state = STATE_TEMPERATURE;
 80010e4:	4b73      	ldr	r3, [pc, #460]	@ (80012b4 <update_state_machine+0x258>)
 80010e6:	2202      	movs	r2, #2
 80010e8:	701a      	strb	r2, [r3, #0]
        temp_reading_start = current_time;
 80010ea:	4a77      	ldr	r2, [pc, #476]	@ (80012c8 <update_state_machine+0x26c>)
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	6013      	str	r3, [r2, #0]
        temp_reading_index = 0;
 80010f0:	4b76      	ldr	r3, [pc, #472]	@ (80012cc <update_state_machine+0x270>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	701a      	strb	r2, [r3, #0]
        printf("Shake detected! Please place finger on temperature sensor\n");
 80010f6:	4876      	ldr	r0, [pc, #472]	@ (80012d0 <update_state_machine+0x274>)
 80010f8:	f008 f8be 	bl	8009278 <puts>
        play_shake_detected_sound(); // Audio feedback
 80010fc:	f7ff ff92 	bl	8001024 <play_shake_detected_sound>
      break;
 8001100:	e0d0      	b.n	80012a4 <update_state_machine+0x248>

    case STATE_TEMPERATURE:
        // Reading temperature for 5 seconds
        HAL_GPIO_WritePin(GPIOB, greenLed_Pin, GPIO_PIN_SET);
 8001102:	2201      	movs	r2, #1
 8001104:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001108:	486b      	ldr	r0, [pc, #428]	@ (80012b8 <update_state_machine+0x25c>)
 800110a:	f003 fc89 	bl	8004a20 <HAL_GPIO_WritePin>

        uint32_t elapsed = current_time - temp_reading_start;
 800110e:	4b6e      	ldr	r3, [pc, #440]	@ (80012c8 <update_state_machine+0x26c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	697a      	ldr	r2, [r7, #20]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	60fb      	str	r3, [r7, #12]
        uint32_t seconds_remaining = (TEMP_MEASURE_TIME - elapsed) / 1000;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f5c3 539c 	rsb	r3, r3, #4992	@ 0x1380
 800111e:	3308      	adds	r3, #8
 8001120:	4a6c      	ldr	r2, [pc, #432]	@ (80012d4 <update_state_machine+0x278>)
 8001122:	fba2 2303 	umull	r2, r3, r2, r3
 8001126:	099b      	lsrs	r3, r3, #6
 8001128:	60bb      	str	r3, [r7, #8]

        // Capture baseline temperature right at the start
        if (temp_reading_index == 0) {
 800112a:	4b68      	ldr	r3, [pc, #416]	@ (80012cc <update_state_machine+0x270>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d10c      	bne.n	800114c <update_state_machine+0xf0>
            baseline_temp = current_temp;
 8001132:	4a69      	ldr	r2, [pc, #420]	@ (80012d8 <update_state_machine+0x27c>)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6013      	str	r3, [r2, #0]
            printf("Baseline temperature: %.2f C\n", baseline_temp);
 8001138:	4b67      	ldr	r3, [pc, #412]	@ (80012d8 <update_state_machine+0x27c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff fa1b 	bl	8000578 <__aeabi_f2d>
 8001142:	4602      	mov	r2, r0
 8001144:	460b      	mov	r3, r1
 8001146:	4865      	ldr	r0, [pc, #404]	@ (80012dc <update_state_machine+0x280>)
 8001148:	f008 f82e 	bl	80091a8 <iprintf>
        }

        if (seconds_remaining < 5 && seconds_remaining >= 0) {
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	2b04      	cmp	r3, #4
 8001150:	d83a      	bhi.n	80011c8 <update_state_machine+0x16c>
            // Every second, update the countdown
            static uint32_t last_second = 0;
            if (last_second != seconds_remaining) {
 8001152:	4b63      	ldr	r3, [pc, #396]	@ (80012e0 <update_state_machine+0x284>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	429a      	cmp	r2, r3
 800115a:	d035      	beq.n	80011c8 <update_state_machine+0x16c>
                last_second = seconds_remaining;
 800115c:	4a60      	ldr	r2, [pc, #384]	@ (80012e0 <update_state_machine+0x284>)
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	6013      	str	r3, [r2, #0]
                printf("Temperature reading: %d seconds remaining\n", (int)seconds_remaining + 1);
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	3301      	adds	r3, #1
 8001166:	4619      	mov	r1, r3
 8001168:	485e      	ldr	r0, [pc, #376]	@ (80012e4 <update_state_machine+0x288>)
 800116a:	f008 f81d 	bl	80091a8 <iprintf>
                play_countdown_sound(seconds_remaining + 1);
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	3301      	adds	r3, #1
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff ff5e 	bl	8001034 <play_countdown_sound>

                // Store temperature reading
                if (temp_reading_index < 5) {
 8001178:	4b54      	ldr	r3, [pc, #336]	@ (80012cc <update_state_machine+0x270>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b04      	cmp	r3, #4
 800117e:	d823      	bhi.n	80011c8 <update_state_machine+0x16c>
                    // Store the temperature value
                    temp_readings[temp_reading_index++] = current_temp;
 8001180:	4b52      	ldr	r3, [pc, #328]	@ (80012cc <update_state_machine+0x270>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	1c5a      	adds	r2, r3, #1
 8001186:	b2d1      	uxtb	r1, r2
 8001188:	4a50      	ldr	r2, [pc, #320]	@ (80012cc <update_state_machine+0x270>)
 800118a:	7011      	strb	r1, [r2, #0]
 800118c:	4a56      	ldr	r2, [pc, #344]	@ (80012e8 <update_state_machine+0x28c>)
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	4413      	add	r3, r2
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	601a      	str	r2, [r3, #0]
                    printf("Current temperature: %.2f C (delta: %.2f C)\n",
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff f9ee 	bl	8000578 <__aeabi_f2d>
 800119c:	4604      	mov	r4, r0
 800119e:	460d      	mov	r5, r1
                           current_temp, current_temp - baseline_temp);
 80011a0:	4b4d      	ldr	r3, [pc, #308]	@ (80012d8 <update_state_machine+0x27c>)
 80011a2:	edd3 7a00 	vldr	s15, [r3]
 80011a6:	ed97 7a01 	vldr	s14, [r7, #4]
 80011aa:	ee77 7a67 	vsub.f32	s15, s14, s15
                    printf("Current temperature: %.2f C (delta: %.2f C)\n",
 80011ae:	ee17 0a90 	vmov	r0, s15
 80011b2:	f7ff f9e1 	bl	8000578 <__aeabi_f2d>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	e9cd 2300 	strd	r2, r3, [sp]
 80011be:	4622      	mov	r2, r4
 80011c0:	462b      	mov	r3, r5
 80011c2:	484a      	ldr	r0, [pc, #296]	@ (80012ec <update_state_machine+0x290>)
 80011c4:	f007 fff0 	bl	80091a8 <iprintf>
                }
            }
        }

        // When time is up, move to verification
        if (elapsed >= TEMP_MEASURE_TIME) {
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f241 3287 	movw	r2, #4999	@ 0x1387
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d96a      	bls.n	80012a8 <update_state_machine+0x24c>
            current_state = STATE_VERIFY;
 80011d2:	4b38      	ldr	r3, [pc, #224]	@ (80012b4 <update_state_machine+0x258>)
 80011d4:	2203      	movs	r2, #3
 80011d6:	701a      	strb	r2, [r3, #0]
            printf("Temperature reading complete, verifying...\n");
 80011d8:	4845      	ldr	r0, [pc, #276]	@ (80012f0 <update_state_machine+0x294>)
 80011da:	f008 f84d 	bl	8009278 <puts>
        }
        break;
 80011de:	e063      	b.n	80012a8 <update_state_machine+0x24c>

    case STATE_VERIFY:
        // Process the collected temperature data
        float max_temp = -100.0f;
 80011e0:	4b44      	ldr	r3, [pc, #272]	@ (80012f4 <update_state_machine+0x298>)
 80011e2:	61fb      	str	r3, [r7, #28]
        for (int i = 0; i < temp_reading_index; i++) {
 80011e4:	2300      	movs	r3, #0
 80011e6:	61bb      	str	r3, [r7, #24]
 80011e8:	e015      	b.n	8001216 <update_state_machine+0x1ba>
            if (temp_readings[i] > max_temp) {
 80011ea:	4a3f      	ldr	r2, [pc, #252]	@ (80012e8 <update_state_machine+0x28c>)
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	4413      	add	r3, r2
 80011f2:	edd3 7a00 	vldr	s15, [r3]
 80011f6:	ed97 7a07 	vldr	s14, [r7, #28]
 80011fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001202:	d505      	bpl.n	8001210 <update_state_machine+0x1b4>
                max_temp = temp_readings[i];
 8001204:	4a38      	ldr	r2, [pc, #224]	@ (80012e8 <update_state_machine+0x28c>)
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4413      	add	r3, r2
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	61fb      	str	r3, [r7, #28]
        for (int i = 0; i < temp_reading_index; i++) {
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	3301      	adds	r3, #1
 8001214:	61bb      	str	r3, [r7, #24]
 8001216:	4b2d      	ldr	r3, [pc, #180]	@ (80012cc <update_state_machine+0x270>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	461a      	mov	r2, r3
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	4293      	cmp	r3, r2
 8001220:	dbe3      	blt.n	80011ea <update_state_machine+0x18e>
            }
        }

        float temp_change = max_temp - baseline_temp;
 8001222:	4b2d      	ldr	r3, [pc, #180]	@ (80012d8 <update_state_machine+0x27c>)
 8001224:	edd3 7a00 	vldr	s15, [r3]
 8001228:	ed97 7a07 	vldr	s14, [r7, #28]
 800122c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001230:	edc7 7a04 	vstr	s15, [r7, #16]
        printf("Maximum temperature: %.2f C\n", max_temp);
 8001234:	69f8      	ldr	r0, [r7, #28]
 8001236:	f7ff f99f 	bl	8000578 <__aeabi_f2d>
 800123a:	4602      	mov	r2, r0
 800123c:	460b      	mov	r3, r1
 800123e:	482e      	ldr	r0, [pc, #184]	@ (80012f8 <update_state_machine+0x29c>)
 8001240:	f007 ffb2 	bl	80091a8 <iprintf>
        printf("Temperature change: %.2f C\n", temp_change);
 8001244:	6938      	ldr	r0, [r7, #16]
 8001246:	f7ff f997 	bl	8000578 <__aeabi_f2d>
 800124a:	4602      	mov	r2, r0
 800124c:	460b      	mov	r3, r1
 800124e:	482b      	ldr	r0, [pc, #172]	@ (80012fc <update_state_machine+0x2a0>)
 8001250:	f007 ffaa 	bl	80091a8 <iprintf>

        // Verify based on temperature change (warming from finger)
        if (temp_change >= 1.0f) {
 8001254:	edd7 7a04 	vldr	s15, [r7, #16]
 8001258:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800125c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001264:	db0a      	blt.n	800127c <update_state_machine+0x220>
            printf("Verification successful! Detected warming of %.2f C\n", temp_change);
 8001266:	6938      	ldr	r0, [r7, #16]
 8001268:	f7ff f986 	bl	8000578 <__aeabi_f2d>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4823      	ldr	r0, [pc, #140]	@ (8001300 <update_state_machine+0x2a4>)
 8001272:	f007 ff99 	bl	80091a8 <iprintf>
            play_success_sound();
 8001276:	f7ff fee9 	bl	800104c <play_success_sound>
 800127a:	e009      	b.n	8001290 <update_state_machine+0x234>
        } else {
            printf("Verification failed - insufficient temperature change\n");
 800127c:	4821      	ldr	r0, [pc, #132]	@ (8001304 <update_state_machine+0x2a8>)
 800127e:	f007 fffb 	bl	8009278 <puts>
            printf("Please place your finger near the board's temperature sensor\n");
 8001282:	4821      	ldr	r0, [pc, #132]	@ (8001308 <update_state_machine+0x2ac>)
 8001284:	f007 fff8 	bl	8009278 <puts>
            blink_led(2, 200); // Error indication
 8001288:	21c8      	movs	r1, #200	@ 0xc8
 800128a:	2002      	movs	r0, #2
 800128c:	f7ff fea2 	bl	8000fd4 <blink_led>
        }

        // Return to idle state
        current_state = STATE_IDLE;
 8001290:	4b08      	ldr	r3, [pc, #32]	@ (80012b4 <update_state_machine+0x258>)
 8001292:	2200      	movs	r2, #0
 8001294:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(GPIOB, greenLed_Pin, GPIO_PIN_RESET);
 8001296:	2200      	movs	r2, #0
 8001298:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800129c:	4806      	ldr	r0, [pc, #24]	@ (80012b8 <update_state_machine+0x25c>)
 800129e:	f003 fbbf 	bl	8004a20 <HAL_GPIO_WritePin>
        break;
 80012a2:	e002      	b.n	80012aa <update_state_machine+0x24e>
      break;
 80012a4:	bf00      	nop
 80012a6:	e000      	b.n	80012aa <update_state_machine+0x24e>
        break;
 80012a8:	bf00      	nop
  }
}
 80012aa:	bf00      	nop
 80012ac:	3720      	adds	r7, #32
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bdb0      	pop	{r4, r5, r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000424 	.word	0x20000424
 80012b8:	48000400 	.word	0x48000400
 80012bc:	20000418 	.word	0x20000418
 80012c0:	2000041c 	.word	0x2000041c
 80012c4:	0800b168 	.word	0x0800b168
 80012c8:	20000420 	.word	0x20000420
 80012cc:	2000043c 	.word	0x2000043c
 80012d0:	0800b18c 	.word	0x0800b18c
 80012d4:	10624dd3 	.word	0x10624dd3
 80012d8:	20000440 	.word	0x20000440
 80012dc:	0800b1c8 	.word	0x0800b1c8
 80012e0:	20000444 	.word	0x20000444
 80012e4:	0800b1e8 	.word	0x0800b1e8
 80012e8:	20000428 	.word	0x20000428
 80012ec:	0800b214 	.word	0x0800b214
 80012f0:	0800b244 	.word	0x0800b244
 80012f4:	c2c80000 	.word	0xc2c80000
 80012f8:	0800b270 	.word	0x0800b270
 80012fc:	0800b290 	.word	0x0800b290
 8001300:	0800b2ac 	.word	0x0800b2ac
 8001304:	0800b2e4 	.word	0x0800b2e4
 8001308:	0800b31c 	.word	0x0800b31c

0800130c <_write>:

int _write(int file, char *ptr, int len)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
    // Send each character via ITM
    for (int i = 0; i < len; i++)
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	e009      	b.n	8001332 <_write+0x26>
    {
        ITM_SendChar(*ptr++);
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	1c5a      	adds	r2, r3, #1
 8001322:	60ba      	str	r2, [r7, #8]
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff fdce 	bl	8000ec8 <ITM_SendChar>
    for (int i = 0; i < len; i++)
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	3301      	adds	r3, #1
 8001330:	617b      	str	r3, [r7, #20]
 8001332:	697a      	ldr	r2, [r7, #20]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	429a      	cmp	r2, r3
 8001338:	dbf1      	blt.n	800131e <_write+0x12>
    }
    return len;
 800133a:	687b      	ldr	r3, [r7, #4]
}
 800133c:	4618      	mov	r0, r3
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <change_channel>:

void change_channel(int i) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b088      	sub	sp, #32
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef Config = {0};
 800134c:	f107 0308 	add.w	r3, r7, #8
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
 800135c:	615a      	str	r2, [r3, #20]

	if (i){
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d002      	beq.n	800136a <change_channel+0x26>
		Config.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001364:	4b0e      	ldr	r3, [pc, #56]	@ (80013a0 <change_channel+0x5c>)
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	e001      	b.n	800136e <change_channel+0x2a>
	}
	else{
		Config.Channel = ADC_CHANNEL_VREFINT;
 800136a:	4b0e      	ldr	r3, [pc, #56]	@ (80013a4 <change_channel+0x60>)
 800136c:	60bb      	str	r3, [r7, #8]
	}

	Config.Rank = ADC_REGULAR_RANK_1,
 800136e:	2306      	movs	r3, #6
 8001370:	60fb      	str	r3, [r7, #12]
	Config.SamplingTime = ADC_SAMPLETIME_640CYCLES_5,
 8001372:	2307      	movs	r3, #7
 8001374:	613b      	str	r3, [r7, #16]
	Config.SingleDiff = ADC_SINGLE_ENDED,
 8001376:	237f      	movs	r3, #127	@ 0x7f
 8001378:	617b      	str	r3, [r7, #20]
	Config.OffsetNumber = ADC_OFFSET_NONE,
 800137a:	2304      	movs	r3, #4
 800137c:	61bb      	str	r3, [r7, #24]
	Config.Offset = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]


	if (HAL_ADC_ConfigChannel(&hadc1, &Config) != HAL_OK){
 8001382:	f107 0308 	add.w	r3, r7, #8
 8001386:	4619      	mov	r1, r3
 8001388:	4807      	ldr	r0, [pc, #28]	@ (80013a8 <change_channel+0x64>)
 800138a:	f002 f909 	bl	80035a0 <HAL_ADC_ConfigChannel>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <change_channel+0x54>
		Error_Handler();
 8001394:	f000 fdb6 	bl	8001f04 <Error_Handler>
	}
}
 8001398:	bf00      	nop
 800139a:	3720      	adds	r7, #32
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	c7520000 	.word	0xc7520000
 80013a4:	80000001 	.word	0x80000001
 80013a8:	20000238 	.word	0x20000238

080013ac <KalmanFilterC>:

int KalmanFilterC(float* InputArray, float* OutputArray, struct kalman_state* kstate, int length) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
 80013b8:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < length; i++) { // Iterate
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
 80013be:	e058      	b.n	8001472 <KalmanFilterC+0xc6>
        kstate->p = kstate->p + kstate->q;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	ed93 7a03 	vldr	s14, [r3, #12]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	edd3 7a00 	vldr	s15, [r3]
 80013cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	edc3 7a03 	vstr	s15, [r3, #12]
        kstate->k = kstate->p/(kstate->p + kstate->r);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	edd3 6a03 	vldr	s13, [r3, #12]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	ed93 7a03 	vldr	s14, [r3, #12]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80013e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	edc3 7a04 	vstr	s15, [r3, #16]
        kstate->x = kstate->x + (kstate->k)*(InputArray[i]-kstate->x);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	ed93 7a02 	vldr	s14, [r3, #8]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	edd3 6a04 	vldr	s13, [r3, #16]
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	4413      	add	r3, r2
 800140a:	ed93 6a00 	vldr	s12, [r3]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	edd3 7a02 	vldr	s15, [r3, #8]
 8001414:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001418:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800141c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	edc3 7a02 	vstr	s15, [r3, #8]
        kstate->p = (1-kstate->k)*kstate->p;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	edd3 7a04 	vldr	s15, [r3, #16]
 800142c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001430:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	edd3 7a03 	vldr	s15, [r3, #12]
 800143a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	edc3 7a03 	vstr	s15, [r3, #12]
        OutputArray[i] = kstate->x; // Store in output array
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	68ba      	ldr	r2, [r7, #8]
 800144a:	4413      	add	r3, r2
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	6892      	ldr	r2, [r2, #8]
 8001450:	601a      	str	r2, [r3, #0]
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_get_fpscr) 
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  return __builtin_arm_get_fpscr();
 8001452:	eef1 3a10 	vmrs	r3, fpscr
        int a = __get_FPSCR();
 8001456:	613b      	str	r3, [r7, #16]
        if ((a & 268435456) != 0) { // Check for overflow (fixed parentheses)
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d004      	beq.n	800146c <KalmanFilterC+0xc0>
            printf("Overflow.");
 8001462:	4808      	ldr	r0, [pc, #32]	@ (8001484 <KalmanFilterC+0xd8>)
 8001464:	f007 fea0 	bl	80091a8 <iprintf>
            while (1){}
 8001468:	bf00      	nop
 800146a:	e7fd      	b.n	8001468 <KalmanFilterC+0xbc>
    for (int i = 0; i < length; i++) { // Iterate
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	3301      	adds	r3, #1
 8001470:	617b      	str	r3, [r7, #20]
 8001472:	697a      	ldr	r2, [r7, #20]
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	429a      	cmp	r2, r3
 8001478:	dba2      	blt.n	80013c0 <KalmanFilterC+0x14>
        }
    }
    return 0; // Return 0 if successful or get stuck in while loop
 800147a:	2300      	movs	r3, #0
}
 800147c:	4618      	mov	r0, r3
 800147e:	3718      	adds	r7, #24
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	0800b35c 	.word	0x0800b35c

08001488 <read_temperature>:

// Improved temperature reading function with Kalman filtering
float read_temperature(void) {
 8001488:	b580      	push	{r7, lr}
 800148a:	b08e      	sub	sp, #56	@ 0x38
 800148c:	af00      	add	r7, sp, #0
    float V_temp;
    float temp_readings[5];
    float filtered_temp;

    // Take multiple readings for stability
    for (int i = 0; i < 5; i++) {
 800148e:	2300      	movs	r3, #0
 8001490:	637b      	str	r3, [r7, #52]	@ 0x34
 8001492:	e0a2      	b.n	80015da <read_temperature+0x152>
        // Measure the voltage ref+
        change_channel(0);
 8001494:	2000      	movs	r0, #0
 8001496:	f7ff ff55 	bl	8001344 <change_channel>
        HAL_ADC_Start(&hadc1);
 800149a:	4859      	ldr	r0, [pc, #356]	@ (8001600 <read_temperature+0x178>)
 800149c:	f001 ff4e 	bl	800333c <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80014a0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80014a4:	4856      	ldr	r0, [pc, #344]	@ (8001600 <read_temperature+0x178>)
 80014a6:	f001 ffdf 	bl	8003468 <HAL_ADC_PollForConversion>
        ADC_value = (float)HAL_ADC_GetValue(&hadc1);
 80014aa:	4855      	ldr	r0, [pc, #340]	@ (8001600 <read_temperature+0x178>)
 80014ac:	f002 f86b 	bl	8003586 <HAL_ADC_GetValue>
 80014b0:	ee07 0a90 	vmov	s15, r0
 80014b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014b8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        HAL_ADC_Stop(&hadc1);
 80014bc:	4850      	ldr	r0, [pc, #320]	@ (8001600 <read_temperature+0x178>)
 80014be:	f001 ffa0 	bl	8003402 <HAL_ADC_Stop>
        vref_plus = 3.0f * (float)(*V_REFINT)/ADC_value;
 80014c2:	4b50      	ldr	r3, [pc, #320]	@ (8001604 <read_temperature+0x17c>)
 80014c4:	881b      	ldrh	r3, [r3, #0]
 80014c6:	ee07 3a90 	vmov	s15, r3
 80014ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014ce:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80014d2:	ee67 6a87 	vmul.f32	s13, s15, s14
 80014d6:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80014da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014de:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

        // Small delay between readings
        HAL_Delay(5);
 80014e2:	2005      	movs	r0, #5
 80014e4:	f001 fb98 	bl	8002c18 <HAL_Delay>

        // Measure temperature
        change_channel(1);
 80014e8:	2001      	movs	r0, #1
 80014ea:	f7ff ff2b 	bl	8001344 <change_channel>
        HAL_ADC_Start(&hadc1);
 80014ee:	4844      	ldr	r0, [pc, #272]	@ (8001600 <read_temperature+0x178>)
 80014f0:	f001 ff24 	bl	800333c <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80014f4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80014f8:	4841      	ldr	r0, [pc, #260]	@ (8001600 <read_temperature+0x178>)
 80014fa:	f001 ffb5 	bl	8003468 <HAL_ADC_PollForConversion>
        V_temp = (float)HAL_ADC_GetValue(&hadc1);
 80014fe:	4840      	ldr	r0, [pc, #256]	@ (8001600 <read_temperature+0x178>)
 8001500:	f002 f841 	bl	8003586 <HAL_ADC_GetValue>
 8001504:	ee07 0a90 	vmov	s15, r0
 8001508:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800150c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
        HAL_ADC_Stop(&hadc1);
 8001510:	483b      	ldr	r0, [pc, #236]	@ (8001600 <read_temperature+0x178>)
 8001512:	f001 ff76 	bl	8003402 <HAL_ADC_Stop>

        // Calculate temperature
        temp_readings[i] = (((TS_CAL2_TEMP - TS_CAL1_TEMP)/((float)(*TS_CAL2) - (float)(*TS_CAL1))) *
 8001516:	4b3c      	ldr	r3, [pc, #240]	@ (8001608 <read_temperature+0x180>)
 8001518:	881b      	ldrh	r3, [r3, #0]
 800151a:	ee07 3a90 	vmov	s15, r3
 800151e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001522:	4b3a      	ldr	r3, [pc, #232]	@ (800160c <read_temperature+0x184>)
 8001524:	881b      	ldrh	r3, [r3, #0]
 8001526:	ee07 3a90 	vmov	s15, r3
 800152a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800152e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001532:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8001610 <read_temperature+0x188>
 8001536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                          ((V_temp * vref_plus/3.0f)-(float)(*TS_CAL1))) + TS_CAL1_TEMP;
 800153a:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 800153e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001542:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001546:	eeb0 6a08 	vmov.f32	s12, #8	@ 0x40400000  3.0
 800154a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800154e:	4b2f      	ldr	r3, [pc, #188]	@ (800160c <read_temperature+0x184>)
 8001550:	881b      	ldrh	r3, [r3, #0]
 8001552:	ee07 3a90 	vmov	s15, r3
 8001556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800155a:	ee76 7ae7 	vsub.f32	s15, s13, s15
        temp_readings[i] = (((TS_CAL2_TEMP - TS_CAL1_TEMP)/((float)(*TS_CAL2) - (float)(*TS_CAL1))) *
 800155e:	ee67 7a27 	vmul.f32	s15, s14, s15
                          ((V_temp * vref_plus/3.0f)-(float)(*TS_CAL1))) + TS_CAL1_TEMP;
 8001562:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001566:	ee77 7a87 	vadd.f32	s15, s15, s14
        temp_readings[i] = (((TS_CAL2_TEMP - TS_CAL1_TEMP)/((float)(*TS_CAL2) - (float)(*TS_CAL1))) *
 800156a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	3338      	adds	r3, #56	@ 0x38
 8001570:	443b      	add	r3, r7
 8001572:	3b24      	subs	r3, #36	@ 0x24
 8001574:	edc3 7a00 	vstr	s15, [r3]

        // Check for obviously wrong readings
        if (temp_readings[i] < -10.0f || temp_readings[i] > 100.0f) {
 8001578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	3338      	adds	r3, #56	@ 0x38
 800157e:	443b      	add	r3, r7
 8001580:	3b24      	subs	r3, #36	@ 0x24
 8001582:	edd3 7a00 	vldr	s15, [r3]
 8001586:	eeba 7a04 	vmov.f32	s14, #164	@ 0xc1200000 -10.0
 800158a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800158e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001592:	d40d      	bmi.n	80015b0 <read_temperature+0x128>
 8001594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	3338      	adds	r3, #56	@ 0x38
 800159a:	443b      	add	r3, r7
 800159c:	3b24      	subs	r3, #36	@ 0x24
 800159e:	edd3 7a00 	vldr	s15, [r3]
 80015a2:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001610 <read_temperature+0x188>
 80015a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ae:	dd11      	ble.n	80015d4 <read_temperature+0x14c>
            temp_readings[i] = (i > 0) ? temp_readings[i-1] : 25.0f; // Use previous or default
 80015b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	dd07      	ble.n	80015c6 <read_temperature+0x13e>
 80015b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015b8:	3b01      	subs	r3, #1
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	3338      	adds	r3, #56	@ 0x38
 80015be:	443b      	add	r3, r7
 80015c0:	3b24      	subs	r3, #36	@ 0x24
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	e000      	b.n	80015c8 <read_temperature+0x140>
 80015c6:	4b13      	ldr	r3, [pc, #76]	@ (8001614 <read_temperature+0x18c>)
 80015c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80015ca:	0092      	lsls	r2, r2, #2
 80015cc:	3238      	adds	r2, #56	@ 0x38
 80015ce:	443a      	add	r2, r7
 80015d0:	3a24      	subs	r2, #36	@ 0x24
 80015d2:	6013      	str	r3, [r2, #0]
    for (int i = 0; i < 5; i++) {
 80015d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015d6:	3301      	adds	r3, #1
 80015d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80015da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015dc:	2b04      	cmp	r3, #4
 80015de:	f77f af59 	ble.w	8001494 <read_temperature+0xc>
        }
    }

    // Apply Kalman filter to the readings
    float filtered_readings[5];
    KalmanFilterC(temp_readings, filtered_readings, &temp_kalman, 5);
 80015e2:	4639      	mov	r1, r7
 80015e4:	f107 0014 	add.w	r0, r7, #20
 80015e8:	2305      	movs	r3, #5
 80015ea:	4a0b      	ldr	r2, [pc, #44]	@ (8001618 <read_temperature+0x190>)
 80015ec:	f7ff fede 	bl	80013ac <KalmanFilterC>

    // Return the last filtered value (most current)
    return filtered_readings[4];
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	ee07 3a90 	vmov	s15, r3
}
 80015f6:	eeb0 0a67 	vmov.f32	s0, s15
 80015fa:	3738      	adds	r7, #56	@ 0x38
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000238 	.word	0x20000238
 8001604:	1fff75aa 	.word	0x1fff75aa
 8001608:	1fff75ca 	.word	0x1fff75ca
 800160c:	1fff75a8 	.word	0x1fff75a8
 8001610:	42c80000 	.word	0x42c80000
 8001614:	41c80000 	.word	0x41c80000
 8001618:	20000000 	.word	0x20000000

0800161c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800161c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001620:	b08a      	sub	sp, #40	@ 0x28
 8001622:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001624:	f001 fa84 	bl	8002b30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001628:	f000 f8b8 	bl	800179c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800162c:	f000 f918 	bl	8001860 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001630:	f000 facc 	bl	8001bcc <MX_GPIO_Init>
  MX_ADC1_Init();
 8001634:	f000 f944 	bl	80018c0 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8001638:	f000 f9a6 	bl	8001988 <MX_DFSDM1_Init>
  MX_OCTOSPI1_Init();
 800163c:	f000 fa1c 	bl	8001a78 <MX_OCTOSPI1_Init>
  MX_USART1_UART_Init();
 8001640:	f000 fa70 	bl	8001b24 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8001644:	f000 faba 	bl	8001bbc <MX_USB_OTG_FS_USB_Init>
  MX_I2C2_Init();
 8001648:	f000 f9d6 	bl	80019f8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  //BSP_TSENSOR_Init();
  //BSP_HSENSOR_Init(); //HTS221
  //BSP_MAGNETO_Init(); //LIS3MDL
  // Initialize the accelerometer with default parameters (±2g range)
  BSP_ACCELERO_Init(); //LSM6DSL
 800164c:	f000 fdb0 	bl	80021b0 <BSP_ACCELERO_Init>

  // Set accelerometer to full scale - this may be required depending on your board
  // The below is a placeholder - you might need to modify based on your specific board API
  uint8_t ctrl = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	73fb      	strb	r3, [r7, #15]
  //BSP_PSENSOR_Init(); //LPS22HB

  float ADC_value;
  float vref_plus;
  float V_temp;
  float temp = 0;
 8001654:	f04f 0300 	mov.w	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
  int16_t acc[3] = {0};
 800165a:	463b      	mov	r3, r7
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	809a      	strh	r2, [r3, #4]
  uint32_t lastPrintTime = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]

  printf("\n\n--- Multi-factor Biometric Verification System ---\n");
 8001666:	4843      	ldr	r0, [pc, #268]	@ (8001774 <main+0x158>)
 8001668:	f007 fe06 	bl	8009278 <puts>
  printf("Shake the device firmly to begin verification\n");
 800166c:	4842      	ldr	r0, [pc, #264]	@ (8001778 <main+0x15c>)
 800166e:	f007 fe03 	bl	8009278 <puts>

  // Blink LED to indicate system is ready
  blink_led(2, 250);
 8001672:	21fa      	movs	r1, #250	@ 0xfa
 8001674:	2002      	movs	r0, #2
 8001676:	f7ff fcad 	bl	8000fd4 <blink_led>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    uint32_t currentTime = HAL_GetTick();
 800167a:	f001 fac1 	bl	8002c00 <HAL_GetTick>
 800167e:	60b8      	str	r0, [r7, #8]

    // Read accelerometer data
    BSP_ACCELERO_AccGetXYZ(acc);
 8001680:	463b      	mov	r3, r7
 8001682:	4618      	mov	r0, r3
 8001684:	f000 fdd2 	bl	800222c <BSP_ACCELERO_AccGetXYZ>

    // Process accelerometer data for shake detection
    if (current_state == STATE_IDLE) {
 8001688:	4b3c      	ldr	r3, [pc, #240]	@ (800177c <main+0x160>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d113      	bne.n	80016b8 <main+0x9c>
      // In idle state, look for the start of shaking
      if (detect_shake(acc)) {
 8001690:	463b      	mov	r3, r7
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff fc40 	bl	8000f18 <detect_shake>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d024      	beq.n	80016e8 <main+0xcc>
        // First shake detected, transition to shaking state
        current_state = STATE_SHAKING;
 800169e:	4b37      	ldr	r3, [pc, #220]	@ (800177c <main+0x160>)
 80016a0:	2201      	movs	r2, #1
 80016a2:	701a      	strb	r2, [r3, #0]
        shake_time_start = currentTime;
 80016a4:	4a36      	ldr	r2, [pc, #216]	@ (8001780 <main+0x164>)
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	6013      	str	r3, [r2, #0]
        shake_count = 1;
 80016aa:	4b36      	ldr	r3, [pc, #216]	@ (8001784 <main+0x168>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	701a      	strb	r2, [r3, #0]
        printf("Possible shake detected, continue shaking...\n");
 80016b0:	4835      	ldr	r0, [pc, #212]	@ (8001788 <main+0x16c>)
 80016b2:	f007 fde1 	bl	8009278 <puts>
 80016b6:	e017      	b.n	80016e8 <main+0xcc>
      }
    }
    else if (current_state == STATE_SHAKING) {
 80016b8:	4b30      	ldr	r3, [pc, #192]	@ (800177c <main+0x160>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d113      	bne.n	80016e8 <main+0xcc>
      // Already in shaking state, count additional shakes
      if (detect_shake(acc)) {
 80016c0:	463b      	mov	r3, r7
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fc28 	bl	8000f18 <detect_shake>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d00c      	beq.n	80016e8 <main+0xcc>
        shake_count++;
 80016ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001784 <main+0x168>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	3301      	adds	r3, #1
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001784 <main+0x168>)
 80016d8:	701a      	strb	r2, [r3, #0]
        printf("Shake count: %d/%d\n", shake_count, MIN_SHAKE_COUNT);
 80016da:	4b2a      	ldr	r3, [pc, #168]	@ (8001784 <main+0x168>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2203      	movs	r2, #3
 80016e0:	4619      	mov	r1, r3
 80016e2:	482a      	ldr	r0, [pc, #168]	@ (800178c <main+0x170>)
 80016e4:	f007 fd60 	bl	80091a8 <iprintf>
      }
    }

    // Always read temperature when in temperature reading state or for verification
    // Always read temperature when in temperature reading state or for verification
    if (current_state == STATE_TEMPERATURE || current_state == STATE_VERIFY) {
 80016e8:	4b24      	ldr	r3, [pc, #144]	@ (800177c <main+0x160>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d003      	beq.n	80016f8 <main+0xdc>
 80016f0:	4b22      	ldr	r3, [pc, #136]	@ (800177c <main+0x160>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b03      	cmp	r3, #3
 80016f6:	d103      	bne.n	8001700 <main+0xe4>
        temp = read_temperature();
 80016f8:	f7ff fec6 	bl	8001488 <read_temperature>
 80016fc:	ed87 0a05 	vstr	s0, [r7, #20]
    }

    // For debugging in idle mode, print sensor values occasionally
    if ((current_state == STATE_IDLE || current_state == STATE_SHAKING) &&
 8001700:	4b1e      	ldr	r3, [pc, #120]	@ (800177c <main+0x160>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d003      	beq.n	8001710 <main+0xf4>
 8001708:	4b1c      	ldr	r3, [pc, #112]	@ (800177c <main+0x160>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d129      	bne.n	8001764 <main+0x148>
        currentTime - lastPrintTime > 1000) {
 8001710:	68ba      	ldr	r2, [r7, #8]
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
    if ((current_state == STATE_IDLE || current_state == STATE_SHAKING) &&
 8001716:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800171a:	d923      	bls.n	8001764 <main+0x148>

        // Read temperature with Kalman filtering for display
        temp = read_temperature();
 800171c:	f7ff feb4 	bl	8001488 <read_temperature>
 8001720:	ed87 0a05 	vstr	s0, [r7, #20]

        printf("Status: %s | Accelerometer: x=%d, y=%d, z=%d | Temp: %.2f C\n",
               current_state == STATE_IDLE ? "IDLE" : "SHAKING",
 8001724:	4b15      	ldr	r3, [pc, #84]	@ (800177c <main+0x160>)
 8001726:	781b      	ldrb	r3, [r3, #0]
        printf("Status: %s | Accelerometer: x=%d, y=%d, z=%d | Temp: %.2f C\n",
 8001728:	2b00      	cmp	r3, #0
 800172a:	d101      	bne.n	8001730 <main+0x114>
 800172c:	4c18      	ldr	r4, [pc, #96]	@ (8001790 <main+0x174>)
 800172e:	e000      	b.n	8001732 <main+0x116>
 8001730:	4c18      	ldr	r4, [pc, #96]	@ (8001794 <main+0x178>)
               acc[0], acc[1], acc[2], temp);
 8001732:	f9b7 3000 	ldrsh.w	r3, [r7]
        printf("Status: %s | Accelerometer: x=%d, y=%d, z=%d | Temp: %.2f C\n",
 8001736:	461e      	mov	r6, r3
               acc[0], acc[1], acc[2], temp);
 8001738:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
        printf("Status: %s | Accelerometer: x=%d, y=%d, z=%d | Temp: %.2f C\n",
 800173c:	4698      	mov	r8, r3
               acc[0], acc[1], acc[2], temp);
 800173e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
        printf("Status: %s | Accelerometer: x=%d, y=%d, z=%d | Temp: %.2f C\n",
 8001742:	461d      	mov	r5, r3
 8001744:	6978      	ldr	r0, [r7, #20]
 8001746:	f7fe ff17 	bl	8000578 <__aeabi_f2d>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001752:	9500      	str	r5, [sp, #0]
 8001754:	4643      	mov	r3, r8
 8001756:	4632      	mov	r2, r6
 8001758:	4621      	mov	r1, r4
 800175a:	480f      	ldr	r0, [pc, #60]	@ (8001798 <main+0x17c>)
 800175c:	f007 fd24 	bl	80091a8 <iprintf>

        lastPrintTime = currentTime;
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	613b      	str	r3, [r7, #16]
    }

    // Update the state machine with current temperature
    update_state_machine(temp);
 8001764:	ed97 0a05 	vldr	s0, [r7, #20]
 8001768:	f7ff fc78 	bl	800105c <update_state_machine>

    // Small delay to prevent CPU hogging
    HAL_Delay(10);
 800176c:	200a      	movs	r0, #10
 800176e:	f001 fa53 	bl	8002c18 <HAL_Delay>
  {
 8001772:	e782      	b.n	800167a <main+0x5e>
 8001774:	0800b368 	.word	0x0800b368
 8001778:	0800b3a0 	.word	0x0800b3a0
 800177c:	20000424 	.word	0x20000424
 8001780:	20000418 	.word	0x20000418
 8001784:	2000041c 	.word	0x2000041c
 8001788:	0800b3d0 	.word	0x0800b3d0
 800178c:	0800b400 	.word	0x0800b400
 8001790:	0800b414 	.word	0x0800b414
 8001794:	0800b41c 	.word	0x0800b41c
 8001798:	0800b424 	.word	0x0800b424

0800179c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b096      	sub	sp, #88	@ 0x58
 80017a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017a2:	f107 0314 	add.w	r3, r7, #20
 80017a6:	2244      	movs	r2, #68	@ 0x44
 80017a8:	2100      	movs	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f007 fd6c 	bl	8009288 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017b0:	463b      	mov	r3, r7
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	609a      	str	r2, [r3, #8]
 80017ba:	60da      	str	r2, [r3, #12]
 80017bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80017be:	2000      	movs	r0, #0
 80017c0:	f004 fcc6 	bl	8006150 <HAL_PWREx_ControlVoltageScaling>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <SystemClock_Config+0x32>
  {
    Error_Handler();
 80017ca:	f000 fb9b 	bl	8001f04 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80017ce:	f004 fc8f 	bl	80060f0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80017d2:	4b22      	ldr	r3, [pc, #136]	@ (800185c <SystemClock_Config+0xc0>)
 80017d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017d8:	4a20      	ldr	r2, [pc, #128]	@ (800185c <SystemClock_Config+0xc0>)
 80017da:	f023 0318 	bic.w	r3, r3, #24
 80017de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80017e2:	2314      	movs	r3, #20
 80017e4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80017e6:	2301      	movs	r3, #1
 80017e8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80017ea:	2301      	movs	r3, #1
 80017ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80017f2:	2360      	movs	r3, #96	@ 0x60
 80017f4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017f6:	2302      	movs	r3, #2
 80017f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80017fa:	2301      	movs	r3, #1
 80017fc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80017fe:	2301      	movs	r3, #1
 8001800:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001802:	233c      	movs	r3, #60	@ 0x3c
 8001804:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001806:	2302      	movs	r3, #2
 8001808:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800180a:	2302      	movs	r3, #2
 800180c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800180e:	2302      	movs	r3, #2
 8001810:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001812:	f107 0314 	add.w	r3, r7, #20
 8001816:	4618      	mov	r0, r3
 8001818:	f004 fd3e 	bl	8006298 <HAL_RCC_OscConfig>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001822:	f000 fb6f 	bl	8001f04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001826:	230f      	movs	r3, #15
 8001828:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800182a:	2303      	movs	r3, #3
 800182c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800182e:	2300      	movs	r3, #0
 8001830:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001836:	2300      	movs	r3, #0
 8001838:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800183a:	463b      	mov	r3, r7
 800183c:	2105      	movs	r1, #5
 800183e:	4618      	mov	r0, r3
 8001840:	f005 f944 	bl	8006acc <HAL_RCC_ClockConfig>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800184a:	f000 fb5b 	bl	8001f04 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800184e:	f005 ff2b 	bl	80076a8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001852:	bf00      	nop
 8001854:	3758      	adds	r7, #88	@ 0x58
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40021000 	.word	0x40021000

08001860 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b0a6      	sub	sp, #152	@ 0x98
 8001864:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	2294      	movs	r2, #148	@ 0x94
 800186a:	2100      	movs	r1, #0
 800186c:	4618      	mov	r0, r3
 800186e:	f007 fd0b 	bl	8009288 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8001872:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001876:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001878:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800187c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001880:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001884:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001886:	2301      	movs	r3, #1
 8001888:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800188a:	2301      	movs	r3, #1
 800188c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800188e:	2318      	movs	r3, #24
 8001890:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001892:	2302      	movs	r3, #2
 8001894:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001896:	2302      	movs	r3, #2
 8001898:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800189a:	2302      	movs	r3, #2
 800189c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 800189e:	f04f 7388 	mov.w	r3, #17825792	@ 0x1100000
 80018a2:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018a4:	1d3b      	adds	r3, r7, #4
 80018a6:	4618      	mov	r0, r3
 80018a8:	f005 fbce 	bl	8007048 <HAL_RCCEx_PeriphCLKConfig>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80018b2:	f000 fb27 	bl	8001f04 <Error_Handler>
  }
}
 80018b6:	bf00      	nop
 80018b8:	3798      	adds	r7, #152	@ 0x98
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
	...

080018c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef Config = {0};
 80018c6:	463b      	mov	r3, r7
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]
 80018d4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80018d6:	4b29      	ldr	r3, [pc, #164]	@ (800197c <MX_ADC1_Init+0xbc>)
 80018d8:	4a29      	ldr	r2, [pc, #164]	@ (8001980 <MX_ADC1_Init+0xc0>)
 80018da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80018dc:	4b27      	ldr	r3, [pc, #156]	@ (800197c <MX_ADC1_Init+0xbc>)
 80018de:	2200      	movs	r2, #0
 80018e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018e2:	4b26      	ldr	r3, [pc, #152]	@ (800197c <MX_ADC1_Init+0xbc>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018e8:	4b24      	ldr	r3, [pc, #144]	@ (800197c <MX_ADC1_Init+0xbc>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80018ee:	4b23      	ldr	r3, [pc, #140]	@ (800197c <MX_ADC1_Init+0xbc>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018f4:	4b21      	ldr	r3, [pc, #132]	@ (800197c <MX_ADC1_Init+0xbc>)
 80018f6:	2204      	movs	r2, #4
 80018f8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80018fa:	4b20      	ldr	r3, [pc, #128]	@ (800197c <MX_ADC1_Init+0xbc>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001900:	4b1e      	ldr	r3, [pc, #120]	@ (800197c <MX_ADC1_Init+0xbc>)
 8001902:	2200      	movs	r2, #0
 8001904:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001906:	4b1d      	ldr	r3, [pc, #116]	@ (800197c <MX_ADC1_Init+0xbc>)
 8001908:	2201      	movs	r2, #1
 800190a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800190c:	4b1b      	ldr	r3, [pc, #108]	@ (800197c <MX_ADC1_Init+0xbc>)
 800190e:	2200      	movs	r2, #0
 8001910:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001914:	4b19      	ldr	r3, [pc, #100]	@ (800197c <MX_ADC1_Init+0xbc>)
 8001916:	2200      	movs	r2, #0
 8001918:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800191a:	4b18      	ldr	r3, [pc, #96]	@ (800197c <MX_ADC1_Init+0xbc>)
 800191c:	2200      	movs	r2, #0
 800191e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001920:	4b16      	ldr	r3, [pc, #88]	@ (800197c <MX_ADC1_Init+0xbc>)
 8001922:	2200      	movs	r2, #0
 8001924:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001928:	4b14      	ldr	r3, [pc, #80]	@ (800197c <MX_ADC1_Init+0xbc>)
 800192a:	2200      	movs	r2, #0
 800192c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800192e:	4b13      	ldr	r3, [pc, #76]	@ (800197c <MX_ADC1_Init+0xbc>)
 8001930:	2200      	movs	r2, #0
 8001932:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001936:	4811      	ldr	r0, [pc, #68]	@ (800197c <MX_ADC1_Init+0xbc>)
 8001938:	f001 fbba 	bl	80030b0 <HAL_ADC_Init>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001942:	f000 fadf 	bl	8001f04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  Config.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001946:	4b0f      	ldr	r3, [pc, #60]	@ (8001984 <MX_ADC1_Init+0xc4>)
 8001948:	603b      	str	r3, [r7, #0]
  Config.Rank = ADC_REGULAR_RANK_1;
 800194a:	2306      	movs	r3, #6
 800194c:	607b      	str	r3, [r7, #4]
  Config.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800194e:	2300      	movs	r3, #0
 8001950:	60bb      	str	r3, [r7, #8]
  Config.SingleDiff = ADC_SINGLE_ENDED;
 8001952:	237f      	movs	r3, #127	@ 0x7f
 8001954:	60fb      	str	r3, [r7, #12]
  Config.OffsetNumber = ADC_OFFSET_NONE;
 8001956:	2304      	movs	r3, #4
 8001958:	613b      	str	r3, [r7, #16]
  Config.Offset = 0;
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &Config) != HAL_OK)
 800195e:	463b      	mov	r3, r7
 8001960:	4619      	mov	r1, r3
 8001962:	4806      	ldr	r0, [pc, #24]	@ (800197c <MX_ADC1_Init+0xbc>)
 8001964:	f001 fe1c 	bl	80035a0 <HAL_ADC_ConfigChannel>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800196e:	f000 fac9 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001972:	bf00      	nop
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20000238 	.word	0x20000238
 8001980:	50040000 	.word	0x50040000
 8001984:	c7520000 	.word	0xc7520000

08001988 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 800198c:	4b18      	ldr	r3, [pc, #96]	@ (80019f0 <MX_DFSDM1_Init+0x68>)
 800198e:	4a19      	ldr	r2, [pc, #100]	@ (80019f4 <MX_DFSDM1_Init+0x6c>)
 8001990:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8001992:	4b17      	ldr	r3, [pc, #92]	@ (80019f0 <MX_DFSDM1_Init+0x68>)
 8001994:	2201      	movs	r2, #1
 8001996:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001998:	4b15      	ldr	r3, [pc, #84]	@ (80019f0 <MX_DFSDM1_Init+0x68>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 800199e:	4b14      	ldr	r3, [pc, #80]	@ (80019f0 <MX_DFSDM1_Init+0x68>)
 80019a0:	2202      	movs	r2, #2
 80019a2:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80019a4:	4b12      	ldr	r3, [pc, #72]	@ (80019f0 <MX_DFSDM1_Init+0x68>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80019aa:	4b11      	ldr	r3, [pc, #68]	@ (80019f0 <MX_DFSDM1_Init+0x68>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80019b0:	4b0f      	ldr	r3, [pc, #60]	@ (80019f0 <MX_DFSDM1_Init+0x68>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80019b6:	4b0e      	ldr	r3, [pc, #56]	@ (80019f0 <MX_DFSDM1_Init+0x68>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80019bc:	4b0c      	ldr	r3, [pc, #48]	@ (80019f0 <MX_DFSDM1_Init+0x68>)
 80019be:	2204      	movs	r2, #4
 80019c0:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80019c2:	4b0b      	ldr	r3, [pc, #44]	@ (80019f0 <MX_DFSDM1_Init+0x68>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80019c8:	4b09      	ldr	r3, [pc, #36]	@ (80019f0 <MX_DFSDM1_Init+0x68>)
 80019ca:	2201      	movs	r2, #1
 80019cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80019ce:	4b08      	ldr	r3, [pc, #32]	@ (80019f0 <MX_DFSDM1_Init+0x68>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 80019d4:	4b06      	ldr	r3, [pc, #24]	@ (80019f0 <MX_DFSDM1_Init+0x68>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80019da:	4805      	ldr	r0, [pc, #20]	@ (80019f0 <MX_DFSDM1_Init+0x68>)
 80019dc:	f002 fc90 	bl	8004300 <HAL_DFSDM_ChannelInit>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 80019e6:	f000 fa8d 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	200002a0 	.word	0x200002a0
 80019f4:	40016040 	.word	0x40016040

080019f8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80019fc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a6c <MX_I2C2_Init+0x74>)
 80019fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001a70 <MX_I2C2_Init+0x78>)
 8001a00:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A175AB;
 8001a02:	4b1a      	ldr	r3, [pc, #104]	@ (8001a6c <MX_I2C2_Init+0x74>)
 8001a04:	4a1b      	ldr	r2, [pc, #108]	@ (8001a74 <MX_I2C2_Init+0x7c>)
 8001a06:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001a08:	4b18      	ldr	r3, [pc, #96]	@ (8001a6c <MX_I2C2_Init+0x74>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a0e:	4b17      	ldr	r3, [pc, #92]	@ (8001a6c <MX_I2C2_Init+0x74>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a14:	4b15      	ldr	r3, [pc, #84]	@ (8001a6c <MX_I2C2_Init+0x74>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001a1a:	4b14      	ldr	r3, [pc, #80]	@ (8001a6c <MX_I2C2_Init+0x74>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a20:	4b12      	ldr	r3, [pc, #72]	@ (8001a6c <MX_I2C2_Init+0x74>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a26:	4b11      	ldr	r3, [pc, #68]	@ (8001a6c <MX_I2C2_Init+0x74>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a6c <MX_I2C2_Init+0x74>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a32:	480e      	ldr	r0, [pc, #56]	@ (8001a6c <MX_I2C2_Init+0x74>)
 8001a34:	f003 f82f 	bl	8004a96 <HAL_I2C_Init>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001a3e:	f000 fa61 	bl	8001f04 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a42:	2100      	movs	r1, #0
 8001a44:	4809      	ldr	r0, [pc, #36]	@ (8001a6c <MX_I2C2_Init+0x74>)
 8001a46:	f003 fde1 	bl	800560c <HAL_I2CEx_ConfigAnalogFilter>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001a50:	f000 fa58 	bl	8001f04 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001a54:	2100      	movs	r1, #0
 8001a56:	4805      	ldr	r0, [pc, #20]	@ (8001a6c <MX_I2C2_Init+0x74>)
 8001a58:	f003 fe23 	bl	80056a2 <HAL_I2CEx_ConfigDigitalFilter>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001a62:	f000 fa4f 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	200002d8 	.word	0x200002d8
 8001a70:	40005800 	.word	0x40005800
 8001a74:	30a175ab 	.word	0x30a175ab

08001a78 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8001a7e:	1d3b      	adds	r3, r7, #4
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8001a8c:	4b23      	ldr	r3, [pc, #140]	@ (8001b1c <MX_OCTOSPI1_Init+0xa4>)
 8001a8e:	4a24      	ldr	r2, [pc, #144]	@ (8001b20 <MX_OCTOSPI1_Init+0xa8>)
 8001a90:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8001a92:	4b22      	ldr	r3, [pc, #136]	@ (8001b1c <MX_OCTOSPI1_Init+0xa4>)
 8001a94:	2201      	movs	r2, #1
 8001a96:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001a98:	4b20      	ldr	r3, [pc, #128]	@ (8001b1c <MX_OCTOSPI1_Init+0xa4>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8001a9e:	4b1f      	ldr	r3, [pc, #124]	@ (8001b1c <MX_OCTOSPI1_Init+0xa4>)
 8001aa0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001aa4:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8001aa6:	4b1d      	ldr	r3, [pc, #116]	@ (8001b1c <MX_OCTOSPI1_Init+0xa4>)
 8001aa8:	2220      	movs	r2, #32
 8001aaa:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8001aac:	4b1b      	ldr	r3, [pc, #108]	@ (8001b1c <MX_OCTOSPI1_Init+0xa4>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001ab2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b1c <MX_OCTOSPI1_Init+0xa4>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001ab8:	4b18      	ldr	r3, [pc, #96]	@ (8001b1c <MX_OCTOSPI1_Init+0xa4>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8001abe:	4b17      	ldr	r3, [pc, #92]	@ (8001b1c <MX_OCTOSPI1_Init+0xa4>)
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001ac4:	4b15      	ldr	r3, [pc, #84]	@ (8001b1c <MX_OCTOSPI1_Init+0xa4>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001aca:	4b14      	ldr	r3, [pc, #80]	@ (8001b1c <MX_OCTOSPI1_Init+0xa4>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8001ad0:	4b12      	ldr	r3, [pc, #72]	@ (8001b1c <MX_OCTOSPI1_Init+0xa4>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001ad6:	4b11      	ldr	r3, [pc, #68]	@ (8001b1c <MX_OCTOSPI1_Init+0xa4>)
 8001ad8:	2208      	movs	r2, #8
 8001ada:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001adc:	480f      	ldr	r0, [pc, #60]	@ (8001b1c <MX_OCTOSPI1_Init+0xa4>)
 8001ade:	f003 fe2d 	bl	800573c <HAL_OSPI_Init>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8001ae8:	f000 fa0c 	bl	8001f04 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8001aec:	2301      	movs	r3, #1
 8001aee:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8001af0:	2301      	movs	r3, #1
 8001af2:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8001af4:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8001af8:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001afa:	1d3b      	adds	r3, r7, #4
 8001afc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b00:	4619      	mov	r1, r3
 8001b02:	4806      	ldr	r0, [pc, #24]	@ (8001b1c <MX_OCTOSPI1_Init+0xa4>)
 8001b04:	f003 fed4 	bl	80058b0 <HAL_OSPIM_Config>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8001b0e:	f000 f9f9 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8001b12:	bf00      	nop
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	2000032c 	.word	0x2000032c
 8001b20:	a0001000 	.word	0xa0001000

08001b24 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b28:	4b22      	ldr	r3, [pc, #136]	@ (8001bb4 <MX_USART1_UART_Init+0x90>)
 8001b2a:	4a23      	ldr	r2, [pc, #140]	@ (8001bb8 <MX_USART1_UART_Init+0x94>)
 8001b2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b2e:	4b21      	ldr	r3, [pc, #132]	@ (8001bb4 <MX_USART1_UART_Init+0x90>)
 8001b30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b36:	4b1f      	ldr	r3, [pc, #124]	@ (8001bb4 <MX_USART1_UART_Init+0x90>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b3c:	4b1d      	ldr	r3, [pc, #116]	@ (8001bb4 <MX_USART1_UART_Init+0x90>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b42:	4b1c      	ldr	r3, [pc, #112]	@ (8001bb4 <MX_USART1_UART_Init+0x90>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b48:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb4 <MX_USART1_UART_Init+0x90>)
 8001b4a:	220c      	movs	r2, #12
 8001b4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b4e:	4b19      	ldr	r3, [pc, #100]	@ (8001bb4 <MX_USART1_UART_Init+0x90>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b54:	4b17      	ldr	r3, [pc, #92]	@ (8001bb4 <MX_USART1_UART_Init+0x90>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b5a:	4b16      	ldr	r3, [pc, #88]	@ (8001bb4 <MX_USART1_UART_Init+0x90>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b60:	4b14      	ldr	r3, [pc, #80]	@ (8001bb4 <MX_USART1_UART_Init+0x90>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b66:	4b13      	ldr	r3, [pc, #76]	@ (8001bb4 <MX_USART1_UART_Init+0x90>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b6c:	4811      	ldr	r0, [pc, #68]	@ (8001bb4 <MX_USART1_UART_Init+0x90>)
 8001b6e:	f005 ff93 	bl	8007a98 <HAL_UART_Init>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001b78:	f000 f9c4 	bl	8001f04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	480d      	ldr	r0, [pc, #52]	@ (8001bb4 <MX_USART1_UART_Init+0x90>)
 8001b80:	f006 fd2e 	bl	80085e0 <HAL_UARTEx_SetTxFifoThreshold>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001b8a:	f000 f9bb 	bl	8001f04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4808      	ldr	r0, [pc, #32]	@ (8001bb4 <MX_USART1_UART_Init+0x90>)
 8001b92:	f006 fd63 	bl	800865c <HAL_UARTEx_SetRxFifoThreshold>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001b9c:	f000 f9b2 	bl	8001f04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001ba0:	4804      	ldr	r0, [pc, #16]	@ (8001bb4 <MX_USART1_UART_Init+0x90>)
 8001ba2:	f006 fce4 	bl	800856e <HAL_UARTEx_DisableFifoMode>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001bac:	f000 f9aa 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bb0:	bf00      	nop
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	2000037c 	.word	0x2000037c
 8001bb8:	40013800 	.word	0x40013800

08001bbc <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
	...

08001bcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08c      	sub	sp, #48	@ 0x30
 8001bd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd2:	f107 031c 	add.w	r3, r7, #28
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]
 8001bdc:	609a      	str	r2, [r3, #8]
 8001bde:	60da      	str	r2, [r3, #12]
 8001be0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001be2:	4bba      	ldr	r3, [pc, #744]	@ (8001ecc <MX_GPIO_Init+0x300>)
 8001be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001be6:	4ab9      	ldr	r2, [pc, #740]	@ (8001ecc <MX_GPIO_Init+0x300>)
 8001be8:	f043 0310 	orr.w	r3, r3, #16
 8001bec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bee:	4bb7      	ldr	r3, [pc, #732]	@ (8001ecc <MX_GPIO_Init+0x300>)
 8001bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bf2:	f003 0310 	and.w	r3, r3, #16
 8001bf6:	61bb      	str	r3, [r7, #24]
 8001bf8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bfa:	4bb4      	ldr	r3, [pc, #720]	@ (8001ecc <MX_GPIO_Init+0x300>)
 8001bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bfe:	4ab3      	ldr	r2, [pc, #716]	@ (8001ecc <MX_GPIO_Init+0x300>)
 8001c00:	f043 0304 	orr.w	r3, r3, #4
 8001c04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c06:	4bb1      	ldr	r3, [pc, #708]	@ (8001ecc <MX_GPIO_Init+0x300>)
 8001c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c0a:	f003 0304 	and.w	r3, r3, #4
 8001c0e:	617b      	str	r3, [r7, #20]
 8001c10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c12:	4bae      	ldr	r3, [pc, #696]	@ (8001ecc <MX_GPIO_Init+0x300>)
 8001c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c16:	4aad      	ldr	r2, [pc, #692]	@ (8001ecc <MX_GPIO_Init+0x300>)
 8001c18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c1e:	4bab      	ldr	r3, [pc, #684]	@ (8001ecc <MX_GPIO_Init+0x300>)
 8001c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2a:	4ba8      	ldr	r3, [pc, #672]	@ (8001ecc <MX_GPIO_Init+0x300>)
 8001c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c2e:	4aa7      	ldr	r2, [pc, #668]	@ (8001ecc <MX_GPIO_Init+0x300>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c36:	4ba5      	ldr	r3, [pc, #660]	@ (8001ecc <MX_GPIO_Init+0x300>)
 8001c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c42:	4ba2      	ldr	r3, [pc, #648]	@ (8001ecc <MX_GPIO_Init+0x300>)
 8001c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c46:	4aa1      	ldr	r2, [pc, #644]	@ (8001ecc <MX_GPIO_Init+0x300>)
 8001c48:	f043 0302 	orr.w	r3, r3, #2
 8001c4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c4e:	4b9f      	ldr	r3, [pc, #636]	@ (8001ecc <MX_GPIO_Init+0x300>)
 8001c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	60bb      	str	r3, [r7, #8]
 8001c58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c5a:	4b9c      	ldr	r3, [pc, #624]	@ (8001ecc <MX_GPIO_Init+0x300>)
 8001c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c5e:	4a9b      	ldr	r2, [pc, #620]	@ (8001ecc <MX_GPIO_Init+0x300>)
 8001c60:	f043 0308 	orr.w	r3, r3, #8
 8001c64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c66:	4b99      	ldr	r3, [pc, #612]	@ (8001ecc <MX_GPIO_Init+0x300>)
 8001c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	607b      	str	r3, [r7, #4]
 8001c70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8001c72:	2200      	movs	r2, #0
 8001c74:	f240 1105 	movw	r1, #261	@ 0x105
 8001c78:	4895      	ldr	r0, [pc, #596]	@ (8001ed0 <MX_GPIO_Init+0x304>)
 8001c7a:	f002 fed1 	bl	8004a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f248 111c 	movw	r1, #33052	@ 0x811c
 8001c84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c88:	f002 feca 	bl	8004a20 <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|greenLed_Pin
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f24f 0134 	movw	r1, #61492	@ 0xf034
 8001c92:	4890      	ldr	r0, [pc, #576]	@ (8001ed4 <MX_GPIO_Init+0x308>)
 8001c94:	f002 fec4 	bl	8004a20 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f242 0183 	movw	r1, #8323	@ 0x2083
 8001c9e:	488e      	ldr	r0, [pc, #568]	@ (8001ed8 <MX_GPIO_Init+0x30c>)
 8001ca0:	f002 febe 	bl	8004a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8001caa:	488c      	ldr	r0, [pc, #560]	@ (8001edc <MX_GPIO_Init+0x310>)
 8001cac:	f002 feb8 	bl	8004a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001cb0:	f240 1305 	movw	r3, #261	@ 0x105
 8001cb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cc2:	f107 031c 	add.w	r3, r7, #28
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4881      	ldr	r0, [pc, #516]	@ (8001ed0 <MX_GPIO_Init+0x304>)
 8001cca:	f002 fc25 	bl	8004518 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8001cce:	237a      	movs	r3, #122	@ 0x7a
 8001cd0:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cd2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001cd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cdc:	f107 031c 	add.w	r3, r7, #28
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	487b      	ldr	r0, [pc, #492]	@ (8001ed0 <MX_GPIO_Init+0x304>)
 8001ce4:	f002 fc18 	bl	8004518 <HAL_GPIO_Init>

  /*Configure GPIO pins : blue_button_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = blue_button_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001ce8:	f44f 5306 	mov.w	r3, #8576	@ 0x2180
 8001cec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cee:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001cf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cf8:	f107 031c 	add.w	r3, r7, #28
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4877      	ldr	r0, [pc, #476]	@ (8001edc <MX_GPIO_Init+0x310>)
 8001d00:	f002 fc0a 	bl	8004518 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001d04:	2303      	movs	r3, #3
 8001d06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d10:	2303      	movs	r3, #3
 8001d12:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001d14:	2308      	movs	r3, #8
 8001d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d18:	f107 031c 	add.w	r3, r7, #28
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d22:	f002 fbf9 	bl	8004518 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8001d26:	f248 131c 	movw	r3, #33052	@ 0x811c
 8001d2a:	61fb      	str	r3, [r7, #28]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d34:	2300      	movs	r3, #0
 8001d36:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d38:	f107 031c 	add.w	r3, r7, #28
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d42:	f002 fbe9 	bl	8004518 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001d46:	23e0      	movs	r3, #224	@ 0xe0
 8001d48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d52:	2303      	movs	r3, #3
 8001d54:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d56:	2305      	movs	r3, #5
 8001d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5a:	f107 031c 	add.w	r3, r7, #28
 8001d5e:	4619      	mov	r1, r3
 8001d60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d64:	f002 fbd8 	bl	8004518 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d6c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001d70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001d76:	f107 031c 	add.w	r3, r7, #28
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4855      	ldr	r0, [pc, #340]	@ (8001ed4 <MX_GPIO_Init+0x308>)
 8001d7e:	f002 fbcb 	bl	8004518 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001d82:	2302      	movs	r3, #2
 8001d84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d86:	2302      	movs	r3, #2
 8001d88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d92:	2302      	movs	r3, #2
 8001d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001d96:	f107 031c 	add.w	r3, r7, #28
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	484d      	ldr	r0, [pc, #308]	@ (8001ed4 <MX_GPIO_Init+0x308>)
 8001d9e:	f002 fbbb 	bl	8004518 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin greenLed_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|greenLed_Pin
 8001da2:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8001da6:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da8:	2301      	movs	r3, #1
 8001daa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dac:	2300      	movs	r3, #0
 8001dae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db0:	2300      	movs	r3, #0
 8001db2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db4:	f107 031c 	add.w	r3, r7, #28
 8001db8:	4619      	mov	r1, r3
 8001dba:	4846      	ldr	r0, [pc, #280]	@ (8001ed4 <MX_GPIO_Init+0x308>)
 8001dbc:	f002 fbac 	bl	8004518 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001dc0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001dc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001dd2:	2307      	movs	r3, #7
 8001dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dd6:	f107 031c 	add.w	r3, r7, #28
 8001dda:	4619      	mov	r1, r3
 8001ddc:	483e      	ldr	r0, [pc, #248]	@ (8001ed8 <MX_GPIO_Init+0x30c>)
 8001dde:	f002 fb9b 	bl	8004518 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8001de2:	f64d 4304 	movw	r3, #56324	@ 0xdc04
 8001de6:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001de8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001dec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001df2:	f107 031c 	add.w	r3, r7, #28
 8001df6:	4619      	mov	r1, r3
 8001df8:	4837      	ldr	r0, [pc, #220]	@ (8001ed8 <MX_GPIO_Init+0x30c>)
 8001dfa:	f002 fb8d 	bl	8004518 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8001dfe:	f242 0383 	movw	r3, #8323	@ 0x2083
 8001e02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e04:	2301      	movs	r3, #1
 8001e06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e10:	f107 031c 	add.w	r3, r7, #28
 8001e14:	4619      	mov	r1, r3
 8001e16:	4830      	ldr	r0, [pc, #192]	@ (8001ed8 <MX_GPIO_Init+0x30c>)
 8001e18:	f002 fb7e 	bl	8004518 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001e1c:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001e20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e22:	2301      	movs	r3, #1
 8001e24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e2e:	f107 031c 	add.w	r3, r7, #28
 8001e32:	4619      	mov	r1, r3
 8001e34:	4829      	ldr	r0, [pc, #164]	@ (8001edc <MX_GPIO_Init+0x310>)
 8001e36:	f002 fb6f 	bl	8004518 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001e3a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001e3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e40:	2302      	movs	r3, #2
 8001e42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001e4c:	230a      	movs	r3, #10
 8001e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e50:	f107 031c 	add.w	r3, r7, #28
 8001e54:	4619      	mov	r1, r3
 8001e56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e5a:	f002 fb5d 	bl	8004518 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001e5e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001e62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e64:	2302      	movs	r3, #2
 8001e66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e70:	2306      	movs	r3, #6
 8001e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e74:	f107 031c 	add.w	r3, r7, #28
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4818      	ldr	r0, [pc, #96]	@ (8001edc <MX_GPIO_Init+0x310>)
 8001e7c:	f002 fb4c 	bl	8004518 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001e80:	2378      	movs	r3, #120	@ 0x78
 8001e82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e84:	2302      	movs	r3, #2
 8001e86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e90:	2307      	movs	r3, #7
 8001e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e94:	f107 031c 	add.w	r3, r7, #28
 8001e98:	4619      	mov	r1, r3
 8001e9a:	480f      	ldr	r0, [pc, #60]	@ (8001ed8 <MX_GPIO_Init+0x30c>)
 8001e9c:	f002 fb3c 	bl	8004518 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001ea0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ea4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ea6:	2312      	movs	r3, #18
 8001ea8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001eb2:	2304      	movs	r3, #4
 8001eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb6:	f107 031c 	add.w	r3, r7, #28
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4805      	ldr	r0, [pc, #20]	@ (8001ed4 <MX_GPIO_Init+0x308>)
 8001ebe:	f002 fb2b 	bl	8004518 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	2017      	movs	r0, #23
 8001ec8:	e00a      	b.n	8001ee0 <MX_GPIO_Init+0x314>
 8001eca:	bf00      	nop
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	48001000 	.word	0x48001000
 8001ed4:	48000400 	.word	0x48000400
 8001ed8:	48000c00 	.word	0x48000c00
 8001edc:	48000800 	.word	0x48000800
 8001ee0:	f002 f9d7 	bl	8004292 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001ee4:	2017      	movs	r0, #23
 8001ee6:	f002 f9f0 	bl	80042ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001eea:	2200      	movs	r2, #0
 8001eec:	2100      	movs	r1, #0
 8001eee:	2028      	movs	r0, #40	@ 0x28
 8001ef0:	f002 f9cf 	bl	8004292 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ef4:	2028      	movs	r0, #40	@ 0x28
 8001ef6:	f002 f9e8 	bl	80042ca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001efa:	bf00      	nop
 8001efc:	3730      	adds	r7, #48	@ 0x30
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop

08001f04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001f08:	b672      	cpsid	i
}
 8001f0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f0c:	bf00      	nop
 8001f0e:	e7fd      	b.n	8001f0c <Error_Handler+0x8>

08001f10 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08a      	sub	sp, #40	@ 0x28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001f18:	4b27      	ldr	r3, [pc, #156]	@ (8001fb8 <I2Cx_MspInit+0xa8>)
 8001f1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f1c:	4a26      	ldr	r2, [pc, #152]	@ (8001fb8 <I2Cx_MspInit+0xa8>)
 8001f1e:	f043 0302 	orr.w	r3, r3, #2
 8001f22:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f24:	4b24      	ldr	r3, [pc, #144]	@ (8001fb8 <I2Cx_MspInit+0xa8>)
 8001f26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	613b      	str	r3, [r7, #16]
 8001f2e:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001f30:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001f34:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001f36:	2312      	movs	r3, #18
 8001f38:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001f42:	2304      	movs	r3, #4
 8001f44:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001f46:	f107 0314 	add.w	r3, r7, #20
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	481b      	ldr	r0, [pc, #108]	@ (8001fbc <I2Cx_MspInit+0xac>)
 8001f4e:	f002 fae3 	bl	8004518 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001f52:	f107 0314 	add.w	r3, r7, #20
 8001f56:	4619      	mov	r1, r3
 8001f58:	4818      	ldr	r0, [pc, #96]	@ (8001fbc <I2Cx_MspInit+0xac>)
 8001f5a:	f002 fadd 	bl	8004518 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001f5e:	4b16      	ldr	r3, [pc, #88]	@ (8001fb8 <I2Cx_MspInit+0xa8>)
 8001f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f62:	4a15      	ldr	r2, [pc, #84]	@ (8001fb8 <I2Cx_MspInit+0xa8>)
 8001f64:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f68:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f6a:	4b13      	ldr	r3, [pc, #76]	@ (8001fb8 <I2Cx_MspInit+0xa8>)
 8001f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001f76:	4b10      	ldr	r3, [pc, #64]	@ (8001fb8 <I2Cx_MspInit+0xa8>)
 8001f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f7a:	4a0f      	ldr	r2, [pc, #60]	@ (8001fb8 <I2Cx_MspInit+0xa8>)
 8001f7c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f80:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001f82:	4b0d      	ldr	r3, [pc, #52]	@ (8001fb8 <I2Cx_MspInit+0xa8>)
 8001f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f86:	4a0c      	ldr	r2, [pc, #48]	@ (8001fb8 <I2Cx_MspInit+0xa8>)
 8001f88:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001f8c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	210f      	movs	r1, #15
 8001f92:	2021      	movs	r0, #33	@ 0x21
 8001f94:	f002 f97d 	bl	8004292 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001f98:	2021      	movs	r0, #33	@ 0x21
 8001f9a:	f002 f996 	bl	80042ca <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	210f      	movs	r1, #15
 8001fa2:	2022      	movs	r0, #34	@ 0x22
 8001fa4:	f002 f975 	bl	8004292 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001fa8:	2022      	movs	r0, #34	@ 0x22
 8001faa:	f002 f98e 	bl	80042ca <HAL_NVIC_EnableIRQ>
}
 8001fae:	bf00      	nop
 8001fb0:	3728      	adds	r7, #40	@ 0x28
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	48000400 	.word	0x48000400

08001fc0 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a12      	ldr	r2, [pc, #72]	@ (8002014 <I2Cx_Init+0x54>)
 8001fcc:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a11      	ldr	r2, [pc, #68]	@ (8002018 <I2Cx_Init+0x58>)
 8001fd2:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7ff ff89 	bl	8001f10 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f002 fd49 	bl	8004a96 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8002004:	2100      	movs	r1, #0
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f003 fb00 	bl	800560c <HAL_I2CEx_ConfigAnalogFilter>
}
 800200c:	bf00      	nop
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40005800 	.word	0x40005800
 8002018:	00702681 	.word	0x00702681

0800201c <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08a      	sub	sp, #40	@ 0x28
 8002020:	af04      	add	r7, sp, #16
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	4608      	mov	r0, r1
 8002026:	4611      	mov	r1, r2
 8002028:	461a      	mov	r2, r3
 800202a:	4603      	mov	r3, r0
 800202c:	72fb      	strb	r3, [r7, #11]
 800202e:	460b      	mov	r3, r1
 8002030:	813b      	strh	r3, [r7, #8]
 8002032:	4613      	mov	r3, r2
 8002034:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002036:	2300      	movs	r3, #0
 8002038:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800203a:	7afb      	ldrb	r3, [r7, #11]
 800203c:	b299      	uxth	r1, r3
 800203e:	88f8      	ldrh	r0, [r7, #6]
 8002040:	893a      	ldrh	r2, [r7, #8]
 8002042:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002046:	9302      	str	r3, [sp, #8]
 8002048:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800204a:	9301      	str	r3, [sp, #4]
 800204c:	6a3b      	ldr	r3, [r7, #32]
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	4603      	mov	r3, r0
 8002052:	68f8      	ldr	r0, [r7, #12]
 8002054:	f002 fefe 	bl	8004e54 <HAL_I2C_Mem_Read>
 8002058:	4603      	mov	r3, r0
 800205a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800205c:	7dfb      	ldrb	r3, [r7, #23]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d004      	beq.n	800206c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002062:	7afb      	ldrb	r3, [r7, #11]
 8002064:	4619      	mov	r1, r3
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f000 f832 	bl	80020d0 <I2Cx_Error>
  }
  return status;
 800206c:	7dfb      	ldrb	r3, [r7, #23]
}
 800206e:	4618      	mov	r0, r3
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b08a      	sub	sp, #40	@ 0x28
 800207a:	af04      	add	r7, sp, #16
 800207c:	60f8      	str	r0, [r7, #12]
 800207e:	4608      	mov	r0, r1
 8002080:	4611      	mov	r1, r2
 8002082:	461a      	mov	r2, r3
 8002084:	4603      	mov	r3, r0
 8002086:	72fb      	strb	r3, [r7, #11]
 8002088:	460b      	mov	r3, r1
 800208a:	813b      	strh	r3, [r7, #8]
 800208c:	4613      	mov	r3, r2
 800208e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002090:	2300      	movs	r3, #0
 8002092:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002094:	7afb      	ldrb	r3, [r7, #11]
 8002096:	b299      	uxth	r1, r3
 8002098:	88f8      	ldrh	r0, [r7, #6]
 800209a:	893a      	ldrh	r2, [r7, #8]
 800209c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020a0:	9302      	str	r3, [sp, #8]
 80020a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80020a4:	9301      	str	r3, [sp, #4]
 80020a6:	6a3b      	ldr	r3, [r7, #32]
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	4603      	mov	r3, r0
 80020ac:	68f8      	ldr	r0, [r7, #12]
 80020ae:	f002 fdbd 	bl	8004c2c <HAL_I2C_Mem_Write>
 80020b2:	4603      	mov	r3, r0
 80020b4:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80020b6:	7dfb      	ldrb	r3, [r7, #23]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d004      	beq.n	80020c6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80020bc:	7afb      	ldrb	r3, [r7, #11]
 80020be:	4619      	mov	r1, r3
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	f000 f805 	bl	80020d0 <I2Cx_Error>
  }
  return status;
 80020c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	460b      	mov	r3, r1
 80020da:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f002 fd75 	bl	8004bcc <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7ff ff6c 	bl	8001fc0 <I2Cx_Init>
}
 80020e8:	bf00      	nop
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80020f4:	4802      	ldr	r0, [pc, #8]	@ (8002100 <SENSOR_IO_Init+0x10>)
 80020f6:	f7ff ff63 	bl	8001fc0 <I2Cx_Init>
}
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	20000448 	.word	0x20000448

08002104 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af02      	add	r7, sp, #8
 800210a:	4603      	mov	r3, r0
 800210c:	71fb      	strb	r3, [r7, #7]
 800210e:	460b      	mov	r3, r1
 8002110:	71bb      	strb	r3, [r7, #6]
 8002112:	4613      	mov	r3, r2
 8002114:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002116:	79bb      	ldrb	r3, [r7, #6]
 8002118:	b29a      	uxth	r2, r3
 800211a:	79f9      	ldrb	r1, [r7, #7]
 800211c:	2301      	movs	r3, #1
 800211e:	9301      	str	r3, [sp, #4]
 8002120:	1d7b      	adds	r3, r7, #5
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	2301      	movs	r3, #1
 8002126:	4803      	ldr	r0, [pc, #12]	@ (8002134 <SENSOR_IO_Write+0x30>)
 8002128:	f7ff ffa5 	bl	8002076 <I2Cx_WriteMultiple>
}
 800212c:	bf00      	nop
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	20000448 	.word	0x20000448

08002138 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af02      	add	r7, sp, #8
 800213e:	4603      	mov	r3, r0
 8002140:	460a      	mov	r2, r1
 8002142:	71fb      	strb	r3, [r7, #7]
 8002144:	4613      	mov	r3, r2
 8002146:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002148:	2300      	movs	r3, #0
 800214a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800214c:	79bb      	ldrb	r3, [r7, #6]
 800214e:	b29a      	uxth	r2, r3
 8002150:	79f9      	ldrb	r1, [r7, #7]
 8002152:	2301      	movs	r3, #1
 8002154:	9301      	str	r3, [sp, #4]
 8002156:	f107 030f 	add.w	r3, r7, #15
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	2301      	movs	r3, #1
 800215e:	4804      	ldr	r0, [pc, #16]	@ (8002170 <SENSOR_IO_Read+0x38>)
 8002160:	f7ff ff5c 	bl	800201c <I2Cx_ReadMultiple>

  return read_value;
 8002164:	7bfb      	ldrb	r3, [r7, #15]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	20000448 	.word	0x20000448

08002174 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af02      	add	r7, sp, #8
 800217a:	603a      	str	r2, [r7, #0]
 800217c:	461a      	mov	r2, r3
 800217e:	4603      	mov	r3, r0
 8002180:	71fb      	strb	r3, [r7, #7]
 8002182:	460b      	mov	r3, r1
 8002184:	71bb      	strb	r3, [r7, #6]
 8002186:	4613      	mov	r3, r2
 8002188:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800218a:	79bb      	ldrb	r3, [r7, #6]
 800218c:	b29a      	uxth	r2, r3
 800218e:	79f9      	ldrb	r1, [r7, #7]
 8002190:	88bb      	ldrh	r3, [r7, #4]
 8002192:	9301      	str	r3, [sp, #4]
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	2301      	movs	r3, #1
 800219a:	4804      	ldr	r0, [pc, #16]	@ (80021ac <SENSOR_IO_ReadMultiple+0x38>)
 800219c:	f7ff ff3e 	bl	800201c <I2Cx_ReadMultiple>
 80021a0:	4603      	mov	r3, r0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	20000448 	.word	0x20000448

080021b0 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 80021b6:	2300      	movs	r3, #0
 80021b8:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80021ba:	2300      	movs	r3, #0
 80021bc:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80021be:	4b19      	ldr	r3, [pc, #100]	@ (8002224 <BSP_ACCELERO_Init+0x74>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	4798      	blx	r3
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b6a      	cmp	r3, #106	@ 0x6a
 80021c8:	d002      	beq.n	80021d0 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	73fb      	strb	r3, [r7, #15]
 80021ce:	e024      	b.n	800221a <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80021d0:	4b15      	ldr	r3, [pc, #84]	@ (8002228 <BSP_ACCELERO_Init+0x78>)
 80021d2:	4a14      	ldr	r2, [pc, #80]	@ (8002224 <BSP_ACCELERO_Init+0x74>)
 80021d4:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 80021d6:	2330      	movs	r3, #48	@ 0x30
 80021d8:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80021da:	2300      	movs	r3, #0
 80021dc:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80021de:	2300      	movs	r3, #0
 80021e0:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80021e2:	2340      	movs	r3, #64	@ 0x40
 80021e4:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80021e6:	2300      	movs	r3, #0
 80021e8:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80021ea:	2300      	movs	r3, #0
 80021ec:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 80021ee:	797a      	ldrb	r2, [r7, #5]
 80021f0:	7abb      	ldrb	r3, [r7, #10]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80021f8:	7a3b      	ldrb	r3, [r7, #8]
 80021fa:	f043 0304 	orr.w	r3, r3, #4
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	021b      	lsls	r3, r3, #8
 8002202:	b21a      	sxth	r2, r3
 8002204:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002208:	4313      	orrs	r3, r2
 800220a:	b21b      	sxth	r3, r3
 800220c:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800220e:	4b06      	ldr	r3, [pc, #24]	@ (8002228 <BSP_ACCELERO_Init+0x78>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	89ba      	ldrh	r2, [r7, #12]
 8002216:	4610      	mov	r0, r2
 8002218:	4798      	blx	r3
  }  

  return ret;
 800221a:	7bfb      	ldrb	r3, [r7, #15]
}
 800221c:	4618      	mov	r0, r3
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	20000018 	.word	0x20000018
 8002228:	2000049c 	.word	0x2000049c

0800222c <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8002234:	4b08      	ldr	r3, [pc, #32]	@ (8002258 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d009      	beq.n	8002250 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 800223c:	4b06      	ldr	r3, [pc, #24]	@ (8002258 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002242:	2b00      	cmp	r3, #0
 8002244:	d004      	beq.n	8002250 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8002246:	4b04      	ldr	r3, [pc, #16]	@ (8002258 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	4798      	blx	r3
    }
  }
}
 8002250:	bf00      	nop
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	2000049c 	.word	0x2000049c

0800225c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002262:	4b0f      	ldr	r3, [pc, #60]	@ (80022a0 <HAL_MspInit+0x44>)
 8002264:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002266:	4a0e      	ldr	r2, [pc, #56]	@ (80022a0 <HAL_MspInit+0x44>)
 8002268:	f043 0301 	orr.w	r3, r3, #1
 800226c:	6613      	str	r3, [r2, #96]	@ 0x60
 800226e:	4b0c      	ldr	r3, [pc, #48]	@ (80022a0 <HAL_MspInit+0x44>)
 8002270:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	607b      	str	r3, [r7, #4]
 8002278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800227a:	4b09      	ldr	r3, [pc, #36]	@ (80022a0 <HAL_MspInit+0x44>)
 800227c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800227e:	4a08      	ldr	r2, [pc, #32]	@ (80022a0 <HAL_MspInit+0x44>)
 8002280:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002284:	6593      	str	r3, [r2, #88]	@ 0x58
 8002286:	4b06      	ldr	r3, [pc, #24]	@ (80022a0 <HAL_MspInit+0x44>)
 8002288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800228a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800228e:	603b      	str	r3, [r7, #0]
 8002290:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	40021000 	.word	0x40021000

080022a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08a      	sub	sp, #40	@ 0x28
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ac:	f107 0314 	add.w	r3, r7, #20
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	609a      	str	r2, [r3, #8]
 80022b8:	60da      	str	r2, [r3, #12]
 80022ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a15      	ldr	r2, [pc, #84]	@ (8002318 <HAL_ADC_MspInit+0x74>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d123      	bne.n	800230e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80022c6:	4b15      	ldr	r3, [pc, #84]	@ (800231c <HAL_ADC_MspInit+0x78>)
 80022c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ca:	4a14      	ldr	r2, [pc, #80]	@ (800231c <HAL_ADC_MspInit+0x78>)
 80022cc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80022d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022d2:	4b12      	ldr	r3, [pc, #72]	@ (800231c <HAL_ADC_MspInit+0x78>)
 80022d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022da:	613b      	str	r3, [r7, #16]
 80022dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022de:	4b0f      	ldr	r3, [pc, #60]	@ (800231c <HAL_ADC_MspInit+0x78>)
 80022e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022e2:	4a0e      	ldr	r2, [pc, #56]	@ (800231c <HAL_ADC_MspInit+0x78>)
 80022e4:	f043 0304 	orr.w	r3, r3, #4
 80022e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022ea:	4b0c      	ldr	r3, [pc, #48]	@ (800231c <HAL_ADC_MspInit+0x78>)
 80022ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ee:	f003 0304 	and.w	r3, r3, #4
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80022f6:	233f      	movs	r3, #63	@ 0x3f
 80022f8:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80022fa:	230b      	movs	r3, #11
 80022fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002302:	f107 0314 	add.w	r3, r7, #20
 8002306:	4619      	mov	r1, r3
 8002308:	4805      	ldr	r0, [pc, #20]	@ (8002320 <HAL_ADC_MspInit+0x7c>)
 800230a:	f002 f905 	bl	8004518 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800230e:	bf00      	nop
 8002310:	3728      	adds	r7, #40	@ 0x28
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	50040000 	.word	0x50040000
 800231c:	40021000 	.word	0x40021000
 8002320:	48000800 	.word	0x48000800

08002324 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b0ae      	sub	sp, #184	@ 0xb8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	605a      	str	r2, [r3, #4]
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	60da      	str	r2, [r3, #12]
 800233a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800233c:	f107 0310 	add.w	r3, r7, #16
 8002340:	2294      	movs	r2, #148	@ 0x94
 8002342:	2100      	movs	r1, #0
 8002344:	4618      	mov	r0, r3
 8002346:	f006 ff9f 	bl	8009288 <memset>
  if(DFSDM1_Init == 0)
 800234a:	4b25      	ldr	r3, [pc, #148]	@ (80023e0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d142      	bne.n	80023d8 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8002352:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002356:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8002358:	2300      	movs	r3, #0
 800235a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800235e:	f107 0310 	add.w	r3, r7, #16
 8002362:	4618      	mov	r0, r3
 8002364:	f004 fe70 	bl	8007048 <HAL_RCCEx_PeriphCLKConfig>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800236e:	f7ff fdc9 	bl	8001f04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002372:	4b1c      	ldr	r3, [pc, #112]	@ (80023e4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002374:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002376:	4a1b      	ldr	r2, [pc, #108]	@ (80023e4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002378:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800237c:	6613      	str	r3, [r2, #96]	@ 0x60
 800237e:	4b19      	ldr	r3, [pc, #100]	@ (80023e4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002380:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002382:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800238a:	4b16      	ldr	r3, [pc, #88]	@ (80023e4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800238c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800238e:	4a15      	ldr	r2, [pc, #84]	@ (80023e4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002390:	f043 0310 	orr.w	r3, r3, #16
 8002394:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002396:	4b13      	ldr	r3, [pc, #76]	@ (80023e4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800239a:	f003 0310 	and.w	r3, r3, #16
 800239e:	60bb      	str	r3, [r7, #8]
 80023a0:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80023a2:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80023a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023aa:	2302      	movs	r3, #2
 80023ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b0:	2300      	movs	r3, #0
 80023b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b6:	2300      	movs	r3, #0
 80023b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80023bc:	2306      	movs	r3, #6
 80023be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023c2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80023c6:	4619      	mov	r1, r3
 80023c8:	4807      	ldr	r0, [pc, #28]	@ (80023e8 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80023ca:	f002 f8a5 	bl	8004518 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 80023ce:	4b04      	ldr	r3, [pc, #16]	@ (80023e0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	3301      	adds	r3, #1
 80023d4:	4a02      	ldr	r2, [pc, #8]	@ (80023e0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80023d6:	6013      	str	r3, [r2, #0]
  }

}
 80023d8:	bf00      	nop
 80023da:	37b8      	adds	r7, #184	@ 0xb8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	200004a0 	.word	0x200004a0
 80023e4:	40021000 	.word	0x40021000
 80023e8:	48001000 	.word	0x48001000

080023ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b0ae      	sub	sp, #184	@ 0xb8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
 8002402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002404:	f107 0310 	add.w	r3, r7, #16
 8002408:	2294      	movs	r2, #148	@ 0x94
 800240a:	2100      	movs	r1, #0
 800240c:	4618      	mov	r0, r3
 800240e:	f006 ff3b 	bl	8009288 <memset>
  if(hi2c->Instance==I2C2)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a21      	ldr	r2, [pc, #132]	@ (800249c <HAL_I2C_MspInit+0xb0>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d13b      	bne.n	8002494 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800241c:	2380      	movs	r3, #128	@ 0x80
 800241e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002420:	2300      	movs	r3, #0
 8002422:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002424:	f107 0310 	add.w	r3, r7, #16
 8002428:	4618      	mov	r0, r3
 800242a:	f004 fe0d 	bl	8007048 <HAL_RCCEx_PeriphCLKConfig>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002434:	f7ff fd66 	bl	8001f04 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002438:	4b19      	ldr	r3, [pc, #100]	@ (80024a0 <HAL_I2C_MspInit+0xb4>)
 800243a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800243c:	4a18      	ldr	r2, [pc, #96]	@ (80024a0 <HAL_I2C_MspInit+0xb4>)
 800243e:	f043 0302 	orr.w	r3, r3, #2
 8002442:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002444:	4b16      	ldr	r3, [pc, #88]	@ (80024a0 <HAL_I2C_MspInit+0xb4>)
 8002446:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8002450:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002454:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002458:	2312      	movs	r3, #18
 800245a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800245e:	2301      	movs	r3, #1
 8002460:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002464:	2303      	movs	r3, #3
 8002466:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800246a:	2304      	movs	r3, #4
 800246c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002470:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002474:	4619      	mov	r1, r3
 8002476:	480b      	ldr	r0, [pc, #44]	@ (80024a4 <HAL_I2C_MspInit+0xb8>)
 8002478:	f002 f84e 	bl	8004518 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800247c:	4b08      	ldr	r3, [pc, #32]	@ (80024a0 <HAL_I2C_MspInit+0xb4>)
 800247e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002480:	4a07      	ldr	r2, [pc, #28]	@ (80024a0 <HAL_I2C_MspInit+0xb4>)
 8002482:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002486:	6593      	str	r3, [r2, #88]	@ 0x58
 8002488:	4b05      	ldr	r3, [pc, #20]	@ (80024a0 <HAL_I2C_MspInit+0xb4>)
 800248a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800248c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002490:	60bb      	str	r3, [r7, #8]
 8002492:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002494:	bf00      	nop
 8002496:	37b8      	adds	r7, #184	@ 0xb8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40005800 	.word	0x40005800
 80024a0:	40021000 	.word	0x40021000
 80024a4:	48000400 	.word	0x48000400

080024a8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a0b      	ldr	r2, [pc, #44]	@ (80024e4 <HAL_I2C_MspDeInit+0x3c>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d10f      	bne.n	80024da <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80024ba:	4b0b      	ldr	r3, [pc, #44]	@ (80024e8 <HAL_I2C_MspDeInit+0x40>)
 80024bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024be:	4a0a      	ldr	r2, [pc, #40]	@ (80024e8 <HAL_I2C_MspDeInit+0x40>)
 80024c0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80024c4:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 80024c6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80024ca:	4808      	ldr	r0, [pc, #32]	@ (80024ec <HAL_I2C_MspDeInit+0x44>)
 80024cc:	f002 f9b6 	bl	800483c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 80024d0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80024d4:	4805      	ldr	r0, [pc, #20]	@ (80024ec <HAL_I2C_MspDeInit+0x44>)
 80024d6:	f002 f9b1 	bl	800483c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40005800 	.word	0x40005800
 80024e8:	40021000 	.word	0x40021000
 80024ec:	48000400 	.word	0x48000400

080024f0 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b0b0      	sub	sp, #192	@ 0xc0
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	605a      	str	r2, [r3, #4]
 8002502:	609a      	str	r2, [r3, #8]
 8002504:	60da      	str	r2, [r3, #12]
 8002506:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002508:	f107 0318 	add.w	r3, r7, #24
 800250c:	2294      	movs	r2, #148	@ 0x94
 800250e:	2100      	movs	r1, #0
 8002510:	4618      	mov	r0, r3
 8002512:	f006 feb9 	bl	8009288 <memset>
  if(hospi->Instance==OCTOSPI1)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a28      	ldr	r2, [pc, #160]	@ (80025bc <HAL_OSPI_MspInit+0xcc>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d149      	bne.n	80025b4 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8002520:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002524:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8002526:	2300      	movs	r3, #0
 8002528:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800252c:	f107 0318 	add.w	r3, r7, #24
 8002530:	4618      	mov	r0, r3
 8002532:	f004 fd89 	bl	8007048 <HAL_RCCEx_PeriphCLKConfig>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 800253c:	f7ff fce2 	bl	8001f04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8002540:	4b1f      	ldr	r3, [pc, #124]	@ (80025c0 <HAL_OSPI_MspInit+0xd0>)
 8002542:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002544:	4a1e      	ldr	r2, [pc, #120]	@ (80025c0 <HAL_OSPI_MspInit+0xd0>)
 8002546:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800254a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800254c:	4b1c      	ldr	r3, [pc, #112]	@ (80025c0 <HAL_OSPI_MspInit+0xd0>)
 800254e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002550:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002554:	617b      	str	r3, [r7, #20]
 8002556:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8002558:	4b19      	ldr	r3, [pc, #100]	@ (80025c0 <HAL_OSPI_MspInit+0xd0>)
 800255a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800255c:	4a18      	ldr	r2, [pc, #96]	@ (80025c0 <HAL_OSPI_MspInit+0xd0>)
 800255e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002562:	6513      	str	r3, [r2, #80]	@ 0x50
 8002564:	4b16      	ldr	r3, [pc, #88]	@ (80025c0 <HAL_OSPI_MspInit+0xd0>)
 8002566:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800256c:	613b      	str	r3, [r7, #16]
 800256e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002570:	4b13      	ldr	r3, [pc, #76]	@ (80025c0 <HAL_OSPI_MspInit+0xd0>)
 8002572:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002574:	4a12      	ldr	r2, [pc, #72]	@ (80025c0 <HAL_OSPI_MspInit+0xd0>)
 8002576:	f043 0310 	orr.w	r3, r3, #16
 800257a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800257c:	4b10      	ldr	r3, [pc, #64]	@ (80025c0 <HAL_OSPI_MspInit+0xd0>)
 800257e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002580:	f003 0310 	and.w	r3, r3, #16
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8002588:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800258c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002590:	2302      	movs	r3, #2
 8002592:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002596:	2300      	movs	r3, #0
 8002598:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800259c:	2303      	movs	r3, #3
 800259e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80025a2:	230a      	movs	r3, #10
 80025a4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025a8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80025ac:	4619      	mov	r1, r3
 80025ae:	4805      	ldr	r0, [pc, #20]	@ (80025c4 <HAL_OSPI_MspInit+0xd4>)
 80025b0:	f001 ffb2 	bl	8004518 <HAL_GPIO_Init>

  /* USER CODE END OCTOSPI1_MspInit 1 */

  }

}
 80025b4:	bf00      	nop
 80025b6:	37c0      	adds	r7, #192	@ 0xc0
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	a0001000 	.word	0xa0001000
 80025c0:	40021000 	.word	0x40021000
 80025c4:	48001000 	.word	0x48001000

080025c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b0ae      	sub	sp, #184	@ 0xb8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	605a      	str	r2, [r3, #4]
 80025da:	609a      	str	r2, [r3, #8]
 80025dc:	60da      	str	r2, [r3, #12]
 80025de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025e0:	f107 0310 	add.w	r3, r7, #16
 80025e4:	2294      	movs	r2, #148	@ 0x94
 80025e6:	2100      	movs	r1, #0
 80025e8:	4618      	mov	r0, r3
 80025ea:	f006 fe4d 	bl	8009288 <memset>
  if(huart->Instance==USART1)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a21      	ldr	r2, [pc, #132]	@ (8002678 <HAL_UART_MspInit+0xb0>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d13a      	bne.n	800266e <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80025f8:	2301      	movs	r3, #1
 80025fa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80025fc:	2300      	movs	r3, #0
 80025fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002600:	f107 0310 	add.w	r3, r7, #16
 8002604:	4618      	mov	r0, r3
 8002606:	f004 fd1f 	bl	8007048 <HAL_RCCEx_PeriphCLKConfig>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002610:	f7ff fc78 	bl	8001f04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002614:	4b19      	ldr	r3, [pc, #100]	@ (800267c <HAL_UART_MspInit+0xb4>)
 8002616:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002618:	4a18      	ldr	r2, [pc, #96]	@ (800267c <HAL_UART_MspInit+0xb4>)
 800261a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800261e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002620:	4b16      	ldr	r3, [pc, #88]	@ (800267c <HAL_UART_MspInit+0xb4>)
 8002622:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002624:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800262c:	4b13      	ldr	r3, [pc, #76]	@ (800267c <HAL_UART_MspInit+0xb4>)
 800262e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002630:	4a12      	ldr	r2, [pc, #72]	@ (800267c <HAL_UART_MspInit+0xb4>)
 8002632:	f043 0302 	orr.w	r3, r3, #2
 8002636:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002638:	4b10      	ldr	r3, [pc, #64]	@ (800267c <HAL_UART_MspInit+0xb4>)
 800263a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	60bb      	str	r3, [r7, #8]
 8002642:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|GPIO_PIN_7;
 8002644:	23c0      	movs	r3, #192	@ 0xc0
 8002646:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264a:	2302      	movs	r3, #2
 800264c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002650:	2300      	movs	r3, #0
 8002652:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002656:	2303      	movs	r3, #3
 8002658:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800265c:	2307      	movs	r3, #7
 800265e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002662:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002666:	4619      	mov	r1, r3
 8002668:	4805      	ldr	r0, [pc, #20]	@ (8002680 <HAL_UART_MspInit+0xb8>)
 800266a:	f001 ff55 	bl	8004518 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800266e:	bf00      	nop
 8002670:	37b8      	adds	r7, #184	@ 0xb8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40013800 	.word	0x40013800
 800267c:	40021000 	.word	0x40021000
 8002680:	48000400 	.word	0x48000400

08002684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002688:	bf00      	nop
 800268a:	e7fd      	b.n	8002688 <NMI_Handler+0x4>

0800268c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002690:	bf00      	nop
 8002692:	e7fd      	b.n	8002690 <HardFault_Handler+0x4>

08002694 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002698:	bf00      	nop
 800269a:	e7fd      	b.n	8002698 <MemManage_Handler+0x4>

0800269c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026a0:	bf00      	nop
 80026a2:	e7fd      	b.n	80026a0 <BusFault_Handler+0x4>

080026a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026a8:	bf00      	nop
 80026aa:	e7fd      	b.n	80026a8 <UsageFault_Handler+0x4>

080026ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026b0:	bf00      	nop
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026ba:	b480      	push	{r7}
 80026bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026be:	bf00      	nop
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026cc:	bf00      	nop
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026da:	f000 fa7d 	bl	8002bd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80026e6:	2020      	movs	r0, #32
 80026e8:	f002 f9b2 	bl	8004a50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80026ec:	2040      	movs	r0, #64	@ 0x40
 80026ee:	f002 f9af 	bl	8004a50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80026f2:	2080      	movs	r0, #128	@ 0x80
 80026f4:	f002 f9ac 	bl	8004a50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80026f8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80026fc:	f002 f9a8 	bl	8004a50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002700:	bf00      	nop
 8002702:	bd80      	pop	{r7, pc}

08002704 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 8002708:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800270c:	f002 f9a0 	bl	8004a50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8002710:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002714:	f002 f99c 	bl	8004a50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 8002718:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800271c:	f002 f998 	bl	8004a50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(blue_button_Pin);
 8002720:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002724:	f002 f994 	bl	8004a50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8002728:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800272c:	f002 f990 	bl	8004a50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8002730:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002734:	f002 f98c 	bl	8004a50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002738:	bf00      	nop
 800273a:	bd80      	pop	{r7, pc}

0800273c <_getpid>:
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
 8002740:	2301      	movs	r3, #1
 8002742:	4618      	mov	r0, r3
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <_kill>:
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
 8002756:	f006 fda3 	bl	80092a0 <__errno>
 800275a:	4603      	mov	r3, r0
 800275c:	2216      	movs	r2, #22
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002764:	4618      	mov	r0, r3
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <_exit>:
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f7ff ffe7 	bl	800274c <_kill>
 800277e:	bf00      	nop
 8002780:	e7fd      	b.n	800277e <_exit+0x12>

08002782 <_read>:
 8002782:	b580      	push	{r7, lr}
 8002784:	b086      	sub	sp, #24
 8002786:	af00      	add	r7, sp, #0
 8002788:	60f8      	str	r0, [r7, #12]
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	607a      	str	r2, [r7, #4]
 800278e:	2300      	movs	r3, #0
 8002790:	617b      	str	r3, [r7, #20]
 8002792:	e00a      	b.n	80027aa <_read+0x28>
 8002794:	f3af 8000 	nop.w
 8002798:	4601      	mov	r1, r0
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	1c5a      	adds	r2, r3, #1
 800279e:	60ba      	str	r2, [r7, #8]
 80027a0:	b2ca      	uxtb	r2, r1
 80027a2:	701a      	strb	r2, [r3, #0]
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	3301      	adds	r3, #1
 80027a8:	617b      	str	r3, [r7, #20]
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	dbf0      	blt.n	8002794 <_read+0x12>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4618      	mov	r0, r3
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <_close>:
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80027c8:	4618      	mov	r0, r3
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <_fstat>:
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027e4:	605a      	str	r2, [r3, #4]
 80027e6:	2300      	movs	r3, #0
 80027e8:	4618      	mov	r0, r3
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <_isatty>:
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	2301      	movs	r3, #1
 80027fe:	4618      	mov	r0, r3
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <_lseek>:
 800280a:	b480      	push	{r7}
 800280c:	b085      	sub	sp, #20
 800280e:	af00      	add	r7, sp, #0
 8002810:	60f8      	str	r0, [r7, #12]
 8002812:	60b9      	str	r1, [r7, #8]
 8002814:	607a      	str	r2, [r7, #4]
 8002816:	2300      	movs	r3, #0
 8002818:	4618      	mov	r0, r3
 800281a:	3714      	adds	r7, #20
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <_sbrk>:
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	4a14      	ldr	r2, [pc, #80]	@ (8002880 <_sbrk+0x5c>)
 800282e:	4b15      	ldr	r3, [pc, #84]	@ (8002884 <_sbrk+0x60>)
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	617b      	str	r3, [r7, #20]
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	613b      	str	r3, [r7, #16]
 8002838:	4b13      	ldr	r3, [pc, #76]	@ (8002888 <_sbrk+0x64>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d102      	bne.n	8002846 <_sbrk+0x22>
 8002840:	4b11      	ldr	r3, [pc, #68]	@ (8002888 <_sbrk+0x64>)
 8002842:	4a12      	ldr	r2, [pc, #72]	@ (800288c <_sbrk+0x68>)
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	4b10      	ldr	r3, [pc, #64]	@ (8002888 <_sbrk+0x64>)
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4413      	add	r3, r2
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	429a      	cmp	r2, r3
 8002852:	d207      	bcs.n	8002864 <_sbrk+0x40>
 8002854:	f006 fd24 	bl	80092a0 <__errno>
 8002858:	4603      	mov	r3, r0
 800285a:	220c      	movs	r2, #12
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002862:	e009      	b.n	8002878 <_sbrk+0x54>
 8002864:	4b08      	ldr	r3, [pc, #32]	@ (8002888 <_sbrk+0x64>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	4b07      	ldr	r3, [pc, #28]	@ (8002888 <_sbrk+0x64>)
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4413      	add	r3, r2
 8002872:	4a05      	ldr	r2, [pc, #20]	@ (8002888 <_sbrk+0x64>)
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	4618      	mov	r0, r3
 800287a:	3718      	adds	r7, #24
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	200a0000 	.word	0x200a0000
 8002884:	00000400 	.word	0x00000400
 8002888:	200004a4 	.word	0x200004a4
 800288c:	20000620 	.word	0x20000620

08002890 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002894:	4b06      	ldr	r3, [pc, #24]	@ (80028b0 <SystemInit+0x20>)
 8002896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800289a:	4a05      	ldr	r2, [pc, #20]	@ (80028b0 <SystemInit+0x20>)
 800289c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80028a4:	bf00      	nop
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	e000ed00 	.word	0xe000ed00

080028b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80028b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80028ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80028b8:	f7ff ffea 	bl	8002890 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028bc:	480c      	ldr	r0, [pc, #48]	@ (80028f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80028be:	490d      	ldr	r1, [pc, #52]	@ (80028f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80028c0:	4a0d      	ldr	r2, [pc, #52]	@ (80028f8 <LoopForever+0xe>)
  movs r3, #0
 80028c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028c4:	e002      	b.n	80028cc <LoopCopyDataInit>

080028c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028ca:	3304      	adds	r3, #4

080028cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028d0:	d3f9      	bcc.n	80028c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028d2:	4a0a      	ldr	r2, [pc, #40]	@ (80028fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80028d4:	4c0a      	ldr	r4, [pc, #40]	@ (8002900 <LoopForever+0x16>)
  movs r3, #0
 80028d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028d8:	e001      	b.n	80028de <LoopFillZerobss>

080028da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028dc:	3204      	adds	r2, #4

080028de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028e0:	d3fb      	bcc.n	80028da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028e2:	f006 fce3 	bl	80092ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80028e6:	f7fe fe99 	bl	800161c <main>

080028ea <LoopForever>:

LoopForever:
    b LoopForever
 80028ea:	e7fe      	b.n	80028ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80028ec:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80028f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028f4:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 80028f8:	0800b858 	.word	0x0800b858
  ldr r2, =_sbss
 80028fc:	2000021c 	.word	0x2000021c
  ldr r4, =_ebss
 8002900:	2000061c 	.word	0x2000061c

08002904 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002904:	e7fe      	b.n	8002904 <ADC1_IRQHandler>

08002906 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8002906:	b580      	push	{r7, lr}
 8002908:	b084      	sub	sp, #16
 800290a:	af00      	add	r7, sp, #0
 800290c:	4603      	mov	r3, r0
 800290e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002910:	2300      	movs	r3, #0
 8002912:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002914:	2110      	movs	r1, #16
 8002916:	20d4      	movs	r0, #212	@ 0xd4
 8002918:	f7ff fc0e 	bl	8002138 <SENSOR_IO_Read>
 800291c:	4603      	mov	r3, r0
 800291e:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8002920:	88fb      	ldrh	r3, [r7, #6]
 8002922:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8002924:	7bbb      	ldrb	r3, [r7, #14]
 8002926:	f003 0303 	and.w	r3, r3, #3
 800292a:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800292c:	7bba      	ldrb	r2, [r7, #14]
 800292e:	7bfb      	ldrb	r3, [r7, #15]
 8002930:	4313      	orrs	r3, r2
 8002932:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8002934:	7bbb      	ldrb	r3, [r7, #14]
 8002936:	461a      	mov	r2, r3
 8002938:	2110      	movs	r1, #16
 800293a:	20d4      	movs	r0, #212	@ 0xd4
 800293c:	f7ff fbe2 	bl	8002104 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8002940:	2112      	movs	r1, #18
 8002942:	20d4      	movs	r0, #212	@ 0xd4
 8002944:	f7ff fbf8 	bl	8002138 <SENSOR_IO_Read>
 8002948:	4603      	mov	r3, r0
 800294a:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800294c:	88fb      	ldrh	r3, [r7, #6]
 800294e:	0a1b      	lsrs	r3, r3, #8
 8002950:	b29b      	uxth	r3, r3
 8002952:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8002954:	7bbb      	ldrb	r3, [r7, #14]
 8002956:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 800295a:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800295c:	7bba      	ldrb	r2, [r7, #14]
 800295e:	7bfb      	ldrb	r3, [r7, #15]
 8002960:	4313      	orrs	r3, r2
 8002962:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8002964:	7bbb      	ldrb	r3, [r7, #14]
 8002966:	461a      	mov	r2, r3
 8002968:	2112      	movs	r1, #18
 800296a:	20d4      	movs	r0, #212	@ 0xd4
 800296c:	f7ff fbca 	bl	8002104 <SENSOR_IO_Write>
}
 8002970:	bf00      	nop
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800297e:	2300      	movs	r3, #0
 8002980:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002982:	2110      	movs	r1, #16
 8002984:	20d4      	movs	r0, #212	@ 0xd4
 8002986:	f7ff fbd7 	bl	8002138 <SENSOR_IO_Read>
 800298a:	4603      	mov	r3, r0
 800298c:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 800298e:	79fb      	ldrb	r3, [r7, #7]
 8002990:	f003 030f 	and.w	r3, r3, #15
 8002994:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	461a      	mov	r2, r3
 800299a:	2110      	movs	r1, #16
 800299c:	20d4      	movs	r0, #212	@ 0xd4
 800299e:	f7ff fbb1 	bl	8002104 <SENSOR_IO_Write>
}
 80029a2:	bf00      	nop
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 80029aa:	b580      	push	{r7, lr}
 80029ac:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80029ae:	f7ff fb9f 	bl	80020f0 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80029b2:	210f      	movs	r1, #15
 80029b4:	20d4      	movs	r0, #212	@ 0xd4
 80029b6:	f7ff fbbf 	bl	8002138 <SENSOR_IO_Read>
 80029ba:	4603      	mov	r3, r0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	bd80      	pop	{r7, pc}

080029c0 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	4603      	mov	r3, r0
 80029c8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80029ca:	2300      	movs	r3, #0
 80029cc:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80029ce:	2115      	movs	r1, #21
 80029d0:	20d4      	movs	r0, #212	@ 0xd4
 80029d2:	f7ff fbb1 	bl	8002138 <SENSOR_IO_Read>
 80029d6:	4603      	mov	r3, r0
 80029d8:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80029da:	7bfb      	ldrb	r3, [r7, #15]
 80029dc:	f023 0310 	bic.w	r3, r3, #16
 80029e0:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80029e2:	88fb      	ldrh	r3, [r7, #6]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d003      	beq.n	80029f0 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80029e8:	7bfb      	ldrb	r3, [r7, #15]
 80029ea:	f043 0310 	orr.w	r3, r3, #16
 80029ee:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80029f0:	7bfb      	ldrb	r3, [r7, #15]
 80029f2:	461a      	mov	r2, r3
 80029f4:	2115      	movs	r1, #21
 80029f6:	20d4      	movs	r0, #212	@ 0xd4
 80029f8:	f7ff fb84 	bl	8002104 <SENSOR_IO_Write>
}
 80029fc:	bf00      	nop
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b088      	sub	sp, #32
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002a10:	2300      	movs	r3, #0
 8002a12:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002a14:	f04f 0300 	mov.w	r3, #0
 8002a18:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002a1a:	2110      	movs	r1, #16
 8002a1c:	20d4      	movs	r0, #212	@ 0xd4
 8002a1e:	f7ff fb8b 	bl	8002138 <SENSOR_IO_Read>
 8002a22:	4603      	mov	r3, r0
 8002a24:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8002a26:	f107 0208 	add.w	r2, r7, #8
 8002a2a:	2306      	movs	r3, #6
 8002a2c:	2128      	movs	r1, #40	@ 0x28
 8002a2e:	20d4      	movs	r0, #212	@ 0xd4
 8002a30:	f7ff fba0 	bl	8002174 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002a34:	2300      	movs	r3, #0
 8002a36:	77fb      	strb	r3, [r7, #31]
 8002a38:	e01a      	b.n	8002a70 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002a3a:	7ffb      	ldrb	r3, [r7, #31]
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	3301      	adds	r3, #1
 8002a40:	3320      	adds	r3, #32
 8002a42:	443b      	add	r3, r7
 8002a44:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002a48:	021b      	lsls	r3, r3, #8
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	7ffa      	ldrb	r2, [r7, #31]
 8002a4e:	0052      	lsls	r2, r2, #1
 8002a50:	3220      	adds	r2, #32
 8002a52:	443a      	add	r2, r7
 8002a54:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8002a58:	4413      	add	r3, r2
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	7ffb      	ldrb	r3, [r7, #31]
 8002a5e:	b212      	sxth	r2, r2
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	3320      	adds	r3, #32
 8002a64:	443b      	add	r3, r7
 8002a66:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002a6a:	7ffb      	ldrb	r3, [r7, #31]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	77fb      	strb	r3, [r7, #31]
 8002a70:	7ffb      	ldrb	r3, [r7, #31]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d9e1      	bls.n	8002a3a <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8002a76:	7dfb      	ldrb	r3, [r7, #23]
 8002a78:	f003 030c 	and.w	r3, r3, #12
 8002a7c:	2b0c      	cmp	r3, #12
 8002a7e:	d829      	bhi.n	8002ad4 <LSM6DSL_AccReadXYZ+0xd0>
 8002a80:	a201      	add	r2, pc, #4	@ (adr r2, 8002a88 <LSM6DSL_AccReadXYZ+0x84>)
 8002a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a86:	bf00      	nop
 8002a88:	08002abd 	.word	0x08002abd
 8002a8c:	08002ad5 	.word	0x08002ad5
 8002a90:	08002ad5 	.word	0x08002ad5
 8002a94:	08002ad5 	.word	0x08002ad5
 8002a98:	08002acf 	.word	0x08002acf
 8002a9c:	08002ad5 	.word	0x08002ad5
 8002aa0:	08002ad5 	.word	0x08002ad5
 8002aa4:	08002ad5 	.word	0x08002ad5
 8002aa8:	08002ac3 	.word	0x08002ac3
 8002aac:	08002ad5 	.word	0x08002ad5
 8002ab0:	08002ad5 	.word	0x08002ad5
 8002ab4:	08002ad5 	.word	0x08002ad5
 8002ab8:	08002ac9 	.word	0x08002ac9
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8002abc:	4b18      	ldr	r3, [pc, #96]	@ (8002b20 <LSM6DSL_AccReadXYZ+0x11c>)
 8002abe:	61bb      	str	r3, [r7, #24]
    break;
 8002ac0:	e008      	b.n	8002ad4 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8002ac2:	4b18      	ldr	r3, [pc, #96]	@ (8002b24 <LSM6DSL_AccReadXYZ+0x120>)
 8002ac4:	61bb      	str	r3, [r7, #24]
    break;
 8002ac6:	e005      	b.n	8002ad4 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8002ac8:	4b17      	ldr	r3, [pc, #92]	@ (8002b28 <LSM6DSL_AccReadXYZ+0x124>)
 8002aca:	61bb      	str	r3, [r7, #24]
    break;
 8002acc:	e002      	b.n	8002ad4 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8002ace:	4b17      	ldr	r3, [pc, #92]	@ (8002b2c <LSM6DSL_AccReadXYZ+0x128>)
 8002ad0:	61bb      	str	r3, [r7, #24]
    break;    
 8002ad2:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	77fb      	strb	r3, [r7, #31]
 8002ad8:	e01a      	b.n	8002b10 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8002ada:	7ffb      	ldrb	r3, [r7, #31]
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	3320      	adds	r3, #32
 8002ae0:	443b      	add	r3, r7
 8002ae2:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002ae6:	ee07 3a90 	vmov	s15, r3
 8002aea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002aee:	edd7 7a06 	vldr	s15, [r7, #24]
 8002af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002af6:	7ffb      	ldrb	r3, [r7, #31]
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	4413      	add	r3, r2
 8002afe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b02:	ee17 2a90 	vmov	r2, s15
 8002b06:	b212      	sxth	r2, r2
 8002b08:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8002b0a:	7ffb      	ldrb	r3, [r7, #31]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	77fb      	strb	r3, [r7, #31]
 8002b10:	7ffb      	ldrb	r3, [r7, #31]
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d9e1      	bls.n	8002ada <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 8002b16:	bf00      	nop
 8002b18:	bf00      	nop
 8002b1a:	3720      	adds	r7, #32
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	3d79db23 	.word	0x3d79db23
 8002b24:	3df9db23 	.word	0x3df9db23
 8002b28:	3e79db23 	.word	0x3e79db23
 8002b2c:	3ef9db23 	.word	0x3ef9db23

08002b30 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b3a:	2003      	movs	r0, #3
 8002b3c:	f001 fb9e 	bl	800427c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b40:	2000      	movs	r0, #0
 8002b42:	f000 f80d 	bl	8002b60 <HAL_InitTick>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d002      	beq.n	8002b52 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	71fb      	strb	r3, [r7, #7]
 8002b50:	e001      	b.n	8002b56 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002b52:	f7ff fb83 	bl	800225c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002b56:	79fb      	ldrb	r3, [r7, #7]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002b6c:	4b17      	ldr	r3, [pc, #92]	@ (8002bcc <HAL_InitTick+0x6c>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d023      	beq.n	8002bbc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002b74:	4b16      	ldr	r3, [pc, #88]	@ (8002bd0 <HAL_InitTick+0x70>)
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	4b14      	ldr	r3, [pc, #80]	@ (8002bcc <HAL_InitTick+0x6c>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b82:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f001 fbab 	bl	80042e6 <HAL_SYSTICK_Config>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10f      	bne.n	8002bb6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b0f      	cmp	r3, #15
 8002b9a:	d809      	bhi.n	8002bb0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002ba4:	f001 fb75 	bl	8004292 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ba8:	4a0a      	ldr	r2, [pc, #40]	@ (8002bd4 <HAL_InitTick+0x74>)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6013      	str	r3, [r2, #0]
 8002bae:	e007      	b.n	8002bc0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	73fb      	strb	r3, [r7, #15]
 8002bb4:	e004      	b.n	8002bc0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	73fb      	strb	r3, [r7, #15]
 8002bba:	e001      	b.n	8002bc0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	20000050 	.word	0x20000050
 8002bd0:	20000014 	.word	0x20000014
 8002bd4:	2000004c 	.word	0x2000004c

08002bd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002bdc:	4b06      	ldr	r3, [pc, #24]	@ (8002bf8 <HAL_IncTick+0x20>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	461a      	mov	r2, r3
 8002be2:	4b06      	ldr	r3, [pc, #24]	@ (8002bfc <HAL_IncTick+0x24>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4413      	add	r3, r2
 8002be8:	4a04      	ldr	r2, [pc, #16]	@ (8002bfc <HAL_IncTick+0x24>)
 8002bea:	6013      	str	r3, [r2, #0]
}
 8002bec:	bf00      	nop
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	20000050 	.word	0x20000050
 8002bfc:	200004a8 	.word	0x200004a8

08002c00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  return uwTick;
 8002c04:	4b03      	ldr	r3, [pc, #12]	@ (8002c14 <HAL_GetTick+0x14>)
 8002c06:	681b      	ldr	r3, [r3, #0]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	200004a8 	.word	0x200004a8

08002c18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c20:	f7ff ffee 	bl	8002c00 <HAL_GetTick>
 8002c24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c30:	d005      	beq.n	8002c3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002c32:	4b0a      	ldr	r3, [pc, #40]	@ (8002c5c <HAL_Delay+0x44>)
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	461a      	mov	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c3e:	bf00      	nop
 8002c40:	f7ff ffde 	bl	8002c00 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d8f7      	bhi.n	8002c40 <HAL_Delay+0x28>
  {
  }
}
 8002c50:	bf00      	nop
 8002c52:	bf00      	nop
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	20000050 	.word	0x20000050

08002c60 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	431a      	orrs	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	609a      	str	r2, [r3, #8]
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
 8002c8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	609a      	str	r2, [r3, #8]
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b087      	sub	sp, #28
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
 8002cd4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	3360      	adds	r3, #96	@ 0x60
 8002cda:	461a      	mov	r2, r3
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	4b08      	ldr	r3, [pc, #32]	@ (8002d0c <LL_ADC_SetOffset+0x44>)
 8002cea:	4013      	ands	r3, r2
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002d00:	bf00      	nop
 8002d02:	371c      	adds	r7, #28
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	03fff000 	.word	0x03fff000

08002d10 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	3360      	adds	r3, #96	@ 0x60
 8002d1e:	461a      	mov	r2, r3
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3714      	adds	r7, #20
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b087      	sub	sp, #28
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	3360      	adds	r3, #96	@ 0x60
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	431a      	orrs	r2, r3
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002d66:	bf00      	nop
 8002d68:	371c      	adds	r7, #28
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
 8002d7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	431a      	orrs	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	615a      	str	r2, [r3, #20]
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d101      	bne.n	8002db0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002dac:	2301      	movs	r3, #1
 8002dae:	e000      	b.n	8002db2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b087      	sub	sp, #28
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	60f8      	str	r0, [r7, #12]
 8002dc6:	60b9      	str	r1, [r7, #8]
 8002dc8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	3330      	adds	r3, #48	@ 0x30
 8002dce:	461a      	mov	r2, r3
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	0a1b      	lsrs	r3, r3, #8
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	f003 030c 	and.w	r3, r3, #12
 8002dda:	4413      	add	r3, r2
 8002ddc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	f003 031f 	and.w	r3, r3, #31
 8002de8:	211f      	movs	r1, #31
 8002dea:	fa01 f303 	lsl.w	r3, r1, r3
 8002dee:	43db      	mvns	r3, r3
 8002df0:	401a      	ands	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	0e9b      	lsrs	r3, r3, #26
 8002df6:	f003 011f 	and.w	r1, r3, #31
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	f003 031f 	and.w	r3, r3, #31
 8002e00:	fa01 f303 	lsl.w	r3, r1, r3
 8002e04:	431a      	orrs	r2, r3
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002e0a:	bf00      	nop
 8002e0c:	371c      	adds	r7, #28
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b087      	sub	sp, #28
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	60f8      	str	r0, [r7, #12]
 8002e1e:	60b9      	str	r1, [r7, #8]
 8002e20:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	3314      	adds	r3, #20
 8002e26:	461a      	mov	r2, r3
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	0e5b      	lsrs	r3, r3, #25
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	f003 0304 	and.w	r3, r3, #4
 8002e32:	4413      	add	r3, r2
 8002e34:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	0d1b      	lsrs	r3, r3, #20
 8002e3e:	f003 031f 	and.w	r3, r3, #31
 8002e42:	2107      	movs	r1, #7
 8002e44:	fa01 f303 	lsl.w	r3, r1, r3
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	401a      	ands	r2, r3
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	0d1b      	lsrs	r3, r3, #20
 8002e50:	f003 031f 	and.w	r3, r3, #31
 8002e54:	6879      	ldr	r1, [r7, #4]
 8002e56:	fa01 f303 	lsl.w	r3, r1, r3
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002e60:	bf00      	nop
 8002e62:	371c      	adds	r7, #28
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e84:	43db      	mvns	r3, r3
 8002e86:	401a      	ands	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f003 0318 	and.w	r3, r3, #24
 8002e8e:	4908      	ldr	r1, [pc, #32]	@ (8002eb0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002e90:	40d9      	lsrs	r1, r3
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	400b      	ands	r3, r1
 8002e96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002ea2:	bf00      	nop
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	0007ffff 	.word	0x0007ffff

08002eb4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002ec4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6093      	str	r3, [r2, #8]
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ee8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002eec:	d101      	bne.n	8002ef2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e000      	b.n	8002ef4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002f10:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f14:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f3c:	d101      	bne.n	8002f42 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f64:	f043 0201 	orr.w	r2, r3, #1
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f88:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f8c:	f043 0202 	orr.w	r2, r3, #2
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d101      	bne.n	8002fb8 <LL_ADC_IsEnabled+0x18>
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e000      	b.n	8002fba <LL_ADC_IsEnabled+0x1a>
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d101      	bne.n	8002fde <LL_ADC_IsDisableOngoing+0x18>
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <LL_ADC_IsDisableOngoing+0x1a>
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ffc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003000:	f043 0204 	orr.w	r2, r3, #4
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003024:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003028:	f043 0210 	orr.w	r2, r3, #16
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b04      	cmp	r3, #4
 800304e:	d101      	bne.n	8003054 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003050:	2301      	movs	r3, #1
 8003052:	e000      	b.n	8003056 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003062:	b480      	push	{r7}
 8003064:	b083      	sub	sp, #12
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003072:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003076:	f043 0220 	orr.w	r2, r3, #32
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr

0800308a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800308a:	b480      	push	{r7}
 800308c:	b083      	sub	sp, #12
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b08      	cmp	r3, #8
 800309c:	d101      	bne.n	80030a2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b088      	sub	sp, #32
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030b8:	2300      	movs	r3, #0
 80030ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80030bc:	2300      	movs	r3, #0
 80030be:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e129      	b.n	800331e <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d109      	bne.n	80030ec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f7ff f8e3 	bl	80022a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff fef1 	bl	8002ed8 <LL_ADC_IsDeepPowerDownEnabled>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d004      	beq.n	8003106 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff fed7 	bl	8002eb4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff ff0c 	bl	8002f28 <LL_ADC_IsInternalRegulatorEnabled>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d115      	bne.n	8003142 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff fef0 	bl	8002f00 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003120:	4b81      	ldr	r3, [pc, #516]	@ (8003328 <HAL_ADC_Init+0x278>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	099b      	lsrs	r3, r3, #6
 8003126:	4a81      	ldr	r2, [pc, #516]	@ (800332c <HAL_ADC_Init+0x27c>)
 8003128:	fba2 2303 	umull	r2, r3, r2, r3
 800312c:	099b      	lsrs	r3, r3, #6
 800312e:	3301      	adds	r3, #1
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003134:	e002      	b.n	800313c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	3b01      	subs	r3, #1
 800313a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1f9      	bne.n	8003136 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff feee 	bl	8002f28 <LL_ADC_IsInternalRegulatorEnabled>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10d      	bne.n	800316e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003156:	f043 0210 	orr.w	r2, r3, #16
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003162:	f043 0201 	orr.w	r2, r3, #1
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff ff62 	bl	800303c <LL_ADC_REG_IsConversionOngoing>
 8003178:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800317e:	f003 0310 	and.w	r3, r3, #16
 8003182:	2b00      	cmp	r3, #0
 8003184:	f040 80c2 	bne.w	800330c <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	2b00      	cmp	r3, #0
 800318c:	f040 80be 	bne.w	800330c <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003194:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003198:	f043 0202 	orr.w	r2, r3, #2
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff fefb 	bl	8002fa0 <LL_ADC_IsEnabled>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d10b      	bne.n	80031c8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031b0:	485f      	ldr	r0, [pc, #380]	@ (8003330 <HAL_ADC_Init+0x280>)
 80031b2:	f7ff fef5 	bl	8002fa0 <LL_ADC_IsEnabled>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d105      	bne.n	80031c8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	4619      	mov	r1, r3
 80031c2:	485c      	ldr	r0, [pc, #368]	@ (8003334 <HAL_ADC_Init+0x284>)
 80031c4:	f7ff fd4c 	bl	8002c60 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	7e5b      	ldrb	r3, [r3, #25]
 80031cc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80031d2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80031d8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80031de:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031e6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80031e8:	4313      	orrs	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d106      	bne.n	8003204 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fa:	3b01      	subs	r3, #1
 80031fc:	045b      	lsls	r3, r3, #17
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	4313      	orrs	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003208:	2b00      	cmp	r3, #0
 800320a:	d009      	beq.n	8003220 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003210:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003218:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	4313      	orrs	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68da      	ldr	r2, [r3, #12]
 8003226:	4b44      	ldr	r3, [pc, #272]	@ (8003338 <HAL_ADC_Init+0x288>)
 8003228:	4013      	ands	r3, r2
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	6812      	ldr	r2, [r2, #0]
 800322e:	69b9      	ldr	r1, [r7, #24]
 8003230:	430b      	orrs	r3, r1
 8003232:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff ff26 	bl	800308a <LL_ADC_INJ_IsConversionOngoing>
 800323e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d140      	bne.n	80032c8 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d13d      	bne.n	80032c8 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	7e1b      	ldrb	r3, [r3, #24]
 8003254:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003256:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800325e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003260:	4313      	orrs	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800326e:	f023 0306 	bic.w	r3, r3, #6
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6812      	ldr	r2, [r2, #0]
 8003276:	69b9      	ldr	r1, [r7, #24]
 8003278:	430b      	orrs	r3, r1
 800327a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003282:	2b01      	cmp	r3, #1
 8003284:	d118      	bne.n	80032b8 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003290:	f023 0304 	bic.w	r3, r3, #4
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800329c:	4311      	orrs	r1, r2
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80032a2:	4311      	orrs	r1, r2
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80032a8:	430a      	orrs	r2, r1
 80032aa:	431a      	orrs	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f042 0201 	orr.w	r2, r2, #1
 80032b4:	611a      	str	r2, [r3, #16]
 80032b6:	e007      	b.n	80032c8 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	691a      	ldr	r2, [r3, #16]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0201 	bic.w	r2, r2, #1
 80032c6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d10c      	bne.n	80032ea <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d6:	f023 010f 	bic.w	r1, r3, #15
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	1e5a      	subs	r2, r3, #1
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80032e8:	e007      	b.n	80032fa <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 020f 	bic.w	r2, r2, #15
 80032f8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032fe:	f023 0303 	bic.w	r3, r3, #3
 8003302:	f043 0201 	orr.w	r2, r3, #1
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	659a      	str	r2, [r3, #88]	@ 0x58
 800330a:	e007      	b.n	800331c <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003310:	f043 0210 	orr.w	r2, r3, #16
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800331c:	7ffb      	ldrb	r3, [r7, #31]
}
 800331e:	4618      	mov	r0, r3
 8003320:	3720      	adds	r7, #32
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	20000014 	.word	0x20000014
 800332c:	053e2d63 	.word	0x053e2d63
 8003330:	50040000 	.word	0x50040000
 8003334:	50040300 	.word	0x50040300
 8003338:	fff0c007 	.word	0xfff0c007

0800333c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff fe77 	bl	800303c <LL_ADC_REG_IsConversionOngoing>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d14f      	bne.n	80033f4 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800335a:	2b01      	cmp	r3, #1
 800335c:	d101      	bne.n	8003362 <HAL_ADC_Start+0x26>
 800335e:	2302      	movs	r3, #2
 8003360:	e04b      	b.n	80033fa <HAL_ADC_Start+0xbe>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 fdd0 	bl	8003f10 <ADC_Enable>
 8003370:	4603      	mov	r3, r0
 8003372:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003374:	7bfb      	ldrb	r3, [r7, #15]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d137      	bne.n	80033ea <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800337e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003382:	f023 0301 	bic.w	r3, r3, #1
 8003386:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003392:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003396:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800339a:	d106      	bne.n	80033aa <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a0:	f023 0206 	bic.w	r2, r3, #6
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80033a8:	e002      	b.n	80033b0 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	221c      	movs	r2, #28
 80033b6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d007      	beq.n	80033de <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033d2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80033d6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7ff fe02 	bl	8002fec <LL_ADC_REG_StartConversion>
 80033e8:	e006      	b.n	80033f8 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80033f2:	e001      	b.n	80033f8 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80033f4:	2302      	movs	r3, #2
 80033f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80033f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b084      	sub	sp, #16
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003410:	2b01      	cmp	r3, #1
 8003412:	d101      	bne.n	8003418 <HAL_ADC_Stop+0x16>
 8003414:	2302      	movs	r3, #2
 8003416:	e023      	b.n	8003460 <HAL_ADC_Stop+0x5e>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003420:	2103      	movs	r1, #3
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 fcb8 	bl	8003d98 <ADC_ConversionStop>
 8003428:	4603      	mov	r3, r0
 800342a:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800342c:	7bfb      	ldrb	r3, [r7, #15]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d111      	bne.n	8003456 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 fdf2 	bl	800401c <ADC_Disable>
 8003438:	4603      	mov	r3, r0
 800343a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800343c:	7bfb      	ldrb	r3, [r7, #15]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d109      	bne.n	8003456 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003446:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800344a:	f023 0301 	bic.w	r3, r3, #1
 800344e:	f043 0201 	orr.w	r2, r3, #1
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800345e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	2b08      	cmp	r3, #8
 8003478:	d102      	bne.n	8003480 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800347a:	2308      	movs	r3, #8
 800347c:	617b      	str	r3, [r7, #20]
 800347e:	e010      	b.n	80034a2 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	d007      	beq.n	800349e <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003492:	f043 0220 	orr.w	r2, r3, #32
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e06f      	b.n	800357e <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800349e:	2304      	movs	r3, #4
 80034a0:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80034a2:	f7ff fbad 	bl	8002c00 <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80034a8:	e021      	b.n	80034ee <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80034b0:	d01d      	beq.n	80034ee <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80034b2:	f7ff fba5 	bl	8002c00 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d302      	bcc.n	80034c8 <HAL_ADC_PollForConversion+0x60>
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d112      	bne.n	80034ee <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	4013      	ands	r3, r2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10b      	bne.n	80034ee <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034da:	f043 0204 	orr.w	r2, r3, #4
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e047      	b.n	800357e <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	4013      	ands	r3, r2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d0d6      	beq.n	80034aa <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003500:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff fc43 	bl	8002d98 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d01c      	beq.n	8003552 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	7e5b      	ldrb	r3, [r3, #25]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d118      	bne.n	8003552 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	2b08      	cmp	r3, #8
 800352c:	d111      	bne.n	8003552 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003532:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800353e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d105      	bne.n	8003552 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800354a:	f043 0201 	orr.w	r2, r3, #1
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	659a      	str	r2, [r3, #88]	@ 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	2b08      	cmp	r3, #8
 800355e:	d104      	bne.n	800356a <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2208      	movs	r2, #8
 8003566:	601a      	str	r2, [r3, #0]
 8003568:	e008      	b.n	800357c <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d103      	bne.n	800357c <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	220c      	movs	r2, #12
 800357a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003586:	b480      	push	{r7}
 8003588:	b083      	sub	sp, #12
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003594:	4618      	mov	r0, r3
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b0b6      	sub	sp, #216	@ 0xd8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035aa:	2300      	movs	r3, #0
 80035ac:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80035b0:	2300      	movs	r3, #0
 80035b2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d101      	bne.n	80035c2 <HAL_ADC_ConfigChannel+0x22>
 80035be:	2302      	movs	r3, #2
 80035c0:	e3d5      	b.n	8003d6e <HAL_ADC_ConfigChannel+0x7ce>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7ff fd34 	bl	800303c <LL_ADC_REG_IsConversionOngoing>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f040 83ba 	bne.w	8003d50 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	2b05      	cmp	r3, #5
 80035ea:	d824      	bhi.n	8003636 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	3b02      	subs	r3, #2
 80035f2:	2b03      	cmp	r3, #3
 80035f4:	d81b      	bhi.n	800362e <HAL_ADC_ConfigChannel+0x8e>
 80035f6:	a201      	add	r2, pc, #4	@ (adr r2, 80035fc <HAL_ADC_ConfigChannel+0x5c>)
 80035f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fc:	0800360d 	.word	0x0800360d
 8003600:	08003615 	.word	0x08003615
 8003604:	0800361d 	.word	0x0800361d
 8003608:	08003625 	.word	0x08003625
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800360c:	230c      	movs	r3, #12
 800360e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003612:	e010      	b.n	8003636 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003614:	2312      	movs	r3, #18
 8003616:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800361a:	e00c      	b.n	8003636 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800361c:	2318      	movs	r3, #24
 800361e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003622:	e008      	b.n	8003636 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003624:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003628:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800362c:	e003      	b.n	8003636 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800362e:	2306      	movs	r3, #6
 8003630:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003634:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6818      	ldr	r0, [r3, #0]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	461a      	mov	r2, r3
 8003640:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003644:	f7ff fbbb 	bl	8002dbe <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4618      	mov	r0, r3
 800364e:	f7ff fcf5 	bl	800303c <LL_ADC_REG_IsConversionOngoing>
 8003652:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff fd15 	bl	800308a <LL_ADC_INJ_IsConversionOngoing>
 8003660:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003664:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003668:	2b00      	cmp	r3, #0
 800366a:	f040 81bf 	bne.w	80039ec <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800366e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003672:	2b00      	cmp	r3, #0
 8003674:	f040 81ba 	bne.w	80039ec <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003680:	d10f      	bne.n	80036a2 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6818      	ldr	r0, [r3, #0]
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2200      	movs	r2, #0
 800368c:	4619      	mov	r1, r3
 800368e:	f7ff fbc2 	bl	8002e16 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800369a:	4618      	mov	r0, r3
 800369c:	f7ff fb69 	bl	8002d72 <LL_ADC_SetSamplingTimeCommonConfig>
 80036a0:	e00e      	b.n	80036c0 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6818      	ldr	r0, [r3, #0]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	6819      	ldr	r1, [r3, #0]
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	461a      	mov	r2, r3
 80036b0:	f7ff fbb1 	bl	8002e16 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2100      	movs	r1, #0
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7ff fb59 	bl	8002d72 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	695a      	ldr	r2, [r3, #20]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	08db      	lsrs	r3, r3, #3
 80036cc:	f003 0303 	and.w	r3, r3, #3
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	fa02 f303 	lsl.w	r3, r2, r3
 80036d6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	2b04      	cmp	r3, #4
 80036e0:	d00a      	beq.n	80036f8 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6818      	ldr	r0, [r3, #0]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	6919      	ldr	r1, [r3, #16]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036f2:	f7ff fae9 	bl	8002cc8 <LL_ADC_SetOffset>
 80036f6:	e179      	b.n	80039ec <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2100      	movs	r1, #0
 80036fe:	4618      	mov	r0, r3
 8003700:	f7ff fb06 	bl	8002d10 <LL_ADC_GetOffsetChannel>
 8003704:	4603      	mov	r3, r0
 8003706:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10a      	bne.n	8003724 <HAL_ADC_ConfigChannel+0x184>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2100      	movs	r1, #0
 8003714:	4618      	mov	r0, r3
 8003716:	f7ff fafb 	bl	8002d10 <LL_ADC_GetOffsetChannel>
 800371a:	4603      	mov	r3, r0
 800371c:	0e9b      	lsrs	r3, r3, #26
 800371e:	f003 021f 	and.w	r2, r3, #31
 8003722:	e01e      	b.n	8003762 <HAL_ADC_ConfigChannel+0x1c2>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2100      	movs	r1, #0
 800372a:	4618      	mov	r0, r3
 800372c:	f7ff faf0 	bl	8002d10 <LL_ADC_GetOffsetChannel>
 8003730:	4603      	mov	r3, r0
 8003732:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003736:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800373a:	fa93 f3a3 	rbit	r3, r3
 800373e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003742:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003746:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800374a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8003752:	2320      	movs	r3, #32
 8003754:	e004      	b.n	8003760 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8003756:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800375a:	fab3 f383 	clz	r3, r3
 800375e:	b2db      	uxtb	r3, r3
 8003760:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800376a:	2b00      	cmp	r3, #0
 800376c:	d105      	bne.n	800377a <HAL_ADC_ConfigChannel+0x1da>
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	0e9b      	lsrs	r3, r3, #26
 8003774:	f003 031f 	and.w	r3, r3, #31
 8003778:	e018      	b.n	80037ac <HAL_ADC_ConfigChannel+0x20c>
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003782:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003786:	fa93 f3a3 	rbit	r3, r3
 800378a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800378e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003792:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003796:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800379e:	2320      	movs	r3, #32
 80037a0:	e004      	b.n	80037ac <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80037a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80037a6:	fab3 f383 	clz	r3, r3
 80037aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d106      	bne.n	80037be <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2200      	movs	r2, #0
 80037b6:	2100      	movs	r1, #0
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7ff fabf 	bl	8002d3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2101      	movs	r1, #1
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff faa3 	bl	8002d10 <LL_ADC_GetOffsetChannel>
 80037ca:	4603      	mov	r3, r0
 80037cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10a      	bne.n	80037ea <HAL_ADC_ConfigChannel+0x24a>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2101      	movs	r1, #1
 80037da:	4618      	mov	r0, r3
 80037dc:	f7ff fa98 	bl	8002d10 <LL_ADC_GetOffsetChannel>
 80037e0:	4603      	mov	r3, r0
 80037e2:	0e9b      	lsrs	r3, r3, #26
 80037e4:	f003 021f 	and.w	r2, r3, #31
 80037e8:	e01e      	b.n	8003828 <HAL_ADC_ConfigChannel+0x288>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2101      	movs	r1, #1
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7ff fa8d 	bl	8002d10 <LL_ADC_GetOffsetChannel>
 80037f6:	4603      	mov	r3, r0
 80037f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003800:	fa93 f3a3 	rbit	r3, r3
 8003804:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003808:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800380c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003810:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003814:	2b00      	cmp	r3, #0
 8003816:	d101      	bne.n	800381c <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8003818:	2320      	movs	r3, #32
 800381a:	e004      	b.n	8003826 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 800381c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003820:	fab3 f383 	clz	r3, r3
 8003824:	b2db      	uxtb	r3, r3
 8003826:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003830:	2b00      	cmp	r3, #0
 8003832:	d105      	bne.n	8003840 <HAL_ADC_ConfigChannel+0x2a0>
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	0e9b      	lsrs	r3, r3, #26
 800383a:	f003 031f 	and.w	r3, r3, #31
 800383e:	e018      	b.n	8003872 <HAL_ADC_ConfigChannel+0x2d2>
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003848:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800384c:	fa93 f3a3 	rbit	r3, r3
 8003850:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003854:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003858:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800385c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8003864:	2320      	movs	r3, #32
 8003866:	e004      	b.n	8003872 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8003868:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800386c:	fab3 f383 	clz	r3, r3
 8003870:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003872:	429a      	cmp	r2, r3
 8003874:	d106      	bne.n	8003884 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2200      	movs	r2, #0
 800387c:	2101      	movs	r1, #1
 800387e:	4618      	mov	r0, r3
 8003880:	f7ff fa5c 	bl	8002d3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2102      	movs	r1, #2
 800388a:	4618      	mov	r0, r3
 800388c:	f7ff fa40 	bl	8002d10 <LL_ADC_GetOffsetChannel>
 8003890:	4603      	mov	r3, r0
 8003892:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10a      	bne.n	80038b0 <HAL_ADC_ConfigChannel+0x310>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2102      	movs	r1, #2
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7ff fa35 	bl	8002d10 <LL_ADC_GetOffsetChannel>
 80038a6:	4603      	mov	r3, r0
 80038a8:	0e9b      	lsrs	r3, r3, #26
 80038aa:	f003 021f 	and.w	r2, r3, #31
 80038ae:	e01e      	b.n	80038ee <HAL_ADC_ConfigChannel+0x34e>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2102      	movs	r1, #2
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7ff fa2a 	bl	8002d10 <LL_ADC_GetOffsetChannel>
 80038bc:	4603      	mov	r3, r0
 80038be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038c6:	fa93 f3a3 	rbit	r3, r3
 80038ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80038ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80038d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80038de:	2320      	movs	r3, #32
 80038e0:	e004      	b.n	80038ec <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 80038e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038e6:	fab3 f383 	clz	r3, r3
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d105      	bne.n	8003906 <HAL_ADC_ConfigChannel+0x366>
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	0e9b      	lsrs	r3, r3, #26
 8003900:	f003 031f 	and.w	r3, r3, #31
 8003904:	e014      	b.n	8003930 <HAL_ADC_ConfigChannel+0x390>
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800390e:	fa93 f3a3 	rbit	r3, r3
 8003912:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003914:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003916:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800391a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8003922:	2320      	movs	r3, #32
 8003924:	e004      	b.n	8003930 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8003926:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800392a:	fab3 f383 	clz	r3, r3
 800392e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003930:	429a      	cmp	r2, r3
 8003932:	d106      	bne.n	8003942 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2200      	movs	r2, #0
 800393a:	2102      	movs	r1, #2
 800393c:	4618      	mov	r0, r3
 800393e:	f7ff f9fd 	bl	8002d3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2103      	movs	r1, #3
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff f9e1 	bl	8002d10 <LL_ADC_GetOffsetChannel>
 800394e:	4603      	mov	r3, r0
 8003950:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10a      	bne.n	800396e <HAL_ADC_ConfigChannel+0x3ce>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2103      	movs	r1, #3
 800395e:	4618      	mov	r0, r3
 8003960:	f7ff f9d6 	bl	8002d10 <LL_ADC_GetOffsetChannel>
 8003964:	4603      	mov	r3, r0
 8003966:	0e9b      	lsrs	r3, r3, #26
 8003968:	f003 021f 	and.w	r2, r3, #31
 800396c:	e017      	b.n	800399e <HAL_ADC_ConfigChannel+0x3fe>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2103      	movs	r1, #3
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff f9cb 	bl	8002d10 <LL_ADC_GetOffsetChannel>
 800397a:	4603      	mov	r3, r0
 800397c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003980:	fa93 f3a3 	rbit	r3, r3
 8003984:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003986:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003988:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800398a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800398c:	2b00      	cmp	r3, #0
 800398e:	d101      	bne.n	8003994 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8003990:	2320      	movs	r3, #32
 8003992:	e003      	b.n	800399c <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8003994:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003996:	fab3 f383 	clz	r3, r3
 800399a:	b2db      	uxtb	r3, r3
 800399c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d105      	bne.n	80039b6 <HAL_ADC_ConfigChannel+0x416>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	0e9b      	lsrs	r3, r3, #26
 80039b0:	f003 031f 	and.w	r3, r3, #31
 80039b4:	e011      	b.n	80039da <HAL_ADC_ConfigChannel+0x43a>
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039be:	fa93 f3a3 	rbit	r3, r3
 80039c2:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80039c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80039c6:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80039c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80039ce:	2320      	movs	r3, #32
 80039d0:	e003      	b.n	80039da <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80039d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80039d4:	fab3 f383 	clz	r3, r3
 80039d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80039da:	429a      	cmp	r2, r3
 80039dc:	d106      	bne.n	80039ec <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2200      	movs	r2, #0
 80039e4:	2103      	movs	r1, #3
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7ff f9a8 	bl	8002d3c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7ff fad5 	bl	8002fa0 <LL_ADC_IsEnabled>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f040 813f 	bne.w	8003c7c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6818      	ldr	r0, [r3, #0]
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	6819      	ldr	r1, [r3, #0]
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	f7ff fa2e 	bl	8002e6c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	4a8e      	ldr	r2, [pc, #568]	@ (8003c50 <HAL_ADC_ConfigChannel+0x6b0>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	f040 8130 	bne.w	8003c7c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10b      	bne.n	8003a44 <HAL_ADC_ConfigChannel+0x4a4>
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	0e9b      	lsrs	r3, r3, #26
 8003a32:	3301      	adds	r3, #1
 8003a34:	f003 031f 	and.w	r3, r3, #31
 8003a38:	2b09      	cmp	r3, #9
 8003a3a:	bf94      	ite	ls
 8003a3c:	2301      	movls	r3, #1
 8003a3e:	2300      	movhi	r3, #0
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	e019      	b.n	8003a78 <HAL_ADC_ConfigChannel+0x4d8>
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a4c:	fa93 f3a3 	rbit	r3, r3
 8003a50:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003a52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a54:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003a56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d101      	bne.n	8003a60 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8003a5c:	2320      	movs	r3, #32
 8003a5e:	e003      	b.n	8003a68 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8003a60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a62:	fab3 f383 	clz	r3, r3
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	3301      	adds	r3, #1
 8003a6a:	f003 031f 	and.w	r3, r3, #31
 8003a6e:	2b09      	cmp	r3, #9
 8003a70:	bf94      	ite	ls
 8003a72:	2301      	movls	r3, #1
 8003a74:	2300      	movhi	r3, #0
 8003a76:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d079      	beq.n	8003b70 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d107      	bne.n	8003a98 <HAL_ADC_ConfigChannel+0x4f8>
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	0e9b      	lsrs	r3, r3, #26
 8003a8e:	3301      	adds	r3, #1
 8003a90:	069b      	lsls	r3, r3, #26
 8003a92:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a96:	e015      	b.n	8003ac4 <HAL_ADC_ConfigChannel+0x524>
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003aa0:	fa93 f3a3 	rbit	r3, r3
 8003aa4:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003aa6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003aa8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003aaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d101      	bne.n	8003ab4 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8003ab0:	2320      	movs	r3, #32
 8003ab2:	e003      	b.n	8003abc <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8003ab4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ab6:	fab3 f383 	clz	r3, r3
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	3301      	adds	r3, #1
 8003abe:	069b      	lsls	r3, r3, #26
 8003ac0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d109      	bne.n	8003ae4 <HAL_ADC_ConfigChannel+0x544>
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	0e9b      	lsrs	r3, r3, #26
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	f003 031f 	and.w	r3, r3, #31
 8003adc:	2101      	movs	r1, #1
 8003ade:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae2:	e017      	b.n	8003b14 <HAL_ADC_ConfigChannel+0x574>
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003aec:	fa93 f3a3 	rbit	r3, r3
 8003af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003af2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003af4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003af6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d101      	bne.n	8003b00 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8003afc:	2320      	movs	r3, #32
 8003afe:	e003      	b.n	8003b08 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8003b00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b02:	fab3 f383 	clz	r3, r3
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	3301      	adds	r3, #1
 8003b0a:	f003 031f 	and.w	r3, r3, #31
 8003b0e:	2101      	movs	r1, #1
 8003b10:	fa01 f303 	lsl.w	r3, r1, r3
 8003b14:	ea42 0103 	orr.w	r1, r2, r3
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10a      	bne.n	8003b3a <HAL_ADC_ConfigChannel+0x59a>
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	0e9b      	lsrs	r3, r3, #26
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	f003 021f 	and.w	r2, r3, #31
 8003b30:	4613      	mov	r3, r2
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	4413      	add	r3, r2
 8003b36:	051b      	lsls	r3, r3, #20
 8003b38:	e018      	b.n	8003b6c <HAL_ADC_ConfigChannel+0x5cc>
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b42:	fa93 f3a3 	rbit	r3, r3
 8003b46:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8003b52:	2320      	movs	r3, #32
 8003b54:	e003      	b.n	8003b5e <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8003b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b58:	fab3 f383 	clz	r3, r3
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	3301      	adds	r3, #1
 8003b60:	f003 021f 	and.w	r2, r3, #31
 8003b64:	4613      	mov	r3, r2
 8003b66:	005b      	lsls	r3, r3, #1
 8003b68:	4413      	add	r3, r2
 8003b6a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b6c:	430b      	orrs	r3, r1
 8003b6e:	e080      	b.n	8003c72 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d107      	bne.n	8003b8c <HAL_ADC_ConfigChannel+0x5ec>
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	0e9b      	lsrs	r3, r3, #26
 8003b82:	3301      	adds	r3, #1
 8003b84:	069b      	lsls	r3, r3, #26
 8003b86:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003b8a:	e015      	b.n	8003bb8 <HAL_ADC_ConfigChannel+0x618>
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b94:	fa93 f3a3 	rbit	r3, r3
 8003b98:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d101      	bne.n	8003ba8 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8003ba4:	2320      	movs	r3, #32
 8003ba6:	e003      	b.n	8003bb0 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8003ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003baa:	fab3 f383 	clz	r3, r3
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	069b      	lsls	r3, r3, #26
 8003bb4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d109      	bne.n	8003bd8 <HAL_ADC_ConfigChannel+0x638>
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	0e9b      	lsrs	r3, r3, #26
 8003bca:	3301      	adds	r3, #1
 8003bcc:	f003 031f 	and.w	r3, r3, #31
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd6:	e017      	b.n	8003c08 <HAL_ADC_ConfigChannel+0x668>
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	fa93 f3a3 	rbit	r3, r3
 8003be4:	61bb      	str	r3, [r7, #24]
  return result;
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d101      	bne.n	8003bf4 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003bf0:	2320      	movs	r3, #32
 8003bf2:	e003      	b.n	8003bfc <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003bf4:	6a3b      	ldr	r3, [r7, #32]
 8003bf6:	fab3 f383 	clz	r3, r3
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	f003 031f 	and.w	r3, r3, #31
 8003c02:	2101      	movs	r1, #1
 8003c04:	fa01 f303 	lsl.w	r3, r1, r3
 8003c08:	ea42 0103 	orr.w	r1, r2, r3
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10d      	bne.n	8003c34 <HAL_ADC_ConfigChannel+0x694>
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	0e9b      	lsrs	r3, r3, #26
 8003c1e:	3301      	adds	r3, #1
 8003c20:	f003 021f 	and.w	r2, r3, #31
 8003c24:	4613      	mov	r3, r2
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	4413      	add	r3, r2
 8003c2a:	3b1e      	subs	r3, #30
 8003c2c:	051b      	lsls	r3, r3, #20
 8003c2e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003c32:	e01d      	b.n	8003c70 <HAL_ADC_ConfigChannel+0x6d0>
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	fa93 f3a3 	rbit	r3, r3
 8003c40:	60fb      	str	r3, [r7, #12]
  return result;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d103      	bne.n	8003c54 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003c4c:	2320      	movs	r3, #32
 8003c4e:	e005      	b.n	8003c5c <HAL_ADC_ConfigChannel+0x6bc>
 8003c50:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	fab3 f383 	clz	r3, r3
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	f003 021f 	and.w	r2, r3, #31
 8003c62:	4613      	mov	r3, r2
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	4413      	add	r3, r2
 8003c68:	3b1e      	subs	r3, #30
 8003c6a:	051b      	lsls	r3, r3, #20
 8003c6c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c70:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c76:	4619      	mov	r1, r3
 8003c78:	f7ff f8cd 	bl	8002e16 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	4b3d      	ldr	r3, [pc, #244]	@ (8003d78 <HAL_ADC_ConfigChannel+0x7d8>)
 8003c82:	4013      	ands	r3, r2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d06c      	beq.n	8003d62 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c88:	483c      	ldr	r0, [pc, #240]	@ (8003d7c <HAL_ADC_ConfigChannel+0x7dc>)
 8003c8a:	f7ff f80f 	bl	8002cac <LL_ADC_GetCommonPathInternalCh>
 8003c8e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a3a      	ldr	r2, [pc, #232]	@ (8003d80 <HAL_ADC_ConfigChannel+0x7e0>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d127      	bne.n	8003cec <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003c9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003ca0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d121      	bne.n	8003cec <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a35      	ldr	r2, [pc, #212]	@ (8003d84 <HAL_ADC_ConfigChannel+0x7e4>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d157      	bne.n	8003d62 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cb2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003cb6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003cba:	4619      	mov	r1, r3
 8003cbc:	482f      	ldr	r0, [pc, #188]	@ (8003d7c <HAL_ADC_ConfigChannel+0x7dc>)
 8003cbe:	f7fe ffe2 	bl	8002c86 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003cc2:	4b31      	ldr	r3, [pc, #196]	@ (8003d88 <HAL_ADC_ConfigChannel+0x7e8>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	099b      	lsrs	r3, r3, #6
 8003cc8:	4a30      	ldr	r2, [pc, #192]	@ (8003d8c <HAL_ADC_ConfigChannel+0x7ec>)
 8003cca:	fba2 2303 	umull	r2, r3, r2, r3
 8003cce:	099b      	lsrs	r3, r3, #6
 8003cd0:	1c5a      	adds	r2, r3, #1
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	4413      	add	r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003cdc:	e002      	b.n	8003ce4 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1f9      	bne.n	8003cde <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003cea:	e03a      	b.n	8003d62 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a27      	ldr	r2, [pc, #156]	@ (8003d90 <HAL_ADC_ConfigChannel+0x7f0>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d113      	bne.n	8003d1e <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003cf6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003cfa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10d      	bne.n	8003d1e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a1f      	ldr	r2, [pc, #124]	@ (8003d84 <HAL_ADC_ConfigChannel+0x7e4>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d12a      	bne.n	8003d62 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003d10:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d14:	4619      	mov	r1, r3
 8003d16:	4819      	ldr	r0, [pc, #100]	@ (8003d7c <HAL_ADC_ConfigChannel+0x7dc>)
 8003d18:	f7fe ffb5 	bl	8002c86 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d1c:	e021      	b.n	8003d62 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a1c      	ldr	r2, [pc, #112]	@ (8003d94 <HAL_ADC_ConfigChannel+0x7f4>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d11c      	bne.n	8003d62 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003d28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003d2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d116      	bne.n	8003d62 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a12      	ldr	r2, [pc, #72]	@ (8003d84 <HAL_ADC_ConfigChannel+0x7e4>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d111      	bne.n	8003d62 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003d42:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003d46:	4619      	mov	r1, r3
 8003d48:	480c      	ldr	r0, [pc, #48]	@ (8003d7c <HAL_ADC_ConfigChannel+0x7dc>)
 8003d4a:	f7fe ff9c 	bl	8002c86 <LL_ADC_SetCommonPathInternalCh>
 8003d4e:	e008      	b.n	8003d62 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d54:	f043 0220 	orr.w	r2, r3, #32
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003d6a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	37d8      	adds	r7, #216	@ 0xd8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	80080000 	.word	0x80080000
 8003d7c:	50040300 	.word	0x50040300
 8003d80:	c7520000 	.word	0xc7520000
 8003d84:	50040000 	.word	0x50040000
 8003d88:	20000014 	.word	0x20000014
 8003d8c:	053e2d63 	.word	0x053e2d63
 8003d90:	cb840000 	.word	0xcb840000
 8003d94:	80000001 	.word	0x80000001

08003d98 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b088      	sub	sp, #32
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003da2:	2300      	movs	r3, #0
 8003da4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7ff f944 	bl	800303c <LL_ADC_REG_IsConversionOngoing>
 8003db4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff f965 	bl	800308a <LL_ADC_INJ_IsConversionOngoing>
 8003dc0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d103      	bne.n	8003dd0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f000 8098 	beq.w	8003f00 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d02a      	beq.n	8003e34 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	7e5b      	ldrb	r3, [r3, #25]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d126      	bne.n	8003e34 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	7e1b      	ldrb	r3, [r3, #24]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d122      	bne.n	8003e34 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003dee:	2301      	movs	r3, #1
 8003df0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003df2:	e014      	b.n	8003e1e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	4a45      	ldr	r2, [pc, #276]	@ (8003f0c <ADC_ConversionStop+0x174>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d90d      	bls.n	8003e18 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e00:	f043 0210 	orr.w	r2, r3, #16
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e0c:	f043 0201 	orr.w	r2, r3, #1
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e074      	b.n	8003f02 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e28:	2b40      	cmp	r3, #64	@ 0x40
 8003e2a:	d1e3      	bne.n	8003df4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2240      	movs	r2, #64	@ 0x40
 8003e32:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d014      	beq.n	8003e64 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7ff f8fc 	bl	800303c <LL_ADC_REG_IsConversionOngoing>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00c      	beq.n	8003e64 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7ff f8b9 	bl	8002fc6 <LL_ADC_IsDisableOngoing>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d104      	bne.n	8003e64 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7ff f8d8 	bl	8003014 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d014      	beq.n	8003e94 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7ff f90b 	bl	800308a <LL_ADC_INJ_IsConversionOngoing>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00c      	beq.n	8003e94 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7ff f8a1 	bl	8002fc6 <LL_ADC_IsDisableOngoing>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d104      	bne.n	8003e94 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7ff f8e7 	bl	8003062 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d005      	beq.n	8003ea6 <ADC_ConversionStop+0x10e>
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	2b03      	cmp	r3, #3
 8003e9e:	d105      	bne.n	8003eac <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003ea0:	230c      	movs	r3, #12
 8003ea2:	617b      	str	r3, [r7, #20]
        break;
 8003ea4:	e005      	b.n	8003eb2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003ea6:	2308      	movs	r3, #8
 8003ea8:	617b      	str	r3, [r7, #20]
        break;
 8003eaa:	e002      	b.n	8003eb2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003eac:	2304      	movs	r3, #4
 8003eae:	617b      	str	r3, [r7, #20]
        break;
 8003eb0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003eb2:	f7fe fea5 	bl	8002c00 <HAL_GetTick>
 8003eb6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003eb8:	e01b      	b.n	8003ef2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003eba:	f7fe fea1 	bl	8002c00 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b05      	cmp	r3, #5
 8003ec6:	d914      	bls.n	8003ef2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689a      	ldr	r2, [r3, #8]
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00d      	beq.n	8003ef2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eda:	f043 0210 	orr.w	r2, r3, #16
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ee6:	f043 0201 	orr.w	r2, r3, #1
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e007      	b.n	8003f02 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	689a      	ldr	r2, [r3, #8]
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	4013      	ands	r3, r2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1dc      	bne.n	8003eba <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3720      	adds	r7, #32
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	a33fffff 	.word	0xa33fffff

08003f10 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7ff f83d 	bl	8002fa0 <LL_ADC_IsEnabled>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d169      	bne.n	8004000 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689a      	ldr	r2, [r3, #8]
 8003f32:	4b36      	ldr	r3, [pc, #216]	@ (800400c <ADC_Enable+0xfc>)
 8003f34:	4013      	ands	r3, r2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00d      	beq.n	8003f56 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f3e:	f043 0210 	orr.w	r2, r3, #16
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f4a:	f043 0201 	orr.w	r2, r3, #1
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e055      	b.n	8004002 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7fe fff8 	bl	8002f50 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003f60:	482b      	ldr	r0, [pc, #172]	@ (8004010 <ADC_Enable+0x100>)
 8003f62:	f7fe fea3 	bl	8002cac <LL_ADC_GetCommonPathInternalCh>
 8003f66:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003f68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d013      	beq.n	8003f98 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f70:	4b28      	ldr	r3, [pc, #160]	@ (8004014 <ADC_Enable+0x104>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	099b      	lsrs	r3, r3, #6
 8003f76:	4a28      	ldr	r2, [pc, #160]	@ (8004018 <ADC_Enable+0x108>)
 8003f78:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7c:	099b      	lsrs	r3, r3, #6
 8003f7e:	1c5a      	adds	r2, r3, #1
 8003f80:	4613      	mov	r3, r2
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	4413      	add	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003f8a:	e002      	b.n	8003f92 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1f9      	bne.n	8003f8c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003f98:	f7fe fe32 	bl	8002c00 <HAL_GetTick>
 8003f9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f9e:	e028      	b.n	8003ff2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7fe fffb 	bl	8002fa0 <LL_ADC_IsEnabled>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d104      	bne.n	8003fba <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7fe ffcb 	bl	8002f50 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003fba:	f7fe fe21 	bl	8002c00 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d914      	bls.n	8003ff2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d00d      	beq.n	8003ff2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fda:	f043 0210 	orr.w	r2, r3, #16
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fe6:	f043 0201 	orr.w	r2, r3, #1
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e007      	b.n	8004002 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d1cf      	bne.n	8003fa0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	8000003f 	.word	0x8000003f
 8004010:	50040300 	.word	0x50040300
 8004014:	20000014 	.word	0x20000014
 8004018:	053e2d63 	.word	0x053e2d63

0800401c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4618      	mov	r0, r3
 800402a:	f7fe ffcc 	bl	8002fc6 <LL_ADC_IsDisableOngoing>
 800402e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4618      	mov	r0, r3
 8004036:	f7fe ffb3 	bl	8002fa0 <LL_ADC_IsEnabled>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d047      	beq.n	80040d0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d144      	bne.n	80040d0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f003 030d 	and.w	r3, r3, #13
 8004050:	2b01      	cmp	r3, #1
 8004052:	d10c      	bne.n	800406e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4618      	mov	r0, r3
 800405a:	f7fe ff8d 	bl	8002f78 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2203      	movs	r2, #3
 8004064:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004066:	f7fe fdcb 	bl	8002c00 <HAL_GetTick>
 800406a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800406c:	e029      	b.n	80040c2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004072:	f043 0210 	orr.w	r2, r3, #16
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800407e:	f043 0201 	orr.w	r2, r3, #1
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e023      	b.n	80040d2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800408a:	f7fe fdb9 	bl	8002c00 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b02      	cmp	r3, #2
 8004096:	d914      	bls.n	80040c2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00d      	beq.n	80040c2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040aa:	f043 0210 	orr.w	r2, r3, #16
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040b6:	f043 0201 	orr.w	r2, r3, #1
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e007      	b.n	80040d2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1dc      	bne.n	800408a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
	...

080040dc <__NVIC_SetPriorityGrouping>:
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f003 0307 	and.w	r3, r3, #7
 80040ea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004120 <__NVIC_SetPriorityGrouping+0x44>)
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040f2:	68ba      	ldr	r2, [r7, #8]
 80040f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80040f8:	4013      	ands	r3, r2
 80040fa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004104:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004108:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800410c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800410e:	4a04      	ldr	r2, [pc, #16]	@ (8004120 <__NVIC_SetPriorityGrouping+0x44>)
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	60d3      	str	r3, [r2, #12]
}
 8004114:	bf00      	nop
 8004116:	3714      	adds	r7, #20
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr
 8004120:	e000ed00 	.word	0xe000ed00

08004124 <__NVIC_GetPriorityGrouping>:
{
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004128:	4b04      	ldr	r3, [pc, #16]	@ (800413c <__NVIC_GetPriorityGrouping+0x18>)
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	0a1b      	lsrs	r3, r3, #8
 800412e:	f003 0307 	and.w	r3, r3, #7
}
 8004132:	4618      	mov	r0, r3
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr
 800413c:	e000ed00 	.word	0xe000ed00

08004140 <__NVIC_EnableIRQ>:
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	4603      	mov	r3, r0
 8004148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800414a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800414e:	2b00      	cmp	r3, #0
 8004150:	db0b      	blt.n	800416a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004152:	79fb      	ldrb	r3, [r7, #7]
 8004154:	f003 021f 	and.w	r2, r3, #31
 8004158:	4907      	ldr	r1, [pc, #28]	@ (8004178 <__NVIC_EnableIRQ+0x38>)
 800415a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800415e:	095b      	lsrs	r3, r3, #5
 8004160:	2001      	movs	r0, #1
 8004162:	fa00 f202 	lsl.w	r2, r0, r2
 8004166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800416a:	bf00      	nop
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	e000e100 	.word	0xe000e100

0800417c <__NVIC_SetPriority>:
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	4603      	mov	r3, r0
 8004184:	6039      	str	r1, [r7, #0]
 8004186:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800418c:	2b00      	cmp	r3, #0
 800418e:	db0a      	blt.n	80041a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	b2da      	uxtb	r2, r3
 8004194:	490c      	ldr	r1, [pc, #48]	@ (80041c8 <__NVIC_SetPriority+0x4c>)
 8004196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800419a:	0112      	lsls	r2, r2, #4
 800419c:	b2d2      	uxtb	r2, r2
 800419e:	440b      	add	r3, r1
 80041a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80041a4:	e00a      	b.n	80041bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	b2da      	uxtb	r2, r3
 80041aa:	4908      	ldr	r1, [pc, #32]	@ (80041cc <__NVIC_SetPriority+0x50>)
 80041ac:	79fb      	ldrb	r3, [r7, #7]
 80041ae:	f003 030f 	and.w	r3, r3, #15
 80041b2:	3b04      	subs	r3, #4
 80041b4:	0112      	lsls	r2, r2, #4
 80041b6:	b2d2      	uxtb	r2, r2
 80041b8:	440b      	add	r3, r1
 80041ba:	761a      	strb	r2, [r3, #24]
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr
 80041c8:	e000e100 	.word	0xe000e100
 80041cc:	e000ed00 	.word	0xe000ed00

080041d0 <NVIC_EncodePriority>:
{
 80041d0:	b480      	push	{r7}
 80041d2:	b089      	sub	sp, #36	@ 0x24
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f003 0307 	and.w	r3, r3, #7
 80041e2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	f1c3 0307 	rsb	r3, r3, #7
 80041ea:	2b04      	cmp	r3, #4
 80041ec:	bf28      	it	cs
 80041ee:	2304      	movcs	r3, #4
 80041f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	3304      	adds	r3, #4
 80041f6:	2b06      	cmp	r3, #6
 80041f8:	d902      	bls.n	8004200 <NVIC_EncodePriority+0x30>
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	3b03      	subs	r3, #3
 80041fe:	e000      	b.n	8004202 <NVIC_EncodePriority+0x32>
 8004200:	2300      	movs	r3, #0
 8004202:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004204:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	fa02 f303 	lsl.w	r3, r2, r3
 800420e:	43da      	mvns	r2, r3
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	401a      	ands	r2, r3
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004218:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	fa01 f303 	lsl.w	r3, r1, r3
 8004222:	43d9      	mvns	r1, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004228:	4313      	orrs	r3, r2
}
 800422a:	4618      	mov	r0, r3
 800422c:	3724      	adds	r7, #36	@ 0x24
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
	...

08004238 <SysTick_Config>:
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	3b01      	subs	r3, #1
 8004244:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004248:	d301      	bcc.n	800424e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800424a:	2301      	movs	r3, #1
 800424c:	e00f      	b.n	800426e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800424e:	4a0a      	ldr	r2, [pc, #40]	@ (8004278 <SysTick_Config+0x40>)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	3b01      	subs	r3, #1
 8004254:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004256:	210f      	movs	r1, #15
 8004258:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800425c:	f7ff ff8e 	bl	800417c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004260:	4b05      	ldr	r3, [pc, #20]	@ (8004278 <SysTick_Config+0x40>)
 8004262:	2200      	movs	r2, #0
 8004264:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004266:	4b04      	ldr	r3, [pc, #16]	@ (8004278 <SysTick_Config+0x40>)
 8004268:	2207      	movs	r2, #7
 800426a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3708      	adds	r7, #8
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	e000e010 	.word	0xe000e010

0800427c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f7ff ff29 	bl	80040dc <__NVIC_SetPriorityGrouping>
}
 800428a:	bf00      	nop
 800428c:	3708      	adds	r7, #8
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b086      	sub	sp, #24
 8004296:	af00      	add	r7, sp, #0
 8004298:	4603      	mov	r3, r0
 800429a:	60b9      	str	r1, [r7, #8]
 800429c:	607a      	str	r2, [r7, #4]
 800429e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80042a0:	2300      	movs	r3, #0
 80042a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80042a4:	f7ff ff3e 	bl	8004124 <__NVIC_GetPriorityGrouping>
 80042a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	68b9      	ldr	r1, [r7, #8]
 80042ae:	6978      	ldr	r0, [r7, #20]
 80042b0:	f7ff ff8e 	bl	80041d0 <NVIC_EncodePriority>
 80042b4:	4602      	mov	r2, r0
 80042b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042ba:	4611      	mov	r1, r2
 80042bc:	4618      	mov	r0, r3
 80042be:	f7ff ff5d 	bl	800417c <__NVIC_SetPriority>
}
 80042c2:	bf00      	nop
 80042c4:	3718      	adds	r7, #24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b082      	sub	sp, #8
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	4603      	mov	r3, r0
 80042d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042d8:	4618      	mov	r0, r3
 80042da:	f7ff ff31 	bl	8004140 <__NVIC_EnableIRQ>
}
 80042de:	bf00      	nop
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b082      	sub	sp, #8
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7ff ffa2 	bl	8004238 <SysTick_Config>
 80042f4:	4603      	mov	r3, r0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
	...

08004300 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e0ac      	b.n	800446c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4618      	mov	r0, r3
 8004318:	f000 f8b2 	bl	8004480 <DFSDM_GetChannelFromInstance>
 800431c:	4603      	mov	r3, r0
 800431e:	4a55      	ldr	r2, [pc, #340]	@ (8004474 <HAL_DFSDM_ChannelInit+0x174>)
 8004320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d001      	beq.n	800432c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e09f      	b.n	800446c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f7fd fff9 	bl	8002324 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8004332:	4b51      	ldr	r3, [pc, #324]	@ (8004478 <HAL_DFSDM_ChannelInit+0x178>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	3301      	adds	r3, #1
 8004338:	4a4f      	ldr	r2, [pc, #316]	@ (8004478 <HAL_DFSDM_ChannelInit+0x178>)
 800433a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 800433c:	4b4e      	ldr	r3, [pc, #312]	@ (8004478 <HAL_DFSDM_ChannelInit+0x178>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d125      	bne.n	8004390 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8004344:	4b4d      	ldr	r3, [pc, #308]	@ (800447c <HAL_DFSDM_ChannelInit+0x17c>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a4c      	ldr	r2, [pc, #304]	@ (800447c <HAL_DFSDM_ChannelInit+0x17c>)
 800434a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800434e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8004350:	4b4a      	ldr	r3, [pc, #296]	@ (800447c <HAL_DFSDM_ChannelInit+0x17c>)
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	4948      	ldr	r1, [pc, #288]	@ (800447c <HAL_DFSDM_ChannelInit+0x17c>)
 800435a:	4313      	orrs	r3, r2
 800435c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800435e:	4b47      	ldr	r3, [pc, #284]	@ (800447c <HAL_DFSDM_ChannelInit+0x17c>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a46      	ldr	r2, [pc, #280]	@ (800447c <HAL_DFSDM_ChannelInit+0x17c>)
 8004364:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8004368:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	791b      	ldrb	r3, [r3, #4]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d108      	bne.n	8004384 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8004372:	4b42      	ldr	r3, [pc, #264]	@ (800447c <HAL_DFSDM_ChannelInit+0x17c>)
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	3b01      	subs	r3, #1
 800437c:	041b      	lsls	r3, r3, #16
 800437e:	493f      	ldr	r1, [pc, #252]	@ (800447c <HAL_DFSDM_ChannelInit+0x17c>)
 8004380:	4313      	orrs	r3, r2
 8004382:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8004384:	4b3d      	ldr	r3, [pc, #244]	@ (800447c <HAL_DFSDM_ChannelInit+0x17c>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a3c      	ldr	r2, [pc, #240]	@ (800447c <HAL_DFSDM_ChannelInit+0x17c>)
 800438a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800438e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 800439e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6819      	ldr	r1, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80043ae:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80043b4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	430a      	orrs	r2, r1
 80043bc:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 020f 	bic.w	r2, r2, #15
 80043cc:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	6819      	ldr	r1, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80043dc:	431a      	orrs	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	689a      	ldr	r2, [r3, #8]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 80043f4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	6899      	ldr	r1, [r3, #8]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004404:	3b01      	subs	r3, #1
 8004406:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004408:	431a      	orrs	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	430a      	orrs	r2, r1
 8004410:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f002 0207 	and.w	r2, r2, #7
 8004420:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6859      	ldr	r1, [r3, #4]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800442c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004432:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004434:	431a      	orrs	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	430a      	orrs	r2, r1
 800443c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800444c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2201      	movs	r2, #1
 8004452:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4618      	mov	r0, r3
 800445c:	f000 f810 	bl	8004480 <DFSDM_GetChannelFromInstance>
 8004460:	4602      	mov	r2, r0
 8004462:	4904      	ldr	r1, [pc, #16]	@ (8004474 <HAL_DFSDM_ChannelInit+0x174>)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3708      	adds	r7, #8
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	200004b0 	.word	0x200004b0
 8004478:	200004ac 	.word	0x200004ac
 800447c:	40016000 	.word	0x40016000

08004480 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a1c      	ldr	r2, [pc, #112]	@ (80044fc <DFSDM_GetChannelFromInstance+0x7c>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d102      	bne.n	8004496 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8004490:	2300      	movs	r3, #0
 8004492:	60fb      	str	r3, [r7, #12]
 8004494:	e02b      	b.n	80044ee <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a19      	ldr	r2, [pc, #100]	@ (8004500 <DFSDM_GetChannelFromInstance+0x80>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d102      	bne.n	80044a4 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800449e:	2301      	movs	r3, #1
 80044a0:	60fb      	str	r3, [r7, #12]
 80044a2:	e024      	b.n	80044ee <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a17      	ldr	r2, [pc, #92]	@ (8004504 <DFSDM_GetChannelFromInstance+0x84>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d102      	bne.n	80044b2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80044ac:	2302      	movs	r3, #2
 80044ae:	60fb      	str	r3, [r7, #12]
 80044b0:	e01d      	b.n	80044ee <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a14      	ldr	r2, [pc, #80]	@ (8004508 <DFSDM_GetChannelFromInstance+0x88>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d102      	bne.n	80044c0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80044ba:	2304      	movs	r3, #4
 80044bc:	60fb      	str	r3, [r7, #12]
 80044be:	e016      	b.n	80044ee <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a12      	ldr	r2, [pc, #72]	@ (800450c <DFSDM_GetChannelFromInstance+0x8c>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d102      	bne.n	80044ce <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80044c8:	2305      	movs	r3, #5
 80044ca:	60fb      	str	r3, [r7, #12]
 80044cc:	e00f      	b.n	80044ee <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a0f      	ldr	r2, [pc, #60]	@ (8004510 <DFSDM_GetChannelFromInstance+0x90>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d102      	bne.n	80044dc <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80044d6:	2306      	movs	r3, #6
 80044d8:	60fb      	str	r3, [r7, #12]
 80044da:	e008      	b.n	80044ee <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a0d      	ldr	r2, [pc, #52]	@ (8004514 <DFSDM_GetChannelFromInstance+0x94>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d102      	bne.n	80044ea <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80044e4:	2307      	movs	r3, #7
 80044e6:	60fb      	str	r3, [r7, #12]
 80044e8:	e001      	b.n	80044ee <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80044ea:	2303      	movs	r3, #3
 80044ec:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80044ee:	68fb      	ldr	r3, [r7, #12]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3714      	adds	r7, #20
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	40016000 	.word	0x40016000
 8004500:	40016020 	.word	0x40016020
 8004504:	40016040 	.word	0x40016040
 8004508:	40016080 	.word	0x40016080
 800450c:	400160a0 	.word	0x400160a0
 8004510:	400160c0 	.word	0x400160c0
 8004514:	400160e0 	.word	0x400160e0

08004518 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004518:	b480      	push	{r7}
 800451a:	b087      	sub	sp, #28
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004522:	2300      	movs	r3, #0
 8004524:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004526:	e166      	b.n	80047f6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	2101      	movs	r1, #1
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	fa01 f303 	lsl.w	r3, r1, r3
 8004534:	4013      	ands	r3, r2
 8004536:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2b00      	cmp	r3, #0
 800453c:	f000 8158 	beq.w	80047f0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f003 0303 	and.w	r3, r3, #3
 8004548:	2b01      	cmp	r3, #1
 800454a:	d005      	beq.n	8004558 <HAL_GPIO_Init+0x40>
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f003 0303 	and.w	r3, r3, #3
 8004554:	2b02      	cmp	r3, #2
 8004556:	d130      	bne.n	80045ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	005b      	lsls	r3, r3, #1
 8004562:	2203      	movs	r2, #3
 8004564:	fa02 f303 	lsl.w	r3, r2, r3
 8004568:	43db      	mvns	r3, r3
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	4013      	ands	r3, r2
 800456e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	68da      	ldr	r2, [r3, #12]
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	005b      	lsls	r3, r3, #1
 8004578:	fa02 f303 	lsl.w	r3, r2, r3
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	4313      	orrs	r3, r2
 8004580:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800458e:	2201      	movs	r2, #1
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	fa02 f303 	lsl.w	r3, r2, r3
 8004596:	43db      	mvns	r3, r3
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	4013      	ands	r3, r2
 800459c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	091b      	lsrs	r3, r3, #4
 80045a4:	f003 0201 	and.w	r2, r3, #1
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	fa02 f303 	lsl.w	r3, r2, r3
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f003 0303 	and.w	r3, r3, #3
 80045c2:	2b03      	cmp	r3, #3
 80045c4:	d017      	beq.n	80045f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	005b      	lsls	r3, r3, #1
 80045d0:	2203      	movs	r2, #3
 80045d2:	fa02 f303 	lsl.w	r3, r2, r3
 80045d6:	43db      	mvns	r3, r3
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	4013      	ands	r3, r2
 80045dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	689a      	ldr	r2, [r3, #8]
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	005b      	lsls	r3, r3, #1
 80045e6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f003 0303 	and.w	r3, r3, #3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d123      	bne.n	800464a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	08da      	lsrs	r2, r3, #3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	3208      	adds	r2, #8
 800460a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800460e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	f003 0307 	and.w	r3, r3, #7
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	220f      	movs	r2, #15
 800461a:	fa02 f303 	lsl.w	r3, r2, r3
 800461e:	43db      	mvns	r3, r3
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	4013      	ands	r3, r2
 8004624:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	691a      	ldr	r2, [r3, #16]
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f003 0307 	and.w	r3, r3, #7
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	fa02 f303 	lsl.w	r3, r2, r3
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	4313      	orrs	r3, r2
 800463a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	08da      	lsrs	r2, r3, #3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	3208      	adds	r2, #8
 8004644:	6939      	ldr	r1, [r7, #16]
 8004646:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	005b      	lsls	r3, r3, #1
 8004654:	2203      	movs	r2, #3
 8004656:	fa02 f303 	lsl.w	r3, r2, r3
 800465a:	43db      	mvns	r3, r3
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	4013      	ands	r3, r2
 8004660:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f003 0203 	and.w	r2, r3, #3
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	fa02 f303 	lsl.w	r3, r2, r3
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	4313      	orrs	r3, r2
 8004676:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004686:	2b00      	cmp	r3, #0
 8004688:	f000 80b2 	beq.w	80047f0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800468c:	4b61      	ldr	r3, [pc, #388]	@ (8004814 <HAL_GPIO_Init+0x2fc>)
 800468e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004690:	4a60      	ldr	r2, [pc, #384]	@ (8004814 <HAL_GPIO_Init+0x2fc>)
 8004692:	f043 0301 	orr.w	r3, r3, #1
 8004696:	6613      	str	r3, [r2, #96]	@ 0x60
 8004698:	4b5e      	ldr	r3, [pc, #376]	@ (8004814 <HAL_GPIO_Init+0x2fc>)
 800469a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	60bb      	str	r3, [r7, #8]
 80046a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80046a4:	4a5c      	ldr	r2, [pc, #368]	@ (8004818 <HAL_GPIO_Init+0x300>)
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	089b      	lsrs	r3, r3, #2
 80046aa:	3302      	adds	r3, #2
 80046ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	f003 0303 	and.w	r3, r3, #3
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	220f      	movs	r2, #15
 80046bc:	fa02 f303 	lsl.w	r3, r2, r3
 80046c0:	43db      	mvns	r3, r3
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	4013      	ands	r3, r2
 80046c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80046ce:	d02b      	beq.n	8004728 <HAL_GPIO_Init+0x210>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a52      	ldr	r2, [pc, #328]	@ (800481c <HAL_GPIO_Init+0x304>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d025      	beq.n	8004724 <HAL_GPIO_Init+0x20c>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a51      	ldr	r2, [pc, #324]	@ (8004820 <HAL_GPIO_Init+0x308>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d01f      	beq.n	8004720 <HAL_GPIO_Init+0x208>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a50      	ldr	r2, [pc, #320]	@ (8004824 <HAL_GPIO_Init+0x30c>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d019      	beq.n	800471c <HAL_GPIO_Init+0x204>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a4f      	ldr	r2, [pc, #316]	@ (8004828 <HAL_GPIO_Init+0x310>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d013      	beq.n	8004718 <HAL_GPIO_Init+0x200>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a4e      	ldr	r2, [pc, #312]	@ (800482c <HAL_GPIO_Init+0x314>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d00d      	beq.n	8004714 <HAL_GPIO_Init+0x1fc>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a4d      	ldr	r2, [pc, #308]	@ (8004830 <HAL_GPIO_Init+0x318>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d007      	beq.n	8004710 <HAL_GPIO_Init+0x1f8>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a4c      	ldr	r2, [pc, #304]	@ (8004834 <HAL_GPIO_Init+0x31c>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d101      	bne.n	800470c <HAL_GPIO_Init+0x1f4>
 8004708:	2307      	movs	r3, #7
 800470a:	e00e      	b.n	800472a <HAL_GPIO_Init+0x212>
 800470c:	2308      	movs	r3, #8
 800470e:	e00c      	b.n	800472a <HAL_GPIO_Init+0x212>
 8004710:	2306      	movs	r3, #6
 8004712:	e00a      	b.n	800472a <HAL_GPIO_Init+0x212>
 8004714:	2305      	movs	r3, #5
 8004716:	e008      	b.n	800472a <HAL_GPIO_Init+0x212>
 8004718:	2304      	movs	r3, #4
 800471a:	e006      	b.n	800472a <HAL_GPIO_Init+0x212>
 800471c:	2303      	movs	r3, #3
 800471e:	e004      	b.n	800472a <HAL_GPIO_Init+0x212>
 8004720:	2302      	movs	r3, #2
 8004722:	e002      	b.n	800472a <HAL_GPIO_Init+0x212>
 8004724:	2301      	movs	r3, #1
 8004726:	e000      	b.n	800472a <HAL_GPIO_Init+0x212>
 8004728:	2300      	movs	r3, #0
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	f002 0203 	and.w	r2, r2, #3
 8004730:	0092      	lsls	r2, r2, #2
 8004732:	4093      	lsls	r3, r2
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	4313      	orrs	r3, r2
 8004738:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800473a:	4937      	ldr	r1, [pc, #220]	@ (8004818 <HAL_GPIO_Init+0x300>)
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	089b      	lsrs	r3, r3, #2
 8004740:	3302      	adds	r3, #2
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004748:	4b3b      	ldr	r3, [pc, #236]	@ (8004838 <HAL_GPIO_Init+0x320>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	43db      	mvns	r3, r3
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	4013      	ands	r3, r2
 8004756:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d003      	beq.n	800476c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	4313      	orrs	r3, r2
 800476a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800476c:	4a32      	ldr	r2, [pc, #200]	@ (8004838 <HAL_GPIO_Init+0x320>)
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004772:	4b31      	ldr	r3, [pc, #196]	@ (8004838 <HAL_GPIO_Init+0x320>)
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	43db      	mvns	r3, r3
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	4013      	ands	r3, r2
 8004780:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	4313      	orrs	r3, r2
 8004794:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004796:	4a28      	ldr	r2, [pc, #160]	@ (8004838 <HAL_GPIO_Init+0x320>)
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800479c:	4b26      	ldr	r3, [pc, #152]	@ (8004838 <HAL_GPIO_Init+0x320>)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	43db      	mvns	r3, r3
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	4013      	ands	r3, r2
 80047aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d003      	beq.n	80047c0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	4313      	orrs	r3, r2
 80047be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80047c0:	4a1d      	ldr	r2, [pc, #116]	@ (8004838 <HAL_GPIO_Init+0x320>)
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80047c6:	4b1c      	ldr	r3, [pc, #112]	@ (8004838 <HAL_GPIO_Init+0x320>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	43db      	mvns	r3, r3
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	4013      	ands	r3, r2
 80047d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80047e2:	693a      	ldr	r2, [r7, #16]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80047ea:	4a13      	ldr	r2, [pc, #76]	@ (8004838 <HAL_GPIO_Init+0x320>)
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	3301      	adds	r3, #1
 80047f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004800:	2b00      	cmp	r3, #0
 8004802:	f47f ae91 	bne.w	8004528 <HAL_GPIO_Init+0x10>
  }
}
 8004806:	bf00      	nop
 8004808:	bf00      	nop
 800480a:	371c      	adds	r7, #28
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr
 8004814:	40021000 	.word	0x40021000
 8004818:	40010000 	.word	0x40010000
 800481c:	48000400 	.word	0x48000400
 8004820:	48000800 	.word	0x48000800
 8004824:	48000c00 	.word	0x48000c00
 8004828:	48001000 	.word	0x48001000
 800482c:	48001400 	.word	0x48001400
 8004830:	48001800 	.word	0x48001800
 8004834:	48001c00 	.word	0x48001c00
 8004838:	40010400 	.word	0x40010400

0800483c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800483c:	b480      	push	{r7}
 800483e:	b087      	sub	sp, #28
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004846:	2300      	movs	r3, #0
 8004848:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800484a:	e0c9      	b.n	80049e0 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800484c:	2201      	movs	r2, #1
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	fa02 f303 	lsl.w	r3, r2, r3
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	4013      	ands	r3, r2
 8004858:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	2b00      	cmp	r3, #0
 800485e:	f000 80bc 	beq.w	80049da <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004862:	4a66      	ldr	r2, [pc, #408]	@ (80049fc <HAL_GPIO_DeInit+0x1c0>)
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	089b      	lsrs	r3, r3, #2
 8004868:	3302      	adds	r3, #2
 800486a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800486e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	f003 0303 	and.w	r3, r3, #3
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	220f      	movs	r2, #15
 800487a:	fa02 f303 	lsl.w	r3, r2, r3
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	4013      	ands	r3, r2
 8004882:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800488a:	d02b      	beq.n	80048e4 <HAL_GPIO_DeInit+0xa8>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a5c      	ldr	r2, [pc, #368]	@ (8004a00 <HAL_GPIO_DeInit+0x1c4>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d025      	beq.n	80048e0 <HAL_GPIO_DeInit+0xa4>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a5b      	ldr	r2, [pc, #364]	@ (8004a04 <HAL_GPIO_DeInit+0x1c8>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d01f      	beq.n	80048dc <HAL_GPIO_DeInit+0xa0>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a5a      	ldr	r2, [pc, #360]	@ (8004a08 <HAL_GPIO_DeInit+0x1cc>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d019      	beq.n	80048d8 <HAL_GPIO_DeInit+0x9c>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a59      	ldr	r2, [pc, #356]	@ (8004a0c <HAL_GPIO_DeInit+0x1d0>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d013      	beq.n	80048d4 <HAL_GPIO_DeInit+0x98>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a58      	ldr	r2, [pc, #352]	@ (8004a10 <HAL_GPIO_DeInit+0x1d4>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d00d      	beq.n	80048d0 <HAL_GPIO_DeInit+0x94>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a57      	ldr	r2, [pc, #348]	@ (8004a14 <HAL_GPIO_DeInit+0x1d8>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d007      	beq.n	80048cc <HAL_GPIO_DeInit+0x90>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a56      	ldr	r2, [pc, #344]	@ (8004a18 <HAL_GPIO_DeInit+0x1dc>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d101      	bne.n	80048c8 <HAL_GPIO_DeInit+0x8c>
 80048c4:	2307      	movs	r3, #7
 80048c6:	e00e      	b.n	80048e6 <HAL_GPIO_DeInit+0xaa>
 80048c8:	2308      	movs	r3, #8
 80048ca:	e00c      	b.n	80048e6 <HAL_GPIO_DeInit+0xaa>
 80048cc:	2306      	movs	r3, #6
 80048ce:	e00a      	b.n	80048e6 <HAL_GPIO_DeInit+0xaa>
 80048d0:	2305      	movs	r3, #5
 80048d2:	e008      	b.n	80048e6 <HAL_GPIO_DeInit+0xaa>
 80048d4:	2304      	movs	r3, #4
 80048d6:	e006      	b.n	80048e6 <HAL_GPIO_DeInit+0xaa>
 80048d8:	2303      	movs	r3, #3
 80048da:	e004      	b.n	80048e6 <HAL_GPIO_DeInit+0xaa>
 80048dc:	2302      	movs	r3, #2
 80048de:	e002      	b.n	80048e6 <HAL_GPIO_DeInit+0xaa>
 80048e0:	2301      	movs	r3, #1
 80048e2:	e000      	b.n	80048e6 <HAL_GPIO_DeInit+0xaa>
 80048e4:	2300      	movs	r3, #0
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	f002 0203 	and.w	r2, r2, #3
 80048ec:	0092      	lsls	r2, r2, #2
 80048ee:	4093      	lsls	r3, r2
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d132      	bne.n	800495c <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80048f6:	4b49      	ldr	r3, [pc, #292]	@ (8004a1c <HAL_GPIO_DeInit+0x1e0>)
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	43db      	mvns	r3, r3
 80048fe:	4947      	ldr	r1, [pc, #284]	@ (8004a1c <HAL_GPIO_DeInit+0x1e0>)
 8004900:	4013      	ands	r3, r2
 8004902:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004904:	4b45      	ldr	r3, [pc, #276]	@ (8004a1c <HAL_GPIO_DeInit+0x1e0>)
 8004906:	685a      	ldr	r2, [r3, #4]
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	43db      	mvns	r3, r3
 800490c:	4943      	ldr	r1, [pc, #268]	@ (8004a1c <HAL_GPIO_DeInit+0x1e0>)
 800490e:	4013      	ands	r3, r2
 8004910:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004912:	4b42      	ldr	r3, [pc, #264]	@ (8004a1c <HAL_GPIO_DeInit+0x1e0>)
 8004914:	68da      	ldr	r2, [r3, #12]
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	43db      	mvns	r3, r3
 800491a:	4940      	ldr	r1, [pc, #256]	@ (8004a1c <HAL_GPIO_DeInit+0x1e0>)
 800491c:	4013      	ands	r3, r2
 800491e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8004920:	4b3e      	ldr	r3, [pc, #248]	@ (8004a1c <HAL_GPIO_DeInit+0x1e0>)
 8004922:	689a      	ldr	r2, [r3, #8]
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	43db      	mvns	r3, r3
 8004928:	493c      	ldr	r1, [pc, #240]	@ (8004a1c <HAL_GPIO_DeInit+0x1e0>)
 800492a:	4013      	ands	r3, r2
 800492c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	f003 0303 	and.w	r3, r3, #3
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	220f      	movs	r2, #15
 8004938:	fa02 f303 	lsl.w	r3, r2, r3
 800493c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800493e:	4a2f      	ldr	r2, [pc, #188]	@ (80049fc <HAL_GPIO_DeInit+0x1c0>)
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	089b      	lsrs	r3, r3, #2
 8004944:	3302      	adds	r3, #2
 8004946:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	43da      	mvns	r2, r3
 800494e:	482b      	ldr	r0, [pc, #172]	@ (80049fc <HAL_GPIO_DeInit+0x1c0>)
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	089b      	lsrs	r3, r3, #2
 8004954:	400a      	ands	r2, r1
 8004956:	3302      	adds	r3, #2
 8004958:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	2103      	movs	r1, #3
 8004966:	fa01 f303 	lsl.w	r3, r1, r3
 800496a:	431a      	orrs	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	08da      	lsrs	r2, r3, #3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	3208      	adds	r2, #8
 8004978:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	f003 0307 	and.w	r3, r3, #7
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	220f      	movs	r2, #15
 8004986:	fa02 f303 	lsl.w	r3, r2, r3
 800498a:	43db      	mvns	r3, r3
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	08d2      	lsrs	r2, r2, #3
 8004990:	4019      	ands	r1, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	3208      	adds	r2, #8
 8004996:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	689a      	ldr	r2, [r3, #8]
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	005b      	lsls	r3, r3, #1
 80049a2:	2103      	movs	r1, #3
 80049a4:	fa01 f303 	lsl.w	r3, r1, r3
 80049a8:	43db      	mvns	r3, r3
 80049aa:	401a      	ands	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685a      	ldr	r2, [r3, #4]
 80049b4:	2101      	movs	r1, #1
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	fa01 f303 	lsl.w	r3, r1, r3
 80049bc:	43db      	mvns	r3, r3
 80049be:	401a      	ands	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	68da      	ldr	r2, [r3, #12]
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	2103      	movs	r1, #3
 80049ce:	fa01 f303 	lsl.w	r3, r1, r3
 80049d2:	43db      	mvns	r3, r3
 80049d4:	401a      	ands	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	3301      	adds	r3, #1
 80049de:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80049e0:	683a      	ldr	r2, [r7, #0]
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	fa22 f303 	lsr.w	r3, r2, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f47f af2f 	bne.w	800484c <HAL_GPIO_DeInit+0x10>
  }
}
 80049ee:	bf00      	nop
 80049f0:	bf00      	nop
 80049f2:	371c      	adds	r7, #28
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr
 80049fc:	40010000 	.word	0x40010000
 8004a00:	48000400 	.word	0x48000400
 8004a04:	48000800 	.word	0x48000800
 8004a08:	48000c00 	.word	0x48000c00
 8004a0c:	48001000 	.word	0x48001000
 8004a10:	48001400 	.word	0x48001400
 8004a14:	48001800 	.word	0x48001800
 8004a18:	48001c00 	.word	0x48001c00
 8004a1c:	40010400 	.word	0x40010400

08004a20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	460b      	mov	r3, r1
 8004a2a:	807b      	strh	r3, [r7, #2]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a30:	787b      	ldrb	r3, [r7, #1]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d003      	beq.n	8004a3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004a36:	887a      	ldrh	r2, [r7, #2]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004a3c:	e002      	b.n	8004a44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004a3e:	887a      	ldrh	r2, [r7, #2]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	4603      	mov	r3, r0
 8004a58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004a5a:	4b08      	ldr	r3, [pc, #32]	@ (8004a7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a5c:	695a      	ldr	r2, [r3, #20]
 8004a5e:	88fb      	ldrh	r3, [r7, #6]
 8004a60:	4013      	ands	r3, r2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d006      	beq.n	8004a74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a66:	4a05      	ldr	r2, [pc, #20]	@ (8004a7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a68:	88fb      	ldrh	r3, [r7, #6]
 8004a6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a6c:	88fb      	ldrh	r3, [r7, #6]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 f806 	bl	8004a80 <HAL_GPIO_EXTI_Callback>
  }
}
 8004a74:	bf00      	nop
 8004a76:	3708      	adds	r7, #8
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	40010400 	.word	0x40010400

08004a80 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	4603      	mov	r3, r0
 8004a88:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004a8a:	bf00      	nop
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a96:	b580      	push	{r7, lr}
 8004a98:	b082      	sub	sp, #8
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d101      	bne.n	8004aa8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e08d      	b.n	8004bc4 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d106      	bne.n	8004ac2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f7fd fc95 	bl	80023ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2224      	movs	r2, #36	@ 0x24
 8004ac6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f022 0201 	bic.w	r2, r2, #1
 8004ad8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004ae6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689a      	ldr	r2, [r3, #8]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004af6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d107      	bne.n	8004b10 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689a      	ldr	r2, [r3, #8]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b0c:	609a      	str	r2, [r3, #8]
 8004b0e:	e006      	b.n	8004b1e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689a      	ldr	r2, [r3, #8]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004b1c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d108      	bne.n	8004b38 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b34:	605a      	str	r2, [r3, #4]
 8004b36:	e007      	b.n	8004b48 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	685a      	ldr	r2, [r3, #4]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b46:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6812      	ldr	r2, [r2, #0]
 8004b52:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004b56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b5a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68da      	ldr	r2, [r3, #12]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b6a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	691a      	ldr	r2, [r3, #16]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	695b      	ldr	r3, [r3, #20]
 8004b74:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	430a      	orrs	r2, r1
 8004b84:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	69d9      	ldr	r1, [r3, #28]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a1a      	ldr	r2, [r3, #32]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	430a      	orrs	r2, r1
 8004b94:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f042 0201 	orr.w	r2, r2, #1
 8004ba4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2220      	movs	r2, #32
 8004bb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3708      	adds	r7, #8
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d101      	bne.n	8004bde <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e021      	b.n	8004c22 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2224      	movs	r2, #36	@ 0x24
 8004be2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f022 0201 	bic.w	r2, r2, #1
 8004bf4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f7fd fc56 	bl	80024a8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
	...

08004c2c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b088      	sub	sp, #32
 8004c30:	af02      	add	r7, sp, #8
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	4608      	mov	r0, r1
 8004c36:	4611      	mov	r1, r2
 8004c38:	461a      	mov	r2, r3
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	817b      	strh	r3, [r7, #10]
 8004c3e:	460b      	mov	r3, r1
 8004c40:	813b      	strh	r3, [r7, #8]
 8004c42:	4613      	mov	r3, r2
 8004c44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b20      	cmp	r3, #32
 8004c50:	f040 80f9 	bne.w	8004e46 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c54:	6a3b      	ldr	r3, [r7, #32]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d002      	beq.n	8004c60 <HAL_I2C_Mem_Write+0x34>
 8004c5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d105      	bne.n	8004c6c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c66:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e0ed      	b.n	8004e48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d101      	bne.n	8004c7a <HAL_I2C_Mem_Write+0x4e>
 8004c76:	2302      	movs	r3, #2
 8004c78:	e0e6      	b.n	8004e48 <HAL_I2C_Mem_Write+0x21c>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004c82:	f7fd ffbd 	bl	8002c00 <HAL_GetTick>
 8004c86:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	9300      	str	r3, [sp, #0]
 8004c8c:	2319      	movs	r3, #25
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f000 fac3 	bl	8005220 <I2C_WaitOnFlagUntilTimeout>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d001      	beq.n	8004ca4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e0d1      	b.n	8004e48 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2221      	movs	r2, #33	@ 0x21
 8004ca8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2240      	movs	r2, #64	@ 0x40
 8004cb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6a3a      	ldr	r2, [r7, #32]
 8004cbe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004cc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ccc:	88f8      	ldrh	r0, [r7, #6]
 8004cce:	893a      	ldrh	r2, [r7, #8]
 8004cd0:	8979      	ldrh	r1, [r7, #10]
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	9301      	str	r3, [sp, #4]
 8004cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cd8:	9300      	str	r3, [sp, #0]
 8004cda:	4603      	mov	r3, r0
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f000 f9d3 	bl	8005088 <I2C_RequestMemoryWrite>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d005      	beq.n	8004cf4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e0a9      	b.n	8004e48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	2bff      	cmp	r3, #255	@ 0xff
 8004cfc:	d90e      	bls.n	8004d1c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	22ff      	movs	r2, #255	@ 0xff
 8004d02:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d08:	b2da      	uxtb	r2, r3
 8004d0a:	8979      	ldrh	r1, [r7, #10]
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	9300      	str	r3, [sp, #0]
 8004d10:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f000 fc47 	bl	80055a8 <I2C_TransferConfig>
 8004d1a:	e00f      	b.n	8004d3c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d2a:	b2da      	uxtb	r2, r3
 8004d2c:	8979      	ldrh	r1, [r7, #10]
 8004d2e:	2300      	movs	r3, #0
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f000 fc36 	bl	80055a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f000 fac6 	bl	80052d2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d001      	beq.n	8004d50 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e07b      	b.n	8004e48 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d54:	781a      	ldrb	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d60:	1c5a      	adds	r2, r3, #1
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d034      	beq.n	8004df4 <HAL_I2C_Mem_Write+0x1c8>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d130      	bne.n	8004df4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	9300      	str	r3, [sp, #0]
 8004d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d98:	2200      	movs	r2, #0
 8004d9a:	2180      	movs	r1, #128	@ 0x80
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	f000 fa3f 	bl	8005220 <I2C_WaitOnFlagUntilTimeout>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d001      	beq.n	8004dac <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e04d      	b.n	8004e48 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	2bff      	cmp	r3, #255	@ 0xff
 8004db4:	d90e      	bls.n	8004dd4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	22ff      	movs	r2, #255	@ 0xff
 8004dba:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dc0:	b2da      	uxtb	r2, r3
 8004dc2:	8979      	ldrh	r1, [r7, #10]
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	9300      	str	r3, [sp, #0]
 8004dc8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004dcc:	68f8      	ldr	r0, [r7, #12]
 8004dce:	f000 fbeb 	bl	80055a8 <I2C_TransferConfig>
 8004dd2:	e00f      	b.n	8004df4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004de2:	b2da      	uxtb	r2, r3
 8004de4:	8979      	ldrh	r1, [r7, #10]
 8004de6:	2300      	movs	r3, #0
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	f000 fbda 	bl	80055a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d19e      	bne.n	8004d3c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f000 faac 	bl	8005360 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d001      	beq.n	8004e12 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e01a      	b.n	8004e48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2220      	movs	r2, #32
 8004e18:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	6859      	ldr	r1, [r3, #4]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	4b0a      	ldr	r3, [pc, #40]	@ (8004e50 <HAL_I2C_Mem_Write+0x224>)
 8004e26:	400b      	ands	r3, r1
 8004e28:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2220      	movs	r2, #32
 8004e2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004e42:	2300      	movs	r3, #0
 8004e44:	e000      	b.n	8004e48 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004e46:	2302      	movs	r3, #2
  }
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3718      	adds	r7, #24
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	fe00e800 	.word	0xfe00e800

08004e54 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b088      	sub	sp, #32
 8004e58:	af02      	add	r7, sp, #8
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	4608      	mov	r0, r1
 8004e5e:	4611      	mov	r1, r2
 8004e60:	461a      	mov	r2, r3
 8004e62:	4603      	mov	r3, r0
 8004e64:	817b      	strh	r3, [r7, #10]
 8004e66:	460b      	mov	r3, r1
 8004e68:	813b      	strh	r3, [r7, #8]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b20      	cmp	r3, #32
 8004e78:	f040 80fd 	bne.w	8005076 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d002      	beq.n	8004e88 <HAL_I2C_Mem_Read+0x34>
 8004e82:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d105      	bne.n	8004e94 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e8e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e0f1      	b.n	8005078 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d101      	bne.n	8004ea2 <HAL_I2C_Mem_Read+0x4e>
 8004e9e:	2302      	movs	r3, #2
 8004ea0:	e0ea      	b.n	8005078 <HAL_I2C_Mem_Read+0x224>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004eaa:	f7fd fea9 	bl	8002c00 <HAL_GetTick>
 8004eae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	9300      	str	r3, [sp, #0]
 8004eb4:	2319      	movs	r3, #25
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f000 f9af 	bl	8005220 <I2C_WaitOnFlagUntilTimeout>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d001      	beq.n	8004ecc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e0d5      	b.n	8005078 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2222      	movs	r2, #34	@ 0x22
 8004ed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2240      	movs	r2, #64	@ 0x40
 8004ed8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6a3a      	ldr	r2, [r7, #32]
 8004ee6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004eec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ef4:	88f8      	ldrh	r0, [r7, #6]
 8004ef6:	893a      	ldrh	r2, [r7, #8]
 8004ef8:	8979      	ldrh	r1, [r7, #10]
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	9301      	str	r3, [sp, #4]
 8004efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	4603      	mov	r3, r0
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f000 f913 	bl	8005130 <I2C_RequestMemoryRead>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d005      	beq.n	8004f1c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e0ad      	b.n	8005078 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	2bff      	cmp	r3, #255	@ 0xff
 8004f24:	d90e      	bls.n	8004f44 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f30:	b2da      	uxtb	r2, r3
 8004f32:	8979      	ldrh	r1, [r7, #10]
 8004f34:	4b52      	ldr	r3, [pc, #328]	@ (8005080 <HAL_I2C_Mem_Read+0x22c>)
 8004f36:	9300      	str	r3, [sp, #0]
 8004f38:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004f3c:	68f8      	ldr	r0, [r7, #12]
 8004f3e:	f000 fb33 	bl	80055a8 <I2C_TransferConfig>
 8004f42:	e00f      	b.n	8004f64 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f48:	b29a      	uxth	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f52:	b2da      	uxtb	r2, r3
 8004f54:	8979      	ldrh	r1, [r7, #10]
 8004f56:	4b4a      	ldr	r3, [pc, #296]	@ (8005080 <HAL_I2C_Mem_Read+0x22c>)
 8004f58:	9300      	str	r3, [sp, #0]
 8004f5a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f000 fb22 	bl	80055a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	9300      	str	r3, [sp, #0]
 8004f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	2104      	movs	r1, #4
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f000 f956 	bl	8005220 <I2C_WaitOnFlagUntilTimeout>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e07c      	b.n	8005078 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f88:	b2d2      	uxtb	r2, r2
 8004f8a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f90:	1c5a      	adds	r2, r3, #1
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d034      	beq.n	8005024 <HAL_I2C_Mem_Read+0x1d0>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d130      	bne.n	8005024 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fc8:	2200      	movs	r2, #0
 8004fca:	2180      	movs	r1, #128	@ 0x80
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f000 f927 	bl	8005220 <I2C_WaitOnFlagUntilTimeout>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d001      	beq.n	8004fdc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e04d      	b.n	8005078 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	2bff      	cmp	r3, #255	@ 0xff
 8004fe4:	d90e      	bls.n	8005004 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ff0:	b2da      	uxtb	r2, r3
 8004ff2:	8979      	ldrh	r1, [r7, #10]
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	9300      	str	r3, [sp, #0]
 8004ff8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f000 fad3 	bl	80055a8 <I2C_TransferConfig>
 8005002:	e00f      	b.n	8005024 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005008:	b29a      	uxth	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005012:	b2da      	uxtb	r2, r3
 8005014:	8979      	ldrh	r1, [r7, #10]
 8005016:	2300      	movs	r3, #0
 8005018:	9300      	str	r3, [sp, #0]
 800501a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	f000 fac2 	bl	80055a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005028:	b29b      	uxth	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d19a      	bne.n	8004f64 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f000 f994 	bl	8005360 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d001      	beq.n	8005042 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e01a      	b.n	8005078 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2220      	movs	r2, #32
 8005048:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	6859      	ldr	r1, [r3, #4]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	4b0b      	ldr	r3, [pc, #44]	@ (8005084 <HAL_I2C_Mem_Read+0x230>)
 8005056:	400b      	ands	r3, r1
 8005058:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2220      	movs	r2, #32
 800505e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005072:	2300      	movs	r3, #0
 8005074:	e000      	b.n	8005078 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005076:	2302      	movs	r3, #2
  }
}
 8005078:	4618      	mov	r0, r3
 800507a:	3718      	adds	r7, #24
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	80002400 	.word	0x80002400
 8005084:	fe00e800 	.word	0xfe00e800

08005088 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b086      	sub	sp, #24
 800508c:	af02      	add	r7, sp, #8
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	4608      	mov	r0, r1
 8005092:	4611      	mov	r1, r2
 8005094:	461a      	mov	r2, r3
 8005096:	4603      	mov	r3, r0
 8005098:	817b      	strh	r3, [r7, #10]
 800509a:	460b      	mov	r3, r1
 800509c:	813b      	strh	r3, [r7, #8]
 800509e:	4613      	mov	r3, r2
 80050a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80050a2:	88fb      	ldrh	r3, [r7, #6]
 80050a4:	b2da      	uxtb	r2, r3
 80050a6:	8979      	ldrh	r1, [r7, #10]
 80050a8:	4b20      	ldr	r3, [pc, #128]	@ (800512c <I2C_RequestMemoryWrite+0xa4>)
 80050aa:	9300      	str	r3, [sp, #0]
 80050ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f000 fa79 	bl	80055a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050b6:	69fa      	ldr	r2, [r7, #28]
 80050b8:	69b9      	ldr	r1, [r7, #24]
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f000 f909 	bl	80052d2 <I2C_WaitOnTXISFlagUntilTimeout>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d001      	beq.n	80050ca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e02c      	b.n	8005124 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050ca:	88fb      	ldrh	r3, [r7, #6]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d105      	bne.n	80050dc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80050d0:	893b      	ldrh	r3, [r7, #8]
 80050d2:	b2da      	uxtb	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80050da:	e015      	b.n	8005108 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80050dc:	893b      	ldrh	r3, [r7, #8]
 80050de:	0a1b      	lsrs	r3, r3, #8
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	b2da      	uxtb	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050ea:	69fa      	ldr	r2, [r7, #28]
 80050ec:	69b9      	ldr	r1, [r7, #24]
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 f8ef 	bl	80052d2 <I2C_WaitOnTXISFlagUntilTimeout>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e012      	b.n	8005124 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80050fe:	893b      	ldrh	r3, [r7, #8]
 8005100:	b2da      	uxtb	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	9300      	str	r3, [sp, #0]
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	2200      	movs	r2, #0
 8005110:	2180      	movs	r1, #128	@ 0x80
 8005112:	68f8      	ldr	r0, [r7, #12]
 8005114:	f000 f884 	bl	8005220 <I2C_WaitOnFlagUntilTimeout>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d001      	beq.n	8005122 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e000      	b.n	8005124 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	80002000 	.word	0x80002000

08005130 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af02      	add	r7, sp, #8
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	4608      	mov	r0, r1
 800513a:	4611      	mov	r1, r2
 800513c:	461a      	mov	r2, r3
 800513e:	4603      	mov	r3, r0
 8005140:	817b      	strh	r3, [r7, #10]
 8005142:	460b      	mov	r3, r1
 8005144:	813b      	strh	r3, [r7, #8]
 8005146:	4613      	mov	r3, r2
 8005148:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800514a:	88fb      	ldrh	r3, [r7, #6]
 800514c:	b2da      	uxtb	r2, r3
 800514e:	8979      	ldrh	r1, [r7, #10]
 8005150:	4b20      	ldr	r3, [pc, #128]	@ (80051d4 <I2C_RequestMemoryRead+0xa4>)
 8005152:	9300      	str	r3, [sp, #0]
 8005154:	2300      	movs	r3, #0
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f000 fa26 	bl	80055a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800515c:	69fa      	ldr	r2, [r7, #28]
 800515e:	69b9      	ldr	r1, [r7, #24]
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f000 f8b6 	bl	80052d2 <I2C_WaitOnTXISFlagUntilTimeout>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d001      	beq.n	8005170 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e02c      	b.n	80051ca <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005170:	88fb      	ldrh	r3, [r7, #6]
 8005172:	2b01      	cmp	r3, #1
 8005174:	d105      	bne.n	8005182 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005176:	893b      	ldrh	r3, [r7, #8]
 8005178:	b2da      	uxtb	r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005180:	e015      	b.n	80051ae <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005182:	893b      	ldrh	r3, [r7, #8]
 8005184:	0a1b      	lsrs	r3, r3, #8
 8005186:	b29b      	uxth	r3, r3
 8005188:	b2da      	uxtb	r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005190:	69fa      	ldr	r2, [r7, #28]
 8005192:	69b9      	ldr	r1, [r7, #24]
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	f000 f89c 	bl	80052d2 <I2C_WaitOnTXISFlagUntilTimeout>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d001      	beq.n	80051a4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e012      	b.n	80051ca <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80051a4:	893b      	ldrh	r3, [r7, #8]
 80051a6:	b2da      	uxtb	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	9300      	str	r3, [sp, #0]
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	2200      	movs	r2, #0
 80051b6:	2140      	movs	r1, #64	@ 0x40
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f000 f831 	bl	8005220 <I2C_WaitOnFlagUntilTimeout>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d001      	beq.n	80051c8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e000      	b.n	80051ca <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	80002000 	.word	0x80002000

080051d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d103      	bne.n	80051f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2200      	movs	r2, #0
 80051f4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	f003 0301 	and.w	r3, r3, #1
 8005200:	2b01      	cmp	r3, #1
 8005202:	d007      	beq.n	8005214 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	699a      	ldr	r2, [r3, #24]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f042 0201 	orr.w	r2, r2, #1
 8005212:	619a      	str	r2, [r3, #24]
  }
}
 8005214:	bf00      	nop
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	603b      	str	r3, [r7, #0]
 800522c:	4613      	mov	r3, r2
 800522e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005230:	e03b      	b.n	80052aa <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005232:	69ba      	ldr	r2, [r7, #24]
 8005234:	6839      	ldr	r1, [r7, #0]
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	f000 f8d6 	bl	80053e8 <I2C_IsErrorOccurred>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d001      	beq.n	8005246 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e041      	b.n	80052ca <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800524c:	d02d      	beq.n	80052aa <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800524e:	f7fd fcd7 	bl	8002c00 <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	683a      	ldr	r2, [r7, #0]
 800525a:	429a      	cmp	r2, r3
 800525c:	d302      	bcc.n	8005264 <I2C_WaitOnFlagUntilTimeout+0x44>
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d122      	bne.n	80052aa <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	699a      	ldr	r2, [r3, #24]
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	4013      	ands	r3, r2
 800526e:	68ba      	ldr	r2, [r7, #8]
 8005270:	429a      	cmp	r2, r3
 8005272:	bf0c      	ite	eq
 8005274:	2301      	moveq	r3, #1
 8005276:	2300      	movne	r3, #0
 8005278:	b2db      	uxtb	r3, r3
 800527a:	461a      	mov	r2, r3
 800527c:	79fb      	ldrb	r3, [r7, #7]
 800527e:	429a      	cmp	r2, r3
 8005280:	d113      	bne.n	80052aa <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005286:	f043 0220 	orr.w	r2, r3, #32
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2220      	movs	r2, #32
 8005292:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e00f      	b.n	80052ca <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	699a      	ldr	r2, [r3, #24]
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	4013      	ands	r3, r2
 80052b4:	68ba      	ldr	r2, [r7, #8]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	bf0c      	ite	eq
 80052ba:	2301      	moveq	r3, #1
 80052bc:	2300      	movne	r3, #0
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	461a      	mov	r2, r3
 80052c2:	79fb      	ldrb	r3, [r7, #7]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d0b4      	beq.n	8005232 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3710      	adds	r7, #16
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b084      	sub	sp, #16
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	60f8      	str	r0, [r7, #12]
 80052da:	60b9      	str	r1, [r7, #8]
 80052dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80052de:	e033      	b.n	8005348 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	68b9      	ldr	r1, [r7, #8]
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f000 f87f 	bl	80053e8 <I2C_IsErrorOccurred>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d001      	beq.n	80052f4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e031      	b.n	8005358 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80052fa:	d025      	beq.n	8005348 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052fc:	f7fd fc80 	bl	8002c00 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	68ba      	ldr	r2, [r7, #8]
 8005308:	429a      	cmp	r2, r3
 800530a:	d302      	bcc.n	8005312 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d11a      	bne.n	8005348 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	f003 0302 	and.w	r3, r3, #2
 800531c:	2b02      	cmp	r3, #2
 800531e:	d013      	beq.n	8005348 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005324:	f043 0220 	orr.w	r2, r3, #32
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2220      	movs	r2, #32
 8005330:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e007      	b.n	8005358 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	f003 0302 	and.w	r3, r3, #2
 8005352:	2b02      	cmp	r3, #2
 8005354:	d1c4      	bne.n	80052e0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	3710      	adds	r7, #16
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800536c:	e02f      	b.n	80053ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	68b9      	ldr	r1, [r7, #8]
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f000 f838 	bl	80053e8 <I2C_IsErrorOccurred>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d001      	beq.n	8005382 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e02d      	b.n	80053de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005382:	f7fd fc3d 	bl	8002c00 <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	429a      	cmp	r2, r3
 8005390:	d302      	bcc.n	8005398 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d11a      	bne.n	80053ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	699b      	ldr	r3, [r3, #24]
 800539e:	f003 0320 	and.w	r3, r3, #32
 80053a2:	2b20      	cmp	r3, #32
 80053a4:	d013      	beq.n	80053ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053aa:	f043 0220 	orr.w	r2, r3, #32
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2220      	movs	r2, #32
 80053b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e007      	b.n	80053de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	f003 0320 	and.w	r3, r3, #32
 80053d8:	2b20      	cmp	r3, #32
 80053da:	d1c8      	bne.n	800536e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
	...

080053e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b08a      	sub	sp, #40	@ 0x28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053f4:	2300      	movs	r3, #0
 80053f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005402:	2300      	movs	r3, #0
 8005404:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	f003 0310 	and.w	r3, r3, #16
 8005410:	2b00      	cmp	r3, #0
 8005412:	d068      	beq.n	80054e6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2210      	movs	r2, #16
 800541a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800541c:	e049      	b.n	80054b2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005424:	d045      	beq.n	80054b2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005426:	f7fd fbeb 	bl	8002c00 <HAL_GetTick>
 800542a:	4602      	mov	r2, r0
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	68ba      	ldr	r2, [r7, #8]
 8005432:	429a      	cmp	r2, r3
 8005434:	d302      	bcc.n	800543c <I2C_IsErrorOccurred+0x54>
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d13a      	bne.n	80054b2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005446:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800544e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800545a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800545e:	d121      	bne.n	80054a4 <I2C_IsErrorOccurred+0xbc>
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005466:	d01d      	beq.n	80054a4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005468:	7cfb      	ldrb	r3, [r7, #19]
 800546a:	2b20      	cmp	r3, #32
 800546c:	d01a      	beq.n	80054a4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	685a      	ldr	r2, [r3, #4]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800547c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800547e:	f7fd fbbf 	bl	8002c00 <HAL_GetTick>
 8005482:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005484:	e00e      	b.n	80054a4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005486:	f7fd fbbb 	bl	8002c00 <HAL_GetTick>
 800548a:	4602      	mov	r2, r0
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	2b19      	cmp	r3, #25
 8005492:	d907      	bls.n	80054a4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005494:	6a3b      	ldr	r3, [r7, #32]
 8005496:	f043 0320 	orr.w	r3, r3, #32
 800549a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80054a2:	e006      	b.n	80054b2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	f003 0320 	and.w	r3, r3, #32
 80054ae:	2b20      	cmp	r3, #32
 80054b0:	d1e9      	bne.n	8005486 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	f003 0320 	and.w	r3, r3, #32
 80054bc:	2b20      	cmp	r3, #32
 80054be:	d003      	beq.n	80054c8 <I2C_IsErrorOccurred+0xe0>
 80054c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d0aa      	beq.n	800541e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80054c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d103      	bne.n	80054d8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2220      	movs	r2, #32
 80054d6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80054d8:	6a3b      	ldr	r3, [r7, #32]
 80054da:	f043 0304 	orr.w	r3, r3, #4
 80054de:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00b      	beq.n	8005510 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80054f8:	6a3b      	ldr	r3, [r7, #32]
 80054fa:	f043 0301 	orr.w	r3, r3, #1
 80054fe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005508:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00b      	beq.n	8005532 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800551a:	6a3b      	ldr	r3, [r7, #32]
 800551c:	f043 0308 	orr.w	r3, r3, #8
 8005520:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800552a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00b      	beq.n	8005554 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800553c:	6a3b      	ldr	r3, [r7, #32]
 800553e:	f043 0302 	orr.w	r3, r3, #2
 8005542:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800554c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005554:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005558:	2b00      	cmp	r3, #0
 800555a:	d01c      	beq.n	8005596 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f7ff fe3b 	bl	80051d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	6859      	ldr	r1, [r3, #4]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	4b0d      	ldr	r3, [pc, #52]	@ (80055a4 <I2C_IsErrorOccurred+0x1bc>)
 800556e:	400b      	ands	r3, r1
 8005570:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005576:	6a3b      	ldr	r3, [r7, #32]
 8005578:	431a      	orrs	r2, r3
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2220      	movs	r2, #32
 8005582:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005596:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800559a:	4618      	mov	r0, r3
 800559c:	3728      	adds	r7, #40	@ 0x28
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	fe00e800 	.word	0xfe00e800

080055a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b087      	sub	sp, #28
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	607b      	str	r3, [r7, #4]
 80055b2:	460b      	mov	r3, r1
 80055b4:	817b      	strh	r3, [r7, #10]
 80055b6:	4613      	mov	r3, r2
 80055b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80055ba:	897b      	ldrh	r3, [r7, #10]
 80055bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80055c0:	7a7b      	ldrb	r3, [r7, #9]
 80055c2:	041b      	lsls	r3, r3, #16
 80055c4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80055c8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80055ce:	6a3b      	ldr	r3, [r7, #32]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80055d6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	685a      	ldr	r2, [r3, #4]
 80055de:	6a3b      	ldr	r3, [r7, #32]
 80055e0:	0d5b      	lsrs	r3, r3, #21
 80055e2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80055e6:	4b08      	ldr	r3, [pc, #32]	@ (8005608 <I2C_TransferConfig+0x60>)
 80055e8:	430b      	orrs	r3, r1
 80055ea:	43db      	mvns	r3, r3
 80055ec:	ea02 0103 	and.w	r1, r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80055fa:	bf00      	nop
 80055fc:	371c      	adds	r7, #28
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	03ff63ff 	.word	0x03ff63ff

0800560c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800561c:	b2db      	uxtb	r3, r3
 800561e:	2b20      	cmp	r3, #32
 8005620:	d138      	bne.n	8005694 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005628:	2b01      	cmp	r3, #1
 800562a:	d101      	bne.n	8005630 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800562c:	2302      	movs	r3, #2
 800562e:	e032      	b.n	8005696 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2224      	movs	r2, #36	@ 0x24
 800563c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f022 0201 	bic.w	r2, r2, #1
 800564e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800565e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	6819      	ldr	r1, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	683a      	ldr	r2, [r7, #0]
 800566c:	430a      	orrs	r2, r1
 800566e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f042 0201 	orr.w	r2, r2, #1
 800567e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2220      	movs	r2, #32
 8005684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005690:	2300      	movs	r3, #0
 8005692:	e000      	b.n	8005696 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005694:	2302      	movs	r3, #2
  }
}
 8005696:	4618      	mov	r0, r3
 8005698:	370c      	adds	r7, #12
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b085      	sub	sp, #20
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
 80056aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	2b20      	cmp	r3, #32
 80056b6:	d139      	bne.n	800572c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d101      	bne.n	80056c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80056c2:	2302      	movs	r3, #2
 80056c4:	e033      	b.n	800572e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2224      	movs	r2, #36	@ 0x24
 80056d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f022 0201 	bic.w	r2, r2, #1
 80056e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80056f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	021b      	lsls	r3, r3, #8
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f042 0201 	orr.w	r2, r2, #1
 8005716:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2220      	movs	r2, #32
 800571c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005728:	2300      	movs	r3, #0
 800572a:	e000      	b.n	800572e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800572c:	2302      	movs	r3, #2
  }
}
 800572e:	4618      	mov	r0, r3
 8005730:	3714      	adds	r7, #20
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
	...

0800573c <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b086      	sub	sp, #24
 8005740:	af02      	add	r7, sp, #8
 8005742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005744:	2300      	movs	r3, #0
 8005746:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8005748:	f7fd fa5a 	bl	8002c00 <HAL_GetTick>
 800574c:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d102      	bne.n	800575a <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	73fb      	strb	r3, [r7, #15]
 8005758:	e092      	b.n	8005880 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005764:	2b00      	cmp	r3, #0
 8005766:	f040 808b 	bne.w	8005880 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f7fc fec0 	bl	80024f0 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8005770:	f241 3188 	movw	r1, #5000	@ 0x1388
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 f88b 	bl	8005890 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	689a      	ldr	r2, [r3, #8]
 8005780:	4b42      	ldr	r3, [pc, #264]	@ (800588c <HAL_OSPI_Init+0x150>)
 8005782:	4013      	ands	r3, r2
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	68d1      	ldr	r1, [r2, #12]
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	6912      	ldr	r2, [r2, #16]
 800578c:	3a01      	subs	r2, #1
 800578e:	0412      	lsls	r2, r2, #16
 8005790:	4311      	orrs	r1, r2
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	6952      	ldr	r2, [r2, #20]
 8005796:	3a01      	subs	r2, #1
 8005798:	0212      	lsls	r2, r2, #8
 800579a:	4311      	orrs	r1, r2
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80057a0:	4311      	orrs	r1, r2
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	69d2      	ldr	r2, [r2, #28]
 80057a6:	4311      	orrs	r1, r2
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	6812      	ldr	r2, [r2, #0]
 80057ac:	430b      	orrs	r3, r1
 80057ae:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	0412      	lsls	r2, r2, #16
 80057ba:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	3b01      	subs	r3, #1
 80057cc:	021a      	lsls	r2, r3, #8
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	430a      	orrs	r2, r1
 80057d4:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057da:	9300      	str	r3, [sp, #0]
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	2200      	movs	r2, #0
 80057e0:	2120      	movs	r1, #32
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 fb9c 	bl	8005f20 <OSPI_WaitFlagStateUntilTimeout>
 80057e8:	4603      	mov	r3, r0
 80057ea:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80057ec:	7bfb      	ldrb	r3, [r7, #15]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d146      	bne.n	8005880 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a1b      	ldr	r3, [r3, #32]
 8005800:	1e5a      	subs	r2, r3, #1
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	430a      	orrs	r2, r1
 8005808:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	689a      	ldr	r2, [r3, #8]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	430a      	orrs	r2, r1
 800581e:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005828:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005834:	431a      	orrs	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	430a      	orrs	r2, r1
 800583c:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f042 0201 	orr.w	r2, r2, #1
 800584e:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	699b      	ldr	r3, [r3, #24]
 8005854:	2b02      	cmp	r3, #2
 8005856:	d107      	bne.n	8005868 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	689a      	ldr	r2, [r3, #8]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f042 0202 	orr.w	r2, r2, #2
 8005866:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005870:	d103      	bne.n	800587a <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2201      	movs	r2, #1
 8005876:	645a      	str	r2, [r3, #68]	@ 0x44
 8005878:	e002      	b.n	8005880 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2202      	movs	r2, #2
 800587e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8005880:	7bfb      	ldrb	r3, [r7, #15]
}
 8005882:	4618      	mov	r0, r3
 8005884:	3710      	adds	r7, #16
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	f8e0f8f4 	.word	0xf8e0f8f4

08005890 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	683a      	ldr	r2, [r7, #0]
 800589e:	64da      	str	r2, [r3, #76]	@ 0x4c
  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	370c      	adds	r7, #12
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
	...

080058b0 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b092      	sub	sp, #72	@ 0x48
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058bc:	2300      	movs	r3, #0
 80058be:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 80058c2:	2300      	movs	r3, #0
 80058c4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a08      	ldr	r2, [pc, #32]	@ (80058f0 <HAL_OSPIM_Config+0x40>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d105      	bne.n	80058de <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80058d2:	2300      	movs	r3, #0
 80058d4:	643b      	str	r3, [r7, #64]	@ 0x40
    other_instance = 1U;
 80058d6:	2301      	movs	r3, #1
 80058d8:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 80058dc:	e004      	b.n	80058e8 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80058de:	2301      	movs	r3, #1
 80058e0:	643b      	str	r3, [r7, #64]	@ 0x40
    other_instance = 0U;
 80058e2:	2300      	movs	r3, #0
 80058e4:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80058e8:	2300      	movs	r3, #0
 80058ea:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80058ee:	e01f      	b.n	8005930 <HAL_OSPIM_Config+0x80>
 80058f0:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 80058f4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80058f8:	3301      	adds	r3, #1
 80058fa:	b2d8      	uxtb	r0, r3
 80058fc:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8005900:	f107 0114 	add.w	r1, r7, #20
 8005904:	4613      	mov	r3, r2
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4413      	add	r3, r2
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	440b      	add	r3, r1
 800590e:	4619      	mov	r1, r3
 8005910:	f000 fb3e 	bl	8005f90 <OSPIM_GetConfig>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d005      	beq.n	8005926 <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2208      	movs	r2, #8
 8005924:	649a      	str	r2, [r3, #72]	@ 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8005926:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800592a:	3301      	adds	r3, #1
 800592c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8005930:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005934:	2b01      	cmp	r3, #1
 8005936:	d9dd      	bls.n	80058f4 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8005938:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800593c:	2b00      	cmp	r3, #0
 800593e:	f040 82e3 	bne.w	8005f08 <HAL_OSPIM_Config+0x658>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8005942:	4bc5      	ldr	r3, [pc, #788]	@ (8005c58 <HAL_OSPIM_Config+0x3a8>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00b      	beq.n	8005966 <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800594e:	4bc2      	ldr	r3, [pc, #776]	@ (8005c58 <HAL_OSPIM_Config+0x3a8>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4ac1      	ldr	r2, [pc, #772]	@ (8005c58 <HAL_OSPIM_Config+0x3a8>)
 8005954:	f023 0301 	bic.w	r3, r3, #1
 8005958:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800595a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800595e:	f043 0301 	orr.w	r3, r3, #1
 8005962:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8005966:	4bbd      	ldr	r3, [pc, #756]	@ (8005c5c <HAL_OSPIM_Config+0x3ac>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0301 	and.w	r3, r3, #1
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00b      	beq.n	800598a <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8005972:	4bba      	ldr	r3, [pc, #744]	@ (8005c5c <HAL_OSPIM_Config+0x3ac>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4ab9      	ldr	r2, [pc, #740]	@ (8005c5c <HAL_OSPIM_Config+0x3ac>)
 8005978:	f023 0301 	bic.w	r3, r3, #1
 800597c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800597e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8005982:	f043 0302 	orr.w	r3, r3, #2
 8005986:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800598a:	49b5      	ldr	r1, [pc, #724]	@ (8005c60 <HAL_OSPIM_Config+0x3b0>)
 800598c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800598e:	4613      	mov	r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	4413      	add	r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	3348      	adds	r3, #72	@ 0x48
 8005998:	443b      	add	r3, r7
 800599a:	3b2c      	subs	r3, #44	@ 0x2c
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	3b01      	subs	r3, #1
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	440b      	add	r3, r1
 80059a4:	6859      	ldr	r1, [r3, #4]
 80059a6:	48ae      	ldr	r0, [pc, #696]	@ (8005c60 <HAL_OSPIM_Config+0x3b0>)
 80059a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80059aa:	4613      	mov	r3, r2
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	4413      	add	r3, r2
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	3348      	adds	r3, #72	@ 0x48
 80059b4:	443b      	add	r3, r7
 80059b6:	3b2c      	subs	r3, #44	@ 0x2c
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	3b01      	subs	r3, #1
 80059bc:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	4403      	add	r3, r0
 80059c4:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 80059c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80059c8:	4613      	mov	r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	4413      	add	r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	3348      	adds	r3, #72	@ 0x48
 80059d2:	443b      	add	r3, r7
 80059d4:	3b34      	subs	r3, #52	@ 0x34
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f000 80a1 	beq.w	8005b20 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80059de:	49a0      	ldr	r1, [pc, #640]	@ (8005c60 <HAL_OSPIM_Config+0x3b0>)
 80059e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80059e2:	4613      	mov	r3, r2
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	4413      	add	r3, r2
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	3348      	adds	r3, #72	@ 0x48
 80059ec:	443b      	add	r3, r7
 80059ee:	3b34      	subs	r3, #52	@ 0x34
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	3b01      	subs	r3, #1
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	440b      	add	r3, r1
 80059f8:	6859      	ldr	r1, [r3, #4]
 80059fa:	4899      	ldr	r0, [pc, #612]	@ (8005c60 <HAL_OSPIM_Config+0x3b0>)
 80059fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80059fe:	4613      	mov	r3, r2
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	4413      	add	r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	3348      	adds	r3, #72	@ 0x48
 8005a08:	443b      	add	r3, r7
 8005a0a:	3b34      	subs	r3, #52	@ 0x34
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	f021 0201 	bic.w	r2, r1, #1
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	4403      	add	r3, r0
 8005a18:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8005a1a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	4413      	add	r3, r2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	3348      	adds	r3, #72	@ 0x48
 8005a26:	443b      	add	r3, r7
 8005a28:	3b30      	subs	r3, #48	@ 0x30
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d01d      	beq.n	8005a6c <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8005a30:	498b      	ldr	r1, [pc, #556]	@ (8005c60 <HAL_OSPIM_Config+0x3b0>)
 8005a32:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a34:	4613      	mov	r3, r2
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4413      	add	r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	3348      	adds	r3, #72	@ 0x48
 8005a3e:	443b      	add	r3, r7
 8005a40:	3b30      	subs	r3, #48	@ 0x30
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	3b01      	subs	r3, #1
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	440b      	add	r3, r1
 8005a4a:	6859      	ldr	r1, [r3, #4]
 8005a4c:	4884      	ldr	r0, [pc, #528]	@ (8005c60 <HAL_OSPIM_Config+0x3b0>)
 8005a4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a50:	4613      	mov	r3, r2
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	4413      	add	r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	3348      	adds	r3, #72	@ 0x48
 8005a5a:	443b      	add	r3, r7
 8005a5c:	3b30      	subs	r3, #48	@ 0x30
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	3b01      	subs	r3, #1
 8005a62:	f021 0210 	bic.w	r2, r1, #16
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	4403      	add	r3, r0
 8005a6a:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005a6c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a6e:	4613      	mov	r3, r2
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	4413      	add	r3, r2
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	3348      	adds	r3, #72	@ 0x48
 8005a78:	443b      	add	r3, r7
 8005a7a:	3b28      	subs	r3, #40	@ 0x28
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d021      	beq.n	8005ac6 <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8005a82:	4977      	ldr	r1, [pc, #476]	@ (8005c60 <HAL_OSPIM_Config+0x3b0>)
 8005a84:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a86:	4613      	mov	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	4413      	add	r3, r2
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	3348      	adds	r3, #72	@ 0x48
 8005a90:	443b      	add	r3, r7
 8005a92:	3b28      	subs	r3, #40	@ 0x28
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	3b01      	subs	r3, #1
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	440b      	add	r3, r1
 8005aa0:	6859      	ldr	r1, [r3, #4]
 8005aa2:	486f      	ldr	r0, [pc, #444]	@ (8005c60 <HAL_OSPIM_Config+0x3b0>)
 8005aa4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	4413      	add	r3, r2
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	3348      	adds	r3, #72	@ 0x48
 8005ab0:	443b      	add	r3, r7
 8005ab2:	3b28      	subs	r3, #40	@ 0x28
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	f003 0301 	and.w	r3, r3, #1
 8005abc:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	4403      	add	r3, r0
 8005ac4:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005ac6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ac8:	4613      	mov	r3, r2
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	4413      	add	r3, r2
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	3348      	adds	r3, #72	@ 0x48
 8005ad2:	443b      	add	r3, r7
 8005ad4:	3b24      	subs	r3, #36	@ 0x24
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d021      	beq.n	8005b20 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8005adc:	4960      	ldr	r1, [pc, #384]	@ (8005c60 <HAL_OSPIM_Config+0x3b0>)
 8005ade:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	4413      	add	r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	3348      	adds	r3, #72	@ 0x48
 8005aea:	443b      	add	r3, r7
 8005aec:	3b24      	subs	r3, #36	@ 0x24
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	3b01      	subs	r3, #1
 8005af2:	f003 0301 	and.w	r3, r3, #1
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	440b      	add	r3, r1
 8005afa:	6859      	ldr	r1, [r3, #4]
 8005afc:	4858      	ldr	r0, [pc, #352]	@ (8005c60 <HAL_OSPIM_Config+0x3b0>)
 8005afe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b00:	4613      	mov	r3, r2
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	4413      	add	r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	3348      	adds	r3, #72	@ 0x48
 8005b0a:	443b      	add	r3, r7
 8005b0c:	3b24      	subs	r3, #36	@ 0x24
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	3b01      	subs	r3, #1
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4403      	add	r3, r0
 8005b1e:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	6819      	ldr	r1, [r3, #0]
 8005b24:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8005b28:	4613      	mov	r3, r2
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	4413      	add	r3, r2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	3348      	adds	r3, #72	@ 0x48
 8005b32:	443b      	add	r3, r7
 8005b34:	3b34      	subs	r3, #52	@ 0x34
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4299      	cmp	r1, r3
 8005b3a:	d03c      	beq.n	8005bb6 <HAL_OSPIM_Config+0x306>
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	6899      	ldr	r1, [r3, #8]
 8005b40:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8005b44:	4613      	mov	r3, r2
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	4413      	add	r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	3348      	adds	r3, #72	@ 0x48
 8005b4e:	443b      	add	r3, r7
 8005b50:	3b2c      	subs	r3, #44	@ 0x2c
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4299      	cmp	r1, r3
 8005b56:	d02e      	beq.n	8005bb6 <HAL_OSPIM_Config+0x306>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	6859      	ldr	r1, [r3, #4]
 8005b5c:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8005b60:	4613      	mov	r3, r2
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4413      	add	r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	3348      	adds	r3, #72	@ 0x48
 8005b6a:	443b      	add	r3, r7
 8005b6c:	3b30      	subs	r3, #48	@ 0x30
 8005b6e:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 8005b70:	4299      	cmp	r1, r3
 8005b72:	d103      	bne.n	8005b7c <HAL_OSPIM_Config+0x2cc>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d11c      	bne.n	8005bb6 <HAL_OSPIM_Config+0x306>
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	68d9      	ldr	r1, [r3, #12]
 8005b80:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8005b84:	4613      	mov	r3, r2
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4413      	add	r3, r2
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	3348      	adds	r3, #72	@ 0x48
 8005b8e:	443b      	add	r3, r7
 8005b90:	3b28      	subs	r3, #40	@ 0x28
 8005b92:	681b      	ldr	r3, [r3, #0]
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8005b94:	4299      	cmp	r1, r3
 8005b96:	d00e      	beq.n	8005bb6 <HAL_OSPIM_Config+0x306>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	6919      	ldr	r1, [r3, #16]
 8005b9c:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	4413      	add	r3, r2
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	3348      	adds	r3, #72	@ 0x48
 8005baa:	443b      	add	r3, r7
 8005bac:	3b24      	subs	r3, #36	@ 0x24
 8005bae:	681b      	ldr	r3, [r3, #0]
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8005bb0:	4299      	cmp	r1, r3
 8005bb2:	f040 80d4 	bne.w	8005d5e <HAL_OSPIM_Config+0x4ae>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8005bb6:	492a      	ldr	r1, [pc, #168]	@ (8005c60 <HAL_OSPIM_Config+0x3b0>)
 8005bb8:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	4413      	add	r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	3348      	adds	r3, #72	@ 0x48
 8005bc6:	443b      	add	r3, r7
 8005bc8:	3b34      	subs	r3, #52	@ 0x34
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	3b01      	subs	r3, #1
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	440b      	add	r3, r1
 8005bd2:	6859      	ldr	r1, [r3, #4]
 8005bd4:	4822      	ldr	r0, [pc, #136]	@ (8005c60 <HAL_OSPIM_Config+0x3b0>)
 8005bd6:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8005bda:	4613      	mov	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4413      	add	r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	3348      	adds	r3, #72	@ 0x48
 8005be4:	443b      	add	r3, r7
 8005be6:	3b34      	subs	r3, #52	@ 0x34
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	3b01      	subs	r3, #1
 8005bec:	f021 0201 	bic.w	r2, r1, #1
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	4403      	add	r3, r0
 8005bf4:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8005bf6:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4413      	add	r3, r2
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	3348      	adds	r3, #72	@ 0x48
 8005c04:	443b      	add	r3, r7
 8005c06:	3b30      	subs	r3, #48	@ 0x30
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d01f      	beq.n	8005c4e <HAL_OSPIM_Config+0x39e>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8005c0e:	4914      	ldr	r1, [pc, #80]	@ (8005c60 <HAL_OSPIM_Config+0x3b0>)
 8005c10:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8005c14:	4613      	mov	r3, r2
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	4413      	add	r3, r2
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	3348      	adds	r3, #72	@ 0x48
 8005c1e:	443b      	add	r3, r7
 8005c20:	3b30      	subs	r3, #48	@ 0x30
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	3b01      	subs	r3, #1
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	440b      	add	r3, r1
 8005c2a:	6859      	ldr	r1, [r3, #4]
 8005c2c:	480c      	ldr	r0, [pc, #48]	@ (8005c60 <HAL_OSPIM_Config+0x3b0>)
 8005c2e:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8005c32:	4613      	mov	r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4413      	add	r3, r2
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	3348      	adds	r3, #72	@ 0x48
 8005c3c:	443b      	add	r3, r7
 8005c3e:	3b30      	subs	r3, #48	@ 0x30
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	3b01      	subs	r3, #1
 8005c44:	f021 0210 	bic.w	r2, r1, #16
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	4403      	add	r3, r0
 8005c4c:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8005c4e:	4904      	ldr	r1, [pc, #16]	@ (8005c60 <HAL_OSPIM_Config+0x3b0>)
 8005c50:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8005c54:	e006      	b.n	8005c64 <HAL_OSPIM_Config+0x3b4>
 8005c56:	bf00      	nop
 8005c58:	a0001000 	.word	0xa0001000
 8005c5c:	a0001400 	.word	0xa0001400
 8005c60:	50061c00 	.word	0x50061c00
 8005c64:	4613      	mov	r3, r2
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	4413      	add	r3, r2
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	3348      	adds	r3, #72	@ 0x48
 8005c6e:	443b      	add	r3, r7
 8005c70:	3b2c      	subs	r3, #44	@ 0x2c
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	3b01      	subs	r3, #1
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	440b      	add	r3, r1
 8005c7a:	6859      	ldr	r1, [r3, #4]
 8005c7c:	48a5      	ldr	r0, [pc, #660]	@ (8005f14 <HAL_OSPIM_Config+0x664>)
 8005c7e:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8005c82:	4613      	mov	r3, r2
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	4413      	add	r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	3348      	adds	r3, #72	@ 0x48
 8005c8c:	443b      	add	r3, r7
 8005c8e:	3b2c      	subs	r3, #44	@ 0x2c
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	3b01      	subs	r3, #1
 8005c94:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	4403      	add	r3, r0
 8005c9c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005c9e:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4413      	add	r3, r2
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	3348      	adds	r3, #72	@ 0x48
 8005cac:	443b      	add	r3, r7
 8005cae:	3b28      	subs	r3, #40	@ 0x28
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d023      	beq.n	8005cfe <HAL_OSPIM_Config+0x44e>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005cb6:	4997      	ldr	r1, [pc, #604]	@ (8005f14 <HAL_OSPIM_Config+0x664>)
 8005cb8:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	4413      	add	r3, r2
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	3348      	adds	r3, #72	@ 0x48
 8005cc6:	443b      	add	r3, r7
 8005cc8:	3b28      	subs	r3, #40	@ 0x28
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	f003 0301 	and.w	r3, r3, #1
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	440b      	add	r3, r1
 8005cd6:	6859      	ldr	r1, [r3, #4]
 8005cd8:	488e      	ldr	r0, [pc, #568]	@ (8005f14 <HAL_OSPIM_Config+0x664>)
 8005cda:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8005cde:	4613      	mov	r3, r2
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	4413      	add	r3, r2
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	3348      	adds	r3, #72	@ 0x48
 8005ce8:	443b      	add	r3, r7
 8005cea:	3b28      	subs	r3, #40	@ 0x28
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	4403      	add	r3, r0
 8005cfc:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005cfe:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8005d02:	4613      	mov	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	4413      	add	r3, r2
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	3348      	adds	r3, #72	@ 0x48
 8005d0c:	443b      	add	r3, r7
 8005d0e:	3b24      	subs	r3, #36	@ 0x24
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d023      	beq.n	8005d5e <HAL_OSPIM_Config+0x4ae>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005d16:	497f      	ldr	r1, [pc, #508]	@ (8005f14 <HAL_OSPIM_Config+0x664>)
 8005d18:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	4413      	add	r3, r2
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	3348      	adds	r3, #72	@ 0x48
 8005d26:	443b      	add	r3, r7
 8005d28:	3b24      	subs	r3, #36	@ 0x24
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	f003 0301 	and.w	r3, r3, #1
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	440b      	add	r3, r1
 8005d36:	6859      	ldr	r1, [r3, #4]
 8005d38:	4876      	ldr	r0, [pc, #472]	@ (8005f14 <HAL_OSPIM_Config+0x664>)
 8005d3a:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8005d3e:	4613      	mov	r3, r2
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	4413      	add	r3, r2
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	3348      	adds	r3, #72	@ 0x48
 8005d48:	443b      	add	r3, r7
 8005d4a:	3b24      	subs	r3, #36	@ 0x24
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	3b01      	subs	r3, #1
 8005d50:	f003 0301 	and.w	r3, r3, #1
 8005d54:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	4403      	add	r3, r0
 8005d5c:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8005d5e:	4a6d      	ldr	r2, [pc, #436]	@ (8005f14 <HAL_OSPIM_Config+0x664>)
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	3b01      	subs	r3, #1
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	4413      	add	r3, r2
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005d70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d72:	025b      	lsls	r3, r3, #9
 8005d74:	431a      	orrs	r2, r3
 8005d76:	4967      	ldr	r1, [pc, #412]	@ (8005f14 <HAL_OSPIM_Config+0x664>)
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	440b      	add	r3, r1
 8005d86:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8005d88:	4a62      	ldr	r2, [pc, #392]	@ (8005f14 <HAL_OSPIM_Config+0x664>)
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	3b01      	subs	r3, #1
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	4413      	add	r3, r2
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f023 0203 	bic.w	r2, r3, #3
 8005d9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d9c:	005b      	lsls	r3, r3, #1
 8005d9e:	431a      	orrs	r2, r3
 8005da0:	495c      	ldr	r1, [pc, #368]	@ (8005f14 <HAL_OSPIM_Config+0x664>)
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	3b01      	subs	r3, #1
 8005da8:	f042 0201 	orr.w	r2, r2, #1
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	440b      	add	r3, r1
 8005db0:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d014      	beq.n	8005de4 <HAL_OSPIM_Config+0x534>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8005dba:	4a56      	ldr	r2, [pc, #344]	@ (8005f14 <HAL_OSPIM_Config+0x664>)
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	4413      	add	r3, r2
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005dcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dce:	015b      	lsls	r3, r3, #5
 8005dd0:	431a      	orrs	r2, r3
 8005dd2:	4950      	ldr	r1, [pc, #320]	@ (8005f14 <HAL_OSPIM_Config+0x664>)
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	f042 0210 	orr.w	r2, r2, #16
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	440b      	add	r3, r1
 8005de2:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d019      	beq.n	8005e24 <HAL_OSPIM_Config+0x574>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005df0:	4a48      	ldr	r2, [pc, #288]	@ (8005f14 <HAL_OSPIM_Config+0x664>)
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	3b01      	subs	r3, #1
 8005df8:	f003 0301 	and.w	r3, r3, #1
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	4413      	add	r3, r2
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005e06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e08:	049b      	lsls	r3, r3, #18
 8005e0a:	431a      	orrs	r2, r3
 8005e0c:	4941      	ldr	r1, [pc, #260]	@ (8005f14 <HAL_OSPIM_Config+0x664>)
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	3b01      	subs	r3, #1
 8005e14:	f003 0301 	and.w	r3, r3, #1
 8005e18:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	440b      	add	r3, r1
 8005e20:	605a      	str	r2, [r3, #4]
 8005e22:	e01c      	b.n	8005e5e <HAL_OSPIM_Config+0x5ae>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d018      	beq.n	8005e5e <HAL_OSPIM_Config+0x5ae>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005e2c:	4a39      	ldr	r2, [pc, #228]	@ (8005f14 <HAL_OSPIM_Config+0x664>)
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	3b01      	subs	r3, #1
 8005e34:	f003 0301 	and.w	r3, r3, #1
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	4413      	add	r3, r2
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8005e42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e44:	069b      	lsls	r3, r3, #26
 8005e46:	431a      	orrs	r2, r3
 8005e48:	4932      	ldr	r1, [pc, #200]	@ (8005f14 <HAL_OSPIM_Config+0x664>)
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	f003 0301 	and.w	r3, r3, #1
 8005e54:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	440b      	add	r3, r1
 8005e5c:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d019      	beq.n	8005e9e <HAL_OSPIM_Config+0x5ee>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005e6a:	4a2a      	ldr	r2, [pc, #168]	@ (8005f14 <HAL_OSPIM_Config+0x664>)
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	3b01      	subs	r3, #1
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	4413      	add	r3, r2
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005e80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e82:	049b      	lsls	r3, r3, #18
 8005e84:	431a      	orrs	r2, r3
 8005e86:	4923      	ldr	r1, [pc, #140]	@ (8005f14 <HAL_OSPIM_Config+0x664>)
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	440b      	add	r3, r1
 8005e9a:	605a      	str	r2, [r3, #4]
 8005e9c:	e01c      	b.n	8005ed8 <HAL_OSPIM_Config+0x628>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d018      	beq.n	8005ed8 <HAL_OSPIM_Config+0x628>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005ea6:	4a1b      	ldr	r2, [pc, #108]	@ (8005f14 <HAL_OSPIM_Config+0x664>)
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	3b01      	subs	r3, #1
 8005eae:	f003 0301 	and.w	r3, r3, #1
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	4413      	add	r3, r2
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8005ebc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ebe:	069b      	lsls	r3, r3, #26
 8005ec0:	431a      	orrs	r2, r3
 8005ec2:	4914      	ldr	r1, [pc, #80]	@ (8005f14 <HAL_OSPIM_Config+0x664>)
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	f003 0301 	and.w	r3, r3, #1
 8005ece:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	440b      	add	r3, r1
 8005ed6:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8005ed8:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8005edc:	f003 0301 	and.w	r3, r3, #1
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d005      	beq.n	8005ef0 <HAL_OSPIM_Config+0x640>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8005ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8005f18 <HAL_OSPIM_Config+0x668>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a0b      	ldr	r2, [pc, #44]	@ (8005f18 <HAL_OSPIM_Config+0x668>)
 8005eea:	f043 0301 	orr.w	r3, r3, #1
 8005eee:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8005ef0:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8005ef4:	f003 0302 	and.w	r3, r3, #2
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d005      	beq.n	8005f08 <HAL_OSPIM_Config+0x658>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8005efc:	4b07      	ldr	r3, [pc, #28]	@ (8005f1c <HAL_OSPIM_Config+0x66c>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a06      	ldr	r2, [pc, #24]	@ (8005f1c <HAL_OSPIM_Config+0x66c>)
 8005f02:	f043 0301 	orr.w	r3, r3, #1
 8005f06:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8005f08:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3748      	adds	r7, #72	@ 0x48
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	50061c00 	.word	0x50061c00
 8005f18:	a0001000 	.word	0xa0001000
 8005f1c:	a0001400 	.word	0xa0001400

08005f20 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	603b      	str	r3, [r7, #0]
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8005f30:	e01a      	b.n	8005f68 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f38:	d016      	beq.n	8005f68 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f3a:	f7fc fe61 	bl	8002c00 <HAL_GetTick>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	69ba      	ldr	r2, [r7, #24]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d302      	bcc.n	8005f50 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d10b      	bne.n	8005f68 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f56:	645a      	str	r2, [r3, #68]	@ 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f5c:	f043 0201 	orr.w	r2, r3, #1
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	649a      	str	r2, [r3, #72]	@ 0x48

        return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e00e      	b.n	8005f86 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6a1a      	ldr	r2, [r3, #32]
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	4013      	ands	r3, r2
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	bf14      	ite	ne
 8005f76:	2301      	movne	r3, #1
 8005f78:	2300      	moveq	r3, #0
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	79fb      	ldrb	r3, [r7, #7]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d1d6      	bne.n	8005f32 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
	...

08005f90 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b087      	sub	sp, #28
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	4603      	mov	r3, r0
 8005f98:	6039      	str	r1, [r7, #0]
 8005f9a:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8005fa4:	79fb      	ldrb	r3, [r7, #7]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d005      	beq.n	8005fb6 <OSPIM_GetConfig+0x26>
 8005faa:	79fb      	ldrb	r3, [r7, #7]
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d802      	bhi.n	8005fb6 <OSPIM_GetConfig+0x26>
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d102      	bne.n	8005fbc <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	75fb      	strb	r3, [r7, #23]
 8005fba:	e08e      	b.n	80060da <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8005fda:	79fb      	ldrb	r3, [r7, #7]
 8005fdc:	2b02      	cmp	r3, #2
 8005fde:	d101      	bne.n	8005fe4 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8005fe0:	4b41      	ldr	r3, [pc, #260]	@ (80060e8 <OSPIM_GetConfig+0x158>)
 8005fe2:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	60fb      	str	r3, [r7, #12]
 8005fe8:	e074      	b.n	80060d4 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8005fea:	4a40      	ldr	r2, [pc, #256]	@ (80060ec <OSPIM_GetConfig+0x15c>)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	4413      	add	r3, r2
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	f003 0301 	and.w	r3, r3, #1
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00a      	beq.n	8006016 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8006000:	68ba      	ldr	r2, [r7, #8]
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	4053      	eors	r3, r2
 8006006:	f003 0302 	and.w	r3, r3, #2
 800600a:	2b00      	cmp	r3, #0
 800600c:	d103      	bne.n	8006016 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	1c5a      	adds	r2, r3, #1
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	f003 0310 	and.w	r3, r3, #16
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00a      	beq.n	8006036 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8006020:	68ba      	ldr	r2, [r7, #8]
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	4053      	eors	r3, r2
 8006026:	f003 0320 	and.w	r3, r3, #32
 800602a:	2b00      	cmp	r3, #0
 800602c:	d103      	bne.n	8006036 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	1c5a      	adds	r2, r3, #1
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00a      	beq.n	8006056 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8006040:	68ba      	ldr	r2, [r7, #8]
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	4053      	eors	r3, r2
 8006046:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800604a:	2b00      	cmp	r3, #0
 800604c:	d103      	bne.n	8006056 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	1c5a      	adds	r2, r3, #1
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800605c:	2b00      	cmp	r3, #0
 800605e:	d018      	beq.n	8006092 <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8006060:	68ba      	ldr	r2, [r7, #8]
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	4053      	eors	r3, r2
 8006066:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d111      	bne.n	8006092 <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006074:	2b00      	cmp	r3, #0
 8006076:	d106      	bne.n	8006086 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	3301      	adds	r3, #1
 800607c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	60da      	str	r2, [r3, #12]
 8006084:	e005      	b.n	8006092 <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	3301      	adds	r3, #1
 800608a:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d018      	beq.n	80060ce <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 800609c:	68ba      	ldr	r2, [r7, #8]
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	4053      	eors	r3, r2
 80060a2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d111      	bne.n	80060ce <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d106      	bne.n	80060c2 <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	3301      	adds	r3, #1
 80060b8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	611a      	str	r2, [r3, #16]
 80060c0:	e005      	b.n	80060ce <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	3301      	adds	r3, #1
 80060c6:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	3301      	adds	r3, #1
 80060d2:	60fb      	str	r3, [r7, #12]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d987      	bls.n	8005fea <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 80060da:	7dfb      	ldrb	r3, [r7, #23]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	371c      	adds	r7, #28
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr
 80060e8:	04040222 	.word	0x04040222
 80060ec:	50061c00 	.word	0x50061c00

080060f0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80060f0:	b480      	push	{r7}
 80060f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060f4:	4b05      	ldr	r3, [pc, #20]	@ (800610c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a04      	ldr	r2, [pc, #16]	@ (800610c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80060fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060fe:	6013      	str	r3, [r2, #0]
}
 8006100:	bf00      	nop
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	40007000 	.word	0x40007000

08006110 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006110:	b480      	push	{r7}
 8006112:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006114:	4b0d      	ldr	r3, [pc, #52]	@ (800614c <HAL_PWREx_GetVoltageRange+0x3c>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800611c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006120:	d102      	bne.n	8006128 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8006122:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006126:	e00b      	b.n	8006140 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8006128:	4b08      	ldr	r3, [pc, #32]	@ (800614c <HAL_PWREx_GetVoltageRange+0x3c>)
 800612a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800612e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006132:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006136:	d102      	bne.n	800613e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8006138:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800613c:	e000      	b.n	8006140 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800613e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8006140:	4618      	mov	r0, r3
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	40007000 	.word	0x40007000

08006150 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d141      	bne.n	80061e2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800615e:	4b4b      	ldr	r3, [pc, #300]	@ (800628c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006166:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800616a:	d131      	bne.n	80061d0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800616c:	4b47      	ldr	r3, [pc, #284]	@ (800628c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800616e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006172:	4a46      	ldr	r2, [pc, #280]	@ (800628c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006174:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006178:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800617c:	4b43      	ldr	r3, [pc, #268]	@ (800628c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006184:	4a41      	ldr	r2, [pc, #260]	@ (800628c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006186:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800618a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800618c:	4b40      	ldr	r3, [pc, #256]	@ (8006290 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2232      	movs	r2, #50	@ 0x32
 8006192:	fb02 f303 	mul.w	r3, r2, r3
 8006196:	4a3f      	ldr	r2, [pc, #252]	@ (8006294 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006198:	fba2 2303 	umull	r2, r3, r2, r3
 800619c:	0c9b      	lsrs	r3, r3, #18
 800619e:	3301      	adds	r3, #1
 80061a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80061a2:	e002      	b.n	80061aa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	3b01      	subs	r3, #1
 80061a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80061aa:	4b38      	ldr	r3, [pc, #224]	@ (800628c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061b6:	d102      	bne.n	80061be <HAL_PWREx_ControlVoltageScaling+0x6e>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1f2      	bne.n	80061a4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80061be:	4b33      	ldr	r3, [pc, #204]	@ (800628c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061ca:	d158      	bne.n	800627e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80061cc:	2303      	movs	r3, #3
 80061ce:	e057      	b.n	8006280 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80061d0:	4b2e      	ldr	r3, [pc, #184]	@ (800628c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061d6:	4a2d      	ldr	r2, [pc, #180]	@ (800628c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80061e0:	e04d      	b.n	800627e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061e8:	d141      	bne.n	800626e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80061ea:	4b28      	ldr	r3, [pc, #160]	@ (800628c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80061f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061f6:	d131      	bne.n	800625c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80061f8:	4b24      	ldr	r3, [pc, #144]	@ (800628c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061fe:	4a23      	ldr	r2, [pc, #140]	@ (800628c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006200:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006204:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006208:	4b20      	ldr	r3, [pc, #128]	@ (800628c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006210:	4a1e      	ldr	r2, [pc, #120]	@ (800628c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006212:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006216:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8006218:	4b1d      	ldr	r3, [pc, #116]	@ (8006290 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2232      	movs	r2, #50	@ 0x32
 800621e:	fb02 f303 	mul.w	r3, r2, r3
 8006222:	4a1c      	ldr	r2, [pc, #112]	@ (8006294 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006224:	fba2 2303 	umull	r2, r3, r2, r3
 8006228:	0c9b      	lsrs	r3, r3, #18
 800622a:	3301      	adds	r3, #1
 800622c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800622e:	e002      	b.n	8006236 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	3b01      	subs	r3, #1
 8006234:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006236:	4b15      	ldr	r3, [pc, #84]	@ (800628c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800623e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006242:	d102      	bne.n	800624a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1f2      	bne.n	8006230 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800624a:	4b10      	ldr	r3, [pc, #64]	@ (800628c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800624c:	695b      	ldr	r3, [r3, #20]
 800624e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006252:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006256:	d112      	bne.n	800627e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006258:	2303      	movs	r3, #3
 800625a:	e011      	b.n	8006280 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800625c:	4b0b      	ldr	r3, [pc, #44]	@ (800628c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800625e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006262:	4a0a      	ldr	r2, [pc, #40]	@ (800628c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006264:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006268:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800626c:	e007      	b.n	800627e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800626e:	4b07      	ldr	r3, [pc, #28]	@ (800628c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006276:	4a05      	ldr	r2, [pc, #20]	@ (800628c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006278:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800627c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	3714      	adds	r7, #20
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr
 800628c:	40007000 	.word	0x40007000
 8006290:	20000014 	.word	0x20000014
 8006294:	431bde83 	.word	0x431bde83

08006298 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b088      	sub	sp, #32
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d102      	bne.n	80062ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	f000 bc08 	b.w	8006abc <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062ac:	4b96      	ldr	r3, [pc, #600]	@ (8006508 <HAL_RCC_OscConfig+0x270>)
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	f003 030c 	and.w	r3, r3, #12
 80062b4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80062b6:	4b94      	ldr	r3, [pc, #592]	@ (8006508 <HAL_RCC_OscConfig+0x270>)
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	f003 0303 	and.w	r3, r3, #3
 80062be:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0310 	and.w	r3, r3, #16
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f000 80e4 	beq.w	8006496 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d007      	beq.n	80062e4 <HAL_RCC_OscConfig+0x4c>
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	2b0c      	cmp	r3, #12
 80062d8:	f040 808b 	bne.w	80063f2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	2b01      	cmp	r3, #1
 80062e0:	f040 8087 	bne.w	80063f2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80062e4:	4b88      	ldr	r3, [pc, #544]	@ (8006508 <HAL_RCC_OscConfig+0x270>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0302 	and.w	r3, r3, #2
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d005      	beq.n	80062fc <HAL_RCC_OscConfig+0x64>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	699b      	ldr	r3, [r3, #24]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d101      	bne.n	80062fc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e3df      	b.n	8006abc <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6a1a      	ldr	r2, [r3, #32]
 8006300:	4b81      	ldr	r3, [pc, #516]	@ (8006508 <HAL_RCC_OscConfig+0x270>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 0308 	and.w	r3, r3, #8
 8006308:	2b00      	cmp	r3, #0
 800630a:	d004      	beq.n	8006316 <HAL_RCC_OscConfig+0x7e>
 800630c:	4b7e      	ldr	r3, [pc, #504]	@ (8006508 <HAL_RCC_OscConfig+0x270>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006314:	e005      	b.n	8006322 <HAL_RCC_OscConfig+0x8a>
 8006316:	4b7c      	ldr	r3, [pc, #496]	@ (8006508 <HAL_RCC_OscConfig+0x270>)
 8006318:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800631c:	091b      	lsrs	r3, r3, #4
 800631e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006322:	4293      	cmp	r3, r2
 8006324:	d223      	bcs.n	800636e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a1b      	ldr	r3, [r3, #32]
 800632a:	4618      	mov	r0, r3
 800632c:	f000 fdcc 	bl	8006ec8 <RCC_SetFlashLatencyFromMSIRange>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d001      	beq.n	800633a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e3c0      	b.n	8006abc <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800633a:	4b73      	ldr	r3, [pc, #460]	@ (8006508 <HAL_RCC_OscConfig+0x270>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a72      	ldr	r2, [pc, #456]	@ (8006508 <HAL_RCC_OscConfig+0x270>)
 8006340:	f043 0308 	orr.w	r3, r3, #8
 8006344:	6013      	str	r3, [r2, #0]
 8006346:	4b70      	ldr	r3, [pc, #448]	@ (8006508 <HAL_RCC_OscConfig+0x270>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a1b      	ldr	r3, [r3, #32]
 8006352:	496d      	ldr	r1, [pc, #436]	@ (8006508 <HAL_RCC_OscConfig+0x270>)
 8006354:	4313      	orrs	r3, r2
 8006356:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006358:	4b6b      	ldr	r3, [pc, #428]	@ (8006508 <HAL_RCC_OscConfig+0x270>)
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	69db      	ldr	r3, [r3, #28]
 8006364:	021b      	lsls	r3, r3, #8
 8006366:	4968      	ldr	r1, [pc, #416]	@ (8006508 <HAL_RCC_OscConfig+0x270>)
 8006368:	4313      	orrs	r3, r2
 800636a:	604b      	str	r3, [r1, #4]
 800636c:	e025      	b.n	80063ba <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800636e:	4b66      	ldr	r3, [pc, #408]	@ (8006508 <HAL_RCC_OscConfig+0x270>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a65      	ldr	r2, [pc, #404]	@ (8006508 <HAL_RCC_OscConfig+0x270>)
 8006374:	f043 0308 	orr.w	r3, r3, #8
 8006378:	6013      	str	r3, [r2, #0]
 800637a:	4b63      	ldr	r3, [pc, #396]	@ (8006508 <HAL_RCC_OscConfig+0x270>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a1b      	ldr	r3, [r3, #32]
 8006386:	4960      	ldr	r1, [pc, #384]	@ (8006508 <HAL_RCC_OscConfig+0x270>)
 8006388:	4313      	orrs	r3, r2
 800638a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800638c:	4b5e      	ldr	r3, [pc, #376]	@ (8006508 <HAL_RCC_OscConfig+0x270>)
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	69db      	ldr	r3, [r3, #28]
 8006398:	021b      	lsls	r3, r3, #8
 800639a:	495b      	ldr	r1, [pc, #364]	@ (8006508 <HAL_RCC_OscConfig+0x270>)
 800639c:	4313      	orrs	r3, r2
 800639e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d109      	bne.n	80063ba <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a1b      	ldr	r3, [r3, #32]
 80063aa:	4618      	mov	r0, r3
 80063ac:	f000 fd8c 	bl	8006ec8 <RCC_SetFlashLatencyFromMSIRange>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d001      	beq.n	80063ba <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e380      	b.n	8006abc <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80063ba:	f000 fcc1 	bl	8006d40 <HAL_RCC_GetSysClockFreq>
 80063be:	4602      	mov	r2, r0
 80063c0:	4b51      	ldr	r3, [pc, #324]	@ (8006508 <HAL_RCC_OscConfig+0x270>)
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	091b      	lsrs	r3, r3, #4
 80063c6:	f003 030f 	and.w	r3, r3, #15
 80063ca:	4950      	ldr	r1, [pc, #320]	@ (800650c <HAL_RCC_OscConfig+0x274>)
 80063cc:	5ccb      	ldrb	r3, [r1, r3]
 80063ce:	f003 031f 	and.w	r3, r3, #31
 80063d2:	fa22 f303 	lsr.w	r3, r2, r3
 80063d6:	4a4e      	ldr	r2, [pc, #312]	@ (8006510 <HAL_RCC_OscConfig+0x278>)
 80063d8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80063da:	4b4e      	ldr	r3, [pc, #312]	@ (8006514 <HAL_RCC_OscConfig+0x27c>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4618      	mov	r0, r3
 80063e0:	f7fc fbbe 	bl	8002b60 <HAL_InitTick>
 80063e4:	4603      	mov	r3, r0
 80063e6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80063e8:	7bfb      	ldrb	r3, [r7, #15]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d052      	beq.n	8006494 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80063ee:	7bfb      	ldrb	r3, [r7, #15]
 80063f0:	e364      	b.n	8006abc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d032      	beq.n	8006460 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80063fa:	4b43      	ldr	r3, [pc, #268]	@ (8006508 <HAL_RCC_OscConfig+0x270>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a42      	ldr	r2, [pc, #264]	@ (8006508 <HAL_RCC_OscConfig+0x270>)
 8006400:	f043 0301 	orr.w	r3, r3, #1
 8006404:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006406:	f7fc fbfb 	bl	8002c00 <HAL_GetTick>
 800640a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800640c:	e008      	b.n	8006420 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800640e:	f7fc fbf7 	bl	8002c00 <HAL_GetTick>
 8006412:	4602      	mov	r2, r0
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	2b02      	cmp	r3, #2
 800641a:	d901      	bls.n	8006420 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	e34d      	b.n	8006abc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006420:	4b39      	ldr	r3, [pc, #228]	@ (8006508 <HAL_RCC_OscConfig+0x270>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 0302 	and.w	r3, r3, #2
 8006428:	2b00      	cmp	r3, #0
 800642a:	d0f0      	beq.n	800640e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800642c:	4b36      	ldr	r3, [pc, #216]	@ (8006508 <HAL_RCC_OscConfig+0x270>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a35      	ldr	r2, [pc, #212]	@ (8006508 <HAL_RCC_OscConfig+0x270>)
 8006432:	f043 0308 	orr.w	r3, r3, #8
 8006436:	6013      	str	r3, [r2, #0]
 8006438:	4b33      	ldr	r3, [pc, #204]	@ (8006508 <HAL_RCC_OscConfig+0x270>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a1b      	ldr	r3, [r3, #32]
 8006444:	4930      	ldr	r1, [pc, #192]	@ (8006508 <HAL_RCC_OscConfig+0x270>)
 8006446:	4313      	orrs	r3, r2
 8006448:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800644a:	4b2f      	ldr	r3, [pc, #188]	@ (8006508 <HAL_RCC_OscConfig+0x270>)
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	69db      	ldr	r3, [r3, #28]
 8006456:	021b      	lsls	r3, r3, #8
 8006458:	492b      	ldr	r1, [pc, #172]	@ (8006508 <HAL_RCC_OscConfig+0x270>)
 800645a:	4313      	orrs	r3, r2
 800645c:	604b      	str	r3, [r1, #4]
 800645e:	e01a      	b.n	8006496 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006460:	4b29      	ldr	r3, [pc, #164]	@ (8006508 <HAL_RCC_OscConfig+0x270>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a28      	ldr	r2, [pc, #160]	@ (8006508 <HAL_RCC_OscConfig+0x270>)
 8006466:	f023 0301 	bic.w	r3, r3, #1
 800646a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800646c:	f7fc fbc8 	bl	8002c00 <HAL_GetTick>
 8006470:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006472:	e008      	b.n	8006486 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006474:	f7fc fbc4 	bl	8002c00 <HAL_GetTick>
 8006478:	4602      	mov	r2, r0
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	2b02      	cmp	r3, #2
 8006480:	d901      	bls.n	8006486 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	e31a      	b.n	8006abc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006486:	4b20      	ldr	r3, [pc, #128]	@ (8006508 <HAL_RCC_OscConfig+0x270>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 0302 	and.w	r3, r3, #2
 800648e:	2b00      	cmp	r3, #0
 8006490:	d1f0      	bne.n	8006474 <HAL_RCC_OscConfig+0x1dc>
 8006492:	e000      	b.n	8006496 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006494:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0301 	and.w	r3, r3, #1
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d073      	beq.n	800658a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	2b08      	cmp	r3, #8
 80064a6:	d005      	beq.n	80064b4 <HAL_RCC_OscConfig+0x21c>
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	2b0c      	cmp	r3, #12
 80064ac:	d10e      	bne.n	80064cc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	2b03      	cmp	r3, #3
 80064b2:	d10b      	bne.n	80064cc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064b4:	4b14      	ldr	r3, [pc, #80]	@ (8006508 <HAL_RCC_OscConfig+0x270>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d063      	beq.n	8006588 <HAL_RCC_OscConfig+0x2f0>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d15f      	bne.n	8006588 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e2f7      	b.n	8006abc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064d4:	d106      	bne.n	80064e4 <HAL_RCC_OscConfig+0x24c>
 80064d6:	4b0c      	ldr	r3, [pc, #48]	@ (8006508 <HAL_RCC_OscConfig+0x270>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a0b      	ldr	r2, [pc, #44]	@ (8006508 <HAL_RCC_OscConfig+0x270>)
 80064dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064e0:	6013      	str	r3, [r2, #0]
 80064e2:	e025      	b.n	8006530 <HAL_RCC_OscConfig+0x298>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80064ec:	d114      	bne.n	8006518 <HAL_RCC_OscConfig+0x280>
 80064ee:	4b06      	ldr	r3, [pc, #24]	@ (8006508 <HAL_RCC_OscConfig+0x270>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a05      	ldr	r2, [pc, #20]	@ (8006508 <HAL_RCC_OscConfig+0x270>)
 80064f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80064f8:	6013      	str	r3, [r2, #0]
 80064fa:	4b03      	ldr	r3, [pc, #12]	@ (8006508 <HAL_RCC_OscConfig+0x270>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a02      	ldr	r2, [pc, #8]	@ (8006508 <HAL_RCC_OscConfig+0x270>)
 8006500:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006504:	6013      	str	r3, [r2, #0]
 8006506:	e013      	b.n	8006530 <HAL_RCC_OscConfig+0x298>
 8006508:	40021000 	.word	0x40021000
 800650c:	0800b464 	.word	0x0800b464
 8006510:	20000014 	.word	0x20000014
 8006514:	2000004c 	.word	0x2000004c
 8006518:	4ba0      	ldr	r3, [pc, #640]	@ (800679c <HAL_RCC_OscConfig+0x504>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a9f      	ldr	r2, [pc, #636]	@ (800679c <HAL_RCC_OscConfig+0x504>)
 800651e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006522:	6013      	str	r3, [r2, #0]
 8006524:	4b9d      	ldr	r3, [pc, #628]	@ (800679c <HAL_RCC_OscConfig+0x504>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a9c      	ldr	r2, [pc, #624]	@ (800679c <HAL_RCC_OscConfig+0x504>)
 800652a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800652e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d013      	beq.n	8006560 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006538:	f7fc fb62 	bl	8002c00 <HAL_GetTick>
 800653c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800653e:	e008      	b.n	8006552 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006540:	f7fc fb5e 	bl	8002c00 <HAL_GetTick>
 8006544:	4602      	mov	r2, r0
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	2b64      	cmp	r3, #100	@ 0x64
 800654c:	d901      	bls.n	8006552 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e2b4      	b.n	8006abc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006552:	4b92      	ldr	r3, [pc, #584]	@ (800679c <HAL_RCC_OscConfig+0x504>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d0f0      	beq.n	8006540 <HAL_RCC_OscConfig+0x2a8>
 800655e:	e014      	b.n	800658a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006560:	f7fc fb4e 	bl	8002c00 <HAL_GetTick>
 8006564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006566:	e008      	b.n	800657a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006568:	f7fc fb4a 	bl	8002c00 <HAL_GetTick>
 800656c:	4602      	mov	r2, r0
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	2b64      	cmp	r3, #100	@ 0x64
 8006574:	d901      	bls.n	800657a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e2a0      	b.n	8006abc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800657a:	4b88      	ldr	r3, [pc, #544]	@ (800679c <HAL_RCC_OscConfig+0x504>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1f0      	bne.n	8006568 <HAL_RCC_OscConfig+0x2d0>
 8006586:	e000      	b.n	800658a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006588:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0302 	and.w	r3, r3, #2
 8006592:	2b00      	cmp	r3, #0
 8006594:	d060      	beq.n	8006658 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	2b04      	cmp	r3, #4
 800659a:	d005      	beq.n	80065a8 <HAL_RCC_OscConfig+0x310>
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	2b0c      	cmp	r3, #12
 80065a0:	d119      	bne.n	80065d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d116      	bne.n	80065d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065a8:	4b7c      	ldr	r3, [pc, #496]	@ (800679c <HAL_RCC_OscConfig+0x504>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d005      	beq.n	80065c0 <HAL_RCC_OscConfig+0x328>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d101      	bne.n	80065c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	e27d      	b.n	8006abc <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065c0:	4b76      	ldr	r3, [pc, #472]	@ (800679c <HAL_RCC_OscConfig+0x504>)
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	061b      	lsls	r3, r3, #24
 80065ce:	4973      	ldr	r1, [pc, #460]	@ (800679c <HAL_RCC_OscConfig+0x504>)
 80065d0:	4313      	orrs	r3, r2
 80065d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065d4:	e040      	b.n	8006658 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d023      	beq.n	8006626 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065de:	4b6f      	ldr	r3, [pc, #444]	@ (800679c <HAL_RCC_OscConfig+0x504>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a6e      	ldr	r2, [pc, #440]	@ (800679c <HAL_RCC_OscConfig+0x504>)
 80065e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ea:	f7fc fb09 	bl	8002c00 <HAL_GetTick>
 80065ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065f0:	e008      	b.n	8006604 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065f2:	f7fc fb05 	bl	8002c00 <HAL_GetTick>
 80065f6:	4602      	mov	r2, r0
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	d901      	bls.n	8006604 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006600:	2303      	movs	r3, #3
 8006602:	e25b      	b.n	8006abc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006604:	4b65      	ldr	r3, [pc, #404]	@ (800679c <HAL_RCC_OscConfig+0x504>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800660c:	2b00      	cmp	r3, #0
 800660e:	d0f0      	beq.n	80065f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006610:	4b62      	ldr	r3, [pc, #392]	@ (800679c <HAL_RCC_OscConfig+0x504>)
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	061b      	lsls	r3, r3, #24
 800661e:	495f      	ldr	r1, [pc, #380]	@ (800679c <HAL_RCC_OscConfig+0x504>)
 8006620:	4313      	orrs	r3, r2
 8006622:	604b      	str	r3, [r1, #4]
 8006624:	e018      	b.n	8006658 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006626:	4b5d      	ldr	r3, [pc, #372]	@ (800679c <HAL_RCC_OscConfig+0x504>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a5c      	ldr	r2, [pc, #368]	@ (800679c <HAL_RCC_OscConfig+0x504>)
 800662c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006630:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006632:	f7fc fae5 	bl	8002c00 <HAL_GetTick>
 8006636:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006638:	e008      	b.n	800664c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800663a:	f7fc fae1 	bl	8002c00 <HAL_GetTick>
 800663e:	4602      	mov	r2, r0
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	2b02      	cmp	r3, #2
 8006646:	d901      	bls.n	800664c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006648:	2303      	movs	r3, #3
 800664a:	e237      	b.n	8006abc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800664c:	4b53      	ldr	r3, [pc, #332]	@ (800679c <HAL_RCC_OscConfig+0x504>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1f0      	bne.n	800663a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 0308 	and.w	r3, r3, #8
 8006660:	2b00      	cmp	r3, #0
 8006662:	d03c      	beq.n	80066de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	695b      	ldr	r3, [r3, #20]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d01c      	beq.n	80066a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800666c:	4b4b      	ldr	r3, [pc, #300]	@ (800679c <HAL_RCC_OscConfig+0x504>)
 800666e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006672:	4a4a      	ldr	r2, [pc, #296]	@ (800679c <HAL_RCC_OscConfig+0x504>)
 8006674:	f043 0301 	orr.w	r3, r3, #1
 8006678:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800667c:	f7fc fac0 	bl	8002c00 <HAL_GetTick>
 8006680:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006682:	e008      	b.n	8006696 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006684:	f7fc fabc 	bl	8002c00 <HAL_GetTick>
 8006688:	4602      	mov	r2, r0
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	2b02      	cmp	r3, #2
 8006690:	d901      	bls.n	8006696 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	e212      	b.n	8006abc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006696:	4b41      	ldr	r3, [pc, #260]	@ (800679c <HAL_RCC_OscConfig+0x504>)
 8006698:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800669c:	f003 0302 	and.w	r3, r3, #2
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d0ef      	beq.n	8006684 <HAL_RCC_OscConfig+0x3ec>
 80066a4:	e01b      	b.n	80066de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066a6:	4b3d      	ldr	r3, [pc, #244]	@ (800679c <HAL_RCC_OscConfig+0x504>)
 80066a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066ac:	4a3b      	ldr	r2, [pc, #236]	@ (800679c <HAL_RCC_OscConfig+0x504>)
 80066ae:	f023 0301 	bic.w	r3, r3, #1
 80066b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066b6:	f7fc faa3 	bl	8002c00 <HAL_GetTick>
 80066ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80066bc:	e008      	b.n	80066d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066be:	f7fc fa9f 	bl	8002c00 <HAL_GetTick>
 80066c2:	4602      	mov	r2, r0
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	d901      	bls.n	80066d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e1f5      	b.n	8006abc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80066d0:	4b32      	ldr	r3, [pc, #200]	@ (800679c <HAL_RCC_OscConfig+0x504>)
 80066d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066d6:	f003 0302 	and.w	r3, r3, #2
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1ef      	bne.n	80066be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 0304 	and.w	r3, r3, #4
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	f000 80a6 	beq.w	8006838 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066ec:	2300      	movs	r3, #0
 80066ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80066f0:	4b2a      	ldr	r3, [pc, #168]	@ (800679c <HAL_RCC_OscConfig+0x504>)
 80066f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10d      	bne.n	8006718 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066fc:	4b27      	ldr	r3, [pc, #156]	@ (800679c <HAL_RCC_OscConfig+0x504>)
 80066fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006700:	4a26      	ldr	r2, [pc, #152]	@ (800679c <HAL_RCC_OscConfig+0x504>)
 8006702:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006706:	6593      	str	r3, [r2, #88]	@ 0x58
 8006708:	4b24      	ldr	r3, [pc, #144]	@ (800679c <HAL_RCC_OscConfig+0x504>)
 800670a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800670c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006710:	60bb      	str	r3, [r7, #8]
 8006712:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006714:	2301      	movs	r3, #1
 8006716:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006718:	4b21      	ldr	r3, [pc, #132]	@ (80067a0 <HAL_RCC_OscConfig+0x508>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006720:	2b00      	cmp	r3, #0
 8006722:	d118      	bne.n	8006756 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006724:	4b1e      	ldr	r3, [pc, #120]	@ (80067a0 <HAL_RCC_OscConfig+0x508>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a1d      	ldr	r2, [pc, #116]	@ (80067a0 <HAL_RCC_OscConfig+0x508>)
 800672a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800672e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006730:	f7fc fa66 	bl	8002c00 <HAL_GetTick>
 8006734:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006736:	e008      	b.n	800674a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006738:	f7fc fa62 	bl	8002c00 <HAL_GetTick>
 800673c:	4602      	mov	r2, r0
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	2b02      	cmp	r3, #2
 8006744:	d901      	bls.n	800674a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006746:	2303      	movs	r3, #3
 8006748:	e1b8      	b.n	8006abc <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800674a:	4b15      	ldr	r3, [pc, #84]	@ (80067a0 <HAL_RCC_OscConfig+0x508>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006752:	2b00      	cmp	r3, #0
 8006754:	d0f0      	beq.n	8006738 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	2b01      	cmp	r3, #1
 800675c:	d108      	bne.n	8006770 <HAL_RCC_OscConfig+0x4d8>
 800675e:	4b0f      	ldr	r3, [pc, #60]	@ (800679c <HAL_RCC_OscConfig+0x504>)
 8006760:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006764:	4a0d      	ldr	r2, [pc, #52]	@ (800679c <HAL_RCC_OscConfig+0x504>)
 8006766:	f043 0301 	orr.w	r3, r3, #1
 800676a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800676e:	e029      	b.n	80067c4 <HAL_RCC_OscConfig+0x52c>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	2b05      	cmp	r3, #5
 8006776:	d115      	bne.n	80067a4 <HAL_RCC_OscConfig+0x50c>
 8006778:	4b08      	ldr	r3, [pc, #32]	@ (800679c <HAL_RCC_OscConfig+0x504>)
 800677a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800677e:	4a07      	ldr	r2, [pc, #28]	@ (800679c <HAL_RCC_OscConfig+0x504>)
 8006780:	f043 0304 	orr.w	r3, r3, #4
 8006784:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006788:	4b04      	ldr	r3, [pc, #16]	@ (800679c <HAL_RCC_OscConfig+0x504>)
 800678a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800678e:	4a03      	ldr	r2, [pc, #12]	@ (800679c <HAL_RCC_OscConfig+0x504>)
 8006790:	f043 0301 	orr.w	r3, r3, #1
 8006794:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006798:	e014      	b.n	80067c4 <HAL_RCC_OscConfig+0x52c>
 800679a:	bf00      	nop
 800679c:	40021000 	.word	0x40021000
 80067a0:	40007000 	.word	0x40007000
 80067a4:	4b9d      	ldr	r3, [pc, #628]	@ (8006a1c <HAL_RCC_OscConfig+0x784>)
 80067a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067aa:	4a9c      	ldr	r2, [pc, #624]	@ (8006a1c <HAL_RCC_OscConfig+0x784>)
 80067ac:	f023 0301 	bic.w	r3, r3, #1
 80067b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80067b4:	4b99      	ldr	r3, [pc, #612]	@ (8006a1c <HAL_RCC_OscConfig+0x784>)
 80067b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067ba:	4a98      	ldr	r2, [pc, #608]	@ (8006a1c <HAL_RCC_OscConfig+0x784>)
 80067bc:	f023 0304 	bic.w	r3, r3, #4
 80067c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d016      	beq.n	80067fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067cc:	f7fc fa18 	bl	8002c00 <HAL_GetTick>
 80067d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067d2:	e00a      	b.n	80067ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067d4:	f7fc fa14 	bl	8002c00 <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d901      	bls.n	80067ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80067e6:	2303      	movs	r3, #3
 80067e8:	e168      	b.n	8006abc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067ea:	4b8c      	ldr	r3, [pc, #560]	@ (8006a1c <HAL_RCC_OscConfig+0x784>)
 80067ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067f0:	f003 0302 	and.w	r3, r3, #2
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d0ed      	beq.n	80067d4 <HAL_RCC_OscConfig+0x53c>
 80067f8:	e015      	b.n	8006826 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067fa:	f7fc fa01 	bl	8002c00 <HAL_GetTick>
 80067fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006800:	e00a      	b.n	8006818 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006802:	f7fc f9fd 	bl	8002c00 <HAL_GetTick>
 8006806:	4602      	mov	r2, r0
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	1ad3      	subs	r3, r2, r3
 800680c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006810:	4293      	cmp	r3, r2
 8006812:	d901      	bls.n	8006818 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006814:	2303      	movs	r3, #3
 8006816:	e151      	b.n	8006abc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006818:	4b80      	ldr	r3, [pc, #512]	@ (8006a1c <HAL_RCC_OscConfig+0x784>)
 800681a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800681e:	f003 0302 	and.w	r3, r3, #2
 8006822:	2b00      	cmp	r3, #0
 8006824:	d1ed      	bne.n	8006802 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006826:	7ffb      	ldrb	r3, [r7, #31]
 8006828:	2b01      	cmp	r3, #1
 800682a:	d105      	bne.n	8006838 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800682c:	4b7b      	ldr	r3, [pc, #492]	@ (8006a1c <HAL_RCC_OscConfig+0x784>)
 800682e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006830:	4a7a      	ldr	r2, [pc, #488]	@ (8006a1c <HAL_RCC_OscConfig+0x784>)
 8006832:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006836:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0320 	and.w	r3, r3, #32
 8006840:	2b00      	cmp	r3, #0
 8006842:	d03c      	beq.n	80068be <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006848:	2b00      	cmp	r3, #0
 800684a:	d01c      	beq.n	8006886 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800684c:	4b73      	ldr	r3, [pc, #460]	@ (8006a1c <HAL_RCC_OscConfig+0x784>)
 800684e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006852:	4a72      	ldr	r2, [pc, #456]	@ (8006a1c <HAL_RCC_OscConfig+0x784>)
 8006854:	f043 0301 	orr.w	r3, r3, #1
 8006858:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800685c:	f7fc f9d0 	bl	8002c00 <HAL_GetTick>
 8006860:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006862:	e008      	b.n	8006876 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006864:	f7fc f9cc 	bl	8002c00 <HAL_GetTick>
 8006868:	4602      	mov	r2, r0
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	2b02      	cmp	r3, #2
 8006870:	d901      	bls.n	8006876 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	e122      	b.n	8006abc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006876:	4b69      	ldr	r3, [pc, #420]	@ (8006a1c <HAL_RCC_OscConfig+0x784>)
 8006878:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800687c:	f003 0302 	and.w	r3, r3, #2
 8006880:	2b00      	cmp	r3, #0
 8006882:	d0ef      	beq.n	8006864 <HAL_RCC_OscConfig+0x5cc>
 8006884:	e01b      	b.n	80068be <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006886:	4b65      	ldr	r3, [pc, #404]	@ (8006a1c <HAL_RCC_OscConfig+0x784>)
 8006888:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800688c:	4a63      	ldr	r2, [pc, #396]	@ (8006a1c <HAL_RCC_OscConfig+0x784>)
 800688e:	f023 0301 	bic.w	r3, r3, #1
 8006892:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006896:	f7fc f9b3 	bl	8002c00 <HAL_GetTick>
 800689a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800689c:	e008      	b.n	80068b0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800689e:	f7fc f9af 	bl	8002c00 <HAL_GetTick>
 80068a2:	4602      	mov	r2, r0
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	d901      	bls.n	80068b0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80068ac:	2303      	movs	r3, #3
 80068ae:	e105      	b.n	8006abc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80068b0:	4b5a      	ldr	r3, [pc, #360]	@ (8006a1c <HAL_RCC_OscConfig+0x784>)
 80068b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80068b6:	f003 0302 	and.w	r3, r3, #2
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1ef      	bne.n	800689e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	f000 80f9 	beq.w	8006aba <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	f040 80cf 	bne.w	8006a70 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80068d2:	4b52      	ldr	r3, [pc, #328]	@ (8006a1c <HAL_RCC_OscConfig+0x784>)
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	f003 0203 	and.w	r2, r3, #3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d12c      	bne.n	8006940 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068f0:	3b01      	subs	r3, #1
 80068f2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d123      	bne.n	8006940 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006902:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006904:	429a      	cmp	r2, r3
 8006906:	d11b      	bne.n	8006940 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006912:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006914:	429a      	cmp	r2, r3
 8006916:	d113      	bne.n	8006940 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006922:	085b      	lsrs	r3, r3, #1
 8006924:	3b01      	subs	r3, #1
 8006926:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006928:	429a      	cmp	r2, r3
 800692a:	d109      	bne.n	8006940 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006936:	085b      	lsrs	r3, r3, #1
 8006938:	3b01      	subs	r3, #1
 800693a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800693c:	429a      	cmp	r2, r3
 800693e:	d071      	beq.n	8006a24 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	2b0c      	cmp	r3, #12
 8006944:	d068      	beq.n	8006a18 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006946:	4b35      	ldr	r3, [pc, #212]	@ (8006a1c <HAL_RCC_OscConfig+0x784>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800694e:	2b00      	cmp	r3, #0
 8006950:	d105      	bne.n	800695e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006952:	4b32      	ldr	r3, [pc, #200]	@ (8006a1c <HAL_RCC_OscConfig+0x784>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d001      	beq.n	8006962 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e0ac      	b.n	8006abc <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006962:	4b2e      	ldr	r3, [pc, #184]	@ (8006a1c <HAL_RCC_OscConfig+0x784>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a2d      	ldr	r2, [pc, #180]	@ (8006a1c <HAL_RCC_OscConfig+0x784>)
 8006968:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800696c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800696e:	f7fc f947 	bl	8002c00 <HAL_GetTick>
 8006972:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006974:	e008      	b.n	8006988 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006976:	f7fc f943 	bl	8002c00 <HAL_GetTick>
 800697a:	4602      	mov	r2, r0
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	2b02      	cmp	r3, #2
 8006982:	d901      	bls.n	8006988 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8006984:	2303      	movs	r3, #3
 8006986:	e099      	b.n	8006abc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006988:	4b24      	ldr	r3, [pc, #144]	@ (8006a1c <HAL_RCC_OscConfig+0x784>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006990:	2b00      	cmp	r3, #0
 8006992:	d1f0      	bne.n	8006976 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006994:	4b21      	ldr	r3, [pc, #132]	@ (8006a1c <HAL_RCC_OscConfig+0x784>)
 8006996:	68da      	ldr	r2, [r3, #12]
 8006998:	4b21      	ldr	r3, [pc, #132]	@ (8006a20 <HAL_RCC_OscConfig+0x788>)
 800699a:	4013      	ands	r3, r2
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80069a4:	3a01      	subs	r2, #1
 80069a6:	0112      	lsls	r2, r2, #4
 80069a8:	4311      	orrs	r1, r2
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80069ae:	0212      	lsls	r2, r2, #8
 80069b0:	4311      	orrs	r1, r2
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80069b6:	0852      	lsrs	r2, r2, #1
 80069b8:	3a01      	subs	r2, #1
 80069ba:	0552      	lsls	r2, r2, #21
 80069bc:	4311      	orrs	r1, r2
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80069c2:	0852      	lsrs	r2, r2, #1
 80069c4:	3a01      	subs	r2, #1
 80069c6:	0652      	lsls	r2, r2, #25
 80069c8:	4311      	orrs	r1, r2
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80069ce:	06d2      	lsls	r2, r2, #27
 80069d0:	430a      	orrs	r2, r1
 80069d2:	4912      	ldr	r1, [pc, #72]	@ (8006a1c <HAL_RCC_OscConfig+0x784>)
 80069d4:	4313      	orrs	r3, r2
 80069d6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80069d8:	4b10      	ldr	r3, [pc, #64]	@ (8006a1c <HAL_RCC_OscConfig+0x784>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a0f      	ldr	r2, [pc, #60]	@ (8006a1c <HAL_RCC_OscConfig+0x784>)
 80069de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80069e2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80069e4:	4b0d      	ldr	r3, [pc, #52]	@ (8006a1c <HAL_RCC_OscConfig+0x784>)
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	4a0c      	ldr	r2, [pc, #48]	@ (8006a1c <HAL_RCC_OscConfig+0x784>)
 80069ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80069ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80069f0:	f7fc f906 	bl	8002c00 <HAL_GetTick>
 80069f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069f6:	e008      	b.n	8006a0a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069f8:	f7fc f902 	bl	8002c00 <HAL_GetTick>
 80069fc:	4602      	mov	r2, r0
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	d901      	bls.n	8006a0a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e058      	b.n	8006abc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a0a:	4b04      	ldr	r3, [pc, #16]	@ (8006a1c <HAL_RCC_OscConfig+0x784>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d0f0      	beq.n	80069f8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006a16:	e050      	b.n	8006aba <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e04f      	b.n	8006abc <HAL_RCC_OscConfig+0x824>
 8006a1c:	40021000 	.word	0x40021000
 8006a20:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a24:	4b27      	ldr	r3, [pc, #156]	@ (8006ac4 <HAL_RCC_OscConfig+0x82c>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d144      	bne.n	8006aba <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006a30:	4b24      	ldr	r3, [pc, #144]	@ (8006ac4 <HAL_RCC_OscConfig+0x82c>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a23      	ldr	r2, [pc, #140]	@ (8006ac4 <HAL_RCC_OscConfig+0x82c>)
 8006a36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a3a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006a3c:	4b21      	ldr	r3, [pc, #132]	@ (8006ac4 <HAL_RCC_OscConfig+0x82c>)
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	4a20      	ldr	r2, [pc, #128]	@ (8006ac4 <HAL_RCC_OscConfig+0x82c>)
 8006a42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a46:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006a48:	f7fc f8da 	bl	8002c00 <HAL_GetTick>
 8006a4c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a4e:	e008      	b.n	8006a62 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a50:	f7fc f8d6 	bl	8002c00 <HAL_GetTick>
 8006a54:	4602      	mov	r2, r0
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	d901      	bls.n	8006a62 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	e02c      	b.n	8006abc <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a62:	4b18      	ldr	r3, [pc, #96]	@ (8006ac4 <HAL_RCC_OscConfig+0x82c>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d0f0      	beq.n	8006a50 <HAL_RCC_OscConfig+0x7b8>
 8006a6e:	e024      	b.n	8006aba <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	2b0c      	cmp	r3, #12
 8006a74:	d01f      	beq.n	8006ab6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a76:	4b13      	ldr	r3, [pc, #76]	@ (8006ac4 <HAL_RCC_OscConfig+0x82c>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a12      	ldr	r2, [pc, #72]	@ (8006ac4 <HAL_RCC_OscConfig+0x82c>)
 8006a7c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a82:	f7fc f8bd 	bl	8002c00 <HAL_GetTick>
 8006a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a88:	e008      	b.n	8006a9c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a8a:	f7fc f8b9 	bl	8002c00 <HAL_GetTick>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d901      	bls.n	8006a9c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	e00f      	b.n	8006abc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a9c:	4b09      	ldr	r3, [pc, #36]	@ (8006ac4 <HAL_RCC_OscConfig+0x82c>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d1f0      	bne.n	8006a8a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006aa8:	4b06      	ldr	r3, [pc, #24]	@ (8006ac4 <HAL_RCC_OscConfig+0x82c>)
 8006aaa:	68da      	ldr	r2, [r3, #12]
 8006aac:	4905      	ldr	r1, [pc, #20]	@ (8006ac4 <HAL_RCC_OscConfig+0x82c>)
 8006aae:	4b06      	ldr	r3, [pc, #24]	@ (8006ac8 <HAL_RCC_OscConfig+0x830>)
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	60cb      	str	r3, [r1, #12]
 8006ab4:	e001      	b.n	8006aba <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e000      	b.n	8006abc <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3720      	adds	r7, #32
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	40021000 	.word	0x40021000
 8006ac8:	feeefffc 	.word	0xfeeefffc

08006acc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b086      	sub	sp, #24
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d101      	bne.n	8006ae4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e11d      	b.n	8006d20 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ae4:	4b90      	ldr	r3, [pc, #576]	@ (8006d28 <HAL_RCC_ClockConfig+0x25c>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 030f 	and.w	r3, r3, #15
 8006aec:	683a      	ldr	r2, [r7, #0]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d910      	bls.n	8006b14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006af2:	4b8d      	ldr	r3, [pc, #564]	@ (8006d28 <HAL_RCC_ClockConfig+0x25c>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f023 020f 	bic.w	r2, r3, #15
 8006afa:	498b      	ldr	r1, [pc, #556]	@ (8006d28 <HAL_RCC_ClockConfig+0x25c>)
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b02:	4b89      	ldr	r3, [pc, #548]	@ (8006d28 <HAL_RCC_ClockConfig+0x25c>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f003 030f 	and.w	r3, r3, #15
 8006b0a:	683a      	ldr	r2, [r7, #0]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d001      	beq.n	8006b14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e105      	b.n	8006d20 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 0302 	and.w	r3, r3, #2
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d010      	beq.n	8006b42 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	689a      	ldr	r2, [r3, #8]
 8006b24:	4b81      	ldr	r3, [pc, #516]	@ (8006d2c <HAL_RCC_ClockConfig+0x260>)
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d908      	bls.n	8006b42 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b30:	4b7e      	ldr	r3, [pc, #504]	@ (8006d2c <HAL_RCC_ClockConfig+0x260>)
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	497b      	ldr	r1, [pc, #492]	@ (8006d2c <HAL_RCC_ClockConfig+0x260>)
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0301 	and.w	r3, r3, #1
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d079      	beq.n	8006c42 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	2b03      	cmp	r3, #3
 8006b54:	d11e      	bne.n	8006b94 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b56:	4b75      	ldr	r3, [pc, #468]	@ (8006d2c <HAL_RCC_ClockConfig+0x260>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d101      	bne.n	8006b66 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e0dc      	b.n	8006d20 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8006b66:	f000 fa09 	bl	8006f7c <RCC_GetSysClockFreqFromPLLSource>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	4a70      	ldr	r2, [pc, #448]	@ (8006d30 <HAL_RCC_ClockConfig+0x264>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d946      	bls.n	8006c00 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006b72:	4b6e      	ldr	r3, [pc, #440]	@ (8006d2c <HAL_RCC_ClockConfig+0x260>)
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d140      	bne.n	8006c00 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006b7e:	4b6b      	ldr	r3, [pc, #428]	@ (8006d2c <HAL_RCC_ClockConfig+0x260>)
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b86:	4a69      	ldr	r2, [pc, #420]	@ (8006d2c <HAL_RCC_ClockConfig+0x260>)
 8006b88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b8c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006b8e:	2380      	movs	r3, #128	@ 0x80
 8006b90:	617b      	str	r3, [r7, #20]
 8006b92:	e035      	b.n	8006c00 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d107      	bne.n	8006bac <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b9c:	4b63      	ldr	r3, [pc, #396]	@ (8006d2c <HAL_RCC_ClockConfig+0x260>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d115      	bne.n	8006bd4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e0b9      	b.n	8006d20 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d107      	bne.n	8006bc4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006bb4:	4b5d      	ldr	r3, [pc, #372]	@ (8006d2c <HAL_RCC_ClockConfig+0x260>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 0302 	and.w	r3, r3, #2
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d109      	bne.n	8006bd4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e0ad      	b.n	8006d20 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006bc4:	4b59      	ldr	r3, [pc, #356]	@ (8006d2c <HAL_RCC_ClockConfig+0x260>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d101      	bne.n	8006bd4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e0a5      	b.n	8006d20 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8006bd4:	f000 f8b4 	bl	8006d40 <HAL_RCC_GetSysClockFreq>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	4a55      	ldr	r2, [pc, #340]	@ (8006d30 <HAL_RCC_ClockConfig+0x264>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d90f      	bls.n	8006c00 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006be0:	4b52      	ldr	r3, [pc, #328]	@ (8006d2c <HAL_RCC_ClockConfig+0x260>)
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d109      	bne.n	8006c00 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006bec:	4b4f      	ldr	r3, [pc, #316]	@ (8006d2c <HAL_RCC_ClockConfig+0x260>)
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006bf4:	4a4d      	ldr	r2, [pc, #308]	@ (8006d2c <HAL_RCC_ClockConfig+0x260>)
 8006bf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bfa:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006bfc:	2380      	movs	r3, #128	@ 0x80
 8006bfe:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006c00:	4b4a      	ldr	r3, [pc, #296]	@ (8006d2c <HAL_RCC_ClockConfig+0x260>)
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	f023 0203 	bic.w	r2, r3, #3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	4947      	ldr	r1, [pc, #284]	@ (8006d2c <HAL_RCC_ClockConfig+0x260>)
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c12:	f7fb fff5 	bl	8002c00 <HAL_GetTick>
 8006c16:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c18:	e00a      	b.n	8006c30 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c1a:	f7fb fff1 	bl	8002c00 <HAL_GetTick>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	1ad3      	subs	r3, r2, r3
 8006c24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d901      	bls.n	8006c30 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	e077      	b.n	8006d20 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c30:	4b3e      	ldr	r3, [pc, #248]	@ (8006d2c <HAL_RCC_ClockConfig+0x260>)
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	f003 020c 	and.w	r2, r3, #12
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d1eb      	bne.n	8006c1a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	2b80      	cmp	r3, #128	@ 0x80
 8006c46:	d105      	bne.n	8006c54 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006c48:	4b38      	ldr	r3, [pc, #224]	@ (8006d2c <HAL_RCC_ClockConfig+0x260>)
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	4a37      	ldr	r2, [pc, #220]	@ (8006d2c <HAL_RCC_ClockConfig+0x260>)
 8006c4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c52:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0302 	and.w	r3, r3, #2
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d010      	beq.n	8006c82 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	689a      	ldr	r2, [r3, #8]
 8006c64:	4b31      	ldr	r3, [pc, #196]	@ (8006d2c <HAL_RCC_ClockConfig+0x260>)
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d208      	bcs.n	8006c82 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c70:	4b2e      	ldr	r3, [pc, #184]	@ (8006d2c <HAL_RCC_ClockConfig+0x260>)
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	492b      	ldr	r1, [pc, #172]	@ (8006d2c <HAL_RCC_ClockConfig+0x260>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c82:	4b29      	ldr	r3, [pc, #164]	@ (8006d28 <HAL_RCC_ClockConfig+0x25c>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 030f 	and.w	r3, r3, #15
 8006c8a:	683a      	ldr	r2, [r7, #0]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d210      	bcs.n	8006cb2 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c90:	4b25      	ldr	r3, [pc, #148]	@ (8006d28 <HAL_RCC_ClockConfig+0x25c>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f023 020f 	bic.w	r2, r3, #15
 8006c98:	4923      	ldr	r1, [pc, #140]	@ (8006d28 <HAL_RCC_ClockConfig+0x25c>)
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ca0:	4b21      	ldr	r3, [pc, #132]	@ (8006d28 <HAL_RCC_ClockConfig+0x25c>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 030f 	and.w	r3, r3, #15
 8006ca8:	683a      	ldr	r2, [r7, #0]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d001      	beq.n	8006cb2 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e036      	b.n	8006d20 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 0304 	and.w	r3, r3, #4
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d008      	beq.n	8006cd0 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006cbe:	4b1b      	ldr	r3, [pc, #108]	@ (8006d2c <HAL_RCC_ClockConfig+0x260>)
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	4918      	ldr	r1, [pc, #96]	@ (8006d2c <HAL_RCC_ClockConfig+0x260>)
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0308 	and.w	r3, r3, #8
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d009      	beq.n	8006cf0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006cdc:	4b13      	ldr	r3, [pc, #76]	@ (8006d2c <HAL_RCC_ClockConfig+0x260>)
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	00db      	lsls	r3, r3, #3
 8006cea:	4910      	ldr	r1, [pc, #64]	@ (8006d2c <HAL_RCC_ClockConfig+0x260>)
 8006cec:	4313      	orrs	r3, r2
 8006cee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006cf0:	f000 f826 	bl	8006d40 <HAL_RCC_GetSysClockFreq>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8006d2c <HAL_RCC_ClockConfig+0x260>)
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	091b      	lsrs	r3, r3, #4
 8006cfc:	f003 030f 	and.w	r3, r3, #15
 8006d00:	490c      	ldr	r1, [pc, #48]	@ (8006d34 <HAL_RCC_ClockConfig+0x268>)
 8006d02:	5ccb      	ldrb	r3, [r1, r3]
 8006d04:	f003 031f 	and.w	r3, r3, #31
 8006d08:	fa22 f303 	lsr.w	r3, r2, r3
 8006d0c:	4a0a      	ldr	r2, [pc, #40]	@ (8006d38 <HAL_RCC_ClockConfig+0x26c>)
 8006d0e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006d10:	4b0a      	ldr	r3, [pc, #40]	@ (8006d3c <HAL_RCC_ClockConfig+0x270>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4618      	mov	r0, r3
 8006d16:	f7fb ff23 	bl	8002b60 <HAL_InitTick>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	73fb      	strb	r3, [r7, #15]

  return status;
 8006d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3718      	adds	r7, #24
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	40022000 	.word	0x40022000
 8006d2c:	40021000 	.word	0x40021000
 8006d30:	04c4b400 	.word	0x04c4b400
 8006d34:	0800b464 	.word	0x0800b464
 8006d38:	20000014 	.word	0x20000014
 8006d3c:	2000004c 	.word	0x2000004c

08006d40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b089      	sub	sp, #36	@ 0x24
 8006d44:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006d46:	2300      	movs	r3, #0
 8006d48:	61fb      	str	r3, [r7, #28]
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d4e:	4b3e      	ldr	r3, [pc, #248]	@ (8006e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	f003 030c 	and.w	r3, r3, #12
 8006d56:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006d58:	4b3b      	ldr	r3, [pc, #236]	@ (8006e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	f003 0303 	and.w	r3, r3, #3
 8006d60:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d005      	beq.n	8006d74 <HAL_RCC_GetSysClockFreq+0x34>
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	2b0c      	cmp	r3, #12
 8006d6c:	d121      	bne.n	8006db2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d11e      	bne.n	8006db2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006d74:	4b34      	ldr	r3, [pc, #208]	@ (8006e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 0308 	and.w	r3, r3, #8
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d107      	bne.n	8006d90 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006d80:	4b31      	ldr	r3, [pc, #196]	@ (8006e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d86:	0a1b      	lsrs	r3, r3, #8
 8006d88:	f003 030f 	and.w	r3, r3, #15
 8006d8c:	61fb      	str	r3, [r7, #28]
 8006d8e:	e005      	b.n	8006d9c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006d90:	4b2d      	ldr	r3, [pc, #180]	@ (8006e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	091b      	lsrs	r3, r3, #4
 8006d96:	f003 030f 	and.w	r3, r3, #15
 8006d9a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006d9c:	4a2b      	ldr	r2, [pc, #172]	@ (8006e4c <HAL_RCC_GetSysClockFreq+0x10c>)
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006da4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d10d      	bne.n	8006dc8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006db0:	e00a      	b.n	8006dc8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	2b04      	cmp	r3, #4
 8006db6:	d102      	bne.n	8006dbe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006db8:	4b25      	ldr	r3, [pc, #148]	@ (8006e50 <HAL_RCC_GetSysClockFreq+0x110>)
 8006dba:	61bb      	str	r3, [r7, #24]
 8006dbc:	e004      	b.n	8006dc8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	2b08      	cmp	r3, #8
 8006dc2:	d101      	bne.n	8006dc8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006dc4:	4b23      	ldr	r3, [pc, #140]	@ (8006e54 <HAL_RCC_GetSysClockFreq+0x114>)
 8006dc6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	2b0c      	cmp	r3, #12
 8006dcc:	d134      	bne.n	8006e38 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006dce:	4b1e      	ldr	r3, [pc, #120]	@ (8006e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	f003 0303 	and.w	r3, r3, #3
 8006dd6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d003      	beq.n	8006de6 <HAL_RCC_GetSysClockFreq+0xa6>
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	2b03      	cmp	r3, #3
 8006de2:	d003      	beq.n	8006dec <HAL_RCC_GetSysClockFreq+0xac>
 8006de4:	e005      	b.n	8006df2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006de6:	4b1a      	ldr	r3, [pc, #104]	@ (8006e50 <HAL_RCC_GetSysClockFreq+0x110>)
 8006de8:	617b      	str	r3, [r7, #20]
      break;
 8006dea:	e005      	b.n	8006df8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006dec:	4b19      	ldr	r3, [pc, #100]	@ (8006e54 <HAL_RCC_GetSysClockFreq+0x114>)
 8006dee:	617b      	str	r3, [r7, #20]
      break;
 8006df0:	e002      	b.n	8006df8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	617b      	str	r3, [r7, #20]
      break;
 8006df6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006df8:	4b13      	ldr	r3, [pc, #76]	@ (8006e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	091b      	lsrs	r3, r3, #4
 8006dfe:	f003 030f 	and.w	r3, r3, #15
 8006e02:	3301      	adds	r3, #1
 8006e04:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006e06:	4b10      	ldr	r3, [pc, #64]	@ (8006e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	0a1b      	lsrs	r3, r3, #8
 8006e0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e10:	697a      	ldr	r2, [r7, #20]
 8006e12:	fb03 f202 	mul.w	r2, r3, r2
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e1c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8006e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	0e5b      	lsrs	r3, r3, #25
 8006e24:	f003 0303 	and.w	r3, r3, #3
 8006e28:	3301      	adds	r3, #1
 8006e2a:	005b      	lsls	r3, r3, #1
 8006e2c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006e2e:	697a      	ldr	r2, [r7, #20]
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e36:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006e38:	69bb      	ldr	r3, [r7, #24]
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3724      	adds	r7, #36	@ 0x24
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr
 8006e46:	bf00      	nop
 8006e48:	40021000 	.word	0x40021000
 8006e4c:	0800b47c 	.word	0x0800b47c
 8006e50:	00f42400 	.word	0x00f42400
 8006e54:	007a1200 	.word	0x007a1200

08006e58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e5c:	4b03      	ldr	r3, [pc, #12]	@ (8006e6c <HAL_RCC_GetHCLKFreq+0x14>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr
 8006e6a:	bf00      	nop
 8006e6c:	20000014 	.word	0x20000014

08006e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006e74:	f7ff fff0 	bl	8006e58 <HAL_RCC_GetHCLKFreq>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	4b06      	ldr	r3, [pc, #24]	@ (8006e94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	0a1b      	lsrs	r3, r3, #8
 8006e80:	f003 0307 	and.w	r3, r3, #7
 8006e84:	4904      	ldr	r1, [pc, #16]	@ (8006e98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006e86:	5ccb      	ldrb	r3, [r1, r3]
 8006e88:	f003 031f 	and.w	r3, r3, #31
 8006e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	40021000 	.word	0x40021000
 8006e98:	0800b474 	.word	0x0800b474

08006e9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006ea0:	f7ff ffda 	bl	8006e58 <HAL_RCC_GetHCLKFreq>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	4b06      	ldr	r3, [pc, #24]	@ (8006ec0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	0adb      	lsrs	r3, r3, #11
 8006eac:	f003 0307 	and.w	r3, r3, #7
 8006eb0:	4904      	ldr	r1, [pc, #16]	@ (8006ec4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006eb2:	5ccb      	ldrb	r3, [r1, r3]
 8006eb4:	f003 031f 	and.w	r3, r3, #31
 8006eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	40021000 	.word	0x40021000
 8006ec4:	0800b474 	.word	0x0800b474

08006ec8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b086      	sub	sp, #24
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006ed4:	4b27      	ldr	r3, [pc, #156]	@ (8006f74 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ed8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d003      	beq.n	8006ee8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006ee0:	f7ff f916 	bl	8006110 <HAL_PWREx_GetVoltageRange>
 8006ee4:	6178      	str	r0, [r7, #20]
 8006ee6:	e014      	b.n	8006f12 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006ee8:	4b22      	ldr	r3, [pc, #136]	@ (8006f74 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006eea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006eec:	4a21      	ldr	r2, [pc, #132]	@ (8006f74 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006eee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ef2:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ef4:	4b1f      	ldr	r3, [pc, #124]	@ (8006f74 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ef8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006efc:	60fb      	str	r3, [r7, #12]
 8006efe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006f00:	f7ff f906 	bl	8006110 <HAL_PWREx_GetVoltageRange>
 8006f04:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006f06:	4b1b      	ldr	r3, [pc, #108]	@ (8006f74 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f0a:	4a1a      	ldr	r2, [pc, #104]	@ (8006f74 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006f0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f10:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f18:	d10b      	bne.n	8006f32 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2b80      	cmp	r3, #128	@ 0x80
 8006f1e:	d913      	bls.n	8006f48 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2ba0      	cmp	r3, #160	@ 0xa0
 8006f24:	d902      	bls.n	8006f2c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006f26:	2302      	movs	r3, #2
 8006f28:	613b      	str	r3, [r7, #16]
 8006f2a:	e00d      	b.n	8006f48 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	613b      	str	r3, [r7, #16]
 8006f30:	e00a      	b.n	8006f48 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f36:	d902      	bls.n	8006f3e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8006f38:	2302      	movs	r3, #2
 8006f3a:	613b      	str	r3, [r7, #16]
 8006f3c:	e004      	b.n	8006f48 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2b70      	cmp	r3, #112	@ 0x70
 8006f42:	d101      	bne.n	8006f48 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006f44:	2301      	movs	r3, #1
 8006f46:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006f48:	4b0b      	ldr	r3, [pc, #44]	@ (8006f78 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f023 020f 	bic.w	r2, r3, #15
 8006f50:	4909      	ldr	r1, [pc, #36]	@ (8006f78 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	4313      	orrs	r3, r2
 8006f56:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006f58:	4b07      	ldr	r3, [pc, #28]	@ (8006f78 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 030f 	and.w	r3, r3, #15
 8006f60:	693a      	ldr	r2, [r7, #16]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d001      	beq.n	8006f6a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e000      	b.n	8006f6c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8006f6a:	2300      	movs	r3, #0
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3718      	adds	r7, #24
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	40021000 	.word	0x40021000
 8006f78:	40022000 	.word	0x40022000

08006f7c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b087      	sub	sp, #28
 8006f80:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006f82:	4b2d      	ldr	r3, [pc, #180]	@ (8007038 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	f003 0303 	and.w	r3, r3, #3
 8006f8a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2b03      	cmp	r3, #3
 8006f90:	d00b      	beq.n	8006faa <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2b03      	cmp	r3, #3
 8006f96:	d825      	bhi.n	8006fe4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d008      	beq.n	8006fb0 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2b02      	cmp	r3, #2
 8006fa2:	d11f      	bne.n	8006fe4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8006fa4:	4b25      	ldr	r3, [pc, #148]	@ (800703c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006fa6:	613b      	str	r3, [r7, #16]
    break;
 8006fa8:	e01f      	b.n	8006fea <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8006faa:	4b25      	ldr	r3, [pc, #148]	@ (8007040 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8006fac:	613b      	str	r3, [r7, #16]
    break;
 8006fae:	e01c      	b.n	8006fea <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006fb0:	4b21      	ldr	r3, [pc, #132]	@ (8007038 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 0308 	and.w	r3, r3, #8
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d107      	bne.n	8006fcc <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006fbc:	4b1e      	ldr	r3, [pc, #120]	@ (8007038 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006fc2:	0a1b      	lsrs	r3, r3, #8
 8006fc4:	f003 030f 	and.w	r3, r3, #15
 8006fc8:	617b      	str	r3, [r7, #20]
 8006fca:	e005      	b.n	8006fd8 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006fcc:	4b1a      	ldr	r3, [pc, #104]	@ (8007038 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	091b      	lsrs	r3, r3, #4
 8006fd2:	f003 030f 	and.w	r3, r3, #15
 8006fd6:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8006fd8:	4a1a      	ldr	r2, [pc, #104]	@ (8007044 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fe0:	613b      	str	r3, [r7, #16]
    break;
 8006fe2:	e002      	b.n	8006fea <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	613b      	str	r3, [r7, #16]
    break;
 8006fe8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006fea:	4b13      	ldr	r3, [pc, #76]	@ (8007038 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	091b      	lsrs	r3, r3, #4
 8006ff0:	f003 030f 	and.w	r3, r3, #15
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006ff8:	4b0f      	ldr	r3, [pc, #60]	@ (8007038 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	0a1b      	lsrs	r3, r3, #8
 8006ffe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007002:	693a      	ldr	r2, [r7, #16]
 8007004:	fb03 f202 	mul.w	r2, r3, r2
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	fbb2 f3f3 	udiv	r3, r2, r3
 800700e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007010:	4b09      	ldr	r3, [pc, #36]	@ (8007038 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	0e5b      	lsrs	r3, r3, #25
 8007016:	f003 0303 	and.w	r3, r3, #3
 800701a:	3301      	adds	r3, #1
 800701c:	005b      	lsls	r3, r3, #1
 800701e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8007020:	693a      	ldr	r2, [r7, #16]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	fbb2 f3f3 	udiv	r3, r2, r3
 8007028:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800702a:	683b      	ldr	r3, [r7, #0]
}
 800702c:	4618      	mov	r0, r3
 800702e:	371c      	adds	r7, #28
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr
 8007038:	40021000 	.word	0x40021000
 800703c:	00f42400 	.word	0x00f42400
 8007040:	007a1200 	.word	0x007a1200
 8007044:	0800b47c 	.word	0x0800b47c

08007048 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b086      	sub	sp, #24
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007050:	2300      	movs	r3, #0
 8007052:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007054:	2300      	movs	r3, #0
 8007056:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007060:	2b00      	cmp	r3, #0
 8007062:	d040      	beq.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007068:	2b80      	cmp	r3, #128	@ 0x80
 800706a:	d02a      	beq.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800706c:	2b80      	cmp	r3, #128	@ 0x80
 800706e:	d825      	bhi.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007070:	2b60      	cmp	r3, #96	@ 0x60
 8007072:	d026      	beq.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007074:	2b60      	cmp	r3, #96	@ 0x60
 8007076:	d821      	bhi.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007078:	2b40      	cmp	r3, #64	@ 0x40
 800707a:	d006      	beq.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800707c:	2b40      	cmp	r3, #64	@ 0x40
 800707e:	d81d      	bhi.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007080:	2b00      	cmp	r3, #0
 8007082:	d009      	beq.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8007084:	2b20      	cmp	r3, #32
 8007086:	d010      	beq.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x62>
 8007088:	e018      	b.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800708a:	4b89      	ldr	r3, [pc, #548]	@ (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	4a88      	ldr	r2, [pc, #544]	@ (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007090:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007094:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007096:	e015      	b.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	3304      	adds	r3, #4
 800709c:	2100      	movs	r1, #0
 800709e:	4618      	mov	r0, r3
 80070a0:	f000 fb12 	bl	80076c8 <RCCEx_PLLSAI1_Config>
 80070a4:	4603      	mov	r3, r0
 80070a6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80070a8:	e00c      	b.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	3320      	adds	r3, #32
 80070ae:	2100      	movs	r1, #0
 80070b0:	4618      	mov	r0, r3
 80070b2:	f000 fbfd 	bl	80078b0 <RCCEx_PLLSAI2_Config>
 80070b6:	4603      	mov	r3, r0
 80070b8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80070ba:	e003      	b.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	74fb      	strb	r3, [r7, #19]
      break;
 80070c0:	e000      	b.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80070c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070c4:	7cfb      	ldrb	r3, [r7, #19]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d10b      	bne.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80070ca:	4b79      	ldr	r3, [pc, #484]	@ (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80070cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80070d0:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070d8:	4975      	ldr	r1, [pc, #468]	@ (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80070da:	4313      	orrs	r3, r2
 80070dc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80070e0:	e001      	b.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070e2:	7cfb      	ldrb	r3, [r7, #19]
 80070e4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d047      	beq.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070fa:	d030      	beq.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80070fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007100:	d82a      	bhi.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007102:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007106:	d02a      	beq.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8007108:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800710c:	d824      	bhi.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800710e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007112:	d008      	beq.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8007114:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007118:	d81e      	bhi.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00a      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800711e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007122:	d010      	beq.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007124:	e018      	b.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007126:	4b62      	ldr	r3, [pc, #392]	@ (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	4a61      	ldr	r2, [pc, #388]	@ (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800712c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007130:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007132:	e015      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	3304      	adds	r3, #4
 8007138:	2100      	movs	r1, #0
 800713a:	4618      	mov	r0, r3
 800713c:	f000 fac4 	bl	80076c8 <RCCEx_PLLSAI1_Config>
 8007140:	4603      	mov	r3, r0
 8007142:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007144:	e00c      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	3320      	adds	r3, #32
 800714a:	2100      	movs	r1, #0
 800714c:	4618      	mov	r0, r3
 800714e:	f000 fbaf 	bl	80078b0 <RCCEx_PLLSAI2_Config>
 8007152:	4603      	mov	r3, r0
 8007154:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007156:	e003      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	74fb      	strb	r3, [r7, #19]
      break;
 800715c:	e000      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800715e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007160:	7cfb      	ldrb	r3, [r7, #19]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d10b      	bne.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007166:	4b52      	ldr	r3, [pc, #328]	@ (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007168:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800716c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007174:	494e      	ldr	r1, [pc, #312]	@ (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007176:	4313      	orrs	r3, r2
 8007178:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800717c:	e001      	b.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800717e:	7cfb      	ldrb	r3, [r7, #19]
 8007180:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800718a:	2b00      	cmp	r3, #0
 800718c:	f000 809f 	beq.w	80072ce <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007190:	2300      	movs	r3, #0
 8007192:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007194:	4b46      	ldr	r3, [pc, #280]	@ (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007198:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800719c:	2b00      	cmp	r3, #0
 800719e:	d101      	bne.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80071a0:	2301      	movs	r3, #1
 80071a2:	e000      	b.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80071a4:	2300      	movs	r3, #0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00d      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071aa:	4b41      	ldr	r3, [pc, #260]	@ (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80071ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071ae:	4a40      	ldr	r2, [pc, #256]	@ (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80071b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80071b6:	4b3e      	ldr	r3, [pc, #248]	@ (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80071b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071be:	60bb      	str	r3, [r7, #8]
 80071c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071c2:	2301      	movs	r3, #1
 80071c4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80071c6:	4b3b      	ldr	r3, [pc, #236]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a3a      	ldr	r2, [pc, #232]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80071cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80071d2:	f7fb fd15 	bl	8002c00 <HAL_GetTick>
 80071d6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80071d8:	e009      	b.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071da:	f7fb fd11 	bl	8002c00 <HAL_GetTick>
 80071de:	4602      	mov	r2, r0
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	1ad3      	subs	r3, r2, r3
 80071e4:	2b02      	cmp	r3, #2
 80071e6:	d902      	bls.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80071e8:	2303      	movs	r3, #3
 80071ea:	74fb      	strb	r3, [r7, #19]
        break;
 80071ec:	e005      	b.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80071ee:	4b31      	ldr	r3, [pc, #196]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d0ef      	beq.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80071fa:	7cfb      	ldrb	r3, [r7, #19]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d15b      	bne.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007200:	4b2b      	ldr	r3, [pc, #172]	@ (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007206:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800720a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d01f      	beq.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007218:	697a      	ldr	r2, [r7, #20]
 800721a:	429a      	cmp	r2, r3
 800721c:	d019      	beq.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800721e:	4b24      	ldr	r3, [pc, #144]	@ (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007220:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007224:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007228:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800722a:	4b21      	ldr	r3, [pc, #132]	@ (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800722c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007230:	4a1f      	ldr	r2, [pc, #124]	@ (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007232:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007236:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800723a:	4b1d      	ldr	r3, [pc, #116]	@ (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800723c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007240:	4a1b      	ldr	r2, [pc, #108]	@ (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007242:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007246:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800724a:	4a19      	ldr	r2, [pc, #100]	@ (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	f003 0301 	and.w	r3, r3, #1
 8007258:	2b00      	cmp	r3, #0
 800725a:	d016      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800725c:	f7fb fcd0 	bl	8002c00 <HAL_GetTick>
 8007260:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007262:	e00b      	b.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007264:	f7fb fccc 	bl	8002c00 <HAL_GetTick>
 8007268:	4602      	mov	r2, r0
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007272:	4293      	cmp	r3, r2
 8007274:	d902      	bls.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	74fb      	strb	r3, [r7, #19]
            break;
 800727a:	e006      	b.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800727c:	4b0c      	ldr	r3, [pc, #48]	@ (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800727e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007282:	f003 0302 	and.w	r3, r3, #2
 8007286:	2b00      	cmp	r3, #0
 8007288:	d0ec      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800728a:	7cfb      	ldrb	r3, [r7, #19]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d10c      	bne.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007290:	4b07      	ldr	r3, [pc, #28]	@ (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007292:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007296:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072a0:	4903      	ldr	r1, [pc, #12]	@ (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80072a2:	4313      	orrs	r3, r2
 80072a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80072a8:	e008      	b.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80072aa:	7cfb      	ldrb	r3, [r7, #19]
 80072ac:	74bb      	strb	r3, [r7, #18]
 80072ae:	e005      	b.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x274>
 80072b0:	40021000 	.word	0x40021000
 80072b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072b8:	7cfb      	ldrb	r3, [r7, #19]
 80072ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80072bc:	7c7b      	ldrb	r3, [r7, #17]
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d105      	bne.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072c2:	4ba0      	ldr	r3, [pc, #640]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80072c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072c6:	4a9f      	ldr	r2, [pc, #636]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80072c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80072cc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 0301 	and.w	r3, r3, #1
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d00a      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80072da:	4b9a      	ldr	r3, [pc, #616]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80072dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072e0:	f023 0203 	bic.w	r2, r3, #3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072e8:	4996      	ldr	r1, [pc, #600]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80072ea:	4313      	orrs	r3, r2
 80072ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f003 0302 	and.w	r3, r3, #2
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d00a      	beq.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80072fc:	4b91      	ldr	r3, [pc, #580]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80072fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007302:	f023 020c 	bic.w	r2, r3, #12
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800730a:	498e      	ldr	r1, [pc, #568]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800730c:	4313      	orrs	r3, r2
 800730e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 0304 	and.w	r3, r3, #4
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00a      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800731e:	4b89      	ldr	r3, [pc, #548]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007320:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007324:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800732c:	4985      	ldr	r1, [pc, #532]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800732e:	4313      	orrs	r3, r2
 8007330:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 0308 	and.w	r3, r3, #8
 800733c:	2b00      	cmp	r3, #0
 800733e:	d00a      	beq.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007340:	4b80      	ldr	r3, [pc, #512]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007346:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800734e:	497d      	ldr	r1, [pc, #500]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007350:	4313      	orrs	r3, r2
 8007352:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f003 0310 	and.w	r3, r3, #16
 800735e:	2b00      	cmp	r3, #0
 8007360:	d00a      	beq.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007362:	4b78      	ldr	r3, [pc, #480]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007364:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007368:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007370:	4974      	ldr	r1, [pc, #464]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007372:	4313      	orrs	r3, r2
 8007374:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 0320 	and.w	r3, r3, #32
 8007380:	2b00      	cmp	r3, #0
 8007382:	d00a      	beq.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007384:	4b6f      	ldr	r3, [pc, #444]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800738a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007392:	496c      	ldr	r1, [pc, #432]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007394:	4313      	orrs	r3, r2
 8007396:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00a      	beq.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80073a6:	4b67      	ldr	r3, [pc, #412]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80073a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073ac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073b4:	4963      	ldr	r1, [pc, #396]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80073b6:	4313      	orrs	r3, r2
 80073b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00a      	beq.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80073c8:	4b5e      	ldr	r3, [pc, #376]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80073ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80073d6:	495b      	ldr	r1, [pc, #364]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80073d8:	4313      	orrs	r3, r2
 80073da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00a      	beq.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80073ea:	4b56      	ldr	r3, [pc, #344]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80073ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073f0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073f8:	4952      	ldr	r1, [pc, #328]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80073fa:	4313      	orrs	r3, r2
 80073fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007408:	2b00      	cmp	r3, #0
 800740a:	d00a      	beq.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800740c:	4b4d      	ldr	r3, [pc, #308]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800740e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007412:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800741a:	494a      	ldr	r1, [pc, #296]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800741c:	4313      	orrs	r3, r2
 800741e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800742a:	2b00      	cmp	r3, #0
 800742c:	d00a      	beq.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800742e:	4b45      	ldr	r3, [pc, #276]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007430:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007434:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800743c:	4941      	ldr	r1, [pc, #260]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800743e:	4313      	orrs	r3, r2
 8007440:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00a      	beq.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007450:	4b3c      	ldr	r3, [pc, #240]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007452:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007456:	f023 0203 	bic.w	r2, r3, #3
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800745e:	4939      	ldr	r1, [pc, #228]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007460:	4313      	orrs	r3, r2
 8007462:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800746e:	2b00      	cmp	r3, #0
 8007470:	d028      	beq.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007472:	4b34      	ldr	r3, [pc, #208]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007478:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007480:	4930      	ldr	r1, [pc, #192]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007482:	4313      	orrs	r3, r2
 8007484:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800748c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007490:	d106      	bne.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007492:	4b2c      	ldr	r3, [pc, #176]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007494:	68db      	ldr	r3, [r3, #12]
 8007496:	4a2b      	ldr	r2, [pc, #172]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007498:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800749c:	60d3      	str	r3, [r2, #12]
 800749e:	e011      	b.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80074a8:	d10c      	bne.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	3304      	adds	r3, #4
 80074ae:	2101      	movs	r1, #1
 80074b0:	4618      	mov	r0, r3
 80074b2:	f000 f909 	bl	80076c8 <RCCEx_PLLSAI1_Config>
 80074b6:	4603      	mov	r3, r0
 80074b8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80074ba:	7cfb      	ldrb	r3, [r7, #19]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d001      	beq.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80074c0:	7cfb      	ldrb	r3, [r7, #19]
 80074c2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d04d      	beq.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80074d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80074d8:	d108      	bne.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80074da:	4b1a      	ldr	r3, [pc, #104]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80074dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80074e0:	4a18      	ldr	r2, [pc, #96]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80074e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80074e6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80074ea:	e012      	b.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80074ec:	4b15      	ldr	r3, [pc, #84]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80074ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80074f2:	4a14      	ldr	r2, [pc, #80]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80074f4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80074f8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80074fc:	4b11      	ldr	r3, [pc, #68]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80074fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007502:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800750a:	490e      	ldr	r1, [pc, #56]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800750c:	4313      	orrs	r3, r2
 800750e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007516:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800751a:	d106      	bne.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800751c:	4b09      	ldr	r3, [pc, #36]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	4a08      	ldr	r2, [pc, #32]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007522:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007526:	60d3      	str	r3, [r2, #12]
 8007528:	e020      	b.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800752e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007532:	d109      	bne.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007534:	4b03      	ldr	r3, [pc, #12]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	4a02      	ldr	r2, [pc, #8]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800753a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800753e:	60d3      	str	r3, [r2, #12]
 8007540:	e014      	b.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007542:	bf00      	nop
 8007544:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800754c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007550:	d10c      	bne.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	3304      	adds	r3, #4
 8007556:	2101      	movs	r1, #1
 8007558:	4618      	mov	r0, r3
 800755a:	f000 f8b5 	bl	80076c8 <RCCEx_PLLSAI1_Config>
 800755e:	4603      	mov	r3, r0
 8007560:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007562:	7cfb      	ldrb	r3, [r7, #19]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d001      	beq.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8007568:	7cfb      	ldrb	r3, [r7, #19]
 800756a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007574:	2b00      	cmp	r3, #0
 8007576:	d028      	beq.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007578:	4b4a      	ldr	r3, [pc, #296]	@ (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800757a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800757e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007586:	4947      	ldr	r1, [pc, #284]	@ (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007588:	4313      	orrs	r3, r2
 800758a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007592:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007596:	d106      	bne.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007598:	4b42      	ldr	r3, [pc, #264]	@ (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	4a41      	ldr	r2, [pc, #260]	@ (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800759e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80075a2:	60d3      	str	r3, [r2, #12]
 80075a4:	e011      	b.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80075aa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80075ae:	d10c      	bne.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	3304      	adds	r3, #4
 80075b4:	2101      	movs	r1, #1
 80075b6:	4618      	mov	r0, r3
 80075b8:	f000 f886 	bl	80076c8 <RCCEx_PLLSAI1_Config>
 80075bc:	4603      	mov	r3, r0
 80075be:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80075c0:	7cfb      	ldrb	r3, [r7, #19]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d001      	beq.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80075c6:	7cfb      	ldrb	r3, [r7, #19]
 80075c8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d01e      	beq.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80075d6:	4b33      	ldr	r3, [pc, #204]	@ (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80075d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075dc:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075e6:	492f      	ldr	r1, [pc, #188]	@ (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80075e8:	4313      	orrs	r3, r2
 80075ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075f8:	d10c      	bne.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	3304      	adds	r3, #4
 80075fe:	2102      	movs	r1, #2
 8007600:	4618      	mov	r0, r3
 8007602:	f000 f861 	bl	80076c8 <RCCEx_PLLSAI1_Config>
 8007606:	4603      	mov	r3, r0
 8007608:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800760a:	7cfb      	ldrb	r3, [r7, #19]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d001      	beq.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8007610:	7cfb      	ldrb	r3, [r7, #19]
 8007612:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00b      	beq.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007620:	4b20      	ldr	r3, [pc, #128]	@ (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007622:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007626:	f023 0204 	bic.w	r2, r3, #4
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007630:	491c      	ldr	r1, [pc, #112]	@ (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007632:	4313      	orrs	r3, r2
 8007634:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00b      	beq.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007644:	4b17      	ldr	r3, [pc, #92]	@ (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007646:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800764a:	f023 0218 	bic.w	r2, r3, #24
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007654:	4913      	ldr	r1, [pc, #76]	@ (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007656:	4313      	orrs	r3, r2
 8007658:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007664:	2b00      	cmp	r3, #0
 8007666:	d017      	beq.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007668:	4b0e      	ldr	r3, [pc, #56]	@ (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800766a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800766e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007678:	490a      	ldr	r1, [pc, #40]	@ (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800767a:	4313      	orrs	r3, r2
 800767c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007686:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800768a:	d105      	bne.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800768c:	4b05      	ldr	r3, [pc, #20]	@ (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	4a04      	ldr	r2, [pc, #16]	@ (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007692:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007696:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007698:	7cbb      	ldrb	r3, [r7, #18]
}
 800769a:	4618      	mov	r0, r3
 800769c:	3718      	adds	r7, #24
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	40021000 	.word	0x40021000

080076a8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80076a8:	b480      	push	{r7}
 80076aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80076ac:	4b05      	ldr	r3, [pc, #20]	@ (80076c4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a04      	ldr	r2, [pc, #16]	@ (80076c4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80076b2:	f043 0304 	orr.w	r3, r3, #4
 80076b6:	6013      	str	r3, [r2, #0]
}
 80076b8:	bf00      	nop
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	40021000 	.word	0x40021000

080076c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80076d2:	2300      	movs	r3, #0
 80076d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80076d6:	4b72      	ldr	r3, [pc, #456]	@ (80078a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	f003 0303 	and.w	r3, r3, #3
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00e      	beq.n	8007700 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80076e2:	4b6f      	ldr	r3, [pc, #444]	@ (80078a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	f003 0203 	and.w	r2, r3, #3
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d103      	bne.n	80076fa <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
       ||
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d142      	bne.n	8007780 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	73fb      	strb	r3, [r7, #15]
 80076fe:	e03f      	b.n	8007780 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2b03      	cmp	r3, #3
 8007706:	d018      	beq.n	800773a <RCCEx_PLLSAI1_Config+0x72>
 8007708:	2b03      	cmp	r3, #3
 800770a:	d825      	bhi.n	8007758 <RCCEx_PLLSAI1_Config+0x90>
 800770c:	2b01      	cmp	r3, #1
 800770e:	d002      	beq.n	8007716 <RCCEx_PLLSAI1_Config+0x4e>
 8007710:	2b02      	cmp	r3, #2
 8007712:	d009      	beq.n	8007728 <RCCEx_PLLSAI1_Config+0x60>
 8007714:	e020      	b.n	8007758 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007716:	4b62      	ldr	r3, [pc, #392]	@ (80078a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f003 0302 	and.w	r3, r3, #2
 800771e:	2b00      	cmp	r3, #0
 8007720:	d11d      	bne.n	800775e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007726:	e01a      	b.n	800775e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007728:	4b5d      	ldr	r3, [pc, #372]	@ (80078a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007730:	2b00      	cmp	r3, #0
 8007732:	d116      	bne.n	8007762 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007738:	e013      	b.n	8007762 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800773a:	4b59      	ldr	r3, [pc, #356]	@ (80078a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007742:	2b00      	cmp	r3, #0
 8007744:	d10f      	bne.n	8007766 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007746:	4b56      	ldr	r3, [pc, #344]	@ (80078a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800774e:	2b00      	cmp	r3, #0
 8007750:	d109      	bne.n	8007766 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007756:	e006      	b.n	8007766 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	73fb      	strb	r3, [r7, #15]
      break;
 800775c:	e004      	b.n	8007768 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800775e:	bf00      	nop
 8007760:	e002      	b.n	8007768 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007762:	bf00      	nop
 8007764:	e000      	b.n	8007768 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007766:	bf00      	nop
    }

    if(status == HAL_OK)
 8007768:	7bfb      	ldrb	r3, [r7, #15]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d108      	bne.n	8007780 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800776e:	4b4c      	ldr	r3, [pc, #304]	@ (80078a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	f023 0203 	bic.w	r2, r3, #3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4949      	ldr	r1, [pc, #292]	@ (80078a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800777c:	4313      	orrs	r3, r2
 800777e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007780:	7bfb      	ldrb	r3, [r7, #15]
 8007782:	2b00      	cmp	r3, #0
 8007784:	f040 8086 	bne.w	8007894 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007788:	4b45      	ldr	r3, [pc, #276]	@ (80078a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a44      	ldr	r2, [pc, #272]	@ (80078a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800778e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007792:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007794:	f7fb fa34 	bl	8002c00 <HAL_GetTick>
 8007798:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800779a:	e009      	b.n	80077b0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800779c:	f7fb fa30 	bl	8002c00 <HAL_GetTick>
 80077a0:	4602      	mov	r2, r0
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	1ad3      	subs	r3, r2, r3
 80077a6:	2b02      	cmp	r3, #2
 80077a8:	d902      	bls.n	80077b0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80077aa:	2303      	movs	r3, #3
 80077ac:	73fb      	strb	r3, [r7, #15]
        break;
 80077ae:	e005      	b.n	80077bc <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80077b0:	4b3b      	ldr	r3, [pc, #236]	@ (80078a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d1ef      	bne.n	800779c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80077bc:	7bfb      	ldrb	r3, [r7, #15]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d168      	bne.n	8007894 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d113      	bne.n	80077f0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80077c8:	4b35      	ldr	r3, [pc, #212]	@ (80078a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80077ca:	691a      	ldr	r2, [r3, #16]
 80077cc:	4b35      	ldr	r3, [pc, #212]	@ (80078a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80077ce:	4013      	ands	r3, r2
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	6892      	ldr	r2, [r2, #8]
 80077d4:	0211      	lsls	r1, r2, #8
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	68d2      	ldr	r2, [r2, #12]
 80077da:	06d2      	lsls	r2, r2, #27
 80077dc:	4311      	orrs	r1, r2
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	6852      	ldr	r2, [r2, #4]
 80077e2:	3a01      	subs	r2, #1
 80077e4:	0112      	lsls	r2, r2, #4
 80077e6:	430a      	orrs	r2, r1
 80077e8:	492d      	ldr	r1, [pc, #180]	@ (80078a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80077ea:	4313      	orrs	r3, r2
 80077ec:	610b      	str	r3, [r1, #16]
 80077ee:	e02d      	b.n	800784c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d115      	bne.n	8007822 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80077f6:	4b2a      	ldr	r3, [pc, #168]	@ (80078a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80077f8:	691a      	ldr	r2, [r3, #16]
 80077fa:	4b2b      	ldr	r3, [pc, #172]	@ (80078a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80077fc:	4013      	ands	r3, r2
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	6892      	ldr	r2, [r2, #8]
 8007802:	0211      	lsls	r1, r2, #8
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	6912      	ldr	r2, [r2, #16]
 8007808:	0852      	lsrs	r2, r2, #1
 800780a:	3a01      	subs	r2, #1
 800780c:	0552      	lsls	r2, r2, #21
 800780e:	4311      	orrs	r1, r2
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	6852      	ldr	r2, [r2, #4]
 8007814:	3a01      	subs	r2, #1
 8007816:	0112      	lsls	r2, r2, #4
 8007818:	430a      	orrs	r2, r1
 800781a:	4921      	ldr	r1, [pc, #132]	@ (80078a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800781c:	4313      	orrs	r3, r2
 800781e:	610b      	str	r3, [r1, #16]
 8007820:	e014      	b.n	800784c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007822:	4b1f      	ldr	r3, [pc, #124]	@ (80078a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007824:	691a      	ldr	r2, [r3, #16]
 8007826:	4b21      	ldr	r3, [pc, #132]	@ (80078ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8007828:	4013      	ands	r3, r2
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	6892      	ldr	r2, [r2, #8]
 800782e:	0211      	lsls	r1, r2, #8
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	6952      	ldr	r2, [r2, #20]
 8007834:	0852      	lsrs	r2, r2, #1
 8007836:	3a01      	subs	r2, #1
 8007838:	0652      	lsls	r2, r2, #25
 800783a:	4311      	orrs	r1, r2
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	6852      	ldr	r2, [r2, #4]
 8007840:	3a01      	subs	r2, #1
 8007842:	0112      	lsls	r2, r2, #4
 8007844:	430a      	orrs	r2, r1
 8007846:	4916      	ldr	r1, [pc, #88]	@ (80078a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007848:	4313      	orrs	r3, r2
 800784a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800784c:	4b14      	ldr	r3, [pc, #80]	@ (80078a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a13      	ldr	r2, [pc, #76]	@ (80078a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007852:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007856:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007858:	f7fb f9d2 	bl	8002c00 <HAL_GetTick>
 800785c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800785e:	e009      	b.n	8007874 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007860:	f7fb f9ce 	bl	8002c00 <HAL_GetTick>
 8007864:	4602      	mov	r2, r0
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	2b02      	cmp	r3, #2
 800786c:	d902      	bls.n	8007874 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800786e:	2303      	movs	r3, #3
 8007870:	73fb      	strb	r3, [r7, #15]
          break;
 8007872:	e005      	b.n	8007880 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007874:	4b0a      	ldr	r3, [pc, #40]	@ (80078a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800787c:	2b00      	cmp	r3, #0
 800787e:	d0ef      	beq.n	8007860 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007880:	7bfb      	ldrb	r3, [r7, #15]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d106      	bne.n	8007894 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007886:	4b06      	ldr	r3, [pc, #24]	@ (80078a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007888:	691a      	ldr	r2, [r3, #16]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	699b      	ldr	r3, [r3, #24]
 800788e:	4904      	ldr	r1, [pc, #16]	@ (80078a0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007890:	4313      	orrs	r3, r2
 8007892:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007894:	7bfb      	ldrb	r3, [r7, #15]
}
 8007896:	4618      	mov	r0, r3
 8007898:	3710      	adds	r7, #16
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	40021000 	.word	0x40021000
 80078a4:	07ff800f 	.word	0x07ff800f
 80078a8:	ff9f800f 	.word	0xff9f800f
 80078ac:	f9ff800f 	.word	0xf9ff800f

080078b0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80078ba:	2300      	movs	r3, #0
 80078bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80078be:	4b72      	ldr	r3, [pc, #456]	@ (8007a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	f003 0303 	and.w	r3, r3, #3
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00e      	beq.n	80078e8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80078ca:	4b6f      	ldr	r3, [pc, #444]	@ (8007a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	f003 0203 	and.w	r2, r3, #3
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d103      	bne.n	80078e2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
       ||
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d142      	bne.n	8007968 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	73fb      	strb	r3, [r7, #15]
 80078e6:	e03f      	b.n	8007968 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2b03      	cmp	r3, #3
 80078ee:	d018      	beq.n	8007922 <RCCEx_PLLSAI2_Config+0x72>
 80078f0:	2b03      	cmp	r3, #3
 80078f2:	d825      	bhi.n	8007940 <RCCEx_PLLSAI2_Config+0x90>
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d002      	beq.n	80078fe <RCCEx_PLLSAI2_Config+0x4e>
 80078f8:	2b02      	cmp	r3, #2
 80078fa:	d009      	beq.n	8007910 <RCCEx_PLLSAI2_Config+0x60>
 80078fc:	e020      	b.n	8007940 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80078fe:	4b62      	ldr	r3, [pc, #392]	@ (8007a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f003 0302 	and.w	r3, r3, #2
 8007906:	2b00      	cmp	r3, #0
 8007908:	d11d      	bne.n	8007946 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800790e:	e01a      	b.n	8007946 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007910:	4b5d      	ldr	r3, [pc, #372]	@ (8007a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007918:	2b00      	cmp	r3, #0
 800791a:	d116      	bne.n	800794a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007920:	e013      	b.n	800794a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007922:	4b59      	ldr	r3, [pc, #356]	@ (8007a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800792a:	2b00      	cmp	r3, #0
 800792c:	d10f      	bne.n	800794e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800792e:	4b56      	ldr	r3, [pc, #344]	@ (8007a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007936:	2b00      	cmp	r3, #0
 8007938:	d109      	bne.n	800794e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800793e:	e006      	b.n	800794e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	73fb      	strb	r3, [r7, #15]
      break;
 8007944:	e004      	b.n	8007950 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007946:	bf00      	nop
 8007948:	e002      	b.n	8007950 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800794a:	bf00      	nop
 800794c:	e000      	b.n	8007950 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800794e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007950:	7bfb      	ldrb	r3, [r7, #15]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d108      	bne.n	8007968 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8007956:	4b4c      	ldr	r3, [pc, #304]	@ (8007a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	f023 0203 	bic.w	r2, r3, #3
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4949      	ldr	r1, [pc, #292]	@ (8007a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007964:	4313      	orrs	r3, r2
 8007966:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007968:	7bfb      	ldrb	r3, [r7, #15]
 800796a:	2b00      	cmp	r3, #0
 800796c:	f040 8086 	bne.w	8007a7c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007970:	4b45      	ldr	r3, [pc, #276]	@ (8007a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a44      	ldr	r2, [pc, #272]	@ (8007a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007976:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800797a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800797c:	f7fb f940 	bl	8002c00 <HAL_GetTick>
 8007980:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007982:	e009      	b.n	8007998 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007984:	f7fb f93c 	bl	8002c00 <HAL_GetTick>
 8007988:	4602      	mov	r2, r0
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	1ad3      	subs	r3, r2, r3
 800798e:	2b02      	cmp	r3, #2
 8007990:	d902      	bls.n	8007998 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007992:	2303      	movs	r3, #3
 8007994:	73fb      	strb	r3, [r7, #15]
        break;
 8007996:	e005      	b.n	80079a4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007998:	4b3b      	ldr	r3, [pc, #236]	@ (8007a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d1ef      	bne.n	8007984 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80079a4:	7bfb      	ldrb	r3, [r7, #15]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d168      	bne.n	8007a7c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d113      	bne.n	80079d8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80079b0:	4b35      	ldr	r3, [pc, #212]	@ (8007a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 80079b2:	695a      	ldr	r2, [r3, #20]
 80079b4:	4b35      	ldr	r3, [pc, #212]	@ (8007a8c <RCCEx_PLLSAI2_Config+0x1dc>)
 80079b6:	4013      	ands	r3, r2
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	6892      	ldr	r2, [r2, #8]
 80079bc:	0211      	lsls	r1, r2, #8
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	68d2      	ldr	r2, [r2, #12]
 80079c2:	06d2      	lsls	r2, r2, #27
 80079c4:	4311      	orrs	r1, r2
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	6852      	ldr	r2, [r2, #4]
 80079ca:	3a01      	subs	r2, #1
 80079cc:	0112      	lsls	r2, r2, #4
 80079ce:	430a      	orrs	r2, r1
 80079d0:	492d      	ldr	r1, [pc, #180]	@ (8007a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 80079d2:	4313      	orrs	r3, r2
 80079d4:	614b      	str	r3, [r1, #20]
 80079d6:	e02d      	b.n	8007a34 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d115      	bne.n	8007a0a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80079de:	4b2a      	ldr	r3, [pc, #168]	@ (8007a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 80079e0:	695a      	ldr	r2, [r3, #20]
 80079e2:	4b2b      	ldr	r3, [pc, #172]	@ (8007a90 <RCCEx_PLLSAI2_Config+0x1e0>)
 80079e4:	4013      	ands	r3, r2
 80079e6:	687a      	ldr	r2, [r7, #4]
 80079e8:	6892      	ldr	r2, [r2, #8]
 80079ea:	0211      	lsls	r1, r2, #8
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	6912      	ldr	r2, [r2, #16]
 80079f0:	0852      	lsrs	r2, r2, #1
 80079f2:	3a01      	subs	r2, #1
 80079f4:	0552      	lsls	r2, r2, #21
 80079f6:	4311      	orrs	r1, r2
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	6852      	ldr	r2, [r2, #4]
 80079fc:	3a01      	subs	r2, #1
 80079fe:	0112      	lsls	r2, r2, #4
 8007a00:	430a      	orrs	r2, r1
 8007a02:	4921      	ldr	r1, [pc, #132]	@ (8007a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007a04:	4313      	orrs	r3, r2
 8007a06:	614b      	str	r3, [r1, #20]
 8007a08:	e014      	b.n	8007a34 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007a0a:	4b1f      	ldr	r3, [pc, #124]	@ (8007a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007a0c:	695a      	ldr	r2, [r3, #20]
 8007a0e:	4b21      	ldr	r3, [pc, #132]	@ (8007a94 <RCCEx_PLLSAI2_Config+0x1e4>)
 8007a10:	4013      	ands	r3, r2
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	6892      	ldr	r2, [r2, #8]
 8007a16:	0211      	lsls	r1, r2, #8
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	6952      	ldr	r2, [r2, #20]
 8007a1c:	0852      	lsrs	r2, r2, #1
 8007a1e:	3a01      	subs	r2, #1
 8007a20:	0652      	lsls	r2, r2, #25
 8007a22:	4311      	orrs	r1, r2
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	6852      	ldr	r2, [r2, #4]
 8007a28:	3a01      	subs	r2, #1
 8007a2a:	0112      	lsls	r2, r2, #4
 8007a2c:	430a      	orrs	r2, r1
 8007a2e:	4916      	ldr	r1, [pc, #88]	@ (8007a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007a30:	4313      	orrs	r3, r2
 8007a32:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007a34:	4b14      	ldr	r3, [pc, #80]	@ (8007a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a13      	ldr	r2, [pc, #76]	@ (8007a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007a3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a3e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a40:	f7fb f8de 	bl	8002c00 <HAL_GetTick>
 8007a44:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007a46:	e009      	b.n	8007a5c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007a48:	f7fb f8da 	bl	8002c00 <HAL_GetTick>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	2b02      	cmp	r3, #2
 8007a54:	d902      	bls.n	8007a5c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007a56:	2303      	movs	r3, #3
 8007a58:	73fb      	strb	r3, [r7, #15]
          break;
 8007a5a:	e005      	b.n	8007a68 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8007a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d0ef      	beq.n	8007a48 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007a68:	7bfb      	ldrb	r3, [r7, #15]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d106      	bne.n	8007a7c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007a6e:	4b06      	ldr	r3, [pc, #24]	@ (8007a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007a70:	695a      	ldr	r2, [r3, #20]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	699b      	ldr	r3, [r3, #24]
 8007a76:	4904      	ldr	r1, [pc, #16]	@ (8007a88 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3710      	adds	r7, #16
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	40021000 	.word	0x40021000
 8007a8c:	07ff800f 	.word	0x07ff800f
 8007a90:	ff9f800f 	.word	0xff9f800f
 8007a94:	f9ff800f 	.word	0xf9ff800f

08007a98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d101      	bne.n	8007aaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e042      	b.n	8007b30 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d106      	bne.n	8007ac2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f7fa fd83 	bl	80025c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2224      	movs	r2, #36	@ 0x24
 8007ac6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f022 0201 	bic.w	r2, r2, #1
 8007ad8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d002      	beq.n	8007ae8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 fb24 	bl	8008130 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 f825 	bl	8007b38 <UART_SetConfig>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d101      	bne.n	8007af8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	e01b      	b.n	8007b30 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	685a      	ldr	r2, [r3, #4]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007b06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	689a      	ldr	r2, [r3, #8]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007b16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f042 0201 	orr.w	r2, r2, #1
 8007b26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 fba3 	bl	8008274 <UART_CheckIdleState>
 8007b2e:	4603      	mov	r3, r0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3708      	adds	r7, #8
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b3c:	b08c      	sub	sp, #48	@ 0x30
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b42:	2300      	movs	r3, #0
 8007b44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	689a      	ldr	r2, [r3, #8]
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	691b      	ldr	r3, [r3, #16]
 8007b50:	431a      	orrs	r2, r3
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	695b      	ldr	r3, [r3, #20]
 8007b56:	431a      	orrs	r2, r3
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	69db      	ldr	r3, [r3, #28]
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	4baa      	ldr	r3, [pc, #680]	@ (8007e10 <UART_SetConfig+0x2d8>)
 8007b68:	4013      	ands	r3, r2
 8007b6a:	697a      	ldr	r2, [r7, #20]
 8007b6c:	6812      	ldr	r2, [r2, #0]
 8007b6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b70:	430b      	orrs	r3, r1
 8007b72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	68da      	ldr	r2, [r3, #12]
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	430a      	orrs	r2, r1
 8007b88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	699b      	ldr	r3, [r3, #24]
 8007b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a9f      	ldr	r2, [pc, #636]	@ (8007e14 <UART_SetConfig+0x2dc>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d004      	beq.n	8007ba4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	6a1b      	ldr	r3, [r3, #32]
 8007b9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007bae:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007bb2:	697a      	ldr	r2, [r7, #20]
 8007bb4:	6812      	ldr	r2, [r2, #0]
 8007bb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007bb8:	430b      	orrs	r3, r1
 8007bba:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bc2:	f023 010f 	bic.w	r1, r3, #15
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	430a      	orrs	r2, r1
 8007bd0:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a90      	ldr	r2, [pc, #576]	@ (8007e18 <UART_SetConfig+0x2e0>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d125      	bne.n	8007c28 <UART_SetConfig+0xf0>
 8007bdc:	4b8f      	ldr	r3, [pc, #572]	@ (8007e1c <UART_SetConfig+0x2e4>)
 8007bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007be2:	f003 0303 	and.w	r3, r3, #3
 8007be6:	2b03      	cmp	r3, #3
 8007be8:	d81a      	bhi.n	8007c20 <UART_SetConfig+0xe8>
 8007bea:	a201      	add	r2, pc, #4	@ (adr r2, 8007bf0 <UART_SetConfig+0xb8>)
 8007bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf0:	08007c01 	.word	0x08007c01
 8007bf4:	08007c11 	.word	0x08007c11
 8007bf8:	08007c09 	.word	0x08007c09
 8007bfc:	08007c19 	.word	0x08007c19
 8007c00:	2301      	movs	r3, #1
 8007c02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c06:	e116      	b.n	8007e36 <UART_SetConfig+0x2fe>
 8007c08:	2302      	movs	r3, #2
 8007c0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c0e:	e112      	b.n	8007e36 <UART_SetConfig+0x2fe>
 8007c10:	2304      	movs	r3, #4
 8007c12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c16:	e10e      	b.n	8007e36 <UART_SetConfig+0x2fe>
 8007c18:	2308      	movs	r3, #8
 8007c1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c1e:	e10a      	b.n	8007e36 <UART_SetConfig+0x2fe>
 8007c20:	2310      	movs	r3, #16
 8007c22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c26:	e106      	b.n	8007e36 <UART_SetConfig+0x2fe>
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a7c      	ldr	r2, [pc, #496]	@ (8007e20 <UART_SetConfig+0x2e8>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d138      	bne.n	8007ca4 <UART_SetConfig+0x16c>
 8007c32:	4b7a      	ldr	r3, [pc, #488]	@ (8007e1c <UART_SetConfig+0x2e4>)
 8007c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c38:	f003 030c 	and.w	r3, r3, #12
 8007c3c:	2b0c      	cmp	r3, #12
 8007c3e:	d82d      	bhi.n	8007c9c <UART_SetConfig+0x164>
 8007c40:	a201      	add	r2, pc, #4	@ (adr r2, 8007c48 <UART_SetConfig+0x110>)
 8007c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c46:	bf00      	nop
 8007c48:	08007c7d 	.word	0x08007c7d
 8007c4c:	08007c9d 	.word	0x08007c9d
 8007c50:	08007c9d 	.word	0x08007c9d
 8007c54:	08007c9d 	.word	0x08007c9d
 8007c58:	08007c8d 	.word	0x08007c8d
 8007c5c:	08007c9d 	.word	0x08007c9d
 8007c60:	08007c9d 	.word	0x08007c9d
 8007c64:	08007c9d 	.word	0x08007c9d
 8007c68:	08007c85 	.word	0x08007c85
 8007c6c:	08007c9d 	.word	0x08007c9d
 8007c70:	08007c9d 	.word	0x08007c9d
 8007c74:	08007c9d 	.word	0x08007c9d
 8007c78:	08007c95 	.word	0x08007c95
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c82:	e0d8      	b.n	8007e36 <UART_SetConfig+0x2fe>
 8007c84:	2302      	movs	r3, #2
 8007c86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c8a:	e0d4      	b.n	8007e36 <UART_SetConfig+0x2fe>
 8007c8c:	2304      	movs	r3, #4
 8007c8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c92:	e0d0      	b.n	8007e36 <UART_SetConfig+0x2fe>
 8007c94:	2308      	movs	r3, #8
 8007c96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c9a:	e0cc      	b.n	8007e36 <UART_SetConfig+0x2fe>
 8007c9c:	2310      	movs	r3, #16
 8007c9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ca2:	e0c8      	b.n	8007e36 <UART_SetConfig+0x2fe>
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a5e      	ldr	r2, [pc, #376]	@ (8007e24 <UART_SetConfig+0x2ec>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d125      	bne.n	8007cfa <UART_SetConfig+0x1c2>
 8007cae:	4b5b      	ldr	r3, [pc, #364]	@ (8007e1c <UART_SetConfig+0x2e4>)
 8007cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cb4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007cb8:	2b30      	cmp	r3, #48	@ 0x30
 8007cba:	d016      	beq.n	8007cea <UART_SetConfig+0x1b2>
 8007cbc:	2b30      	cmp	r3, #48	@ 0x30
 8007cbe:	d818      	bhi.n	8007cf2 <UART_SetConfig+0x1ba>
 8007cc0:	2b20      	cmp	r3, #32
 8007cc2:	d00a      	beq.n	8007cda <UART_SetConfig+0x1a2>
 8007cc4:	2b20      	cmp	r3, #32
 8007cc6:	d814      	bhi.n	8007cf2 <UART_SetConfig+0x1ba>
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d002      	beq.n	8007cd2 <UART_SetConfig+0x19a>
 8007ccc:	2b10      	cmp	r3, #16
 8007cce:	d008      	beq.n	8007ce2 <UART_SetConfig+0x1aa>
 8007cd0:	e00f      	b.n	8007cf2 <UART_SetConfig+0x1ba>
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cd8:	e0ad      	b.n	8007e36 <UART_SetConfig+0x2fe>
 8007cda:	2302      	movs	r3, #2
 8007cdc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ce0:	e0a9      	b.n	8007e36 <UART_SetConfig+0x2fe>
 8007ce2:	2304      	movs	r3, #4
 8007ce4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ce8:	e0a5      	b.n	8007e36 <UART_SetConfig+0x2fe>
 8007cea:	2308      	movs	r3, #8
 8007cec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cf0:	e0a1      	b.n	8007e36 <UART_SetConfig+0x2fe>
 8007cf2:	2310      	movs	r3, #16
 8007cf4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cf8:	e09d      	b.n	8007e36 <UART_SetConfig+0x2fe>
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a4a      	ldr	r2, [pc, #296]	@ (8007e28 <UART_SetConfig+0x2f0>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d125      	bne.n	8007d50 <UART_SetConfig+0x218>
 8007d04:	4b45      	ldr	r3, [pc, #276]	@ (8007e1c <UART_SetConfig+0x2e4>)
 8007d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d0a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007d0e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007d10:	d016      	beq.n	8007d40 <UART_SetConfig+0x208>
 8007d12:	2bc0      	cmp	r3, #192	@ 0xc0
 8007d14:	d818      	bhi.n	8007d48 <UART_SetConfig+0x210>
 8007d16:	2b80      	cmp	r3, #128	@ 0x80
 8007d18:	d00a      	beq.n	8007d30 <UART_SetConfig+0x1f8>
 8007d1a:	2b80      	cmp	r3, #128	@ 0x80
 8007d1c:	d814      	bhi.n	8007d48 <UART_SetConfig+0x210>
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d002      	beq.n	8007d28 <UART_SetConfig+0x1f0>
 8007d22:	2b40      	cmp	r3, #64	@ 0x40
 8007d24:	d008      	beq.n	8007d38 <UART_SetConfig+0x200>
 8007d26:	e00f      	b.n	8007d48 <UART_SetConfig+0x210>
 8007d28:	2300      	movs	r3, #0
 8007d2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d2e:	e082      	b.n	8007e36 <UART_SetConfig+0x2fe>
 8007d30:	2302      	movs	r3, #2
 8007d32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d36:	e07e      	b.n	8007e36 <UART_SetConfig+0x2fe>
 8007d38:	2304      	movs	r3, #4
 8007d3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d3e:	e07a      	b.n	8007e36 <UART_SetConfig+0x2fe>
 8007d40:	2308      	movs	r3, #8
 8007d42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d46:	e076      	b.n	8007e36 <UART_SetConfig+0x2fe>
 8007d48:	2310      	movs	r3, #16
 8007d4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d4e:	e072      	b.n	8007e36 <UART_SetConfig+0x2fe>
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a35      	ldr	r2, [pc, #212]	@ (8007e2c <UART_SetConfig+0x2f4>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d12a      	bne.n	8007db0 <UART_SetConfig+0x278>
 8007d5a:	4b30      	ldr	r3, [pc, #192]	@ (8007e1c <UART_SetConfig+0x2e4>)
 8007d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d68:	d01a      	beq.n	8007da0 <UART_SetConfig+0x268>
 8007d6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d6e:	d81b      	bhi.n	8007da8 <UART_SetConfig+0x270>
 8007d70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d74:	d00c      	beq.n	8007d90 <UART_SetConfig+0x258>
 8007d76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d7a:	d815      	bhi.n	8007da8 <UART_SetConfig+0x270>
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d003      	beq.n	8007d88 <UART_SetConfig+0x250>
 8007d80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d84:	d008      	beq.n	8007d98 <UART_SetConfig+0x260>
 8007d86:	e00f      	b.n	8007da8 <UART_SetConfig+0x270>
 8007d88:	2300      	movs	r3, #0
 8007d8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d8e:	e052      	b.n	8007e36 <UART_SetConfig+0x2fe>
 8007d90:	2302      	movs	r3, #2
 8007d92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d96:	e04e      	b.n	8007e36 <UART_SetConfig+0x2fe>
 8007d98:	2304      	movs	r3, #4
 8007d9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d9e:	e04a      	b.n	8007e36 <UART_SetConfig+0x2fe>
 8007da0:	2308      	movs	r3, #8
 8007da2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007da6:	e046      	b.n	8007e36 <UART_SetConfig+0x2fe>
 8007da8:	2310      	movs	r3, #16
 8007daa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dae:	e042      	b.n	8007e36 <UART_SetConfig+0x2fe>
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a17      	ldr	r2, [pc, #92]	@ (8007e14 <UART_SetConfig+0x2dc>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d13a      	bne.n	8007e30 <UART_SetConfig+0x2f8>
 8007dba:	4b18      	ldr	r3, [pc, #96]	@ (8007e1c <UART_SetConfig+0x2e4>)
 8007dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dc0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007dc4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007dc8:	d01a      	beq.n	8007e00 <UART_SetConfig+0x2c8>
 8007dca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007dce:	d81b      	bhi.n	8007e08 <UART_SetConfig+0x2d0>
 8007dd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007dd4:	d00c      	beq.n	8007df0 <UART_SetConfig+0x2b8>
 8007dd6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007dda:	d815      	bhi.n	8007e08 <UART_SetConfig+0x2d0>
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d003      	beq.n	8007de8 <UART_SetConfig+0x2b0>
 8007de0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007de4:	d008      	beq.n	8007df8 <UART_SetConfig+0x2c0>
 8007de6:	e00f      	b.n	8007e08 <UART_SetConfig+0x2d0>
 8007de8:	2300      	movs	r3, #0
 8007dea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dee:	e022      	b.n	8007e36 <UART_SetConfig+0x2fe>
 8007df0:	2302      	movs	r3, #2
 8007df2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007df6:	e01e      	b.n	8007e36 <UART_SetConfig+0x2fe>
 8007df8:	2304      	movs	r3, #4
 8007dfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dfe:	e01a      	b.n	8007e36 <UART_SetConfig+0x2fe>
 8007e00:	2308      	movs	r3, #8
 8007e02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e06:	e016      	b.n	8007e36 <UART_SetConfig+0x2fe>
 8007e08:	2310      	movs	r3, #16
 8007e0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e0e:	e012      	b.n	8007e36 <UART_SetConfig+0x2fe>
 8007e10:	cfff69f3 	.word	0xcfff69f3
 8007e14:	40008000 	.word	0x40008000
 8007e18:	40013800 	.word	0x40013800
 8007e1c:	40021000 	.word	0x40021000
 8007e20:	40004400 	.word	0x40004400
 8007e24:	40004800 	.word	0x40004800
 8007e28:	40004c00 	.word	0x40004c00
 8007e2c:	40005000 	.word	0x40005000
 8007e30:	2310      	movs	r3, #16
 8007e32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4aae      	ldr	r2, [pc, #696]	@ (80080f4 <UART_SetConfig+0x5bc>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	f040 8097 	bne.w	8007f70 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e42:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007e46:	2b08      	cmp	r3, #8
 8007e48:	d823      	bhi.n	8007e92 <UART_SetConfig+0x35a>
 8007e4a:	a201      	add	r2, pc, #4	@ (adr r2, 8007e50 <UART_SetConfig+0x318>)
 8007e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e50:	08007e75 	.word	0x08007e75
 8007e54:	08007e93 	.word	0x08007e93
 8007e58:	08007e7d 	.word	0x08007e7d
 8007e5c:	08007e93 	.word	0x08007e93
 8007e60:	08007e83 	.word	0x08007e83
 8007e64:	08007e93 	.word	0x08007e93
 8007e68:	08007e93 	.word	0x08007e93
 8007e6c:	08007e93 	.word	0x08007e93
 8007e70:	08007e8b 	.word	0x08007e8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e74:	f7fe fffc 	bl	8006e70 <HAL_RCC_GetPCLK1Freq>
 8007e78:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e7a:	e010      	b.n	8007e9e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e7c:	4b9e      	ldr	r3, [pc, #632]	@ (80080f8 <UART_SetConfig+0x5c0>)
 8007e7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007e80:	e00d      	b.n	8007e9e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e82:	f7fe ff5d 	bl	8006d40 <HAL_RCC_GetSysClockFreq>
 8007e86:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e88:	e009      	b.n	8007e9e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007e90:	e005      	b.n	8007e9e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007e92:	2300      	movs	r3, #0
 8007e94:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007e9c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	f000 8130 	beq.w	8008106 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eaa:	4a94      	ldr	r2, [pc, #592]	@ (80080fc <UART_SetConfig+0x5c4>)
 8007eac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007eb8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	685a      	ldr	r2, [r3, #4]
 8007ebe:	4613      	mov	r3, r2
 8007ec0:	005b      	lsls	r3, r3, #1
 8007ec2:	4413      	add	r3, r2
 8007ec4:	69ba      	ldr	r2, [r7, #24]
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d305      	bcc.n	8007ed6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ed0:	69ba      	ldr	r2, [r7, #24]
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d903      	bls.n	8007ede <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007edc:	e113      	b.n	8008106 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	60bb      	str	r3, [r7, #8]
 8007ee4:	60fa      	str	r2, [r7, #12]
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eea:	4a84      	ldr	r2, [pc, #528]	@ (80080fc <UART_SetConfig+0x5c4>)
 8007eec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	603b      	str	r3, [r7, #0]
 8007ef6:	607a      	str	r2, [r7, #4]
 8007ef8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007efc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007f00:	f7f8 fe6a 	bl	8000bd8 <__aeabi_uldivmod>
 8007f04:	4602      	mov	r2, r0
 8007f06:	460b      	mov	r3, r1
 8007f08:	4610      	mov	r0, r2
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	f04f 0200 	mov.w	r2, #0
 8007f10:	f04f 0300 	mov.w	r3, #0
 8007f14:	020b      	lsls	r3, r1, #8
 8007f16:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007f1a:	0202      	lsls	r2, r0, #8
 8007f1c:	6979      	ldr	r1, [r7, #20]
 8007f1e:	6849      	ldr	r1, [r1, #4]
 8007f20:	0849      	lsrs	r1, r1, #1
 8007f22:	2000      	movs	r0, #0
 8007f24:	460c      	mov	r4, r1
 8007f26:	4605      	mov	r5, r0
 8007f28:	eb12 0804 	adds.w	r8, r2, r4
 8007f2c:	eb43 0905 	adc.w	r9, r3, r5
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	469a      	mov	sl, r3
 8007f38:	4693      	mov	fp, r2
 8007f3a:	4652      	mov	r2, sl
 8007f3c:	465b      	mov	r3, fp
 8007f3e:	4640      	mov	r0, r8
 8007f40:	4649      	mov	r1, r9
 8007f42:	f7f8 fe49 	bl	8000bd8 <__aeabi_uldivmod>
 8007f46:	4602      	mov	r2, r0
 8007f48:	460b      	mov	r3, r1
 8007f4a:	4613      	mov	r3, r2
 8007f4c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f4e:	6a3b      	ldr	r3, [r7, #32]
 8007f50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f54:	d308      	bcc.n	8007f68 <UART_SetConfig+0x430>
 8007f56:	6a3b      	ldr	r3, [r7, #32]
 8007f58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f5c:	d204      	bcs.n	8007f68 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	6a3a      	ldr	r2, [r7, #32]
 8007f64:	60da      	str	r2, [r3, #12]
 8007f66:	e0ce      	b.n	8008106 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007f6e:	e0ca      	b.n	8008106 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	69db      	ldr	r3, [r3, #28]
 8007f74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f78:	d166      	bne.n	8008048 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007f7a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007f7e:	2b08      	cmp	r3, #8
 8007f80:	d827      	bhi.n	8007fd2 <UART_SetConfig+0x49a>
 8007f82:	a201      	add	r2, pc, #4	@ (adr r2, 8007f88 <UART_SetConfig+0x450>)
 8007f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f88:	08007fad 	.word	0x08007fad
 8007f8c:	08007fb5 	.word	0x08007fb5
 8007f90:	08007fbd 	.word	0x08007fbd
 8007f94:	08007fd3 	.word	0x08007fd3
 8007f98:	08007fc3 	.word	0x08007fc3
 8007f9c:	08007fd3 	.word	0x08007fd3
 8007fa0:	08007fd3 	.word	0x08007fd3
 8007fa4:	08007fd3 	.word	0x08007fd3
 8007fa8:	08007fcb 	.word	0x08007fcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fac:	f7fe ff60 	bl	8006e70 <HAL_RCC_GetPCLK1Freq>
 8007fb0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007fb2:	e014      	b.n	8007fde <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fb4:	f7fe ff72 	bl	8006e9c <HAL_RCC_GetPCLK2Freq>
 8007fb8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007fba:	e010      	b.n	8007fde <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fbc:	4b4e      	ldr	r3, [pc, #312]	@ (80080f8 <UART_SetConfig+0x5c0>)
 8007fbe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007fc0:	e00d      	b.n	8007fde <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fc2:	f7fe febd 	bl	8006d40 <HAL_RCC_GetSysClockFreq>
 8007fc6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007fc8:	e009      	b.n	8007fde <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007fce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007fd0:	e005      	b.n	8007fde <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007fdc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	f000 8090 	beq.w	8008106 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fea:	4a44      	ldr	r2, [pc, #272]	@ (80080fc <UART_SetConfig+0x5c4>)
 8007fec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ff8:	005a      	lsls	r2, r3, #1
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	085b      	lsrs	r3, r3, #1
 8008000:	441a      	add	r2, r3
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	fbb2 f3f3 	udiv	r3, r2, r3
 800800a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800800c:	6a3b      	ldr	r3, [r7, #32]
 800800e:	2b0f      	cmp	r3, #15
 8008010:	d916      	bls.n	8008040 <UART_SetConfig+0x508>
 8008012:	6a3b      	ldr	r3, [r7, #32]
 8008014:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008018:	d212      	bcs.n	8008040 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800801a:	6a3b      	ldr	r3, [r7, #32]
 800801c:	b29b      	uxth	r3, r3
 800801e:	f023 030f 	bic.w	r3, r3, #15
 8008022:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008024:	6a3b      	ldr	r3, [r7, #32]
 8008026:	085b      	lsrs	r3, r3, #1
 8008028:	b29b      	uxth	r3, r3
 800802a:	f003 0307 	and.w	r3, r3, #7
 800802e:	b29a      	uxth	r2, r3
 8008030:	8bfb      	ldrh	r3, [r7, #30]
 8008032:	4313      	orrs	r3, r2
 8008034:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	8bfa      	ldrh	r2, [r7, #30]
 800803c:	60da      	str	r2, [r3, #12]
 800803e:	e062      	b.n	8008106 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008046:	e05e      	b.n	8008106 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008048:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800804c:	2b08      	cmp	r3, #8
 800804e:	d828      	bhi.n	80080a2 <UART_SetConfig+0x56a>
 8008050:	a201      	add	r2, pc, #4	@ (adr r2, 8008058 <UART_SetConfig+0x520>)
 8008052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008056:	bf00      	nop
 8008058:	0800807d 	.word	0x0800807d
 800805c:	08008085 	.word	0x08008085
 8008060:	0800808d 	.word	0x0800808d
 8008064:	080080a3 	.word	0x080080a3
 8008068:	08008093 	.word	0x08008093
 800806c:	080080a3 	.word	0x080080a3
 8008070:	080080a3 	.word	0x080080a3
 8008074:	080080a3 	.word	0x080080a3
 8008078:	0800809b 	.word	0x0800809b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800807c:	f7fe fef8 	bl	8006e70 <HAL_RCC_GetPCLK1Freq>
 8008080:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008082:	e014      	b.n	80080ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008084:	f7fe ff0a 	bl	8006e9c <HAL_RCC_GetPCLK2Freq>
 8008088:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800808a:	e010      	b.n	80080ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800808c:	4b1a      	ldr	r3, [pc, #104]	@ (80080f8 <UART_SetConfig+0x5c0>)
 800808e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008090:	e00d      	b.n	80080ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008092:	f7fe fe55 	bl	8006d40 <HAL_RCC_GetSysClockFreq>
 8008096:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008098:	e009      	b.n	80080ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800809a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800809e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80080a0:	e005      	b.n	80080ae <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80080a2:	2300      	movs	r3, #0
 80080a4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80080ac:	bf00      	nop
    }

    if (pclk != 0U)
 80080ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d028      	beq.n	8008106 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080b8:	4a10      	ldr	r2, [pc, #64]	@ (80080fc <UART_SetConfig+0x5c4>)
 80080ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080be:	461a      	mov	r2, r3
 80080c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	085b      	lsrs	r3, r3, #1
 80080cc:	441a      	add	r2, r3
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80080d6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080d8:	6a3b      	ldr	r3, [r7, #32]
 80080da:	2b0f      	cmp	r3, #15
 80080dc:	d910      	bls.n	8008100 <UART_SetConfig+0x5c8>
 80080de:	6a3b      	ldr	r3, [r7, #32]
 80080e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080e4:	d20c      	bcs.n	8008100 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80080e6:	6a3b      	ldr	r3, [r7, #32]
 80080e8:	b29a      	uxth	r2, r3
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	60da      	str	r2, [r3, #12]
 80080f0:	e009      	b.n	8008106 <UART_SetConfig+0x5ce>
 80080f2:	bf00      	nop
 80080f4:	40008000 	.word	0x40008000
 80080f8:	00f42400 	.word	0x00f42400
 80080fc:	0800b4ac 	.word	0x0800b4ac
      }
      else
      {
        ret = HAL_ERROR;
 8008100:	2301      	movs	r3, #1
 8008102:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	2201      	movs	r2, #1
 800810a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	2201      	movs	r2, #1
 8008112:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	2200      	movs	r2, #0
 800811a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	2200      	movs	r2, #0
 8008120:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008122:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008126:	4618      	mov	r0, r3
 8008128:	3730      	adds	r7, #48	@ 0x30
 800812a:	46bd      	mov	sp, r7
 800812c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008130 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008130:	b480      	push	{r7}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800813c:	f003 0308 	and.w	r3, r3, #8
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00a      	beq.n	800815a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	430a      	orrs	r2, r1
 8008158:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800815e:	f003 0301 	and.w	r3, r3, #1
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00a      	beq.n	800817c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	430a      	orrs	r2, r1
 800817a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008180:	f003 0302 	and.w	r3, r3, #2
 8008184:	2b00      	cmp	r3, #0
 8008186:	d00a      	beq.n	800819e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	430a      	orrs	r2, r1
 800819c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081a2:	f003 0304 	and.w	r3, r3, #4
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d00a      	beq.n	80081c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	430a      	orrs	r2, r1
 80081be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081c4:	f003 0310 	and.w	r3, r3, #16
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d00a      	beq.n	80081e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	430a      	orrs	r2, r1
 80081e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081e6:	f003 0320 	and.w	r3, r3, #32
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d00a      	beq.n	8008204 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	430a      	orrs	r2, r1
 8008202:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008208:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800820c:	2b00      	cmp	r3, #0
 800820e:	d01a      	beq.n	8008246 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	430a      	orrs	r2, r1
 8008224:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800822a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800822e:	d10a      	bne.n	8008246 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	430a      	orrs	r2, r1
 8008244:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800824a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800824e:	2b00      	cmp	r3, #0
 8008250:	d00a      	beq.n	8008268 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	430a      	orrs	r2, r1
 8008266:	605a      	str	r2, [r3, #4]
  }
}
 8008268:	bf00      	nop
 800826a:	370c      	adds	r7, #12
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b098      	sub	sp, #96	@ 0x60
 8008278:	af02      	add	r7, sp, #8
 800827a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008284:	f7fa fcbc 	bl	8002c00 <HAL_GetTick>
 8008288:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f003 0308 	and.w	r3, r3, #8
 8008294:	2b08      	cmp	r3, #8
 8008296:	d12f      	bne.n	80082f8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008298:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800829c:	9300      	str	r3, [sp, #0]
 800829e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082a0:	2200      	movs	r2, #0
 80082a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 f88e 	bl	80083c8 <UART_WaitOnFlagUntilTimeout>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d022      	beq.n	80082f8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ba:	e853 3f00 	ldrex	r3, [r3]
 80082be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80082c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	461a      	mov	r2, r3
 80082ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80082d2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80082d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80082d8:	e841 2300 	strex	r3, r2, [r1]
 80082dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80082de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d1e6      	bne.n	80082b2 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2220      	movs	r2, #32
 80082e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082f4:	2303      	movs	r3, #3
 80082f6:	e063      	b.n	80083c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f003 0304 	and.w	r3, r3, #4
 8008302:	2b04      	cmp	r3, #4
 8008304:	d149      	bne.n	800839a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008306:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800830a:	9300      	str	r3, [sp, #0]
 800830c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800830e:	2200      	movs	r2, #0
 8008310:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 f857 	bl	80083c8 <UART_WaitOnFlagUntilTimeout>
 800831a:	4603      	mov	r3, r0
 800831c:	2b00      	cmp	r3, #0
 800831e:	d03c      	beq.n	800839a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008328:	e853 3f00 	ldrex	r3, [r3]
 800832c:	623b      	str	r3, [r7, #32]
   return(result);
 800832e:	6a3b      	ldr	r3, [r7, #32]
 8008330:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008334:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	461a      	mov	r2, r3
 800833c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800833e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008340:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008342:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008344:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008346:	e841 2300 	strex	r3, r2, [r1]
 800834a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800834c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800834e:	2b00      	cmp	r3, #0
 8008350:	d1e6      	bne.n	8008320 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	3308      	adds	r3, #8
 8008358:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	e853 3f00 	ldrex	r3, [r3]
 8008360:	60fb      	str	r3, [r7, #12]
   return(result);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f023 0301 	bic.w	r3, r3, #1
 8008368:	64bb      	str	r3, [r7, #72]	@ 0x48
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	3308      	adds	r3, #8
 8008370:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008372:	61fa      	str	r2, [r7, #28]
 8008374:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008376:	69b9      	ldr	r1, [r7, #24]
 8008378:	69fa      	ldr	r2, [r7, #28]
 800837a:	e841 2300 	strex	r3, r2, [r1]
 800837e:	617b      	str	r3, [r7, #20]
   return(result);
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d1e5      	bne.n	8008352 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2220      	movs	r2, #32
 800838a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008396:	2303      	movs	r3, #3
 8008398:	e012      	b.n	80083c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2220      	movs	r2, #32
 800839e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2220      	movs	r2, #32
 80083a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2200      	movs	r2, #0
 80083ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80083be:	2300      	movs	r3, #0
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3758      	adds	r7, #88	@ 0x58
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	603b      	str	r3, [r7, #0]
 80083d4:	4613      	mov	r3, r2
 80083d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083d8:	e04f      	b.n	800847a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80083e0:	d04b      	beq.n	800847a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083e2:	f7fa fc0d 	bl	8002c00 <HAL_GetTick>
 80083e6:	4602      	mov	r2, r0
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	1ad3      	subs	r3, r2, r3
 80083ec:	69ba      	ldr	r2, [r7, #24]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d302      	bcc.n	80083f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80083f2:	69bb      	ldr	r3, [r7, #24]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d101      	bne.n	80083fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80083f8:	2303      	movs	r3, #3
 80083fa:	e04e      	b.n	800849a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f003 0304 	and.w	r3, r3, #4
 8008406:	2b00      	cmp	r3, #0
 8008408:	d037      	beq.n	800847a <UART_WaitOnFlagUntilTimeout+0xb2>
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	2b80      	cmp	r3, #128	@ 0x80
 800840e:	d034      	beq.n	800847a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	2b40      	cmp	r3, #64	@ 0x40
 8008414:	d031      	beq.n	800847a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	69db      	ldr	r3, [r3, #28]
 800841c:	f003 0308 	and.w	r3, r3, #8
 8008420:	2b08      	cmp	r3, #8
 8008422:	d110      	bne.n	8008446 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	2208      	movs	r2, #8
 800842a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800842c:	68f8      	ldr	r0, [r7, #12]
 800842e:	f000 f838 	bl	80084a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2208      	movs	r2, #8
 8008436:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2200      	movs	r2, #0
 800843e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	e029      	b.n	800849a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	69db      	ldr	r3, [r3, #28]
 800844c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008450:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008454:	d111      	bne.n	800847a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800845e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008460:	68f8      	ldr	r0, [r7, #12]
 8008462:	f000 f81e 	bl	80084a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2220      	movs	r2, #32
 800846a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2200      	movs	r2, #0
 8008472:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008476:	2303      	movs	r3, #3
 8008478:	e00f      	b.n	800849a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	69da      	ldr	r2, [r3, #28]
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	4013      	ands	r3, r2
 8008484:	68ba      	ldr	r2, [r7, #8]
 8008486:	429a      	cmp	r2, r3
 8008488:	bf0c      	ite	eq
 800848a:	2301      	moveq	r3, #1
 800848c:	2300      	movne	r3, #0
 800848e:	b2db      	uxtb	r3, r3
 8008490:	461a      	mov	r2, r3
 8008492:	79fb      	ldrb	r3, [r7, #7]
 8008494:	429a      	cmp	r2, r3
 8008496:	d0a0      	beq.n	80083da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008498:	2300      	movs	r3, #0
}
 800849a:	4618      	mov	r0, r3
 800849c:	3710      	adds	r7, #16
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}

080084a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084a2:	b480      	push	{r7}
 80084a4:	b095      	sub	sp, #84	@ 0x54
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084b2:	e853 3f00 	ldrex	r3, [r3]
 80084b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80084b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80084be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	461a      	mov	r2, r3
 80084c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80084ca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80084ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80084d0:	e841 2300 	strex	r3, r2, [r1]
 80084d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80084d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d1e6      	bne.n	80084aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	3308      	adds	r3, #8
 80084e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e4:	6a3b      	ldr	r3, [r7, #32]
 80084e6:	e853 3f00 	ldrex	r3, [r3]
 80084ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80084f2:	f023 0301 	bic.w	r3, r3, #1
 80084f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	3308      	adds	r3, #8
 80084fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008500:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008502:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008504:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008506:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008508:	e841 2300 	strex	r3, r2, [r1]
 800850c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800850e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008510:	2b00      	cmp	r3, #0
 8008512:	d1e3      	bne.n	80084dc <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008518:	2b01      	cmp	r3, #1
 800851a:	d118      	bne.n	800854e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	e853 3f00 	ldrex	r3, [r3]
 8008528:	60bb      	str	r3, [r7, #8]
   return(result);
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	f023 0310 	bic.w	r3, r3, #16
 8008530:	647b      	str	r3, [r7, #68]	@ 0x44
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	461a      	mov	r2, r3
 8008538:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800853a:	61bb      	str	r3, [r7, #24]
 800853c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800853e:	6979      	ldr	r1, [r7, #20]
 8008540:	69ba      	ldr	r2, [r7, #24]
 8008542:	e841 2300 	strex	r3, r2, [r1]
 8008546:	613b      	str	r3, [r7, #16]
   return(result);
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d1e6      	bne.n	800851c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2220      	movs	r2, #32
 8008552:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008562:	bf00      	nop
 8008564:	3754      	adds	r7, #84	@ 0x54
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr

0800856e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800856e:	b480      	push	{r7}
 8008570:	b085      	sub	sp, #20
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800857c:	2b01      	cmp	r3, #1
 800857e:	d101      	bne.n	8008584 <HAL_UARTEx_DisableFifoMode+0x16>
 8008580:	2302      	movs	r3, #2
 8008582:	e027      	b.n	80085d4 <HAL_UARTEx_DisableFifoMode+0x66>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2201      	movs	r2, #1
 8008588:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2224      	movs	r2, #36	@ 0x24
 8008590:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f022 0201 	bic.w	r2, r2, #1
 80085aa:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80085b2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	68fa      	ldr	r2, [r7, #12]
 80085c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2220      	movs	r2, #32
 80085c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2200      	movs	r2, #0
 80085ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80085d2:	2300      	movs	r3, #0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3714      	adds	r7, #20
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d101      	bne.n	80085f8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80085f4:	2302      	movs	r3, #2
 80085f6:	e02d      	b.n	8008654 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2224      	movs	r2, #36	@ 0x24
 8008604:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f022 0201 	bic.w	r2, r2, #1
 800861e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	683a      	ldr	r2, [r7, #0]
 8008630:	430a      	orrs	r2, r1
 8008632:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 f84f 	bl	80086d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	68fa      	ldr	r2, [r7, #12]
 8008640:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2220      	movs	r2, #32
 8008646:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2200      	movs	r2, #0
 800864e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008652:	2300      	movs	r3, #0
}
 8008654:	4618      	mov	r0, r3
 8008656:	3710      	adds	r7, #16
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800866c:	2b01      	cmp	r3, #1
 800866e:	d101      	bne.n	8008674 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008670:	2302      	movs	r3, #2
 8008672:	e02d      	b.n	80086d0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2201      	movs	r2, #1
 8008678:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2224      	movs	r2, #36	@ 0x24
 8008680:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f022 0201 	bic.w	r2, r2, #1
 800869a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	683a      	ldr	r2, [r7, #0]
 80086ac:	430a      	orrs	r2, r1
 80086ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 f811 	bl	80086d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	68fa      	ldr	r2, [r7, #12]
 80086bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2220      	movs	r2, #32
 80086c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80086ce:	2300      	movs	r3, #0
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3710      	adds	r7, #16
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80086d8:	b480      	push	{r7}
 80086da:	b085      	sub	sp, #20
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d108      	bne.n	80086fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2201      	movs	r2, #1
 80086ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2201      	movs	r2, #1
 80086f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80086f8:	e031      	b.n	800875e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80086fa:	2308      	movs	r3, #8
 80086fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80086fe:	2308      	movs	r3, #8
 8008700:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	0e5b      	lsrs	r3, r3, #25
 800870a:	b2db      	uxtb	r3, r3
 800870c:	f003 0307 	and.w	r3, r3, #7
 8008710:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	0f5b      	lsrs	r3, r3, #29
 800871a:	b2db      	uxtb	r3, r3
 800871c:	f003 0307 	and.w	r3, r3, #7
 8008720:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008722:	7bbb      	ldrb	r3, [r7, #14]
 8008724:	7b3a      	ldrb	r2, [r7, #12]
 8008726:	4911      	ldr	r1, [pc, #68]	@ (800876c <UARTEx_SetNbDataToProcess+0x94>)
 8008728:	5c8a      	ldrb	r2, [r1, r2]
 800872a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800872e:	7b3a      	ldrb	r2, [r7, #12]
 8008730:	490f      	ldr	r1, [pc, #60]	@ (8008770 <UARTEx_SetNbDataToProcess+0x98>)
 8008732:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008734:	fb93 f3f2 	sdiv	r3, r3, r2
 8008738:	b29a      	uxth	r2, r3
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008740:	7bfb      	ldrb	r3, [r7, #15]
 8008742:	7b7a      	ldrb	r2, [r7, #13]
 8008744:	4909      	ldr	r1, [pc, #36]	@ (800876c <UARTEx_SetNbDataToProcess+0x94>)
 8008746:	5c8a      	ldrb	r2, [r1, r2]
 8008748:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800874c:	7b7a      	ldrb	r2, [r7, #13]
 800874e:	4908      	ldr	r1, [pc, #32]	@ (8008770 <UARTEx_SetNbDataToProcess+0x98>)
 8008750:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008752:	fb93 f3f2 	sdiv	r3, r3, r2
 8008756:	b29a      	uxth	r2, r3
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800875e:	bf00      	nop
 8008760:	3714      	adds	r7, #20
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr
 800876a:	bf00      	nop
 800876c:	0800b4c4 	.word	0x0800b4c4
 8008770:	0800b4cc 	.word	0x0800b4cc

08008774 <__cvt>:
 8008774:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008778:	ec57 6b10 	vmov	r6, r7, d0
 800877c:	2f00      	cmp	r7, #0
 800877e:	460c      	mov	r4, r1
 8008780:	4619      	mov	r1, r3
 8008782:	463b      	mov	r3, r7
 8008784:	bfbb      	ittet	lt
 8008786:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800878a:	461f      	movlt	r7, r3
 800878c:	2300      	movge	r3, #0
 800878e:	232d      	movlt	r3, #45	@ 0x2d
 8008790:	700b      	strb	r3, [r1, #0]
 8008792:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008794:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008798:	4691      	mov	r9, r2
 800879a:	f023 0820 	bic.w	r8, r3, #32
 800879e:	bfbc      	itt	lt
 80087a0:	4632      	movlt	r2, r6
 80087a2:	4616      	movlt	r6, r2
 80087a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80087a8:	d005      	beq.n	80087b6 <__cvt+0x42>
 80087aa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80087ae:	d100      	bne.n	80087b2 <__cvt+0x3e>
 80087b0:	3401      	adds	r4, #1
 80087b2:	2102      	movs	r1, #2
 80087b4:	e000      	b.n	80087b8 <__cvt+0x44>
 80087b6:	2103      	movs	r1, #3
 80087b8:	ab03      	add	r3, sp, #12
 80087ba:	9301      	str	r3, [sp, #4]
 80087bc:	ab02      	add	r3, sp, #8
 80087be:	9300      	str	r3, [sp, #0]
 80087c0:	ec47 6b10 	vmov	d0, r6, r7
 80087c4:	4653      	mov	r3, sl
 80087c6:	4622      	mov	r2, r4
 80087c8:	f000 fe2e 	bl	8009428 <_dtoa_r>
 80087cc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80087d0:	4605      	mov	r5, r0
 80087d2:	d119      	bne.n	8008808 <__cvt+0x94>
 80087d4:	f019 0f01 	tst.w	r9, #1
 80087d8:	d00e      	beq.n	80087f8 <__cvt+0x84>
 80087da:	eb00 0904 	add.w	r9, r0, r4
 80087de:	2200      	movs	r2, #0
 80087e0:	2300      	movs	r3, #0
 80087e2:	4630      	mov	r0, r6
 80087e4:	4639      	mov	r1, r7
 80087e6:	f7f8 f987 	bl	8000af8 <__aeabi_dcmpeq>
 80087ea:	b108      	cbz	r0, 80087f0 <__cvt+0x7c>
 80087ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80087f0:	2230      	movs	r2, #48	@ 0x30
 80087f2:	9b03      	ldr	r3, [sp, #12]
 80087f4:	454b      	cmp	r3, r9
 80087f6:	d31e      	bcc.n	8008836 <__cvt+0xc2>
 80087f8:	9b03      	ldr	r3, [sp, #12]
 80087fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80087fc:	1b5b      	subs	r3, r3, r5
 80087fe:	4628      	mov	r0, r5
 8008800:	6013      	str	r3, [r2, #0]
 8008802:	b004      	add	sp, #16
 8008804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008808:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800880c:	eb00 0904 	add.w	r9, r0, r4
 8008810:	d1e5      	bne.n	80087de <__cvt+0x6a>
 8008812:	7803      	ldrb	r3, [r0, #0]
 8008814:	2b30      	cmp	r3, #48	@ 0x30
 8008816:	d10a      	bne.n	800882e <__cvt+0xba>
 8008818:	2200      	movs	r2, #0
 800881a:	2300      	movs	r3, #0
 800881c:	4630      	mov	r0, r6
 800881e:	4639      	mov	r1, r7
 8008820:	f7f8 f96a 	bl	8000af8 <__aeabi_dcmpeq>
 8008824:	b918      	cbnz	r0, 800882e <__cvt+0xba>
 8008826:	f1c4 0401 	rsb	r4, r4, #1
 800882a:	f8ca 4000 	str.w	r4, [sl]
 800882e:	f8da 3000 	ldr.w	r3, [sl]
 8008832:	4499      	add	r9, r3
 8008834:	e7d3      	b.n	80087de <__cvt+0x6a>
 8008836:	1c59      	adds	r1, r3, #1
 8008838:	9103      	str	r1, [sp, #12]
 800883a:	701a      	strb	r2, [r3, #0]
 800883c:	e7d9      	b.n	80087f2 <__cvt+0x7e>

0800883e <__exponent>:
 800883e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008840:	2900      	cmp	r1, #0
 8008842:	bfba      	itte	lt
 8008844:	4249      	neglt	r1, r1
 8008846:	232d      	movlt	r3, #45	@ 0x2d
 8008848:	232b      	movge	r3, #43	@ 0x2b
 800884a:	2909      	cmp	r1, #9
 800884c:	7002      	strb	r2, [r0, #0]
 800884e:	7043      	strb	r3, [r0, #1]
 8008850:	dd29      	ble.n	80088a6 <__exponent+0x68>
 8008852:	f10d 0307 	add.w	r3, sp, #7
 8008856:	461d      	mov	r5, r3
 8008858:	270a      	movs	r7, #10
 800885a:	461a      	mov	r2, r3
 800885c:	fbb1 f6f7 	udiv	r6, r1, r7
 8008860:	fb07 1416 	mls	r4, r7, r6, r1
 8008864:	3430      	adds	r4, #48	@ 0x30
 8008866:	f802 4c01 	strb.w	r4, [r2, #-1]
 800886a:	460c      	mov	r4, r1
 800886c:	2c63      	cmp	r4, #99	@ 0x63
 800886e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8008872:	4631      	mov	r1, r6
 8008874:	dcf1      	bgt.n	800885a <__exponent+0x1c>
 8008876:	3130      	adds	r1, #48	@ 0x30
 8008878:	1e94      	subs	r4, r2, #2
 800887a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800887e:	1c41      	adds	r1, r0, #1
 8008880:	4623      	mov	r3, r4
 8008882:	42ab      	cmp	r3, r5
 8008884:	d30a      	bcc.n	800889c <__exponent+0x5e>
 8008886:	f10d 0309 	add.w	r3, sp, #9
 800888a:	1a9b      	subs	r3, r3, r2
 800888c:	42ac      	cmp	r4, r5
 800888e:	bf88      	it	hi
 8008890:	2300      	movhi	r3, #0
 8008892:	3302      	adds	r3, #2
 8008894:	4403      	add	r3, r0
 8008896:	1a18      	subs	r0, r3, r0
 8008898:	b003      	add	sp, #12
 800889a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800889c:	f813 6b01 	ldrb.w	r6, [r3], #1
 80088a0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80088a4:	e7ed      	b.n	8008882 <__exponent+0x44>
 80088a6:	2330      	movs	r3, #48	@ 0x30
 80088a8:	3130      	adds	r1, #48	@ 0x30
 80088aa:	7083      	strb	r3, [r0, #2]
 80088ac:	70c1      	strb	r1, [r0, #3]
 80088ae:	1d03      	adds	r3, r0, #4
 80088b0:	e7f1      	b.n	8008896 <__exponent+0x58>
	...

080088b4 <_printf_float>:
 80088b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b8:	b08d      	sub	sp, #52	@ 0x34
 80088ba:	460c      	mov	r4, r1
 80088bc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80088c0:	4616      	mov	r6, r2
 80088c2:	461f      	mov	r7, r3
 80088c4:	4605      	mov	r5, r0
 80088c6:	f000 fce7 	bl	8009298 <_localeconv_r>
 80088ca:	6803      	ldr	r3, [r0, #0]
 80088cc:	9304      	str	r3, [sp, #16]
 80088ce:	4618      	mov	r0, r3
 80088d0:	f7f7 fce6 	bl	80002a0 <strlen>
 80088d4:	2300      	movs	r3, #0
 80088d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80088d8:	f8d8 3000 	ldr.w	r3, [r8]
 80088dc:	9005      	str	r0, [sp, #20]
 80088de:	3307      	adds	r3, #7
 80088e0:	f023 0307 	bic.w	r3, r3, #7
 80088e4:	f103 0208 	add.w	r2, r3, #8
 80088e8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80088ec:	f8d4 b000 	ldr.w	fp, [r4]
 80088f0:	f8c8 2000 	str.w	r2, [r8]
 80088f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80088f8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80088fc:	9307      	str	r3, [sp, #28]
 80088fe:	f8cd 8018 	str.w	r8, [sp, #24]
 8008902:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008906:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800890a:	4b9c      	ldr	r3, [pc, #624]	@ (8008b7c <_printf_float+0x2c8>)
 800890c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008910:	f7f8 f924 	bl	8000b5c <__aeabi_dcmpun>
 8008914:	bb70      	cbnz	r0, 8008974 <_printf_float+0xc0>
 8008916:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800891a:	4b98      	ldr	r3, [pc, #608]	@ (8008b7c <_printf_float+0x2c8>)
 800891c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008920:	f7f8 f8fe 	bl	8000b20 <__aeabi_dcmple>
 8008924:	bb30      	cbnz	r0, 8008974 <_printf_float+0xc0>
 8008926:	2200      	movs	r2, #0
 8008928:	2300      	movs	r3, #0
 800892a:	4640      	mov	r0, r8
 800892c:	4649      	mov	r1, r9
 800892e:	f7f8 f8ed 	bl	8000b0c <__aeabi_dcmplt>
 8008932:	b110      	cbz	r0, 800893a <_printf_float+0x86>
 8008934:	232d      	movs	r3, #45	@ 0x2d
 8008936:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800893a:	4a91      	ldr	r2, [pc, #580]	@ (8008b80 <_printf_float+0x2cc>)
 800893c:	4b91      	ldr	r3, [pc, #580]	@ (8008b84 <_printf_float+0x2d0>)
 800893e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008942:	bf94      	ite	ls
 8008944:	4690      	movls	r8, r2
 8008946:	4698      	movhi	r8, r3
 8008948:	2303      	movs	r3, #3
 800894a:	6123      	str	r3, [r4, #16]
 800894c:	f02b 0304 	bic.w	r3, fp, #4
 8008950:	6023      	str	r3, [r4, #0]
 8008952:	f04f 0900 	mov.w	r9, #0
 8008956:	9700      	str	r7, [sp, #0]
 8008958:	4633      	mov	r3, r6
 800895a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800895c:	4621      	mov	r1, r4
 800895e:	4628      	mov	r0, r5
 8008960:	f000 f9d2 	bl	8008d08 <_printf_common>
 8008964:	3001      	adds	r0, #1
 8008966:	f040 808d 	bne.w	8008a84 <_printf_float+0x1d0>
 800896a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800896e:	b00d      	add	sp, #52	@ 0x34
 8008970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008974:	4642      	mov	r2, r8
 8008976:	464b      	mov	r3, r9
 8008978:	4640      	mov	r0, r8
 800897a:	4649      	mov	r1, r9
 800897c:	f7f8 f8ee 	bl	8000b5c <__aeabi_dcmpun>
 8008980:	b140      	cbz	r0, 8008994 <_printf_float+0xe0>
 8008982:	464b      	mov	r3, r9
 8008984:	2b00      	cmp	r3, #0
 8008986:	bfbc      	itt	lt
 8008988:	232d      	movlt	r3, #45	@ 0x2d
 800898a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800898e:	4a7e      	ldr	r2, [pc, #504]	@ (8008b88 <_printf_float+0x2d4>)
 8008990:	4b7e      	ldr	r3, [pc, #504]	@ (8008b8c <_printf_float+0x2d8>)
 8008992:	e7d4      	b.n	800893e <_printf_float+0x8a>
 8008994:	6863      	ldr	r3, [r4, #4]
 8008996:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800899a:	9206      	str	r2, [sp, #24]
 800899c:	1c5a      	adds	r2, r3, #1
 800899e:	d13b      	bne.n	8008a18 <_printf_float+0x164>
 80089a0:	2306      	movs	r3, #6
 80089a2:	6063      	str	r3, [r4, #4]
 80089a4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80089a8:	2300      	movs	r3, #0
 80089aa:	6022      	str	r2, [r4, #0]
 80089ac:	9303      	str	r3, [sp, #12]
 80089ae:	ab0a      	add	r3, sp, #40	@ 0x28
 80089b0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80089b4:	ab09      	add	r3, sp, #36	@ 0x24
 80089b6:	9300      	str	r3, [sp, #0]
 80089b8:	6861      	ldr	r1, [r4, #4]
 80089ba:	ec49 8b10 	vmov	d0, r8, r9
 80089be:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80089c2:	4628      	mov	r0, r5
 80089c4:	f7ff fed6 	bl	8008774 <__cvt>
 80089c8:	9b06      	ldr	r3, [sp, #24]
 80089ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80089cc:	2b47      	cmp	r3, #71	@ 0x47
 80089ce:	4680      	mov	r8, r0
 80089d0:	d129      	bne.n	8008a26 <_printf_float+0x172>
 80089d2:	1cc8      	adds	r0, r1, #3
 80089d4:	db02      	blt.n	80089dc <_printf_float+0x128>
 80089d6:	6863      	ldr	r3, [r4, #4]
 80089d8:	4299      	cmp	r1, r3
 80089da:	dd41      	ble.n	8008a60 <_printf_float+0x1ac>
 80089dc:	f1aa 0a02 	sub.w	sl, sl, #2
 80089e0:	fa5f fa8a 	uxtb.w	sl, sl
 80089e4:	3901      	subs	r1, #1
 80089e6:	4652      	mov	r2, sl
 80089e8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80089ec:	9109      	str	r1, [sp, #36]	@ 0x24
 80089ee:	f7ff ff26 	bl	800883e <__exponent>
 80089f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80089f4:	1813      	adds	r3, r2, r0
 80089f6:	2a01      	cmp	r2, #1
 80089f8:	4681      	mov	r9, r0
 80089fa:	6123      	str	r3, [r4, #16]
 80089fc:	dc02      	bgt.n	8008a04 <_printf_float+0x150>
 80089fe:	6822      	ldr	r2, [r4, #0]
 8008a00:	07d2      	lsls	r2, r2, #31
 8008a02:	d501      	bpl.n	8008a08 <_printf_float+0x154>
 8008a04:	3301      	adds	r3, #1
 8008a06:	6123      	str	r3, [r4, #16]
 8008a08:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d0a2      	beq.n	8008956 <_printf_float+0xa2>
 8008a10:	232d      	movs	r3, #45	@ 0x2d
 8008a12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a16:	e79e      	b.n	8008956 <_printf_float+0xa2>
 8008a18:	9a06      	ldr	r2, [sp, #24]
 8008a1a:	2a47      	cmp	r2, #71	@ 0x47
 8008a1c:	d1c2      	bne.n	80089a4 <_printf_float+0xf0>
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d1c0      	bne.n	80089a4 <_printf_float+0xf0>
 8008a22:	2301      	movs	r3, #1
 8008a24:	e7bd      	b.n	80089a2 <_printf_float+0xee>
 8008a26:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008a2a:	d9db      	bls.n	80089e4 <_printf_float+0x130>
 8008a2c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008a30:	d118      	bne.n	8008a64 <_printf_float+0x1b0>
 8008a32:	2900      	cmp	r1, #0
 8008a34:	6863      	ldr	r3, [r4, #4]
 8008a36:	dd0b      	ble.n	8008a50 <_printf_float+0x19c>
 8008a38:	6121      	str	r1, [r4, #16]
 8008a3a:	b913      	cbnz	r3, 8008a42 <_printf_float+0x18e>
 8008a3c:	6822      	ldr	r2, [r4, #0]
 8008a3e:	07d0      	lsls	r0, r2, #31
 8008a40:	d502      	bpl.n	8008a48 <_printf_float+0x194>
 8008a42:	3301      	adds	r3, #1
 8008a44:	440b      	add	r3, r1
 8008a46:	6123      	str	r3, [r4, #16]
 8008a48:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008a4a:	f04f 0900 	mov.w	r9, #0
 8008a4e:	e7db      	b.n	8008a08 <_printf_float+0x154>
 8008a50:	b913      	cbnz	r3, 8008a58 <_printf_float+0x1a4>
 8008a52:	6822      	ldr	r2, [r4, #0]
 8008a54:	07d2      	lsls	r2, r2, #31
 8008a56:	d501      	bpl.n	8008a5c <_printf_float+0x1a8>
 8008a58:	3302      	adds	r3, #2
 8008a5a:	e7f4      	b.n	8008a46 <_printf_float+0x192>
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	e7f2      	b.n	8008a46 <_printf_float+0x192>
 8008a60:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008a64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a66:	4299      	cmp	r1, r3
 8008a68:	db05      	blt.n	8008a76 <_printf_float+0x1c2>
 8008a6a:	6823      	ldr	r3, [r4, #0]
 8008a6c:	6121      	str	r1, [r4, #16]
 8008a6e:	07d8      	lsls	r0, r3, #31
 8008a70:	d5ea      	bpl.n	8008a48 <_printf_float+0x194>
 8008a72:	1c4b      	adds	r3, r1, #1
 8008a74:	e7e7      	b.n	8008a46 <_printf_float+0x192>
 8008a76:	2900      	cmp	r1, #0
 8008a78:	bfd4      	ite	le
 8008a7a:	f1c1 0202 	rsble	r2, r1, #2
 8008a7e:	2201      	movgt	r2, #1
 8008a80:	4413      	add	r3, r2
 8008a82:	e7e0      	b.n	8008a46 <_printf_float+0x192>
 8008a84:	6823      	ldr	r3, [r4, #0]
 8008a86:	055a      	lsls	r2, r3, #21
 8008a88:	d407      	bmi.n	8008a9a <_printf_float+0x1e6>
 8008a8a:	6923      	ldr	r3, [r4, #16]
 8008a8c:	4642      	mov	r2, r8
 8008a8e:	4631      	mov	r1, r6
 8008a90:	4628      	mov	r0, r5
 8008a92:	47b8      	blx	r7
 8008a94:	3001      	adds	r0, #1
 8008a96:	d12b      	bne.n	8008af0 <_printf_float+0x23c>
 8008a98:	e767      	b.n	800896a <_printf_float+0xb6>
 8008a9a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008a9e:	f240 80dd 	bls.w	8008c5c <_printf_float+0x3a8>
 8008aa2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	f7f8 f825 	bl	8000af8 <__aeabi_dcmpeq>
 8008aae:	2800      	cmp	r0, #0
 8008ab0:	d033      	beq.n	8008b1a <_printf_float+0x266>
 8008ab2:	4a37      	ldr	r2, [pc, #220]	@ (8008b90 <_printf_float+0x2dc>)
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	4631      	mov	r1, r6
 8008ab8:	4628      	mov	r0, r5
 8008aba:	47b8      	blx	r7
 8008abc:	3001      	adds	r0, #1
 8008abe:	f43f af54 	beq.w	800896a <_printf_float+0xb6>
 8008ac2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008ac6:	4543      	cmp	r3, r8
 8008ac8:	db02      	blt.n	8008ad0 <_printf_float+0x21c>
 8008aca:	6823      	ldr	r3, [r4, #0]
 8008acc:	07d8      	lsls	r0, r3, #31
 8008ace:	d50f      	bpl.n	8008af0 <_printf_float+0x23c>
 8008ad0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ad4:	4631      	mov	r1, r6
 8008ad6:	4628      	mov	r0, r5
 8008ad8:	47b8      	blx	r7
 8008ada:	3001      	adds	r0, #1
 8008adc:	f43f af45 	beq.w	800896a <_printf_float+0xb6>
 8008ae0:	f04f 0900 	mov.w	r9, #0
 8008ae4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008ae8:	f104 0a1a 	add.w	sl, r4, #26
 8008aec:	45c8      	cmp	r8, r9
 8008aee:	dc09      	bgt.n	8008b04 <_printf_float+0x250>
 8008af0:	6823      	ldr	r3, [r4, #0]
 8008af2:	079b      	lsls	r3, r3, #30
 8008af4:	f100 8103 	bmi.w	8008cfe <_printf_float+0x44a>
 8008af8:	68e0      	ldr	r0, [r4, #12]
 8008afa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008afc:	4298      	cmp	r0, r3
 8008afe:	bfb8      	it	lt
 8008b00:	4618      	movlt	r0, r3
 8008b02:	e734      	b.n	800896e <_printf_float+0xba>
 8008b04:	2301      	movs	r3, #1
 8008b06:	4652      	mov	r2, sl
 8008b08:	4631      	mov	r1, r6
 8008b0a:	4628      	mov	r0, r5
 8008b0c:	47b8      	blx	r7
 8008b0e:	3001      	adds	r0, #1
 8008b10:	f43f af2b 	beq.w	800896a <_printf_float+0xb6>
 8008b14:	f109 0901 	add.w	r9, r9, #1
 8008b18:	e7e8      	b.n	8008aec <_printf_float+0x238>
 8008b1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	dc39      	bgt.n	8008b94 <_printf_float+0x2e0>
 8008b20:	4a1b      	ldr	r2, [pc, #108]	@ (8008b90 <_printf_float+0x2dc>)
 8008b22:	2301      	movs	r3, #1
 8008b24:	4631      	mov	r1, r6
 8008b26:	4628      	mov	r0, r5
 8008b28:	47b8      	blx	r7
 8008b2a:	3001      	adds	r0, #1
 8008b2c:	f43f af1d 	beq.w	800896a <_printf_float+0xb6>
 8008b30:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008b34:	ea59 0303 	orrs.w	r3, r9, r3
 8008b38:	d102      	bne.n	8008b40 <_printf_float+0x28c>
 8008b3a:	6823      	ldr	r3, [r4, #0]
 8008b3c:	07d9      	lsls	r1, r3, #31
 8008b3e:	d5d7      	bpl.n	8008af0 <_printf_float+0x23c>
 8008b40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b44:	4631      	mov	r1, r6
 8008b46:	4628      	mov	r0, r5
 8008b48:	47b8      	blx	r7
 8008b4a:	3001      	adds	r0, #1
 8008b4c:	f43f af0d 	beq.w	800896a <_printf_float+0xb6>
 8008b50:	f04f 0a00 	mov.w	sl, #0
 8008b54:	f104 0b1a 	add.w	fp, r4, #26
 8008b58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b5a:	425b      	negs	r3, r3
 8008b5c:	4553      	cmp	r3, sl
 8008b5e:	dc01      	bgt.n	8008b64 <_printf_float+0x2b0>
 8008b60:	464b      	mov	r3, r9
 8008b62:	e793      	b.n	8008a8c <_printf_float+0x1d8>
 8008b64:	2301      	movs	r3, #1
 8008b66:	465a      	mov	r2, fp
 8008b68:	4631      	mov	r1, r6
 8008b6a:	4628      	mov	r0, r5
 8008b6c:	47b8      	blx	r7
 8008b6e:	3001      	adds	r0, #1
 8008b70:	f43f aefb 	beq.w	800896a <_printf_float+0xb6>
 8008b74:	f10a 0a01 	add.w	sl, sl, #1
 8008b78:	e7ee      	b.n	8008b58 <_printf_float+0x2a4>
 8008b7a:	bf00      	nop
 8008b7c:	7fefffff 	.word	0x7fefffff
 8008b80:	0800b4d4 	.word	0x0800b4d4
 8008b84:	0800b4d8 	.word	0x0800b4d8
 8008b88:	0800b4dc 	.word	0x0800b4dc
 8008b8c:	0800b4e0 	.word	0x0800b4e0
 8008b90:	0800b4e4 	.word	0x0800b4e4
 8008b94:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008b96:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008b9a:	4553      	cmp	r3, sl
 8008b9c:	bfa8      	it	ge
 8008b9e:	4653      	movge	r3, sl
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	4699      	mov	r9, r3
 8008ba4:	dc36      	bgt.n	8008c14 <_printf_float+0x360>
 8008ba6:	f04f 0b00 	mov.w	fp, #0
 8008baa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008bae:	f104 021a 	add.w	r2, r4, #26
 8008bb2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008bb4:	9306      	str	r3, [sp, #24]
 8008bb6:	eba3 0309 	sub.w	r3, r3, r9
 8008bba:	455b      	cmp	r3, fp
 8008bbc:	dc31      	bgt.n	8008c22 <_printf_float+0x36e>
 8008bbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bc0:	459a      	cmp	sl, r3
 8008bc2:	dc3a      	bgt.n	8008c3a <_printf_float+0x386>
 8008bc4:	6823      	ldr	r3, [r4, #0]
 8008bc6:	07da      	lsls	r2, r3, #31
 8008bc8:	d437      	bmi.n	8008c3a <_printf_float+0x386>
 8008bca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bcc:	ebaa 0903 	sub.w	r9, sl, r3
 8008bd0:	9b06      	ldr	r3, [sp, #24]
 8008bd2:	ebaa 0303 	sub.w	r3, sl, r3
 8008bd6:	4599      	cmp	r9, r3
 8008bd8:	bfa8      	it	ge
 8008bda:	4699      	movge	r9, r3
 8008bdc:	f1b9 0f00 	cmp.w	r9, #0
 8008be0:	dc33      	bgt.n	8008c4a <_printf_float+0x396>
 8008be2:	f04f 0800 	mov.w	r8, #0
 8008be6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008bea:	f104 0b1a 	add.w	fp, r4, #26
 8008bee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bf0:	ebaa 0303 	sub.w	r3, sl, r3
 8008bf4:	eba3 0309 	sub.w	r3, r3, r9
 8008bf8:	4543      	cmp	r3, r8
 8008bfa:	f77f af79 	ble.w	8008af0 <_printf_float+0x23c>
 8008bfe:	2301      	movs	r3, #1
 8008c00:	465a      	mov	r2, fp
 8008c02:	4631      	mov	r1, r6
 8008c04:	4628      	mov	r0, r5
 8008c06:	47b8      	blx	r7
 8008c08:	3001      	adds	r0, #1
 8008c0a:	f43f aeae 	beq.w	800896a <_printf_float+0xb6>
 8008c0e:	f108 0801 	add.w	r8, r8, #1
 8008c12:	e7ec      	b.n	8008bee <_printf_float+0x33a>
 8008c14:	4642      	mov	r2, r8
 8008c16:	4631      	mov	r1, r6
 8008c18:	4628      	mov	r0, r5
 8008c1a:	47b8      	blx	r7
 8008c1c:	3001      	adds	r0, #1
 8008c1e:	d1c2      	bne.n	8008ba6 <_printf_float+0x2f2>
 8008c20:	e6a3      	b.n	800896a <_printf_float+0xb6>
 8008c22:	2301      	movs	r3, #1
 8008c24:	4631      	mov	r1, r6
 8008c26:	4628      	mov	r0, r5
 8008c28:	9206      	str	r2, [sp, #24]
 8008c2a:	47b8      	blx	r7
 8008c2c:	3001      	adds	r0, #1
 8008c2e:	f43f ae9c 	beq.w	800896a <_printf_float+0xb6>
 8008c32:	9a06      	ldr	r2, [sp, #24]
 8008c34:	f10b 0b01 	add.w	fp, fp, #1
 8008c38:	e7bb      	b.n	8008bb2 <_printf_float+0x2fe>
 8008c3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c3e:	4631      	mov	r1, r6
 8008c40:	4628      	mov	r0, r5
 8008c42:	47b8      	blx	r7
 8008c44:	3001      	adds	r0, #1
 8008c46:	d1c0      	bne.n	8008bca <_printf_float+0x316>
 8008c48:	e68f      	b.n	800896a <_printf_float+0xb6>
 8008c4a:	9a06      	ldr	r2, [sp, #24]
 8008c4c:	464b      	mov	r3, r9
 8008c4e:	4442      	add	r2, r8
 8008c50:	4631      	mov	r1, r6
 8008c52:	4628      	mov	r0, r5
 8008c54:	47b8      	blx	r7
 8008c56:	3001      	adds	r0, #1
 8008c58:	d1c3      	bne.n	8008be2 <_printf_float+0x32e>
 8008c5a:	e686      	b.n	800896a <_printf_float+0xb6>
 8008c5c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008c60:	f1ba 0f01 	cmp.w	sl, #1
 8008c64:	dc01      	bgt.n	8008c6a <_printf_float+0x3b6>
 8008c66:	07db      	lsls	r3, r3, #31
 8008c68:	d536      	bpl.n	8008cd8 <_printf_float+0x424>
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	4642      	mov	r2, r8
 8008c6e:	4631      	mov	r1, r6
 8008c70:	4628      	mov	r0, r5
 8008c72:	47b8      	blx	r7
 8008c74:	3001      	adds	r0, #1
 8008c76:	f43f ae78 	beq.w	800896a <_printf_float+0xb6>
 8008c7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c7e:	4631      	mov	r1, r6
 8008c80:	4628      	mov	r0, r5
 8008c82:	47b8      	blx	r7
 8008c84:	3001      	adds	r0, #1
 8008c86:	f43f ae70 	beq.w	800896a <_printf_float+0xb6>
 8008c8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008c8e:	2200      	movs	r2, #0
 8008c90:	2300      	movs	r3, #0
 8008c92:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008c96:	f7f7 ff2f 	bl	8000af8 <__aeabi_dcmpeq>
 8008c9a:	b9c0      	cbnz	r0, 8008cce <_printf_float+0x41a>
 8008c9c:	4653      	mov	r3, sl
 8008c9e:	f108 0201 	add.w	r2, r8, #1
 8008ca2:	4631      	mov	r1, r6
 8008ca4:	4628      	mov	r0, r5
 8008ca6:	47b8      	blx	r7
 8008ca8:	3001      	adds	r0, #1
 8008caa:	d10c      	bne.n	8008cc6 <_printf_float+0x412>
 8008cac:	e65d      	b.n	800896a <_printf_float+0xb6>
 8008cae:	2301      	movs	r3, #1
 8008cb0:	465a      	mov	r2, fp
 8008cb2:	4631      	mov	r1, r6
 8008cb4:	4628      	mov	r0, r5
 8008cb6:	47b8      	blx	r7
 8008cb8:	3001      	adds	r0, #1
 8008cba:	f43f ae56 	beq.w	800896a <_printf_float+0xb6>
 8008cbe:	f108 0801 	add.w	r8, r8, #1
 8008cc2:	45d0      	cmp	r8, sl
 8008cc4:	dbf3      	blt.n	8008cae <_printf_float+0x3fa>
 8008cc6:	464b      	mov	r3, r9
 8008cc8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008ccc:	e6df      	b.n	8008a8e <_printf_float+0x1da>
 8008cce:	f04f 0800 	mov.w	r8, #0
 8008cd2:	f104 0b1a 	add.w	fp, r4, #26
 8008cd6:	e7f4      	b.n	8008cc2 <_printf_float+0x40e>
 8008cd8:	2301      	movs	r3, #1
 8008cda:	4642      	mov	r2, r8
 8008cdc:	e7e1      	b.n	8008ca2 <_printf_float+0x3ee>
 8008cde:	2301      	movs	r3, #1
 8008ce0:	464a      	mov	r2, r9
 8008ce2:	4631      	mov	r1, r6
 8008ce4:	4628      	mov	r0, r5
 8008ce6:	47b8      	blx	r7
 8008ce8:	3001      	adds	r0, #1
 8008cea:	f43f ae3e 	beq.w	800896a <_printf_float+0xb6>
 8008cee:	f108 0801 	add.w	r8, r8, #1
 8008cf2:	68e3      	ldr	r3, [r4, #12]
 8008cf4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008cf6:	1a5b      	subs	r3, r3, r1
 8008cf8:	4543      	cmp	r3, r8
 8008cfa:	dcf0      	bgt.n	8008cde <_printf_float+0x42a>
 8008cfc:	e6fc      	b.n	8008af8 <_printf_float+0x244>
 8008cfe:	f04f 0800 	mov.w	r8, #0
 8008d02:	f104 0919 	add.w	r9, r4, #25
 8008d06:	e7f4      	b.n	8008cf2 <_printf_float+0x43e>

08008d08 <_printf_common>:
 8008d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d0c:	4616      	mov	r6, r2
 8008d0e:	4698      	mov	r8, r3
 8008d10:	688a      	ldr	r2, [r1, #8]
 8008d12:	690b      	ldr	r3, [r1, #16]
 8008d14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	bfb8      	it	lt
 8008d1c:	4613      	movlt	r3, r2
 8008d1e:	6033      	str	r3, [r6, #0]
 8008d20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008d24:	4607      	mov	r7, r0
 8008d26:	460c      	mov	r4, r1
 8008d28:	b10a      	cbz	r2, 8008d2e <_printf_common+0x26>
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	6033      	str	r3, [r6, #0]
 8008d2e:	6823      	ldr	r3, [r4, #0]
 8008d30:	0699      	lsls	r1, r3, #26
 8008d32:	bf42      	ittt	mi
 8008d34:	6833      	ldrmi	r3, [r6, #0]
 8008d36:	3302      	addmi	r3, #2
 8008d38:	6033      	strmi	r3, [r6, #0]
 8008d3a:	6825      	ldr	r5, [r4, #0]
 8008d3c:	f015 0506 	ands.w	r5, r5, #6
 8008d40:	d106      	bne.n	8008d50 <_printf_common+0x48>
 8008d42:	f104 0a19 	add.w	sl, r4, #25
 8008d46:	68e3      	ldr	r3, [r4, #12]
 8008d48:	6832      	ldr	r2, [r6, #0]
 8008d4a:	1a9b      	subs	r3, r3, r2
 8008d4c:	42ab      	cmp	r3, r5
 8008d4e:	dc26      	bgt.n	8008d9e <_printf_common+0x96>
 8008d50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008d54:	6822      	ldr	r2, [r4, #0]
 8008d56:	3b00      	subs	r3, #0
 8008d58:	bf18      	it	ne
 8008d5a:	2301      	movne	r3, #1
 8008d5c:	0692      	lsls	r2, r2, #26
 8008d5e:	d42b      	bmi.n	8008db8 <_printf_common+0xb0>
 8008d60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008d64:	4641      	mov	r1, r8
 8008d66:	4638      	mov	r0, r7
 8008d68:	47c8      	blx	r9
 8008d6a:	3001      	adds	r0, #1
 8008d6c:	d01e      	beq.n	8008dac <_printf_common+0xa4>
 8008d6e:	6823      	ldr	r3, [r4, #0]
 8008d70:	6922      	ldr	r2, [r4, #16]
 8008d72:	f003 0306 	and.w	r3, r3, #6
 8008d76:	2b04      	cmp	r3, #4
 8008d78:	bf02      	ittt	eq
 8008d7a:	68e5      	ldreq	r5, [r4, #12]
 8008d7c:	6833      	ldreq	r3, [r6, #0]
 8008d7e:	1aed      	subeq	r5, r5, r3
 8008d80:	68a3      	ldr	r3, [r4, #8]
 8008d82:	bf0c      	ite	eq
 8008d84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d88:	2500      	movne	r5, #0
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	bfc4      	itt	gt
 8008d8e:	1a9b      	subgt	r3, r3, r2
 8008d90:	18ed      	addgt	r5, r5, r3
 8008d92:	2600      	movs	r6, #0
 8008d94:	341a      	adds	r4, #26
 8008d96:	42b5      	cmp	r5, r6
 8008d98:	d11a      	bne.n	8008dd0 <_printf_common+0xc8>
 8008d9a:	2000      	movs	r0, #0
 8008d9c:	e008      	b.n	8008db0 <_printf_common+0xa8>
 8008d9e:	2301      	movs	r3, #1
 8008da0:	4652      	mov	r2, sl
 8008da2:	4641      	mov	r1, r8
 8008da4:	4638      	mov	r0, r7
 8008da6:	47c8      	blx	r9
 8008da8:	3001      	adds	r0, #1
 8008daa:	d103      	bne.n	8008db4 <_printf_common+0xac>
 8008dac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008db4:	3501      	adds	r5, #1
 8008db6:	e7c6      	b.n	8008d46 <_printf_common+0x3e>
 8008db8:	18e1      	adds	r1, r4, r3
 8008dba:	1c5a      	adds	r2, r3, #1
 8008dbc:	2030      	movs	r0, #48	@ 0x30
 8008dbe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008dc2:	4422      	add	r2, r4
 8008dc4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008dc8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008dcc:	3302      	adds	r3, #2
 8008dce:	e7c7      	b.n	8008d60 <_printf_common+0x58>
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	4622      	mov	r2, r4
 8008dd4:	4641      	mov	r1, r8
 8008dd6:	4638      	mov	r0, r7
 8008dd8:	47c8      	blx	r9
 8008dda:	3001      	adds	r0, #1
 8008ddc:	d0e6      	beq.n	8008dac <_printf_common+0xa4>
 8008dde:	3601      	adds	r6, #1
 8008de0:	e7d9      	b.n	8008d96 <_printf_common+0x8e>
	...

08008de4 <_printf_i>:
 8008de4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008de8:	7e0f      	ldrb	r7, [r1, #24]
 8008dea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008dec:	2f78      	cmp	r7, #120	@ 0x78
 8008dee:	4691      	mov	r9, r2
 8008df0:	4680      	mov	r8, r0
 8008df2:	460c      	mov	r4, r1
 8008df4:	469a      	mov	sl, r3
 8008df6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008dfa:	d807      	bhi.n	8008e0c <_printf_i+0x28>
 8008dfc:	2f62      	cmp	r7, #98	@ 0x62
 8008dfe:	d80a      	bhi.n	8008e16 <_printf_i+0x32>
 8008e00:	2f00      	cmp	r7, #0
 8008e02:	f000 80d2 	beq.w	8008faa <_printf_i+0x1c6>
 8008e06:	2f58      	cmp	r7, #88	@ 0x58
 8008e08:	f000 80b9 	beq.w	8008f7e <_printf_i+0x19a>
 8008e0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008e14:	e03a      	b.n	8008e8c <_printf_i+0xa8>
 8008e16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008e1a:	2b15      	cmp	r3, #21
 8008e1c:	d8f6      	bhi.n	8008e0c <_printf_i+0x28>
 8008e1e:	a101      	add	r1, pc, #4	@ (adr r1, 8008e24 <_printf_i+0x40>)
 8008e20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e24:	08008e7d 	.word	0x08008e7d
 8008e28:	08008e91 	.word	0x08008e91
 8008e2c:	08008e0d 	.word	0x08008e0d
 8008e30:	08008e0d 	.word	0x08008e0d
 8008e34:	08008e0d 	.word	0x08008e0d
 8008e38:	08008e0d 	.word	0x08008e0d
 8008e3c:	08008e91 	.word	0x08008e91
 8008e40:	08008e0d 	.word	0x08008e0d
 8008e44:	08008e0d 	.word	0x08008e0d
 8008e48:	08008e0d 	.word	0x08008e0d
 8008e4c:	08008e0d 	.word	0x08008e0d
 8008e50:	08008f91 	.word	0x08008f91
 8008e54:	08008ebb 	.word	0x08008ebb
 8008e58:	08008f4b 	.word	0x08008f4b
 8008e5c:	08008e0d 	.word	0x08008e0d
 8008e60:	08008e0d 	.word	0x08008e0d
 8008e64:	08008fb3 	.word	0x08008fb3
 8008e68:	08008e0d 	.word	0x08008e0d
 8008e6c:	08008ebb 	.word	0x08008ebb
 8008e70:	08008e0d 	.word	0x08008e0d
 8008e74:	08008e0d 	.word	0x08008e0d
 8008e78:	08008f53 	.word	0x08008f53
 8008e7c:	6833      	ldr	r3, [r6, #0]
 8008e7e:	1d1a      	adds	r2, r3, #4
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	6032      	str	r2, [r6, #0]
 8008e84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	e09d      	b.n	8008fcc <_printf_i+0x1e8>
 8008e90:	6833      	ldr	r3, [r6, #0]
 8008e92:	6820      	ldr	r0, [r4, #0]
 8008e94:	1d19      	adds	r1, r3, #4
 8008e96:	6031      	str	r1, [r6, #0]
 8008e98:	0606      	lsls	r6, r0, #24
 8008e9a:	d501      	bpl.n	8008ea0 <_printf_i+0xbc>
 8008e9c:	681d      	ldr	r5, [r3, #0]
 8008e9e:	e003      	b.n	8008ea8 <_printf_i+0xc4>
 8008ea0:	0645      	lsls	r5, r0, #25
 8008ea2:	d5fb      	bpl.n	8008e9c <_printf_i+0xb8>
 8008ea4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008ea8:	2d00      	cmp	r5, #0
 8008eaa:	da03      	bge.n	8008eb4 <_printf_i+0xd0>
 8008eac:	232d      	movs	r3, #45	@ 0x2d
 8008eae:	426d      	negs	r5, r5
 8008eb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008eb4:	4859      	ldr	r0, [pc, #356]	@ (800901c <_printf_i+0x238>)
 8008eb6:	230a      	movs	r3, #10
 8008eb8:	e011      	b.n	8008ede <_printf_i+0xfa>
 8008eba:	6821      	ldr	r1, [r4, #0]
 8008ebc:	6833      	ldr	r3, [r6, #0]
 8008ebe:	0608      	lsls	r0, r1, #24
 8008ec0:	f853 5b04 	ldr.w	r5, [r3], #4
 8008ec4:	d402      	bmi.n	8008ecc <_printf_i+0xe8>
 8008ec6:	0649      	lsls	r1, r1, #25
 8008ec8:	bf48      	it	mi
 8008eca:	b2ad      	uxthmi	r5, r5
 8008ecc:	2f6f      	cmp	r7, #111	@ 0x6f
 8008ece:	4853      	ldr	r0, [pc, #332]	@ (800901c <_printf_i+0x238>)
 8008ed0:	6033      	str	r3, [r6, #0]
 8008ed2:	bf14      	ite	ne
 8008ed4:	230a      	movne	r3, #10
 8008ed6:	2308      	moveq	r3, #8
 8008ed8:	2100      	movs	r1, #0
 8008eda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008ede:	6866      	ldr	r6, [r4, #4]
 8008ee0:	60a6      	str	r6, [r4, #8]
 8008ee2:	2e00      	cmp	r6, #0
 8008ee4:	bfa2      	ittt	ge
 8008ee6:	6821      	ldrge	r1, [r4, #0]
 8008ee8:	f021 0104 	bicge.w	r1, r1, #4
 8008eec:	6021      	strge	r1, [r4, #0]
 8008eee:	b90d      	cbnz	r5, 8008ef4 <_printf_i+0x110>
 8008ef0:	2e00      	cmp	r6, #0
 8008ef2:	d04b      	beq.n	8008f8c <_printf_i+0x1a8>
 8008ef4:	4616      	mov	r6, r2
 8008ef6:	fbb5 f1f3 	udiv	r1, r5, r3
 8008efa:	fb03 5711 	mls	r7, r3, r1, r5
 8008efe:	5dc7      	ldrb	r7, [r0, r7]
 8008f00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008f04:	462f      	mov	r7, r5
 8008f06:	42bb      	cmp	r3, r7
 8008f08:	460d      	mov	r5, r1
 8008f0a:	d9f4      	bls.n	8008ef6 <_printf_i+0x112>
 8008f0c:	2b08      	cmp	r3, #8
 8008f0e:	d10b      	bne.n	8008f28 <_printf_i+0x144>
 8008f10:	6823      	ldr	r3, [r4, #0]
 8008f12:	07df      	lsls	r7, r3, #31
 8008f14:	d508      	bpl.n	8008f28 <_printf_i+0x144>
 8008f16:	6923      	ldr	r3, [r4, #16]
 8008f18:	6861      	ldr	r1, [r4, #4]
 8008f1a:	4299      	cmp	r1, r3
 8008f1c:	bfde      	ittt	le
 8008f1e:	2330      	movle	r3, #48	@ 0x30
 8008f20:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008f24:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008f28:	1b92      	subs	r2, r2, r6
 8008f2a:	6122      	str	r2, [r4, #16]
 8008f2c:	f8cd a000 	str.w	sl, [sp]
 8008f30:	464b      	mov	r3, r9
 8008f32:	aa03      	add	r2, sp, #12
 8008f34:	4621      	mov	r1, r4
 8008f36:	4640      	mov	r0, r8
 8008f38:	f7ff fee6 	bl	8008d08 <_printf_common>
 8008f3c:	3001      	adds	r0, #1
 8008f3e:	d14a      	bne.n	8008fd6 <_printf_i+0x1f2>
 8008f40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008f44:	b004      	add	sp, #16
 8008f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f4a:	6823      	ldr	r3, [r4, #0]
 8008f4c:	f043 0320 	orr.w	r3, r3, #32
 8008f50:	6023      	str	r3, [r4, #0]
 8008f52:	4833      	ldr	r0, [pc, #204]	@ (8009020 <_printf_i+0x23c>)
 8008f54:	2778      	movs	r7, #120	@ 0x78
 8008f56:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008f5a:	6823      	ldr	r3, [r4, #0]
 8008f5c:	6831      	ldr	r1, [r6, #0]
 8008f5e:	061f      	lsls	r7, r3, #24
 8008f60:	f851 5b04 	ldr.w	r5, [r1], #4
 8008f64:	d402      	bmi.n	8008f6c <_printf_i+0x188>
 8008f66:	065f      	lsls	r7, r3, #25
 8008f68:	bf48      	it	mi
 8008f6a:	b2ad      	uxthmi	r5, r5
 8008f6c:	6031      	str	r1, [r6, #0]
 8008f6e:	07d9      	lsls	r1, r3, #31
 8008f70:	bf44      	itt	mi
 8008f72:	f043 0320 	orrmi.w	r3, r3, #32
 8008f76:	6023      	strmi	r3, [r4, #0]
 8008f78:	b11d      	cbz	r5, 8008f82 <_printf_i+0x19e>
 8008f7a:	2310      	movs	r3, #16
 8008f7c:	e7ac      	b.n	8008ed8 <_printf_i+0xf4>
 8008f7e:	4827      	ldr	r0, [pc, #156]	@ (800901c <_printf_i+0x238>)
 8008f80:	e7e9      	b.n	8008f56 <_printf_i+0x172>
 8008f82:	6823      	ldr	r3, [r4, #0]
 8008f84:	f023 0320 	bic.w	r3, r3, #32
 8008f88:	6023      	str	r3, [r4, #0]
 8008f8a:	e7f6      	b.n	8008f7a <_printf_i+0x196>
 8008f8c:	4616      	mov	r6, r2
 8008f8e:	e7bd      	b.n	8008f0c <_printf_i+0x128>
 8008f90:	6833      	ldr	r3, [r6, #0]
 8008f92:	6825      	ldr	r5, [r4, #0]
 8008f94:	6961      	ldr	r1, [r4, #20]
 8008f96:	1d18      	adds	r0, r3, #4
 8008f98:	6030      	str	r0, [r6, #0]
 8008f9a:	062e      	lsls	r6, r5, #24
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	d501      	bpl.n	8008fa4 <_printf_i+0x1c0>
 8008fa0:	6019      	str	r1, [r3, #0]
 8008fa2:	e002      	b.n	8008faa <_printf_i+0x1c6>
 8008fa4:	0668      	lsls	r0, r5, #25
 8008fa6:	d5fb      	bpl.n	8008fa0 <_printf_i+0x1bc>
 8008fa8:	8019      	strh	r1, [r3, #0]
 8008faa:	2300      	movs	r3, #0
 8008fac:	6123      	str	r3, [r4, #16]
 8008fae:	4616      	mov	r6, r2
 8008fb0:	e7bc      	b.n	8008f2c <_printf_i+0x148>
 8008fb2:	6833      	ldr	r3, [r6, #0]
 8008fb4:	1d1a      	adds	r2, r3, #4
 8008fb6:	6032      	str	r2, [r6, #0]
 8008fb8:	681e      	ldr	r6, [r3, #0]
 8008fba:	6862      	ldr	r2, [r4, #4]
 8008fbc:	2100      	movs	r1, #0
 8008fbe:	4630      	mov	r0, r6
 8008fc0:	f7f7 f91e 	bl	8000200 <memchr>
 8008fc4:	b108      	cbz	r0, 8008fca <_printf_i+0x1e6>
 8008fc6:	1b80      	subs	r0, r0, r6
 8008fc8:	6060      	str	r0, [r4, #4]
 8008fca:	6863      	ldr	r3, [r4, #4]
 8008fcc:	6123      	str	r3, [r4, #16]
 8008fce:	2300      	movs	r3, #0
 8008fd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008fd4:	e7aa      	b.n	8008f2c <_printf_i+0x148>
 8008fd6:	6923      	ldr	r3, [r4, #16]
 8008fd8:	4632      	mov	r2, r6
 8008fda:	4649      	mov	r1, r9
 8008fdc:	4640      	mov	r0, r8
 8008fde:	47d0      	blx	sl
 8008fe0:	3001      	adds	r0, #1
 8008fe2:	d0ad      	beq.n	8008f40 <_printf_i+0x15c>
 8008fe4:	6823      	ldr	r3, [r4, #0]
 8008fe6:	079b      	lsls	r3, r3, #30
 8008fe8:	d413      	bmi.n	8009012 <_printf_i+0x22e>
 8008fea:	68e0      	ldr	r0, [r4, #12]
 8008fec:	9b03      	ldr	r3, [sp, #12]
 8008fee:	4298      	cmp	r0, r3
 8008ff0:	bfb8      	it	lt
 8008ff2:	4618      	movlt	r0, r3
 8008ff4:	e7a6      	b.n	8008f44 <_printf_i+0x160>
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	4632      	mov	r2, r6
 8008ffa:	4649      	mov	r1, r9
 8008ffc:	4640      	mov	r0, r8
 8008ffe:	47d0      	blx	sl
 8009000:	3001      	adds	r0, #1
 8009002:	d09d      	beq.n	8008f40 <_printf_i+0x15c>
 8009004:	3501      	adds	r5, #1
 8009006:	68e3      	ldr	r3, [r4, #12]
 8009008:	9903      	ldr	r1, [sp, #12]
 800900a:	1a5b      	subs	r3, r3, r1
 800900c:	42ab      	cmp	r3, r5
 800900e:	dcf2      	bgt.n	8008ff6 <_printf_i+0x212>
 8009010:	e7eb      	b.n	8008fea <_printf_i+0x206>
 8009012:	2500      	movs	r5, #0
 8009014:	f104 0619 	add.w	r6, r4, #25
 8009018:	e7f5      	b.n	8009006 <_printf_i+0x222>
 800901a:	bf00      	nop
 800901c:	0800b4e6 	.word	0x0800b4e6
 8009020:	0800b4f7 	.word	0x0800b4f7

08009024 <std>:
 8009024:	2300      	movs	r3, #0
 8009026:	b510      	push	{r4, lr}
 8009028:	4604      	mov	r4, r0
 800902a:	e9c0 3300 	strd	r3, r3, [r0]
 800902e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009032:	6083      	str	r3, [r0, #8]
 8009034:	8181      	strh	r1, [r0, #12]
 8009036:	6643      	str	r3, [r0, #100]	@ 0x64
 8009038:	81c2      	strh	r2, [r0, #14]
 800903a:	6183      	str	r3, [r0, #24]
 800903c:	4619      	mov	r1, r3
 800903e:	2208      	movs	r2, #8
 8009040:	305c      	adds	r0, #92	@ 0x5c
 8009042:	f000 f921 	bl	8009288 <memset>
 8009046:	4b0d      	ldr	r3, [pc, #52]	@ (800907c <std+0x58>)
 8009048:	6263      	str	r3, [r4, #36]	@ 0x24
 800904a:	4b0d      	ldr	r3, [pc, #52]	@ (8009080 <std+0x5c>)
 800904c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800904e:	4b0d      	ldr	r3, [pc, #52]	@ (8009084 <std+0x60>)
 8009050:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009052:	4b0d      	ldr	r3, [pc, #52]	@ (8009088 <std+0x64>)
 8009054:	6323      	str	r3, [r4, #48]	@ 0x30
 8009056:	4b0d      	ldr	r3, [pc, #52]	@ (800908c <std+0x68>)
 8009058:	6224      	str	r4, [r4, #32]
 800905a:	429c      	cmp	r4, r3
 800905c:	d006      	beq.n	800906c <std+0x48>
 800905e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009062:	4294      	cmp	r4, r2
 8009064:	d002      	beq.n	800906c <std+0x48>
 8009066:	33d0      	adds	r3, #208	@ 0xd0
 8009068:	429c      	cmp	r4, r3
 800906a:	d105      	bne.n	8009078 <std+0x54>
 800906c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009074:	f000 b93e 	b.w	80092f4 <__retarget_lock_init_recursive>
 8009078:	bd10      	pop	{r4, pc}
 800907a:	bf00      	nop
 800907c:	0800abfd 	.word	0x0800abfd
 8009080:	0800ac1f 	.word	0x0800ac1f
 8009084:	0800ac57 	.word	0x0800ac57
 8009088:	0800ac7b 	.word	0x0800ac7b
 800908c:	200004d0 	.word	0x200004d0

08009090 <stdio_exit_handler>:
 8009090:	4a02      	ldr	r2, [pc, #8]	@ (800909c <stdio_exit_handler+0xc>)
 8009092:	4903      	ldr	r1, [pc, #12]	@ (80090a0 <stdio_exit_handler+0x10>)
 8009094:	4803      	ldr	r0, [pc, #12]	@ (80090a4 <stdio_exit_handler+0x14>)
 8009096:	f000 b869 	b.w	800916c <_fwalk_sglue>
 800909a:	bf00      	nop
 800909c:	20000054 	.word	0x20000054
 80090a0:	0800a491 	.word	0x0800a491
 80090a4:	20000064 	.word	0x20000064

080090a8 <cleanup_stdio>:
 80090a8:	6841      	ldr	r1, [r0, #4]
 80090aa:	4b0c      	ldr	r3, [pc, #48]	@ (80090dc <cleanup_stdio+0x34>)
 80090ac:	4299      	cmp	r1, r3
 80090ae:	b510      	push	{r4, lr}
 80090b0:	4604      	mov	r4, r0
 80090b2:	d001      	beq.n	80090b8 <cleanup_stdio+0x10>
 80090b4:	f001 f9ec 	bl	800a490 <_fflush_r>
 80090b8:	68a1      	ldr	r1, [r4, #8]
 80090ba:	4b09      	ldr	r3, [pc, #36]	@ (80090e0 <cleanup_stdio+0x38>)
 80090bc:	4299      	cmp	r1, r3
 80090be:	d002      	beq.n	80090c6 <cleanup_stdio+0x1e>
 80090c0:	4620      	mov	r0, r4
 80090c2:	f001 f9e5 	bl	800a490 <_fflush_r>
 80090c6:	68e1      	ldr	r1, [r4, #12]
 80090c8:	4b06      	ldr	r3, [pc, #24]	@ (80090e4 <cleanup_stdio+0x3c>)
 80090ca:	4299      	cmp	r1, r3
 80090cc:	d004      	beq.n	80090d8 <cleanup_stdio+0x30>
 80090ce:	4620      	mov	r0, r4
 80090d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090d4:	f001 b9dc 	b.w	800a490 <_fflush_r>
 80090d8:	bd10      	pop	{r4, pc}
 80090da:	bf00      	nop
 80090dc:	200004d0 	.word	0x200004d0
 80090e0:	20000538 	.word	0x20000538
 80090e4:	200005a0 	.word	0x200005a0

080090e8 <global_stdio_init.part.0>:
 80090e8:	b510      	push	{r4, lr}
 80090ea:	4b0b      	ldr	r3, [pc, #44]	@ (8009118 <global_stdio_init.part.0+0x30>)
 80090ec:	4c0b      	ldr	r4, [pc, #44]	@ (800911c <global_stdio_init.part.0+0x34>)
 80090ee:	4a0c      	ldr	r2, [pc, #48]	@ (8009120 <global_stdio_init.part.0+0x38>)
 80090f0:	601a      	str	r2, [r3, #0]
 80090f2:	4620      	mov	r0, r4
 80090f4:	2200      	movs	r2, #0
 80090f6:	2104      	movs	r1, #4
 80090f8:	f7ff ff94 	bl	8009024 <std>
 80090fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009100:	2201      	movs	r2, #1
 8009102:	2109      	movs	r1, #9
 8009104:	f7ff ff8e 	bl	8009024 <std>
 8009108:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800910c:	2202      	movs	r2, #2
 800910e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009112:	2112      	movs	r1, #18
 8009114:	f7ff bf86 	b.w	8009024 <std>
 8009118:	20000608 	.word	0x20000608
 800911c:	200004d0 	.word	0x200004d0
 8009120:	08009091 	.word	0x08009091

08009124 <__sfp_lock_acquire>:
 8009124:	4801      	ldr	r0, [pc, #4]	@ (800912c <__sfp_lock_acquire+0x8>)
 8009126:	f000 b8e6 	b.w	80092f6 <__retarget_lock_acquire_recursive>
 800912a:	bf00      	nop
 800912c:	2000060d 	.word	0x2000060d

08009130 <__sfp_lock_release>:
 8009130:	4801      	ldr	r0, [pc, #4]	@ (8009138 <__sfp_lock_release+0x8>)
 8009132:	f000 b8e1 	b.w	80092f8 <__retarget_lock_release_recursive>
 8009136:	bf00      	nop
 8009138:	2000060d 	.word	0x2000060d

0800913c <__sinit>:
 800913c:	b510      	push	{r4, lr}
 800913e:	4604      	mov	r4, r0
 8009140:	f7ff fff0 	bl	8009124 <__sfp_lock_acquire>
 8009144:	6a23      	ldr	r3, [r4, #32]
 8009146:	b11b      	cbz	r3, 8009150 <__sinit+0x14>
 8009148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800914c:	f7ff bff0 	b.w	8009130 <__sfp_lock_release>
 8009150:	4b04      	ldr	r3, [pc, #16]	@ (8009164 <__sinit+0x28>)
 8009152:	6223      	str	r3, [r4, #32]
 8009154:	4b04      	ldr	r3, [pc, #16]	@ (8009168 <__sinit+0x2c>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d1f5      	bne.n	8009148 <__sinit+0xc>
 800915c:	f7ff ffc4 	bl	80090e8 <global_stdio_init.part.0>
 8009160:	e7f2      	b.n	8009148 <__sinit+0xc>
 8009162:	bf00      	nop
 8009164:	080090a9 	.word	0x080090a9
 8009168:	20000608 	.word	0x20000608

0800916c <_fwalk_sglue>:
 800916c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009170:	4607      	mov	r7, r0
 8009172:	4688      	mov	r8, r1
 8009174:	4614      	mov	r4, r2
 8009176:	2600      	movs	r6, #0
 8009178:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800917c:	f1b9 0901 	subs.w	r9, r9, #1
 8009180:	d505      	bpl.n	800918e <_fwalk_sglue+0x22>
 8009182:	6824      	ldr	r4, [r4, #0]
 8009184:	2c00      	cmp	r4, #0
 8009186:	d1f7      	bne.n	8009178 <_fwalk_sglue+0xc>
 8009188:	4630      	mov	r0, r6
 800918a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800918e:	89ab      	ldrh	r3, [r5, #12]
 8009190:	2b01      	cmp	r3, #1
 8009192:	d907      	bls.n	80091a4 <_fwalk_sglue+0x38>
 8009194:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009198:	3301      	adds	r3, #1
 800919a:	d003      	beq.n	80091a4 <_fwalk_sglue+0x38>
 800919c:	4629      	mov	r1, r5
 800919e:	4638      	mov	r0, r7
 80091a0:	47c0      	blx	r8
 80091a2:	4306      	orrs	r6, r0
 80091a4:	3568      	adds	r5, #104	@ 0x68
 80091a6:	e7e9      	b.n	800917c <_fwalk_sglue+0x10>

080091a8 <iprintf>:
 80091a8:	b40f      	push	{r0, r1, r2, r3}
 80091aa:	b507      	push	{r0, r1, r2, lr}
 80091ac:	4906      	ldr	r1, [pc, #24]	@ (80091c8 <iprintf+0x20>)
 80091ae:	ab04      	add	r3, sp, #16
 80091b0:	6808      	ldr	r0, [r1, #0]
 80091b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80091b6:	6881      	ldr	r1, [r0, #8]
 80091b8:	9301      	str	r3, [sp, #4]
 80091ba:	f000 ff23 	bl	800a004 <_vfiprintf_r>
 80091be:	b003      	add	sp, #12
 80091c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80091c4:	b004      	add	sp, #16
 80091c6:	4770      	bx	lr
 80091c8:	20000060 	.word	0x20000060

080091cc <_puts_r>:
 80091cc:	6a03      	ldr	r3, [r0, #32]
 80091ce:	b570      	push	{r4, r5, r6, lr}
 80091d0:	6884      	ldr	r4, [r0, #8]
 80091d2:	4605      	mov	r5, r0
 80091d4:	460e      	mov	r6, r1
 80091d6:	b90b      	cbnz	r3, 80091dc <_puts_r+0x10>
 80091d8:	f7ff ffb0 	bl	800913c <__sinit>
 80091dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80091de:	07db      	lsls	r3, r3, #31
 80091e0:	d405      	bmi.n	80091ee <_puts_r+0x22>
 80091e2:	89a3      	ldrh	r3, [r4, #12]
 80091e4:	0598      	lsls	r0, r3, #22
 80091e6:	d402      	bmi.n	80091ee <_puts_r+0x22>
 80091e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091ea:	f000 f884 	bl	80092f6 <__retarget_lock_acquire_recursive>
 80091ee:	89a3      	ldrh	r3, [r4, #12]
 80091f0:	0719      	lsls	r1, r3, #28
 80091f2:	d502      	bpl.n	80091fa <_puts_r+0x2e>
 80091f4:	6923      	ldr	r3, [r4, #16]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d135      	bne.n	8009266 <_puts_r+0x9a>
 80091fa:	4621      	mov	r1, r4
 80091fc:	4628      	mov	r0, r5
 80091fe:	f001 fd7f 	bl	800ad00 <__swsetup_r>
 8009202:	b380      	cbz	r0, 8009266 <_puts_r+0x9a>
 8009204:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8009208:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800920a:	07da      	lsls	r2, r3, #31
 800920c:	d405      	bmi.n	800921a <_puts_r+0x4e>
 800920e:	89a3      	ldrh	r3, [r4, #12]
 8009210:	059b      	lsls	r3, r3, #22
 8009212:	d402      	bmi.n	800921a <_puts_r+0x4e>
 8009214:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009216:	f000 f86f 	bl	80092f8 <__retarget_lock_release_recursive>
 800921a:	4628      	mov	r0, r5
 800921c:	bd70      	pop	{r4, r5, r6, pc}
 800921e:	2b00      	cmp	r3, #0
 8009220:	da04      	bge.n	800922c <_puts_r+0x60>
 8009222:	69a2      	ldr	r2, [r4, #24]
 8009224:	429a      	cmp	r2, r3
 8009226:	dc17      	bgt.n	8009258 <_puts_r+0x8c>
 8009228:	290a      	cmp	r1, #10
 800922a:	d015      	beq.n	8009258 <_puts_r+0x8c>
 800922c:	6823      	ldr	r3, [r4, #0]
 800922e:	1c5a      	adds	r2, r3, #1
 8009230:	6022      	str	r2, [r4, #0]
 8009232:	7019      	strb	r1, [r3, #0]
 8009234:	68a3      	ldr	r3, [r4, #8]
 8009236:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800923a:	3b01      	subs	r3, #1
 800923c:	60a3      	str	r3, [r4, #8]
 800923e:	2900      	cmp	r1, #0
 8009240:	d1ed      	bne.n	800921e <_puts_r+0x52>
 8009242:	2b00      	cmp	r3, #0
 8009244:	da11      	bge.n	800926a <_puts_r+0x9e>
 8009246:	4622      	mov	r2, r4
 8009248:	210a      	movs	r1, #10
 800924a:	4628      	mov	r0, r5
 800924c:	f001 fd19 	bl	800ac82 <__swbuf_r>
 8009250:	3001      	adds	r0, #1
 8009252:	d0d7      	beq.n	8009204 <_puts_r+0x38>
 8009254:	250a      	movs	r5, #10
 8009256:	e7d7      	b.n	8009208 <_puts_r+0x3c>
 8009258:	4622      	mov	r2, r4
 800925a:	4628      	mov	r0, r5
 800925c:	f001 fd11 	bl	800ac82 <__swbuf_r>
 8009260:	3001      	adds	r0, #1
 8009262:	d1e7      	bne.n	8009234 <_puts_r+0x68>
 8009264:	e7ce      	b.n	8009204 <_puts_r+0x38>
 8009266:	3e01      	subs	r6, #1
 8009268:	e7e4      	b.n	8009234 <_puts_r+0x68>
 800926a:	6823      	ldr	r3, [r4, #0]
 800926c:	1c5a      	adds	r2, r3, #1
 800926e:	6022      	str	r2, [r4, #0]
 8009270:	220a      	movs	r2, #10
 8009272:	701a      	strb	r2, [r3, #0]
 8009274:	e7ee      	b.n	8009254 <_puts_r+0x88>
	...

08009278 <puts>:
 8009278:	4b02      	ldr	r3, [pc, #8]	@ (8009284 <puts+0xc>)
 800927a:	4601      	mov	r1, r0
 800927c:	6818      	ldr	r0, [r3, #0]
 800927e:	f7ff bfa5 	b.w	80091cc <_puts_r>
 8009282:	bf00      	nop
 8009284:	20000060 	.word	0x20000060

08009288 <memset>:
 8009288:	4402      	add	r2, r0
 800928a:	4603      	mov	r3, r0
 800928c:	4293      	cmp	r3, r2
 800928e:	d100      	bne.n	8009292 <memset+0xa>
 8009290:	4770      	bx	lr
 8009292:	f803 1b01 	strb.w	r1, [r3], #1
 8009296:	e7f9      	b.n	800928c <memset+0x4>

08009298 <_localeconv_r>:
 8009298:	4800      	ldr	r0, [pc, #0]	@ (800929c <_localeconv_r+0x4>)
 800929a:	4770      	bx	lr
 800929c:	200001a0 	.word	0x200001a0

080092a0 <__errno>:
 80092a0:	4b01      	ldr	r3, [pc, #4]	@ (80092a8 <__errno+0x8>)
 80092a2:	6818      	ldr	r0, [r3, #0]
 80092a4:	4770      	bx	lr
 80092a6:	bf00      	nop
 80092a8:	20000060 	.word	0x20000060

080092ac <__libc_init_array>:
 80092ac:	b570      	push	{r4, r5, r6, lr}
 80092ae:	4d0d      	ldr	r5, [pc, #52]	@ (80092e4 <__libc_init_array+0x38>)
 80092b0:	4c0d      	ldr	r4, [pc, #52]	@ (80092e8 <__libc_init_array+0x3c>)
 80092b2:	1b64      	subs	r4, r4, r5
 80092b4:	10a4      	asrs	r4, r4, #2
 80092b6:	2600      	movs	r6, #0
 80092b8:	42a6      	cmp	r6, r4
 80092ba:	d109      	bne.n	80092d0 <__libc_init_array+0x24>
 80092bc:	4d0b      	ldr	r5, [pc, #44]	@ (80092ec <__libc_init_array+0x40>)
 80092be:	4c0c      	ldr	r4, [pc, #48]	@ (80092f0 <__libc_init_array+0x44>)
 80092c0:	f001 ff46 	bl	800b150 <_init>
 80092c4:	1b64      	subs	r4, r4, r5
 80092c6:	10a4      	asrs	r4, r4, #2
 80092c8:	2600      	movs	r6, #0
 80092ca:	42a6      	cmp	r6, r4
 80092cc:	d105      	bne.n	80092da <__libc_init_array+0x2e>
 80092ce:	bd70      	pop	{r4, r5, r6, pc}
 80092d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80092d4:	4798      	blx	r3
 80092d6:	3601      	adds	r6, #1
 80092d8:	e7ee      	b.n	80092b8 <__libc_init_array+0xc>
 80092da:	f855 3b04 	ldr.w	r3, [r5], #4
 80092de:	4798      	blx	r3
 80092e0:	3601      	adds	r6, #1
 80092e2:	e7f2      	b.n	80092ca <__libc_init_array+0x1e>
 80092e4:	0800b850 	.word	0x0800b850
 80092e8:	0800b850 	.word	0x0800b850
 80092ec:	0800b850 	.word	0x0800b850
 80092f0:	0800b854 	.word	0x0800b854

080092f4 <__retarget_lock_init_recursive>:
 80092f4:	4770      	bx	lr

080092f6 <__retarget_lock_acquire_recursive>:
 80092f6:	4770      	bx	lr

080092f8 <__retarget_lock_release_recursive>:
 80092f8:	4770      	bx	lr

080092fa <memcpy>:
 80092fa:	440a      	add	r2, r1
 80092fc:	4291      	cmp	r1, r2
 80092fe:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009302:	d100      	bne.n	8009306 <memcpy+0xc>
 8009304:	4770      	bx	lr
 8009306:	b510      	push	{r4, lr}
 8009308:	f811 4b01 	ldrb.w	r4, [r1], #1
 800930c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009310:	4291      	cmp	r1, r2
 8009312:	d1f9      	bne.n	8009308 <memcpy+0xe>
 8009314:	bd10      	pop	{r4, pc}

08009316 <quorem>:
 8009316:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800931a:	6903      	ldr	r3, [r0, #16]
 800931c:	690c      	ldr	r4, [r1, #16]
 800931e:	42a3      	cmp	r3, r4
 8009320:	4607      	mov	r7, r0
 8009322:	db7e      	blt.n	8009422 <quorem+0x10c>
 8009324:	3c01      	subs	r4, #1
 8009326:	f101 0814 	add.w	r8, r1, #20
 800932a:	00a3      	lsls	r3, r4, #2
 800932c:	f100 0514 	add.w	r5, r0, #20
 8009330:	9300      	str	r3, [sp, #0]
 8009332:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009336:	9301      	str	r3, [sp, #4]
 8009338:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800933c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009340:	3301      	adds	r3, #1
 8009342:	429a      	cmp	r2, r3
 8009344:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009348:	fbb2 f6f3 	udiv	r6, r2, r3
 800934c:	d32e      	bcc.n	80093ac <quorem+0x96>
 800934e:	f04f 0a00 	mov.w	sl, #0
 8009352:	46c4      	mov	ip, r8
 8009354:	46ae      	mov	lr, r5
 8009356:	46d3      	mov	fp, sl
 8009358:	f85c 3b04 	ldr.w	r3, [ip], #4
 800935c:	b298      	uxth	r0, r3
 800935e:	fb06 a000 	mla	r0, r6, r0, sl
 8009362:	0c02      	lsrs	r2, r0, #16
 8009364:	0c1b      	lsrs	r3, r3, #16
 8009366:	fb06 2303 	mla	r3, r6, r3, r2
 800936a:	f8de 2000 	ldr.w	r2, [lr]
 800936e:	b280      	uxth	r0, r0
 8009370:	b292      	uxth	r2, r2
 8009372:	1a12      	subs	r2, r2, r0
 8009374:	445a      	add	r2, fp
 8009376:	f8de 0000 	ldr.w	r0, [lr]
 800937a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800937e:	b29b      	uxth	r3, r3
 8009380:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009384:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009388:	b292      	uxth	r2, r2
 800938a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800938e:	45e1      	cmp	r9, ip
 8009390:	f84e 2b04 	str.w	r2, [lr], #4
 8009394:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009398:	d2de      	bcs.n	8009358 <quorem+0x42>
 800939a:	9b00      	ldr	r3, [sp, #0]
 800939c:	58eb      	ldr	r3, [r5, r3]
 800939e:	b92b      	cbnz	r3, 80093ac <quorem+0x96>
 80093a0:	9b01      	ldr	r3, [sp, #4]
 80093a2:	3b04      	subs	r3, #4
 80093a4:	429d      	cmp	r5, r3
 80093a6:	461a      	mov	r2, r3
 80093a8:	d32f      	bcc.n	800940a <quorem+0xf4>
 80093aa:	613c      	str	r4, [r7, #16]
 80093ac:	4638      	mov	r0, r7
 80093ae:	f001 fb1d 	bl	800a9ec <__mcmp>
 80093b2:	2800      	cmp	r0, #0
 80093b4:	db25      	blt.n	8009402 <quorem+0xec>
 80093b6:	4629      	mov	r1, r5
 80093b8:	2000      	movs	r0, #0
 80093ba:	f858 2b04 	ldr.w	r2, [r8], #4
 80093be:	f8d1 c000 	ldr.w	ip, [r1]
 80093c2:	fa1f fe82 	uxth.w	lr, r2
 80093c6:	fa1f f38c 	uxth.w	r3, ip
 80093ca:	eba3 030e 	sub.w	r3, r3, lr
 80093ce:	4403      	add	r3, r0
 80093d0:	0c12      	lsrs	r2, r2, #16
 80093d2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80093d6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80093da:	b29b      	uxth	r3, r3
 80093dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093e0:	45c1      	cmp	r9, r8
 80093e2:	f841 3b04 	str.w	r3, [r1], #4
 80093e6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80093ea:	d2e6      	bcs.n	80093ba <quorem+0xa4>
 80093ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80093f4:	b922      	cbnz	r2, 8009400 <quorem+0xea>
 80093f6:	3b04      	subs	r3, #4
 80093f8:	429d      	cmp	r5, r3
 80093fa:	461a      	mov	r2, r3
 80093fc:	d30b      	bcc.n	8009416 <quorem+0x100>
 80093fe:	613c      	str	r4, [r7, #16]
 8009400:	3601      	adds	r6, #1
 8009402:	4630      	mov	r0, r6
 8009404:	b003      	add	sp, #12
 8009406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800940a:	6812      	ldr	r2, [r2, #0]
 800940c:	3b04      	subs	r3, #4
 800940e:	2a00      	cmp	r2, #0
 8009410:	d1cb      	bne.n	80093aa <quorem+0x94>
 8009412:	3c01      	subs	r4, #1
 8009414:	e7c6      	b.n	80093a4 <quorem+0x8e>
 8009416:	6812      	ldr	r2, [r2, #0]
 8009418:	3b04      	subs	r3, #4
 800941a:	2a00      	cmp	r2, #0
 800941c:	d1ef      	bne.n	80093fe <quorem+0xe8>
 800941e:	3c01      	subs	r4, #1
 8009420:	e7ea      	b.n	80093f8 <quorem+0xe2>
 8009422:	2000      	movs	r0, #0
 8009424:	e7ee      	b.n	8009404 <quorem+0xee>
	...

08009428 <_dtoa_r>:
 8009428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800942c:	69c7      	ldr	r7, [r0, #28]
 800942e:	b099      	sub	sp, #100	@ 0x64
 8009430:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009434:	ec55 4b10 	vmov	r4, r5, d0
 8009438:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800943a:	9109      	str	r1, [sp, #36]	@ 0x24
 800943c:	4683      	mov	fp, r0
 800943e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009440:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009442:	b97f      	cbnz	r7, 8009464 <_dtoa_r+0x3c>
 8009444:	2010      	movs	r0, #16
 8009446:	f000 fef5 	bl	800a234 <malloc>
 800944a:	4602      	mov	r2, r0
 800944c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009450:	b920      	cbnz	r0, 800945c <_dtoa_r+0x34>
 8009452:	4ba7      	ldr	r3, [pc, #668]	@ (80096f0 <_dtoa_r+0x2c8>)
 8009454:	21ef      	movs	r1, #239	@ 0xef
 8009456:	48a7      	ldr	r0, [pc, #668]	@ (80096f4 <_dtoa_r+0x2cc>)
 8009458:	f001 fd82 	bl	800af60 <__assert_func>
 800945c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009460:	6007      	str	r7, [r0, #0]
 8009462:	60c7      	str	r7, [r0, #12]
 8009464:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009468:	6819      	ldr	r1, [r3, #0]
 800946a:	b159      	cbz	r1, 8009484 <_dtoa_r+0x5c>
 800946c:	685a      	ldr	r2, [r3, #4]
 800946e:	604a      	str	r2, [r1, #4]
 8009470:	2301      	movs	r3, #1
 8009472:	4093      	lsls	r3, r2
 8009474:	608b      	str	r3, [r1, #8]
 8009476:	4658      	mov	r0, fp
 8009478:	f001 f87e 	bl	800a578 <_Bfree>
 800947c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009480:	2200      	movs	r2, #0
 8009482:	601a      	str	r2, [r3, #0]
 8009484:	1e2b      	subs	r3, r5, #0
 8009486:	bfb9      	ittee	lt
 8009488:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800948c:	9303      	strlt	r3, [sp, #12]
 800948e:	2300      	movge	r3, #0
 8009490:	6033      	strge	r3, [r6, #0]
 8009492:	9f03      	ldr	r7, [sp, #12]
 8009494:	4b98      	ldr	r3, [pc, #608]	@ (80096f8 <_dtoa_r+0x2d0>)
 8009496:	bfbc      	itt	lt
 8009498:	2201      	movlt	r2, #1
 800949a:	6032      	strlt	r2, [r6, #0]
 800949c:	43bb      	bics	r3, r7
 800949e:	d112      	bne.n	80094c6 <_dtoa_r+0x9e>
 80094a0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80094a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80094a6:	6013      	str	r3, [r2, #0]
 80094a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80094ac:	4323      	orrs	r3, r4
 80094ae:	f000 854d 	beq.w	8009f4c <_dtoa_r+0xb24>
 80094b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80094b4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800970c <_dtoa_r+0x2e4>
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	f000 854f 	beq.w	8009f5c <_dtoa_r+0xb34>
 80094be:	f10a 0303 	add.w	r3, sl, #3
 80094c2:	f000 bd49 	b.w	8009f58 <_dtoa_r+0xb30>
 80094c6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80094ca:	2200      	movs	r2, #0
 80094cc:	ec51 0b17 	vmov	r0, r1, d7
 80094d0:	2300      	movs	r3, #0
 80094d2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80094d6:	f7f7 fb0f 	bl	8000af8 <__aeabi_dcmpeq>
 80094da:	4680      	mov	r8, r0
 80094dc:	b158      	cbz	r0, 80094f6 <_dtoa_r+0xce>
 80094de:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80094e0:	2301      	movs	r3, #1
 80094e2:	6013      	str	r3, [r2, #0]
 80094e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80094e6:	b113      	cbz	r3, 80094ee <_dtoa_r+0xc6>
 80094e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80094ea:	4b84      	ldr	r3, [pc, #528]	@ (80096fc <_dtoa_r+0x2d4>)
 80094ec:	6013      	str	r3, [r2, #0]
 80094ee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009710 <_dtoa_r+0x2e8>
 80094f2:	f000 bd33 	b.w	8009f5c <_dtoa_r+0xb34>
 80094f6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80094fa:	aa16      	add	r2, sp, #88	@ 0x58
 80094fc:	a917      	add	r1, sp, #92	@ 0x5c
 80094fe:	4658      	mov	r0, fp
 8009500:	f001 fb24 	bl	800ab4c <__d2b>
 8009504:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009508:	4681      	mov	r9, r0
 800950a:	2e00      	cmp	r6, #0
 800950c:	d077      	beq.n	80095fe <_dtoa_r+0x1d6>
 800950e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009510:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009514:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009518:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800951c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009520:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009524:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009528:	4619      	mov	r1, r3
 800952a:	2200      	movs	r2, #0
 800952c:	4b74      	ldr	r3, [pc, #464]	@ (8009700 <_dtoa_r+0x2d8>)
 800952e:	f7f6 fec3 	bl	80002b8 <__aeabi_dsub>
 8009532:	a369      	add	r3, pc, #420	@ (adr r3, 80096d8 <_dtoa_r+0x2b0>)
 8009534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009538:	f7f7 f876 	bl	8000628 <__aeabi_dmul>
 800953c:	a368      	add	r3, pc, #416	@ (adr r3, 80096e0 <_dtoa_r+0x2b8>)
 800953e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009542:	f7f6 febb 	bl	80002bc <__adddf3>
 8009546:	4604      	mov	r4, r0
 8009548:	4630      	mov	r0, r6
 800954a:	460d      	mov	r5, r1
 800954c:	f7f7 f802 	bl	8000554 <__aeabi_i2d>
 8009550:	a365      	add	r3, pc, #404	@ (adr r3, 80096e8 <_dtoa_r+0x2c0>)
 8009552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009556:	f7f7 f867 	bl	8000628 <__aeabi_dmul>
 800955a:	4602      	mov	r2, r0
 800955c:	460b      	mov	r3, r1
 800955e:	4620      	mov	r0, r4
 8009560:	4629      	mov	r1, r5
 8009562:	f7f6 feab 	bl	80002bc <__adddf3>
 8009566:	4604      	mov	r4, r0
 8009568:	460d      	mov	r5, r1
 800956a:	f7f7 fb0d 	bl	8000b88 <__aeabi_d2iz>
 800956e:	2200      	movs	r2, #0
 8009570:	4607      	mov	r7, r0
 8009572:	2300      	movs	r3, #0
 8009574:	4620      	mov	r0, r4
 8009576:	4629      	mov	r1, r5
 8009578:	f7f7 fac8 	bl	8000b0c <__aeabi_dcmplt>
 800957c:	b140      	cbz	r0, 8009590 <_dtoa_r+0x168>
 800957e:	4638      	mov	r0, r7
 8009580:	f7f6 ffe8 	bl	8000554 <__aeabi_i2d>
 8009584:	4622      	mov	r2, r4
 8009586:	462b      	mov	r3, r5
 8009588:	f7f7 fab6 	bl	8000af8 <__aeabi_dcmpeq>
 800958c:	b900      	cbnz	r0, 8009590 <_dtoa_r+0x168>
 800958e:	3f01      	subs	r7, #1
 8009590:	2f16      	cmp	r7, #22
 8009592:	d851      	bhi.n	8009638 <_dtoa_r+0x210>
 8009594:	4b5b      	ldr	r3, [pc, #364]	@ (8009704 <_dtoa_r+0x2dc>)
 8009596:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800959a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800959e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80095a2:	f7f7 fab3 	bl	8000b0c <__aeabi_dcmplt>
 80095a6:	2800      	cmp	r0, #0
 80095a8:	d048      	beq.n	800963c <_dtoa_r+0x214>
 80095aa:	3f01      	subs	r7, #1
 80095ac:	2300      	movs	r3, #0
 80095ae:	9312      	str	r3, [sp, #72]	@ 0x48
 80095b0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80095b2:	1b9b      	subs	r3, r3, r6
 80095b4:	1e5a      	subs	r2, r3, #1
 80095b6:	bf44      	itt	mi
 80095b8:	f1c3 0801 	rsbmi	r8, r3, #1
 80095bc:	2300      	movmi	r3, #0
 80095be:	9208      	str	r2, [sp, #32]
 80095c0:	bf54      	ite	pl
 80095c2:	f04f 0800 	movpl.w	r8, #0
 80095c6:	9308      	strmi	r3, [sp, #32]
 80095c8:	2f00      	cmp	r7, #0
 80095ca:	db39      	blt.n	8009640 <_dtoa_r+0x218>
 80095cc:	9b08      	ldr	r3, [sp, #32]
 80095ce:	970f      	str	r7, [sp, #60]	@ 0x3c
 80095d0:	443b      	add	r3, r7
 80095d2:	9308      	str	r3, [sp, #32]
 80095d4:	2300      	movs	r3, #0
 80095d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80095d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095da:	2b09      	cmp	r3, #9
 80095dc:	d864      	bhi.n	80096a8 <_dtoa_r+0x280>
 80095de:	2b05      	cmp	r3, #5
 80095e0:	bfc4      	itt	gt
 80095e2:	3b04      	subgt	r3, #4
 80095e4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80095e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095e8:	f1a3 0302 	sub.w	r3, r3, #2
 80095ec:	bfcc      	ite	gt
 80095ee:	2400      	movgt	r4, #0
 80095f0:	2401      	movle	r4, #1
 80095f2:	2b03      	cmp	r3, #3
 80095f4:	d863      	bhi.n	80096be <_dtoa_r+0x296>
 80095f6:	e8df f003 	tbb	[pc, r3]
 80095fa:	372a      	.short	0x372a
 80095fc:	5535      	.short	0x5535
 80095fe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009602:	441e      	add	r6, r3
 8009604:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009608:	2b20      	cmp	r3, #32
 800960a:	bfc1      	itttt	gt
 800960c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009610:	409f      	lslgt	r7, r3
 8009612:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009616:	fa24 f303 	lsrgt.w	r3, r4, r3
 800961a:	bfd6      	itet	le
 800961c:	f1c3 0320 	rsble	r3, r3, #32
 8009620:	ea47 0003 	orrgt.w	r0, r7, r3
 8009624:	fa04 f003 	lslle.w	r0, r4, r3
 8009628:	f7f6 ff84 	bl	8000534 <__aeabi_ui2d>
 800962c:	2201      	movs	r2, #1
 800962e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009632:	3e01      	subs	r6, #1
 8009634:	9214      	str	r2, [sp, #80]	@ 0x50
 8009636:	e777      	b.n	8009528 <_dtoa_r+0x100>
 8009638:	2301      	movs	r3, #1
 800963a:	e7b8      	b.n	80095ae <_dtoa_r+0x186>
 800963c:	9012      	str	r0, [sp, #72]	@ 0x48
 800963e:	e7b7      	b.n	80095b0 <_dtoa_r+0x188>
 8009640:	427b      	negs	r3, r7
 8009642:	930a      	str	r3, [sp, #40]	@ 0x28
 8009644:	2300      	movs	r3, #0
 8009646:	eba8 0807 	sub.w	r8, r8, r7
 800964a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800964c:	e7c4      	b.n	80095d8 <_dtoa_r+0x1b0>
 800964e:	2300      	movs	r3, #0
 8009650:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009652:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009654:	2b00      	cmp	r3, #0
 8009656:	dc35      	bgt.n	80096c4 <_dtoa_r+0x29c>
 8009658:	2301      	movs	r3, #1
 800965a:	9300      	str	r3, [sp, #0]
 800965c:	9307      	str	r3, [sp, #28]
 800965e:	461a      	mov	r2, r3
 8009660:	920e      	str	r2, [sp, #56]	@ 0x38
 8009662:	e00b      	b.n	800967c <_dtoa_r+0x254>
 8009664:	2301      	movs	r3, #1
 8009666:	e7f3      	b.n	8009650 <_dtoa_r+0x228>
 8009668:	2300      	movs	r3, #0
 800966a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800966c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800966e:	18fb      	adds	r3, r7, r3
 8009670:	9300      	str	r3, [sp, #0]
 8009672:	3301      	adds	r3, #1
 8009674:	2b01      	cmp	r3, #1
 8009676:	9307      	str	r3, [sp, #28]
 8009678:	bfb8      	it	lt
 800967a:	2301      	movlt	r3, #1
 800967c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009680:	2100      	movs	r1, #0
 8009682:	2204      	movs	r2, #4
 8009684:	f102 0514 	add.w	r5, r2, #20
 8009688:	429d      	cmp	r5, r3
 800968a:	d91f      	bls.n	80096cc <_dtoa_r+0x2a4>
 800968c:	6041      	str	r1, [r0, #4]
 800968e:	4658      	mov	r0, fp
 8009690:	f000 ff32 	bl	800a4f8 <_Balloc>
 8009694:	4682      	mov	sl, r0
 8009696:	2800      	cmp	r0, #0
 8009698:	d13c      	bne.n	8009714 <_dtoa_r+0x2ec>
 800969a:	4b1b      	ldr	r3, [pc, #108]	@ (8009708 <_dtoa_r+0x2e0>)
 800969c:	4602      	mov	r2, r0
 800969e:	f240 11af 	movw	r1, #431	@ 0x1af
 80096a2:	e6d8      	b.n	8009456 <_dtoa_r+0x2e>
 80096a4:	2301      	movs	r3, #1
 80096a6:	e7e0      	b.n	800966a <_dtoa_r+0x242>
 80096a8:	2401      	movs	r4, #1
 80096aa:	2300      	movs	r3, #0
 80096ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80096ae:	940b      	str	r4, [sp, #44]	@ 0x2c
 80096b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80096b4:	9300      	str	r3, [sp, #0]
 80096b6:	9307      	str	r3, [sp, #28]
 80096b8:	2200      	movs	r2, #0
 80096ba:	2312      	movs	r3, #18
 80096bc:	e7d0      	b.n	8009660 <_dtoa_r+0x238>
 80096be:	2301      	movs	r3, #1
 80096c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80096c2:	e7f5      	b.n	80096b0 <_dtoa_r+0x288>
 80096c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80096c6:	9300      	str	r3, [sp, #0]
 80096c8:	9307      	str	r3, [sp, #28]
 80096ca:	e7d7      	b.n	800967c <_dtoa_r+0x254>
 80096cc:	3101      	adds	r1, #1
 80096ce:	0052      	lsls	r2, r2, #1
 80096d0:	e7d8      	b.n	8009684 <_dtoa_r+0x25c>
 80096d2:	bf00      	nop
 80096d4:	f3af 8000 	nop.w
 80096d8:	636f4361 	.word	0x636f4361
 80096dc:	3fd287a7 	.word	0x3fd287a7
 80096e0:	8b60c8b3 	.word	0x8b60c8b3
 80096e4:	3fc68a28 	.word	0x3fc68a28
 80096e8:	509f79fb 	.word	0x509f79fb
 80096ec:	3fd34413 	.word	0x3fd34413
 80096f0:	0800b515 	.word	0x0800b515
 80096f4:	0800b52c 	.word	0x0800b52c
 80096f8:	7ff00000 	.word	0x7ff00000
 80096fc:	0800b4e5 	.word	0x0800b4e5
 8009700:	3ff80000 	.word	0x3ff80000
 8009704:	0800b638 	.word	0x0800b638
 8009708:	0800b584 	.word	0x0800b584
 800970c:	0800b511 	.word	0x0800b511
 8009710:	0800b4e4 	.word	0x0800b4e4
 8009714:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009718:	6018      	str	r0, [r3, #0]
 800971a:	9b07      	ldr	r3, [sp, #28]
 800971c:	2b0e      	cmp	r3, #14
 800971e:	f200 80a4 	bhi.w	800986a <_dtoa_r+0x442>
 8009722:	2c00      	cmp	r4, #0
 8009724:	f000 80a1 	beq.w	800986a <_dtoa_r+0x442>
 8009728:	2f00      	cmp	r7, #0
 800972a:	dd33      	ble.n	8009794 <_dtoa_r+0x36c>
 800972c:	4bad      	ldr	r3, [pc, #692]	@ (80099e4 <_dtoa_r+0x5bc>)
 800972e:	f007 020f 	and.w	r2, r7, #15
 8009732:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009736:	ed93 7b00 	vldr	d7, [r3]
 800973a:	05f8      	lsls	r0, r7, #23
 800973c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009740:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009744:	d516      	bpl.n	8009774 <_dtoa_r+0x34c>
 8009746:	4ba8      	ldr	r3, [pc, #672]	@ (80099e8 <_dtoa_r+0x5c0>)
 8009748:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800974c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009750:	f7f7 f894 	bl	800087c <__aeabi_ddiv>
 8009754:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009758:	f004 040f 	and.w	r4, r4, #15
 800975c:	2603      	movs	r6, #3
 800975e:	4da2      	ldr	r5, [pc, #648]	@ (80099e8 <_dtoa_r+0x5c0>)
 8009760:	b954      	cbnz	r4, 8009778 <_dtoa_r+0x350>
 8009762:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009766:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800976a:	f7f7 f887 	bl	800087c <__aeabi_ddiv>
 800976e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009772:	e028      	b.n	80097c6 <_dtoa_r+0x39e>
 8009774:	2602      	movs	r6, #2
 8009776:	e7f2      	b.n	800975e <_dtoa_r+0x336>
 8009778:	07e1      	lsls	r1, r4, #31
 800977a:	d508      	bpl.n	800978e <_dtoa_r+0x366>
 800977c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009780:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009784:	f7f6 ff50 	bl	8000628 <__aeabi_dmul>
 8009788:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800978c:	3601      	adds	r6, #1
 800978e:	1064      	asrs	r4, r4, #1
 8009790:	3508      	adds	r5, #8
 8009792:	e7e5      	b.n	8009760 <_dtoa_r+0x338>
 8009794:	f000 80d2 	beq.w	800993c <_dtoa_r+0x514>
 8009798:	427c      	negs	r4, r7
 800979a:	4b92      	ldr	r3, [pc, #584]	@ (80099e4 <_dtoa_r+0x5bc>)
 800979c:	4d92      	ldr	r5, [pc, #584]	@ (80099e8 <_dtoa_r+0x5c0>)
 800979e:	f004 020f 	and.w	r2, r4, #15
 80097a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80097ae:	f7f6 ff3b 	bl	8000628 <__aeabi_dmul>
 80097b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097b6:	1124      	asrs	r4, r4, #4
 80097b8:	2300      	movs	r3, #0
 80097ba:	2602      	movs	r6, #2
 80097bc:	2c00      	cmp	r4, #0
 80097be:	f040 80b2 	bne.w	8009926 <_dtoa_r+0x4fe>
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d1d3      	bne.n	800976e <_dtoa_r+0x346>
 80097c6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80097c8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	f000 80b7 	beq.w	8009940 <_dtoa_r+0x518>
 80097d2:	4b86      	ldr	r3, [pc, #536]	@ (80099ec <_dtoa_r+0x5c4>)
 80097d4:	2200      	movs	r2, #0
 80097d6:	4620      	mov	r0, r4
 80097d8:	4629      	mov	r1, r5
 80097da:	f7f7 f997 	bl	8000b0c <__aeabi_dcmplt>
 80097de:	2800      	cmp	r0, #0
 80097e0:	f000 80ae 	beq.w	8009940 <_dtoa_r+0x518>
 80097e4:	9b07      	ldr	r3, [sp, #28]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	f000 80aa 	beq.w	8009940 <_dtoa_r+0x518>
 80097ec:	9b00      	ldr	r3, [sp, #0]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	dd37      	ble.n	8009862 <_dtoa_r+0x43a>
 80097f2:	1e7b      	subs	r3, r7, #1
 80097f4:	9304      	str	r3, [sp, #16]
 80097f6:	4620      	mov	r0, r4
 80097f8:	4b7d      	ldr	r3, [pc, #500]	@ (80099f0 <_dtoa_r+0x5c8>)
 80097fa:	2200      	movs	r2, #0
 80097fc:	4629      	mov	r1, r5
 80097fe:	f7f6 ff13 	bl	8000628 <__aeabi_dmul>
 8009802:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009806:	9c00      	ldr	r4, [sp, #0]
 8009808:	3601      	adds	r6, #1
 800980a:	4630      	mov	r0, r6
 800980c:	f7f6 fea2 	bl	8000554 <__aeabi_i2d>
 8009810:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009814:	f7f6 ff08 	bl	8000628 <__aeabi_dmul>
 8009818:	4b76      	ldr	r3, [pc, #472]	@ (80099f4 <_dtoa_r+0x5cc>)
 800981a:	2200      	movs	r2, #0
 800981c:	f7f6 fd4e 	bl	80002bc <__adddf3>
 8009820:	4605      	mov	r5, r0
 8009822:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009826:	2c00      	cmp	r4, #0
 8009828:	f040 808d 	bne.w	8009946 <_dtoa_r+0x51e>
 800982c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009830:	4b71      	ldr	r3, [pc, #452]	@ (80099f8 <_dtoa_r+0x5d0>)
 8009832:	2200      	movs	r2, #0
 8009834:	f7f6 fd40 	bl	80002b8 <__aeabi_dsub>
 8009838:	4602      	mov	r2, r0
 800983a:	460b      	mov	r3, r1
 800983c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009840:	462a      	mov	r2, r5
 8009842:	4633      	mov	r3, r6
 8009844:	f7f7 f980 	bl	8000b48 <__aeabi_dcmpgt>
 8009848:	2800      	cmp	r0, #0
 800984a:	f040 828b 	bne.w	8009d64 <_dtoa_r+0x93c>
 800984e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009852:	462a      	mov	r2, r5
 8009854:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009858:	f7f7 f958 	bl	8000b0c <__aeabi_dcmplt>
 800985c:	2800      	cmp	r0, #0
 800985e:	f040 8128 	bne.w	8009ab2 <_dtoa_r+0x68a>
 8009862:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009866:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800986a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800986c:	2b00      	cmp	r3, #0
 800986e:	f2c0 815a 	blt.w	8009b26 <_dtoa_r+0x6fe>
 8009872:	2f0e      	cmp	r7, #14
 8009874:	f300 8157 	bgt.w	8009b26 <_dtoa_r+0x6fe>
 8009878:	4b5a      	ldr	r3, [pc, #360]	@ (80099e4 <_dtoa_r+0x5bc>)
 800987a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800987e:	ed93 7b00 	vldr	d7, [r3]
 8009882:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009884:	2b00      	cmp	r3, #0
 8009886:	ed8d 7b00 	vstr	d7, [sp]
 800988a:	da03      	bge.n	8009894 <_dtoa_r+0x46c>
 800988c:	9b07      	ldr	r3, [sp, #28]
 800988e:	2b00      	cmp	r3, #0
 8009890:	f340 8101 	ble.w	8009a96 <_dtoa_r+0x66e>
 8009894:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009898:	4656      	mov	r6, sl
 800989a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800989e:	4620      	mov	r0, r4
 80098a0:	4629      	mov	r1, r5
 80098a2:	f7f6 ffeb 	bl	800087c <__aeabi_ddiv>
 80098a6:	f7f7 f96f 	bl	8000b88 <__aeabi_d2iz>
 80098aa:	4680      	mov	r8, r0
 80098ac:	f7f6 fe52 	bl	8000554 <__aeabi_i2d>
 80098b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80098b4:	f7f6 feb8 	bl	8000628 <__aeabi_dmul>
 80098b8:	4602      	mov	r2, r0
 80098ba:	460b      	mov	r3, r1
 80098bc:	4620      	mov	r0, r4
 80098be:	4629      	mov	r1, r5
 80098c0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80098c4:	f7f6 fcf8 	bl	80002b8 <__aeabi_dsub>
 80098c8:	f806 4b01 	strb.w	r4, [r6], #1
 80098cc:	9d07      	ldr	r5, [sp, #28]
 80098ce:	eba6 040a 	sub.w	r4, r6, sl
 80098d2:	42a5      	cmp	r5, r4
 80098d4:	4602      	mov	r2, r0
 80098d6:	460b      	mov	r3, r1
 80098d8:	f040 8117 	bne.w	8009b0a <_dtoa_r+0x6e2>
 80098dc:	f7f6 fcee 	bl	80002bc <__adddf3>
 80098e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80098e4:	4604      	mov	r4, r0
 80098e6:	460d      	mov	r5, r1
 80098e8:	f7f7 f92e 	bl	8000b48 <__aeabi_dcmpgt>
 80098ec:	2800      	cmp	r0, #0
 80098ee:	f040 80f9 	bne.w	8009ae4 <_dtoa_r+0x6bc>
 80098f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80098f6:	4620      	mov	r0, r4
 80098f8:	4629      	mov	r1, r5
 80098fa:	f7f7 f8fd 	bl	8000af8 <__aeabi_dcmpeq>
 80098fe:	b118      	cbz	r0, 8009908 <_dtoa_r+0x4e0>
 8009900:	f018 0f01 	tst.w	r8, #1
 8009904:	f040 80ee 	bne.w	8009ae4 <_dtoa_r+0x6bc>
 8009908:	4649      	mov	r1, r9
 800990a:	4658      	mov	r0, fp
 800990c:	f000 fe34 	bl	800a578 <_Bfree>
 8009910:	2300      	movs	r3, #0
 8009912:	7033      	strb	r3, [r6, #0]
 8009914:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009916:	3701      	adds	r7, #1
 8009918:	601f      	str	r7, [r3, #0]
 800991a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800991c:	2b00      	cmp	r3, #0
 800991e:	f000 831d 	beq.w	8009f5c <_dtoa_r+0xb34>
 8009922:	601e      	str	r6, [r3, #0]
 8009924:	e31a      	b.n	8009f5c <_dtoa_r+0xb34>
 8009926:	07e2      	lsls	r2, r4, #31
 8009928:	d505      	bpl.n	8009936 <_dtoa_r+0x50e>
 800992a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800992e:	f7f6 fe7b 	bl	8000628 <__aeabi_dmul>
 8009932:	3601      	adds	r6, #1
 8009934:	2301      	movs	r3, #1
 8009936:	1064      	asrs	r4, r4, #1
 8009938:	3508      	adds	r5, #8
 800993a:	e73f      	b.n	80097bc <_dtoa_r+0x394>
 800993c:	2602      	movs	r6, #2
 800993e:	e742      	b.n	80097c6 <_dtoa_r+0x39e>
 8009940:	9c07      	ldr	r4, [sp, #28]
 8009942:	9704      	str	r7, [sp, #16]
 8009944:	e761      	b.n	800980a <_dtoa_r+0x3e2>
 8009946:	4b27      	ldr	r3, [pc, #156]	@ (80099e4 <_dtoa_r+0x5bc>)
 8009948:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800994a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800994e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009952:	4454      	add	r4, sl
 8009954:	2900      	cmp	r1, #0
 8009956:	d053      	beq.n	8009a00 <_dtoa_r+0x5d8>
 8009958:	4928      	ldr	r1, [pc, #160]	@ (80099fc <_dtoa_r+0x5d4>)
 800995a:	2000      	movs	r0, #0
 800995c:	f7f6 ff8e 	bl	800087c <__aeabi_ddiv>
 8009960:	4633      	mov	r3, r6
 8009962:	462a      	mov	r2, r5
 8009964:	f7f6 fca8 	bl	80002b8 <__aeabi_dsub>
 8009968:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800996c:	4656      	mov	r6, sl
 800996e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009972:	f7f7 f909 	bl	8000b88 <__aeabi_d2iz>
 8009976:	4605      	mov	r5, r0
 8009978:	f7f6 fdec 	bl	8000554 <__aeabi_i2d>
 800997c:	4602      	mov	r2, r0
 800997e:	460b      	mov	r3, r1
 8009980:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009984:	f7f6 fc98 	bl	80002b8 <__aeabi_dsub>
 8009988:	3530      	adds	r5, #48	@ 0x30
 800998a:	4602      	mov	r2, r0
 800998c:	460b      	mov	r3, r1
 800998e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009992:	f806 5b01 	strb.w	r5, [r6], #1
 8009996:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800999a:	f7f7 f8b7 	bl	8000b0c <__aeabi_dcmplt>
 800999e:	2800      	cmp	r0, #0
 80099a0:	d171      	bne.n	8009a86 <_dtoa_r+0x65e>
 80099a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80099a6:	4911      	ldr	r1, [pc, #68]	@ (80099ec <_dtoa_r+0x5c4>)
 80099a8:	2000      	movs	r0, #0
 80099aa:	f7f6 fc85 	bl	80002b8 <__aeabi_dsub>
 80099ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80099b2:	f7f7 f8ab 	bl	8000b0c <__aeabi_dcmplt>
 80099b6:	2800      	cmp	r0, #0
 80099b8:	f040 8095 	bne.w	8009ae6 <_dtoa_r+0x6be>
 80099bc:	42a6      	cmp	r6, r4
 80099be:	f43f af50 	beq.w	8009862 <_dtoa_r+0x43a>
 80099c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80099c6:	4b0a      	ldr	r3, [pc, #40]	@ (80099f0 <_dtoa_r+0x5c8>)
 80099c8:	2200      	movs	r2, #0
 80099ca:	f7f6 fe2d 	bl	8000628 <__aeabi_dmul>
 80099ce:	4b08      	ldr	r3, [pc, #32]	@ (80099f0 <_dtoa_r+0x5c8>)
 80099d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80099d4:	2200      	movs	r2, #0
 80099d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099da:	f7f6 fe25 	bl	8000628 <__aeabi_dmul>
 80099de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099e2:	e7c4      	b.n	800996e <_dtoa_r+0x546>
 80099e4:	0800b638 	.word	0x0800b638
 80099e8:	0800b610 	.word	0x0800b610
 80099ec:	3ff00000 	.word	0x3ff00000
 80099f0:	40240000 	.word	0x40240000
 80099f4:	401c0000 	.word	0x401c0000
 80099f8:	40140000 	.word	0x40140000
 80099fc:	3fe00000 	.word	0x3fe00000
 8009a00:	4631      	mov	r1, r6
 8009a02:	4628      	mov	r0, r5
 8009a04:	f7f6 fe10 	bl	8000628 <__aeabi_dmul>
 8009a08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009a0c:	9415      	str	r4, [sp, #84]	@ 0x54
 8009a0e:	4656      	mov	r6, sl
 8009a10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a14:	f7f7 f8b8 	bl	8000b88 <__aeabi_d2iz>
 8009a18:	4605      	mov	r5, r0
 8009a1a:	f7f6 fd9b 	bl	8000554 <__aeabi_i2d>
 8009a1e:	4602      	mov	r2, r0
 8009a20:	460b      	mov	r3, r1
 8009a22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a26:	f7f6 fc47 	bl	80002b8 <__aeabi_dsub>
 8009a2a:	3530      	adds	r5, #48	@ 0x30
 8009a2c:	f806 5b01 	strb.w	r5, [r6], #1
 8009a30:	4602      	mov	r2, r0
 8009a32:	460b      	mov	r3, r1
 8009a34:	42a6      	cmp	r6, r4
 8009a36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009a3a:	f04f 0200 	mov.w	r2, #0
 8009a3e:	d124      	bne.n	8009a8a <_dtoa_r+0x662>
 8009a40:	4bac      	ldr	r3, [pc, #688]	@ (8009cf4 <_dtoa_r+0x8cc>)
 8009a42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009a46:	f7f6 fc39 	bl	80002bc <__adddf3>
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a52:	f7f7 f879 	bl	8000b48 <__aeabi_dcmpgt>
 8009a56:	2800      	cmp	r0, #0
 8009a58:	d145      	bne.n	8009ae6 <_dtoa_r+0x6be>
 8009a5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009a5e:	49a5      	ldr	r1, [pc, #660]	@ (8009cf4 <_dtoa_r+0x8cc>)
 8009a60:	2000      	movs	r0, #0
 8009a62:	f7f6 fc29 	bl	80002b8 <__aeabi_dsub>
 8009a66:	4602      	mov	r2, r0
 8009a68:	460b      	mov	r3, r1
 8009a6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a6e:	f7f7 f84d 	bl	8000b0c <__aeabi_dcmplt>
 8009a72:	2800      	cmp	r0, #0
 8009a74:	f43f aef5 	beq.w	8009862 <_dtoa_r+0x43a>
 8009a78:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009a7a:	1e73      	subs	r3, r6, #1
 8009a7c:	9315      	str	r3, [sp, #84]	@ 0x54
 8009a7e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009a82:	2b30      	cmp	r3, #48	@ 0x30
 8009a84:	d0f8      	beq.n	8009a78 <_dtoa_r+0x650>
 8009a86:	9f04      	ldr	r7, [sp, #16]
 8009a88:	e73e      	b.n	8009908 <_dtoa_r+0x4e0>
 8009a8a:	4b9b      	ldr	r3, [pc, #620]	@ (8009cf8 <_dtoa_r+0x8d0>)
 8009a8c:	f7f6 fdcc 	bl	8000628 <__aeabi_dmul>
 8009a90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a94:	e7bc      	b.n	8009a10 <_dtoa_r+0x5e8>
 8009a96:	d10c      	bne.n	8009ab2 <_dtoa_r+0x68a>
 8009a98:	4b98      	ldr	r3, [pc, #608]	@ (8009cfc <_dtoa_r+0x8d4>)
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009aa0:	f7f6 fdc2 	bl	8000628 <__aeabi_dmul>
 8009aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009aa8:	f7f7 f844 	bl	8000b34 <__aeabi_dcmpge>
 8009aac:	2800      	cmp	r0, #0
 8009aae:	f000 8157 	beq.w	8009d60 <_dtoa_r+0x938>
 8009ab2:	2400      	movs	r4, #0
 8009ab4:	4625      	mov	r5, r4
 8009ab6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ab8:	43db      	mvns	r3, r3
 8009aba:	9304      	str	r3, [sp, #16]
 8009abc:	4656      	mov	r6, sl
 8009abe:	2700      	movs	r7, #0
 8009ac0:	4621      	mov	r1, r4
 8009ac2:	4658      	mov	r0, fp
 8009ac4:	f000 fd58 	bl	800a578 <_Bfree>
 8009ac8:	2d00      	cmp	r5, #0
 8009aca:	d0dc      	beq.n	8009a86 <_dtoa_r+0x65e>
 8009acc:	b12f      	cbz	r7, 8009ada <_dtoa_r+0x6b2>
 8009ace:	42af      	cmp	r7, r5
 8009ad0:	d003      	beq.n	8009ada <_dtoa_r+0x6b2>
 8009ad2:	4639      	mov	r1, r7
 8009ad4:	4658      	mov	r0, fp
 8009ad6:	f000 fd4f 	bl	800a578 <_Bfree>
 8009ada:	4629      	mov	r1, r5
 8009adc:	4658      	mov	r0, fp
 8009ade:	f000 fd4b 	bl	800a578 <_Bfree>
 8009ae2:	e7d0      	b.n	8009a86 <_dtoa_r+0x65e>
 8009ae4:	9704      	str	r7, [sp, #16]
 8009ae6:	4633      	mov	r3, r6
 8009ae8:	461e      	mov	r6, r3
 8009aea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009aee:	2a39      	cmp	r2, #57	@ 0x39
 8009af0:	d107      	bne.n	8009b02 <_dtoa_r+0x6da>
 8009af2:	459a      	cmp	sl, r3
 8009af4:	d1f8      	bne.n	8009ae8 <_dtoa_r+0x6c0>
 8009af6:	9a04      	ldr	r2, [sp, #16]
 8009af8:	3201      	adds	r2, #1
 8009afa:	9204      	str	r2, [sp, #16]
 8009afc:	2230      	movs	r2, #48	@ 0x30
 8009afe:	f88a 2000 	strb.w	r2, [sl]
 8009b02:	781a      	ldrb	r2, [r3, #0]
 8009b04:	3201      	adds	r2, #1
 8009b06:	701a      	strb	r2, [r3, #0]
 8009b08:	e7bd      	b.n	8009a86 <_dtoa_r+0x65e>
 8009b0a:	4b7b      	ldr	r3, [pc, #492]	@ (8009cf8 <_dtoa_r+0x8d0>)
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	f7f6 fd8b 	bl	8000628 <__aeabi_dmul>
 8009b12:	2200      	movs	r2, #0
 8009b14:	2300      	movs	r3, #0
 8009b16:	4604      	mov	r4, r0
 8009b18:	460d      	mov	r5, r1
 8009b1a:	f7f6 ffed 	bl	8000af8 <__aeabi_dcmpeq>
 8009b1e:	2800      	cmp	r0, #0
 8009b20:	f43f aebb 	beq.w	800989a <_dtoa_r+0x472>
 8009b24:	e6f0      	b.n	8009908 <_dtoa_r+0x4e0>
 8009b26:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009b28:	2a00      	cmp	r2, #0
 8009b2a:	f000 80db 	beq.w	8009ce4 <_dtoa_r+0x8bc>
 8009b2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b30:	2a01      	cmp	r2, #1
 8009b32:	f300 80bf 	bgt.w	8009cb4 <_dtoa_r+0x88c>
 8009b36:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009b38:	2a00      	cmp	r2, #0
 8009b3a:	f000 80b7 	beq.w	8009cac <_dtoa_r+0x884>
 8009b3e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009b42:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009b44:	4646      	mov	r6, r8
 8009b46:	9a08      	ldr	r2, [sp, #32]
 8009b48:	2101      	movs	r1, #1
 8009b4a:	441a      	add	r2, r3
 8009b4c:	4658      	mov	r0, fp
 8009b4e:	4498      	add	r8, r3
 8009b50:	9208      	str	r2, [sp, #32]
 8009b52:	f000 fdc5 	bl	800a6e0 <__i2b>
 8009b56:	4605      	mov	r5, r0
 8009b58:	b15e      	cbz	r6, 8009b72 <_dtoa_r+0x74a>
 8009b5a:	9b08      	ldr	r3, [sp, #32]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	dd08      	ble.n	8009b72 <_dtoa_r+0x74a>
 8009b60:	42b3      	cmp	r3, r6
 8009b62:	9a08      	ldr	r2, [sp, #32]
 8009b64:	bfa8      	it	ge
 8009b66:	4633      	movge	r3, r6
 8009b68:	eba8 0803 	sub.w	r8, r8, r3
 8009b6c:	1af6      	subs	r6, r6, r3
 8009b6e:	1ad3      	subs	r3, r2, r3
 8009b70:	9308      	str	r3, [sp, #32]
 8009b72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b74:	b1f3      	cbz	r3, 8009bb4 <_dtoa_r+0x78c>
 8009b76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	f000 80b7 	beq.w	8009cec <_dtoa_r+0x8c4>
 8009b7e:	b18c      	cbz	r4, 8009ba4 <_dtoa_r+0x77c>
 8009b80:	4629      	mov	r1, r5
 8009b82:	4622      	mov	r2, r4
 8009b84:	4658      	mov	r0, fp
 8009b86:	f000 fe6b 	bl	800a860 <__pow5mult>
 8009b8a:	464a      	mov	r2, r9
 8009b8c:	4601      	mov	r1, r0
 8009b8e:	4605      	mov	r5, r0
 8009b90:	4658      	mov	r0, fp
 8009b92:	f000 fdbb 	bl	800a70c <__multiply>
 8009b96:	4649      	mov	r1, r9
 8009b98:	9004      	str	r0, [sp, #16]
 8009b9a:	4658      	mov	r0, fp
 8009b9c:	f000 fcec 	bl	800a578 <_Bfree>
 8009ba0:	9b04      	ldr	r3, [sp, #16]
 8009ba2:	4699      	mov	r9, r3
 8009ba4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ba6:	1b1a      	subs	r2, r3, r4
 8009ba8:	d004      	beq.n	8009bb4 <_dtoa_r+0x78c>
 8009baa:	4649      	mov	r1, r9
 8009bac:	4658      	mov	r0, fp
 8009bae:	f000 fe57 	bl	800a860 <__pow5mult>
 8009bb2:	4681      	mov	r9, r0
 8009bb4:	2101      	movs	r1, #1
 8009bb6:	4658      	mov	r0, fp
 8009bb8:	f000 fd92 	bl	800a6e0 <__i2b>
 8009bbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bbe:	4604      	mov	r4, r0
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	f000 81cf 	beq.w	8009f64 <_dtoa_r+0xb3c>
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	4601      	mov	r1, r0
 8009bca:	4658      	mov	r0, fp
 8009bcc:	f000 fe48 	bl	800a860 <__pow5mult>
 8009bd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	4604      	mov	r4, r0
 8009bd6:	f300 8095 	bgt.w	8009d04 <_dtoa_r+0x8dc>
 8009bda:	9b02      	ldr	r3, [sp, #8]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	f040 8087 	bne.w	8009cf0 <_dtoa_r+0x8c8>
 8009be2:	9b03      	ldr	r3, [sp, #12]
 8009be4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	f040 8089 	bne.w	8009d00 <_dtoa_r+0x8d8>
 8009bee:	9b03      	ldr	r3, [sp, #12]
 8009bf0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009bf4:	0d1b      	lsrs	r3, r3, #20
 8009bf6:	051b      	lsls	r3, r3, #20
 8009bf8:	b12b      	cbz	r3, 8009c06 <_dtoa_r+0x7de>
 8009bfa:	9b08      	ldr	r3, [sp, #32]
 8009bfc:	3301      	adds	r3, #1
 8009bfe:	9308      	str	r3, [sp, #32]
 8009c00:	f108 0801 	add.w	r8, r8, #1
 8009c04:	2301      	movs	r3, #1
 8009c06:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	f000 81b0 	beq.w	8009f70 <_dtoa_r+0xb48>
 8009c10:	6923      	ldr	r3, [r4, #16]
 8009c12:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009c16:	6918      	ldr	r0, [r3, #16]
 8009c18:	f000 fd16 	bl	800a648 <__hi0bits>
 8009c1c:	f1c0 0020 	rsb	r0, r0, #32
 8009c20:	9b08      	ldr	r3, [sp, #32]
 8009c22:	4418      	add	r0, r3
 8009c24:	f010 001f 	ands.w	r0, r0, #31
 8009c28:	d077      	beq.n	8009d1a <_dtoa_r+0x8f2>
 8009c2a:	f1c0 0320 	rsb	r3, r0, #32
 8009c2e:	2b04      	cmp	r3, #4
 8009c30:	dd6b      	ble.n	8009d0a <_dtoa_r+0x8e2>
 8009c32:	9b08      	ldr	r3, [sp, #32]
 8009c34:	f1c0 001c 	rsb	r0, r0, #28
 8009c38:	4403      	add	r3, r0
 8009c3a:	4480      	add	r8, r0
 8009c3c:	4406      	add	r6, r0
 8009c3e:	9308      	str	r3, [sp, #32]
 8009c40:	f1b8 0f00 	cmp.w	r8, #0
 8009c44:	dd05      	ble.n	8009c52 <_dtoa_r+0x82a>
 8009c46:	4649      	mov	r1, r9
 8009c48:	4642      	mov	r2, r8
 8009c4a:	4658      	mov	r0, fp
 8009c4c:	f000 fe62 	bl	800a914 <__lshift>
 8009c50:	4681      	mov	r9, r0
 8009c52:	9b08      	ldr	r3, [sp, #32]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	dd05      	ble.n	8009c64 <_dtoa_r+0x83c>
 8009c58:	4621      	mov	r1, r4
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	4658      	mov	r0, fp
 8009c5e:	f000 fe59 	bl	800a914 <__lshift>
 8009c62:	4604      	mov	r4, r0
 8009c64:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d059      	beq.n	8009d1e <_dtoa_r+0x8f6>
 8009c6a:	4621      	mov	r1, r4
 8009c6c:	4648      	mov	r0, r9
 8009c6e:	f000 febd 	bl	800a9ec <__mcmp>
 8009c72:	2800      	cmp	r0, #0
 8009c74:	da53      	bge.n	8009d1e <_dtoa_r+0x8f6>
 8009c76:	1e7b      	subs	r3, r7, #1
 8009c78:	9304      	str	r3, [sp, #16]
 8009c7a:	4649      	mov	r1, r9
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	220a      	movs	r2, #10
 8009c80:	4658      	mov	r0, fp
 8009c82:	f000 fc9b 	bl	800a5bc <__multadd>
 8009c86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c88:	4681      	mov	r9, r0
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	f000 8172 	beq.w	8009f74 <_dtoa_r+0xb4c>
 8009c90:	2300      	movs	r3, #0
 8009c92:	4629      	mov	r1, r5
 8009c94:	220a      	movs	r2, #10
 8009c96:	4658      	mov	r0, fp
 8009c98:	f000 fc90 	bl	800a5bc <__multadd>
 8009c9c:	9b00      	ldr	r3, [sp, #0]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	4605      	mov	r5, r0
 8009ca2:	dc67      	bgt.n	8009d74 <_dtoa_r+0x94c>
 8009ca4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ca6:	2b02      	cmp	r3, #2
 8009ca8:	dc41      	bgt.n	8009d2e <_dtoa_r+0x906>
 8009caa:	e063      	b.n	8009d74 <_dtoa_r+0x94c>
 8009cac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009cae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009cb2:	e746      	b.n	8009b42 <_dtoa_r+0x71a>
 8009cb4:	9b07      	ldr	r3, [sp, #28]
 8009cb6:	1e5c      	subs	r4, r3, #1
 8009cb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009cba:	42a3      	cmp	r3, r4
 8009cbc:	bfbf      	itttt	lt
 8009cbe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009cc0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009cc2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009cc4:	1ae3      	sublt	r3, r4, r3
 8009cc6:	bfb4      	ite	lt
 8009cc8:	18d2      	addlt	r2, r2, r3
 8009cca:	1b1c      	subge	r4, r3, r4
 8009ccc:	9b07      	ldr	r3, [sp, #28]
 8009cce:	bfbc      	itt	lt
 8009cd0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009cd2:	2400      	movlt	r4, #0
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	bfb5      	itete	lt
 8009cd8:	eba8 0603 	sublt.w	r6, r8, r3
 8009cdc:	9b07      	ldrge	r3, [sp, #28]
 8009cde:	2300      	movlt	r3, #0
 8009ce0:	4646      	movge	r6, r8
 8009ce2:	e730      	b.n	8009b46 <_dtoa_r+0x71e>
 8009ce4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009ce6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009ce8:	4646      	mov	r6, r8
 8009cea:	e735      	b.n	8009b58 <_dtoa_r+0x730>
 8009cec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009cee:	e75c      	b.n	8009baa <_dtoa_r+0x782>
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	e788      	b.n	8009c06 <_dtoa_r+0x7de>
 8009cf4:	3fe00000 	.word	0x3fe00000
 8009cf8:	40240000 	.word	0x40240000
 8009cfc:	40140000 	.word	0x40140000
 8009d00:	9b02      	ldr	r3, [sp, #8]
 8009d02:	e780      	b.n	8009c06 <_dtoa_r+0x7de>
 8009d04:	2300      	movs	r3, #0
 8009d06:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d08:	e782      	b.n	8009c10 <_dtoa_r+0x7e8>
 8009d0a:	d099      	beq.n	8009c40 <_dtoa_r+0x818>
 8009d0c:	9a08      	ldr	r2, [sp, #32]
 8009d0e:	331c      	adds	r3, #28
 8009d10:	441a      	add	r2, r3
 8009d12:	4498      	add	r8, r3
 8009d14:	441e      	add	r6, r3
 8009d16:	9208      	str	r2, [sp, #32]
 8009d18:	e792      	b.n	8009c40 <_dtoa_r+0x818>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	e7f6      	b.n	8009d0c <_dtoa_r+0x8e4>
 8009d1e:	9b07      	ldr	r3, [sp, #28]
 8009d20:	9704      	str	r7, [sp, #16]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	dc20      	bgt.n	8009d68 <_dtoa_r+0x940>
 8009d26:	9300      	str	r3, [sp, #0]
 8009d28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d2a:	2b02      	cmp	r3, #2
 8009d2c:	dd1e      	ble.n	8009d6c <_dtoa_r+0x944>
 8009d2e:	9b00      	ldr	r3, [sp, #0]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	f47f aec0 	bne.w	8009ab6 <_dtoa_r+0x68e>
 8009d36:	4621      	mov	r1, r4
 8009d38:	2205      	movs	r2, #5
 8009d3a:	4658      	mov	r0, fp
 8009d3c:	f000 fc3e 	bl	800a5bc <__multadd>
 8009d40:	4601      	mov	r1, r0
 8009d42:	4604      	mov	r4, r0
 8009d44:	4648      	mov	r0, r9
 8009d46:	f000 fe51 	bl	800a9ec <__mcmp>
 8009d4a:	2800      	cmp	r0, #0
 8009d4c:	f77f aeb3 	ble.w	8009ab6 <_dtoa_r+0x68e>
 8009d50:	4656      	mov	r6, sl
 8009d52:	2331      	movs	r3, #49	@ 0x31
 8009d54:	f806 3b01 	strb.w	r3, [r6], #1
 8009d58:	9b04      	ldr	r3, [sp, #16]
 8009d5a:	3301      	adds	r3, #1
 8009d5c:	9304      	str	r3, [sp, #16]
 8009d5e:	e6ae      	b.n	8009abe <_dtoa_r+0x696>
 8009d60:	9c07      	ldr	r4, [sp, #28]
 8009d62:	9704      	str	r7, [sp, #16]
 8009d64:	4625      	mov	r5, r4
 8009d66:	e7f3      	b.n	8009d50 <_dtoa_r+0x928>
 8009d68:	9b07      	ldr	r3, [sp, #28]
 8009d6a:	9300      	str	r3, [sp, #0]
 8009d6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	f000 8104 	beq.w	8009f7c <_dtoa_r+0xb54>
 8009d74:	2e00      	cmp	r6, #0
 8009d76:	dd05      	ble.n	8009d84 <_dtoa_r+0x95c>
 8009d78:	4629      	mov	r1, r5
 8009d7a:	4632      	mov	r2, r6
 8009d7c:	4658      	mov	r0, fp
 8009d7e:	f000 fdc9 	bl	800a914 <__lshift>
 8009d82:	4605      	mov	r5, r0
 8009d84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d05a      	beq.n	8009e40 <_dtoa_r+0xa18>
 8009d8a:	6869      	ldr	r1, [r5, #4]
 8009d8c:	4658      	mov	r0, fp
 8009d8e:	f000 fbb3 	bl	800a4f8 <_Balloc>
 8009d92:	4606      	mov	r6, r0
 8009d94:	b928      	cbnz	r0, 8009da2 <_dtoa_r+0x97a>
 8009d96:	4b84      	ldr	r3, [pc, #528]	@ (8009fa8 <_dtoa_r+0xb80>)
 8009d98:	4602      	mov	r2, r0
 8009d9a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009d9e:	f7ff bb5a 	b.w	8009456 <_dtoa_r+0x2e>
 8009da2:	692a      	ldr	r2, [r5, #16]
 8009da4:	3202      	adds	r2, #2
 8009da6:	0092      	lsls	r2, r2, #2
 8009da8:	f105 010c 	add.w	r1, r5, #12
 8009dac:	300c      	adds	r0, #12
 8009dae:	f7ff faa4 	bl	80092fa <memcpy>
 8009db2:	2201      	movs	r2, #1
 8009db4:	4631      	mov	r1, r6
 8009db6:	4658      	mov	r0, fp
 8009db8:	f000 fdac 	bl	800a914 <__lshift>
 8009dbc:	f10a 0301 	add.w	r3, sl, #1
 8009dc0:	9307      	str	r3, [sp, #28]
 8009dc2:	9b00      	ldr	r3, [sp, #0]
 8009dc4:	4453      	add	r3, sl
 8009dc6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009dc8:	9b02      	ldr	r3, [sp, #8]
 8009dca:	f003 0301 	and.w	r3, r3, #1
 8009dce:	462f      	mov	r7, r5
 8009dd0:	930a      	str	r3, [sp, #40]	@ 0x28
 8009dd2:	4605      	mov	r5, r0
 8009dd4:	9b07      	ldr	r3, [sp, #28]
 8009dd6:	4621      	mov	r1, r4
 8009dd8:	3b01      	subs	r3, #1
 8009dda:	4648      	mov	r0, r9
 8009ddc:	9300      	str	r3, [sp, #0]
 8009dde:	f7ff fa9a 	bl	8009316 <quorem>
 8009de2:	4639      	mov	r1, r7
 8009de4:	9002      	str	r0, [sp, #8]
 8009de6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009dea:	4648      	mov	r0, r9
 8009dec:	f000 fdfe 	bl	800a9ec <__mcmp>
 8009df0:	462a      	mov	r2, r5
 8009df2:	9008      	str	r0, [sp, #32]
 8009df4:	4621      	mov	r1, r4
 8009df6:	4658      	mov	r0, fp
 8009df8:	f000 fe14 	bl	800aa24 <__mdiff>
 8009dfc:	68c2      	ldr	r2, [r0, #12]
 8009dfe:	4606      	mov	r6, r0
 8009e00:	bb02      	cbnz	r2, 8009e44 <_dtoa_r+0xa1c>
 8009e02:	4601      	mov	r1, r0
 8009e04:	4648      	mov	r0, r9
 8009e06:	f000 fdf1 	bl	800a9ec <__mcmp>
 8009e0a:	4602      	mov	r2, r0
 8009e0c:	4631      	mov	r1, r6
 8009e0e:	4658      	mov	r0, fp
 8009e10:	920e      	str	r2, [sp, #56]	@ 0x38
 8009e12:	f000 fbb1 	bl	800a578 <_Bfree>
 8009e16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e18:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e1a:	9e07      	ldr	r6, [sp, #28]
 8009e1c:	ea43 0102 	orr.w	r1, r3, r2
 8009e20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e22:	4319      	orrs	r1, r3
 8009e24:	d110      	bne.n	8009e48 <_dtoa_r+0xa20>
 8009e26:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009e2a:	d029      	beq.n	8009e80 <_dtoa_r+0xa58>
 8009e2c:	9b08      	ldr	r3, [sp, #32]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	dd02      	ble.n	8009e38 <_dtoa_r+0xa10>
 8009e32:	9b02      	ldr	r3, [sp, #8]
 8009e34:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009e38:	9b00      	ldr	r3, [sp, #0]
 8009e3a:	f883 8000 	strb.w	r8, [r3]
 8009e3e:	e63f      	b.n	8009ac0 <_dtoa_r+0x698>
 8009e40:	4628      	mov	r0, r5
 8009e42:	e7bb      	b.n	8009dbc <_dtoa_r+0x994>
 8009e44:	2201      	movs	r2, #1
 8009e46:	e7e1      	b.n	8009e0c <_dtoa_r+0x9e4>
 8009e48:	9b08      	ldr	r3, [sp, #32]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	db04      	blt.n	8009e58 <_dtoa_r+0xa30>
 8009e4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009e50:	430b      	orrs	r3, r1
 8009e52:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009e54:	430b      	orrs	r3, r1
 8009e56:	d120      	bne.n	8009e9a <_dtoa_r+0xa72>
 8009e58:	2a00      	cmp	r2, #0
 8009e5a:	dded      	ble.n	8009e38 <_dtoa_r+0xa10>
 8009e5c:	4649      	mov	r1, r9
 8009e5e:	2201      	movs	r2, #1
 8009e60:	4658      	mov	r0, fp
 8009e62:	f000 fd57 	bl	800a914 <__lshift>
 8009e66:	4621      	mov	r1, r4
 8009e68:	4681      	mov	r9, r0
 8009e6a:	f000 fdbf 	bl	800a9ec <__mcmp>
 8009e6e:	2800      	cmp	r0, #0
 8009e70:	dc03      	bgt.n	8009e7a <_dtoa_r+0xa52>
 8009e72:	d1e1      	bne.n	8009e38 <_dtoa_r+0xa10>
 8009e74:	f018 0f01 	tst.w	r8, #1
 8009e78:	d0de      	beq.n	8009e38 <_dtoa_r+0xa10>
 8009e7a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009e7e:	d1d8      	bne.n	8009e32 <_dtoa_r+0xa0a>
 8009e80:	9a00      	ldr	r2, [sp, #0]
 8009e82:	2339      	movs	r3, #57	@ 0x39
 8009e84:	7013      	strb	r3, [r2, #0]
 8009e86:	4633      	mov	r3, r6
 8009e88:	461e      	mov	r6, r3
 8009e8a:	3b01      	subs	r3, #1
 8009e8c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009e90:	2a39      	cmp	r2, #57	@ 0x39
 8009e92:	d052      	beq.n	8009f3a <_dtoa_r+0xb12>
 8009e94:	3201      	adds	r2, #1
 8009e96:	701a      	strb	r2, [r3, #0]
 8009e98:	e612      	b.n	8009ac0 <_dtoa_r+0x698>
 8009e9a:	2a00      	cmp	r2, #0
 8009e9c:	dd07      	ble.n	8009eae <_dtoa_r+0xa86>
 8009e9e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009ea2:	d0ed      	beq.n	8009e80 <_dtoa_r+0xa58>
 8009ea4:	9a00      	ldr	r2, [sp, #0]
 8009ea6:	f108 0301 	add.w	r3, r8, #1
 8009eaa:	7013      	strb	r3, [r2, #0]
 8009eac:	e608      	b.n	8009ac0 <_dtoa_r+0x698>
 8009eae:	9b07      	ldr	r3, [sp, #28]
 8009eb0:	9a07      	ldr	r2, [sp, #28]
 8009eb2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009eb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d028      	beq.n	8009f0e <_dtoa_r+0xae6>
 8009ebc:	4649      	mov	r1, r9
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	220a      	movs	r2, #10
 8009ec2:	4658      	mov	r0, fp
 8009ec4:	f000 fb7a 	bl	800a5bc <__multadd>
 8009ec8:	42af      	cmp	r7, r5
 8009eca:	4681      	mov	r9, r0
 8009ecc:	f04f 0300 	mov.w	r3, #0
 8009ed0:	f04f 020a 	mov.w	r2, #10
 8009ed4:	4639      	mov	r1, r7
 8009ed6:	4658      	mov	r0, fp
 8009ed8:	d107      	bne.n	8009eea <_dtoa_r+0xac2>
 8009eda:	f000 fb6f 	bl	800a5bc <__multadd>
 8009ede:	4607      	mov	r7, r0
 8009ee0:	4605      	mov	r5, r0
 8009ee2:	9b07      	ldr	r3, [sp, #28]
 8009ee4:	3301      	adds	r3, #1
 8009ee6:	9307      	str	r3, [sp, #28]
 8009ee8:	e774      	b.n	8009dd4 <_dtoa_r+0x9ac>
 8009eea:	f000 fb67 	bl	800a5bc <__multadd>
 8009eee:	4629      	mov	r1, r5
 8009ef0:	4607      	mov	r7, r0
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	220a      	movs	r2, #10
 8009ef6:	4658      	mov	r0, fp
 8009ef8:	f000 fb60 	bl	800a5bc <__multadd>
 8009efc:	4605      	mov	r5, r0
 8009efe:	e7f0      	b.n	8009ee2 <_dtoa_r+0xaba>
 8009f00:	9b00      	ldr	r3, [sp, #0]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	bfcc      	ite	gt
 8009f06:	461e      	movgt	r6, r3
 8009f08:	2601      	movle	r6, #1
 8009f0a:	4456      	add	r6, sl
 8009f0c:	2700      	movs	r7, #0
 8009f0e:	4649      	mov	r1, r9
 8009f10:	2201      	movs	r2, #1
 8009f12:	4658      	mov	r0, fp
 8009f14:	f000 fcfe 	bl	800a914 <__lshift>
 8009f18:	4621      	mov	r1, r4
 8009f1a:	4681      	mov	r9, r0
 8009f1c:	f000 fd66 	bl	800a9ec <__mcmp>
 8009f20:	2800      	cmp	r0, #0
 8009f22:	dcb0      	bgt.n	8009e86 <_dtoa_r+0xa5e>
 8009f24:	d102      	bne.n	8009f2c <_dtoa_r+0xb04>
 8009f26:	f018 0f01 	tst.w	r8, #1
 8009f2a:	d1ac      	bne.n	8009e86 <_dtoa_r+0xa5e>
 8009f2c:	4633      	mov	r3, r6
 8009f2e:	461e      	mov	r6, r3
 8009f30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f34:	2a30      	cmp	r2, #48	@ 0x30
 8009f36:	d0fa      	beq.n	8009f2e <_dtoa_r+0xb06>
 8009f38:	e5c2      	b.n	8009ac0 <_dtoa_r+0x698>
 8009f3a:	459a      	cmp	sl, r3
 8009f3c:	d1a4      	bne.n	8009e88 <_dtoa_r+0xa60>
 8009f3e:	9b04      	ldr	r3, [sp, #16]
 8009f40:	3301      	adds	r3, #1
 8009f42:	9304      	str	r3, [sp, #16]
 8009f44:	2331      	movs	r3, #49	@ 0x31
 8009f46:	f88a 3000 	strb.w	r3, [sl]
 8009f4a:	e5b9      	b.n	8009ac0 <_dtoa_r+0x698>
 8009f4c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009f4e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009fac <_dtoa_r+0xb84>
 8009f52:	b11b      	cbz	r3, 8009f5c <_dtoa_r+0xb34>
 8009f54:	f10a 0308 	add.w	r3, sl, #8
 8009f58:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009f5a:	6013      	str	r3, [r2, #0]
 8009f5c:	4650      	mov	r0, sl
 8009f5e:	b019      	add	sp, #100	@ 0x64
 8009f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f66:	2b01      	cmp	r3, #1
 8009f68:	f77f ae37 	ble.w	8009bda <_dtoa_r+0x7b2>
 8009f6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f70:	2001      	movs	r0, #1
 8009f72:	e655      	b.n	8009c20 <_dtoa_r+0x7f8>
 8009f74:	9b00      	ldr	r3, [sp, #0]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	f77f aed6 	ble.w	8009d28 <_dtoa_r+0x900>
 8009f7c:	4656      	mov	r6, sl
 8009f7e:	4621      	mov	r1, r4
 8009f80:	4648      	mov	r0, r9
 8009f82:	f7ff f9c8 	bl	8009316 <quorem>
 8009f86:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009f8a:	f806 8b01 	strb.w	r8, [r6], #1
 8009f8e:	9b00      	ldr	r3, [sp, #0]
 8009f90:	eba6 020a 	sub.w	r2, r6, sl
 8009f94:	4293      	cmp	r3, r2
 8009f96:	ddb3      	ble.n	8009f00 <_dtoa_r+0xad8>
 8009f98:	4649      	mov	r1, r9
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	220a      	movs	r2, #10
 8009f9e:	4658      	mov	r0, fp
 8009fa0:	f000 fb0c 	bl	800a5bc <__multadd>
 8009fa4:	4681      	mov	r9, r0
 8009fa6:	e7ea      	b.n	8009f7e <_dtoa_r+0xb56>
 8009fa8:	0800b584 	.word	0x0800b584
 8009fac:	0800b508 	.word	0x0800b508

08009fb0 <__sfputc_r>:
 8009fb0:	6893      	ldr	r3, [r2, #8]
 8009fb2:	3b01      	subs	r3, #1
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	b410      	push	{r4}
 8009fb8:	6093      	str	r3, [r2, #8]
 8009fba:	da08      	bge.n	8009fce <__sfputc_r+0x1e>
 8009fbc:	6994      	ldr	r4, [r2, #24]
 8009fbe:	42a3      	cmp	r3, r4
 8009fc0:	db01      	blt.n	8009fc6 <__sfputc_r+0x16>
 8009fc2:	290a      	cmp	r1, #10
 8009fc4:	d103      	bne.n	8009fce <__sfputc_r+0x1e>
 8009fc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fca:	f000 be5a 	b.w	800ac82 <__swbuf_r>
 8009fce:	6813      	ldr	r3, [r2, #0]
 8009fd0:	1c58      	adds	r0, r3, #1
 8009fd2:	6010      	str	r0, [r2, #0]
 8009fd4:	7019      	strb	r1, [r3, #0]
 8009fd6:	4608      	mov	r0, r1
 8009fd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fdc:	4770      	bx	lr

08009fde <__sfputs_r>:
 8009fde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fe0:	4606      	mov	r6, r0
 8009fe2:	460f      	mov	r7, r1
 8009fe4:	4614      	mov	r4, r2
 8009fe6:	18d5      	adds	r5, r2, r3
 8009fe8:	42ac      	cmp	r4, r5
 8009fea:	d101      	bne.n	8009ff0 <__sfputs_r+0x12>
 8009fec:	2000      	movs	r0, #0
 8009fee:	e007      	b.n	800a000 <__sfputs_r+0x22>
 8009ff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ff4:	463a      	mov	r2, r7
 8009ff6:	4630      	mov	r0, r6
 8009ff8:	f7ff ffda 	bl	8009fb0 <__sfputc_r>
 8009ffc:	1c43      	adds	r3, r0, #1
 8009ffe:	d1f3      	bne.n	8009fe8 <__sfputs_r+0xa>
 800a000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a004 <_vfiprintf_r>:
 800a004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a008:	460d      	mov	r5, r1
 800a00a:	b09d      	sub	sp, #116	@ 0x74
 800a00c:	4614      	mov	r4, r2
 800a00e:	4698      	mov	r8, r3
 800a010:	4606      	mov	r6, r0
 800a012:	b118      	cbz	r0, 800a01c <_vfiprintf_r+0x18>
 800a014:	6a03      	ldr	r3, [r0, #32]
 800a016:	b90b      	cbnz	r3, 800a01c <_vfiprintf_r+0x18>
 800a018:	f7ff f890 	bl	800913c <__sinit>
 800a01c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a01e:	07d9      	lsls	r1, r3, #31
 800a020:	d405      	bmi.n	800a02e <_vfiprintf_r+0x2a>
 800a022:	89ab      	ldrh	r3, [r5, #12]
 800a024:	059a      	lsls	r2, r3, #22
 800a026:	d402      	bmi.n	800a02e <_vfiprintf_r+0x2a>
 800a028:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a02a:	f7ff f964 	bl	80092f6 <__retarget_lock_acquire_recursive>
 800a02e:	89ab      	ldrh	r3, [r5, #12]
 800a030:	071b      	lsls	r3, r3, #28
 800a032:	d501      	bpl.n	800a038 <_vfiprintf_r+0x34>
 800a034:	692b      	ldr	r3, [r5, #16]
 800a036:	b99b      	cbnz	r3, 800a060 <_vfiprintf_r+0x5c>
 800a038:	4629      	mov	r1, r5
 800a03a:	4630      	mov	r0, r6
 800a03c:	f000 fe60 	bl	800ad00 <__swsetup_r>
 800a040:	b170      	cbz	r0, 800a060 <_vfiprintf_r+0x5c>
 800a042:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a044:	07dc      	lsls	r4, r3, #31
 800a046:	d504      	bpl.n	800a052 <_vfiprintf_r+0x4e>
 800a048:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a04c:	b01d      	add	sp, #116	@ 0x74
 800a04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a052:	89ab      	ldrh	r3, [r5, #12]
 800a054:	0598      	lsls	r0, r3, #22
 800a056:	d4f7      	bmi.n	800a048 <_vfiprintf_r+0x44>
 800a058:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a05a:	f7ff f94d 	bl	80092f8 <__retarget_lock_release_recursive>
 800a05e:	e7f3      	b.n	800a048 <_vfiprintf_r+0x44>
 800a060:	2300      	movs	r3, #0
 800a062:	9309      	str	r3, [sp, #36]	@ 0x24
 800a064:	2320      	movs	r3, #32
 800a066:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a06a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a06e:	2330      	movs	r3, #48	@ 0x30
 800a070:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a220 <_vfiprintf_r+0x21c>
 800a074:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a078:	f04f 0901 	mov.w	r9, #1
 800a07c:	4623      	mov	r3, r4
 800a07e:	469a      	mov	sl, r3
 800a080:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a084:	b10a      	cbz	r2, 800a08a <_vfiprintf_r+0x86>
 800a086:	2a25      	cmp	r2, #37	@ 0x25
 800a088:	d1f9      	bne.n	800a07e <_vfiprintf_r+0x7a>
 800a08a:	ebba 0b04 	subs.w	fp, sl, r4
 800a08e:	d00b      	beq.n	800a0a8 <_vfiprintf_r+0xa4>
 800a090:	465b      	mov	r3, fp
 800a092:	4622      	mov	r2, r4
 800a094:	4629      	mov	r1, r5
 800a096:	4630      	mov	r0, r6
 800a098:	f7ff ffa1 	bl	8009fde <__sfputs_r>
 800a09c:	3001      	adds	r0, #1
 800a09e:	f000 80a7 	beq.w	800a1f0 <_vfiprintf_r+0x1ec>
 800a0a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a0a4:	445a      	add	r2, fp
 800a0a6:	9209      	str	r2, [sp, #36]	@ 0x24
 800a0a8:	f89a 3000 	ldrb.w	r3, [sl]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	f000 809f 	beq.w	800a1f0 <_vfiprintf_r+0x1ec>
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a0b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0bc:	f10a 0a01 	add.w	sl, sl, #1
 800a0c0:	9304      	str	r3, [sp, #16]
 800a0c2:	9307      	str	r3, [sp, #28]
 800a0c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a0c8:	931a      	str	r3, [sp, #104]	@ 0x68
 800a0ca:	4654      	mov	r4, sl
 800a0cc:	2205      	movs	r2, #5
 800a0ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0d2:	4853      	ldr	r0, [pc, #332]	@ (800a220 <_vfiprintf_r+0x21c>)
 800a0d4:	f7f6 f894 	bl	8000200 <memchr>
 800a0d8:	9a04      	ldr	r2, [sp, #16]
 800a0da:	b9d8      	cbnz	r0, 800a114 <_vfiprintf_r+0x110>
 800a0dc:	06d1      	lsls	r1, r2, #27
 800a0de:	bf44      	itt	mi
 800a0e0:	2320      	movmi	r3, #32
 800a0e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a0e6:	0713      	lsls	r3, r2, #28
 800a0e8:	bf44      	itt	mi
 800a0ea:	232b      	movmi	r3, #43	@ 0x2b
 800a0ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a0f0:	f89a 3000 	ldrb.w	r3, [sl]
 800a0f4:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0f6:	d015      	beq.n	800a124 <_vfiprintf_r+0x120>
 800a0f8:	9a07      	ldr	r2, [sp, #28]
 800a0fa:	4654      	mov	r4, sl
 800a0fc:	2000      	movs	r0, #0
 800a0fe:	f04f 0c0a 	mov.w	ip, #10
 800a102:	4621      	mov	r1, r4
 800a104:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a108:	3b30      	subs	r3, #48	@ 0x30
 800a10a:	2b09      	cmp	r3, #9
 800a10c:	d94b      	bls.n	800a1a6 <_vfiprintf_r+0x1a2>
 800a10e:	b1b0      	cbz	r0, 800a13e <_vfiprintf_r+0x13a>
 800a110:	9207      	str	r2, [sp, #28]
 800a112:	e014      	b.n	800a13e <_vfiprintf_r+0x13a>
 800a114:	eba0 0308 	sub.w	r3, r0, r8
 800a118:	fa09 f303 	lsl.w	r3, r9, r3
 800a11c:	4313      	orrs	r3, r2
 800a11e:	9304      	str	r3, [sp, #16]
 800a120:	46a2      	mov	sl, r4
 800a122:	e7d2      	b.n	800a0ca <_vfiprintf_r+0xc6>
 800a124:	9b03      	ldr	r3, [sp, #12]
 800a126:	1d19      	adds	r1, r3, #4
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	9103      	str	r1, [sp, #12]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	bfbb      	ittet	lt
 800a130:	425b      	neglt	r3, r3
 800a132:	f042 0202 	orrlt.w	r2, r2, #2
 800a136:	9307      	strge	r3, [sp, #28]
 800a138:	9307      	strlt	r3, [sp, #28]
 800a13a:	bfb8      	it	lt
 800a13c:	9204      	strlt	r2, [sp, #16]
 800a13e:	7823      	ldrb	r3, [r4, #0]
 800a140:	2b2e      	cmp	r3, #46	@ 0x2e
 800a142:	d10a      	bne.n	800a15a <_vfiprintf_r+0x156>
 800a144:	7863      	ldrb	r3, [r4, #1]
 800a146:	2b2a      	cmp	r3, #42	@ 0x2a
 800a148:	d132      	bne.n	800a1b0 <_vfiprintf_r+0x1ac>
 800a14a:	9b03      	ldr	r3, [sp, #12]
 800a14c:	1d1a      	adds	r2, r3, #4
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	9203      	str	r2, [sp, #12]
 800a152:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a156:	3402      	adds	r4, #2
 800a158:	9305      	str	r3, [sp, #20]
 800a15a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a230 <_vfiprintf_r+0x22c>
 800a15e:	7821      	ldrb	r1, [r4, #0]
 800a160:	2203      	movs	r2, #3
 800a162:	4650      	mov	r0, sl
 800a164:	f7f6 f84c 	bl	8000200 <memchr>
 800a168:	b138      	cbz	r0, 800a17a <_vfiprintf_r+0x176>
 800a16a:	9b04      	ldr	r3, [sp, #16]
 800a16c:	eba0 000a 	sub.w	r0, r0, sl
 800a170:	2240      	movs	r2, #64	@ 0x40
 800a172:	4082      	lsls	r2, r0
 800a174:	4313      	orrs	r3, r2
 800a176:	3401      	adds	r4, #1
 800a178:	9304      	str	r3, [sp, #16]
 800a17a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a17e:	4829      	ldr	r0, [pc, #164]	@ (800a224 <_vfiprintf_r+0x220>)
 800a180:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a184:	2206      	movs	r2, #6
 800a186:	f7f6 f83b 	bl	8000200 <memchr>
 800a18a:	2800      	cmp	r0, #0
 800a18c:	d03f      	beq.n	800a20e <_vfiprintf_r+0x20a>
 800a18e:	4b26      	ldr	r3, [pc, #152]	@ (800a228 <_vfiprintf_r+0x224>)
 800a190:	bb1b      	cbnz	r3, 800a1da <_vfiprintf_r+0x1d6>
 800a192:	9b03      	ldr	r3, [sp, #12]
 800a194:	3307      	adds	r3, #7
 800a196:	f023 0307 	bic.w	r3, r3, #7
 800a19a:	3308      	adds	r3, #8
 800a19c:	9303      	str	r3, [sp, #12]
 800a19e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1a0:	443b      	add	r3, r7
 800a1a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1a4:	e76a      	b.n	800a07c <_vfiprintf_r+0x78>
 800a1a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1aa:	460c      	mov	r4, r1
 800a1ac:	2001      	movs	r0, #1
 800a1ae:	e7a8      	b.n	800a102 <_vfiprintf_r+0xfe>
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	3401      	adds	r4, #1
 800a1b4:	9305      	str	r3, [sp, #20]
 800a1b6:	4619      	mov	r1, r3
 800a1b8:	f04f 0c0a 	mov.w	ip, #10
 800a1bc:	4620      	mov	r0, r4
 800a1be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1c2:	3a30      	subs	r2, #48	@ 0x30
 800a1c4:	2a09      	cmp	r2, #9
 800a1c6:	d903      	bls.n	800a1d0 <_vfiprintf_r+0x1cc>
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d0c6      	beq.n	800a15a <_vfiprintf_r+0x156>
 800a1cc:	9105      	str	r1, [sp, #20]
 800a1ce:	e7c4      	b.n	800a15a <_vfiprintf_r+0x156>
 800a1d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1d4:	4604      	mov	r4, r0
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	e7f0      	b.n	800a1bc <_vfiprintf_r+0x1b8>
 800a1da:	ab03      	add	r3, sp, #12
 800a1dc:	9300      	str	r3, [sp, #0]
 800a1de:	462a      	mov	r2, r5
 800a1e0:	4b12      	ldr	r3, [pc, #72]	@ (800a22c <_vfiprintf_r+0x228>)
 800a1e2:	a904      	add	r1, sp, #16
 800a1e4:	4630      	mov	r0, r6
 800a1e6:	f7fe fb65 	bl	80088b4 <_printf_float>
 800a1ea:	4607      	mov	r7, r0
 800a1ec:	1c78      	adds	r0, r7, #1
 800a1ee:	d1d6      	bne.n	800a19e <_vfiprintf_r+0x19a>
 800a1f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a1f2:	07d9      	lsls	r1, r3, #31
 800a1f4:	d405      	bmi.n	800a202 <_vfiprintf_r+0x1fe>
 800a1f6:	89ab      	ldrh	r3, [r5, #12]
 800a1f8:	059a      	lsls	r2, r3, #22
 800a1fa:	d402      	bmi.n	800a202 <_vfiprintf_r+0x1fe>
 800a1fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a1fe:	f7ff f87b 	bl	80092f8 <__retarget_lock_release_recursive>
 800a202:	89ab      	ldrh	r3, [r5, #12]
 800a204:	065b      	lsls	r3, r3, #25
 800a206:	f53f af1f 	bmi.w	800a048 <_vfiprintf_r+0x44>
 800a20a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a20c:	e71e      	b.n	800a04c <_vfiprintf_r+0x48>
 800a20e:	ab03      	add	r3, sp, #12
 800a210:	9300      	str	r3, [sp, #0]
 800a212:	462a      	mov	r2, r5
 800a214:	4b05      	ldr	r3, [pc, #20]	@ (800a22c <_vfiprintf_r+0x228>)
 800a216:	a904      	add	r1, sp, #16
 800a218:	4630      	mov	r0, r6
 800a21a:	f7fe fde3 	bl	8008de4 <_printf_i>
 800a21e:	e7e4      	b.n	800a1ea <_vfiprintf_r+0x1e6>
 800a220:	0800b595 	.word	0x0800b595
 800a224:	0800b59f 	.word	0x0800b59f
 800a228:	080088b5 	.word	0x080088b5
 800a22c:	08009fdf 	.word	0x08009fdf
 800a230:	0800b59b 	.word	0x0800b59b

0800a234 <malloc>:
 800a234:	4b02      	ldr	r3, [pc, #8]	@ (800a240 <malloc+0xc>)
 800a236:	4601      	mov	r1, r0
 800a238:	6818      	ldr	r0, [r3, #0]
 800a23a:	f000 b825 	b.w	800a288 <_malloc_r>
 800a23e:	bf00      	nop
 800a240:	20000060 	.word	0x20000060

0800a244 <sbrk_aligned>:
 800a244:	b570      	push	{r4, r5, r6, lr}
 800a246:	4e0f      	ldr	r6, [pc, #60]	@ (800a284 <sbrk_aligned+0x40>)
 800a248:	460c      	mov	r4, r1
 800a24a:	6831      	ldr	r1, [r6, #0]
 800a24c:	4605      	mov	r5, r0
 800a24e:	b911      	cbnz	r1, 800a256 <sbrk_aligned+0x12>
 800a250:	f000 fe64 	bl	800af1c <_sbrk_r>
 800a254:	6030      	str	r0, [r6, #0]
 800a256:	4621      	mov	r1, r4
 800a258:	4628      	mov	r0, r5
 800a25a:	f000 fe5f 	bl	800af1c <_sbrk_r>
 800a25e:	1c43      	adds	r3, r0, #1
 800a260:	d103      	bne.n	800a26a <sbrk_aligned+0x26>
 800a262:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a266:	4620      	mov	r0, r4
 800a268:	bd70      	pop	{r4, r5, r6, pc}
 800a26a:	1cc4      	adds	r4, r0, #3
 800a26c:	f024 0403 	bic.w	r4, r4, #3
 800a270:	42a0      	cmp	r0, r4
 800a272:	d0f8      	beq.n	800a266 <sbrk_aligned+0x22>
 800a274:	1a21      	subs	r1, r4, r0
 800a276:	4628      	mov	r0, r5
 800a278:	f000 fe50 	bl	800af1c <_sbrk_r>
 800a27c:	3001      	adds	r0, #1
 800a27e:	d1f2      	bne.n	800a266 <sbrk_aligned+0x22>
 800a280:	e7ef      	b.n	800a262 <sbrk_aligned+0x1e>
 800a282:	bf00      	nop
 800a284:	20000610 	.word	0x20000610

0800a288 <_malloc_r>:
 800a288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a28c:	1ccd      	adds	r5, r1, #3
 800a28e:	f025 0503 	bic.w	r5, r5, #3
 800a292:	3508      	adds	r5, #8
 800a294:	2d0c      	cmp	r5, #12
 800a296:	bf38      	it	cc
 800a298:	250c      	movcc	r5, #12
 800a29a:	2d00      	cmp	r5, #0
 800a29c:	4606      	mov	r6, r0
 800a29e:	db01      	blt.n	800a2a4 <_malloc_r+0x1c>
 800a2a0:	42a9      	cmp	r1, r5
 800a2a2:	d904      	bls.n	800a2ae <_malloc_r+0x26>
 800a2a4:	230c      	movs	r3, #12
 800a2a6:	6033      	str	r3, [r6, #0]
 800a2a8:	2000      	movs	r0, #0
 800a2aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a384 <_malloc_r+0xfc>
 800a2b2:	f000 f915 	bl	800a4e0 <__malloc_lock>
 800a2b6:	f8d8 3000 	ldr.w	r3, [r8]
 800a2ba:	461c      	mov	r4, r3
 800a2bc:	bb44      	cbnz	r4, 800a310 <_malloc_r+0x88>
 800a2be:	4629      	mov	r1, r5
 800a2c0:	4630      	mov	r0, r6
 800a2c2:	f7ff ffbf 	bl	800a244 <sbrk_aligned>
 800a2c6:	1c43      	adds	r3, r0, #1
 800a2c8:	4604      	mov	r4, r0
 800a2ca:	d158      	bne.n	800a37e <_malloc_r+0xf6>
 800a2cc:	f8d8 4000 	ldr.w	r4, [r8]
 800a2d0:	4627      	mov	r7, r4
 800a2d2:	2f00      	cmp	r7, #0
 800a2d4:	d143      	bne.n	800a35e <_malloc_r+0xd6>
 800a2d6:	2c00      	cmp	r4, #0
 800a2d8:	d04b      	beq.n	800a372 <_malloc_r+0xea>
 800a2da:	6823      	ldr	r3, [r4, #0]
 800a2dc:	4639      	mov	r1, r7
 800a2de:	4630      	mov	r0, r6
 800a2e0:	eb04 0903 	add.w	r9, r4, r3
 800a2e4:	f000 fe1a 	bl	800af1c <_sbrk_r>
 800a2e8:	4581      	cmp	r9, r0
 800a2ea:	d142      	bne.n	800a372 <_malloc_r+0xea>
 800a2ec:	6821      	ldr	r1, [r4, #0]
 800a2ee:	1a6d      	subs	r5, r5, r1
 800a2f0:	4629      	mov	r1, r5
 800a2f2:	4630      	mov	r0, r6
 800a2f4:	f7ff ffa6 	bl	800a244 <sbrk_aligned>
 800a2f8:	3001      	adds	r0, #1
 800a2fa:	d03a      	beq.n	800a372 <_malloc_r+0xea>
 800a2fc:	6823      	ldr	r3, [r4, #0]
 800a2fe:	442b      	add	r3, r5
 800a300:	6023      	str	r3, [r4, #0]
 800a302:	f8d8 3000 	ldr.w	r3, [r8]
 800a306:	685a      	ldr	r2, [r3, #4]
 800a308:	bb62      	cbnz	r2, 800a364 <_malloc_r+0xdc>
 800a30a:	f8c8 7000 	str.w	r7, [r8]
 800a30e:	e00f      	b.n	800a330 <_malloc_r+0xa8>
 800a310:	6822      	ldr	r2, [r4, #0]
 800a312:	1b52      	subs	r2, r2, r5
 800a314:	d420      	bmi.n	800a358 <_malloc_r+0xd0>
 800a316:	2a0b      	cmp	r2, #11
 800a318:	d917      	bls.n	800a34a <_malloc_r+0xc2>
 800a31a:	1961      	adds	r1, r4, r5
 800a31c:	42a3      	cmp	r3, r4
 800a31e:	6025      	str	r5, [r4, #0]
 800a320:	bf18      	it	ne
 800a322:	6059      	strne	r1, [r3, #4]
 800a324:	6863      	ldr	r3, [r4, #4]
 800a326:	bf08      	it	eq
 800a328:	f8c8 1000 	streq.w	r1, [r8]
 800a32c:	5162      	str	r2, [r4, r5]
 800a32e:	604b      	str	r3, [r1, #4]
 800a330:	4630      	mov	r0, r6
 800a332:	f000 f8db 	bl	800a4ec <__malloc_unlock>
 800a336:	f104 000b 	add.w	r0, r4, #11
 800a33a:	1d23      	adds	r3, r4, #4
 800a33c:	f020 0007 	bic.w	r0, r0, #7
 800a340:	1ac2      	subs	r2, r0, r3
 800a342:	bf1c      	itt	ne
 800a344:	1a1b      	subne	r3, r3, r0
 800a346:	50a3      	strne	r3, [r4, r2]
 800a348:	e7af      	b.n	800a2aa <_malloc_r+0x22>
 800a34a:	6862      	ldr	r2, [r4, #4]
 800a34c:	42a3      	cmp	r3, r4
 800a34e:	bf0c      	ite	eq
 800a350:	f8c8 2000 	streq.w	r2, [r8]
 800a354:	605a      	strne	r2, [r3, #4]
 800a356:	e7eb      	b.n	800a330 <_malloc_r+0xa8>
 800a358:	4623      	mov	r3, r4
 800a35a:	6864      	ldr	r4, [r4, #4]
 800a35c:	e7ae      	b.n	800a2bc <_malloc_r+0x34>
 800a35e:	463c      	mov	r4, r7
 800a360:	687f      	ldr	r7, [r7, #4]
 800a362:	e7b6      	b.n	800a2d2 <_malloc_r+0x4a>
 800a364:	461a      	mov	r2, r3
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	42a3      	cmp	r3, r4
 800a36a:	d1fb      	bne.n	800a364 <_malloc_r+0xdc>
 800a36c:	2300      	movs	r3, #0
 800a36e:	6053      	str	r3, [r2, #4]
 800a370:	e7de      	b.n	800a330 <_malloc_r+0xa8>
 800a372:	230c      	movs	r3, #12
 800a374:	6033      	str	r3, [r6, #0]
 800a376:	4630      	mov	r0, r6
 800a378:	f000 f8b8 	bl	800a4ec <__malloc_unlock>
 800a37c:	e794      	b.n	800a2a8 <_malloc_r+0x20>
 800a37e:	6005      	str	r5, [r0, #0]
 800a380:	e7d6      	b.n	800a330 <_malloc_r+0xa8>
 800a382:	bf00      	nop
 800a384:	20000614 	.word	0x20000614

0800a388 <__sflush_r>:
 800a388:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a38c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a390:	0716      	lsls	r6, r2, #28
 800a392:	4605      	mov	r5, r0
 800a394:	460c      	mov	r4, r1
 800a396:	d454      	bmi.n	800a442 <__sflush_r+0xba>
 800a398:	684b      	ldr	r3, [r1, #4]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	dc02      	bgt.n	800a3a4 <__sflush_r+0x1c>
 800a39e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	dd48      	ble.n	800a436 <__sflush_r+0xae>
 800a3a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a3a6:	2e00      	cmp	r6, #0
 800a3a8:	d045      	beq.n	800a436 <__sflush_r+0xae>
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a3b0:	682f      	ldr	r7, [r5, #0]
 800a3b2:	6a21      	ldr	r1, [r4, #32]
 800a3b4:	602b      	str	r3, [r5, #0]
 800a3b6:	d030      	beq.n	800a41a <__sflush_r+0x92>
 800a3b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a3ba:	89a3      	ldrh	r3, [r4, #12]
 800a3bc:	0759      	lsls	r1, r3, #29
 800a3be:	d505      	bpl.n	800a3cc <__sflush_r+0x44>
 800a3c0:	6863      	ldr	r3, [r4, #4]
 800a3c2:	1ad2      	subs	r2, r2, r3
 800a3c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a3c6:	b10b      	cbz	r3, 800a3cc <__sflush_r+0x44>
 800a3c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a3ca:	1ad2      	subs	r2, r2, r3
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a3d0:	6a21      	ldr	r1, [r4, #32]
 800a3d2:	4628      	mov	r0, r5
 800a3d4:	47b0      	blx	r6
 800a3d6:	1c43      	adds	r3, r0, #1
 800a3d8:	89a3      	ldrh	r3, [r4, #12]
 800a3da:	d106      	bne.n	800a3ea <__sflush_r+0x62>
 800a3dc:	6829      	ldr	r1, [r5, #0]
 800a3de:	291d      	cmp	r1, #29
 800a3e0:	d82b      	bhi.n	800a43a <__sflush_r+0xb2>
 800a3e2:	4a2a      	ldr	r2, [pc, #168]	@ (800a48c <__sflush_r+0x104>)
 800a3e4:	410a      	asrs	r2, r1
 800a3e6:	07d6      	lsls	r6, r2, #31
 800a3e8:	d427      	bmi.n	800a43a <__sflush_r+0xb2>
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	6062      	str	r2, [r4, #4]
 800a3ee:	04d9      	lsls	r1, r3, #19
 800a3f0:	6922      	ldr	r2, [r4, #16]
 800a3f2:	6022      	str	r2, [r4, #0]
 800a3f4:	d504      	bpl.n	800a400 <__sflush_r+0x78>
 800a3f6:	1c42      	adds	r2, r0, #1
 800a3f8:	d101      	bne.n	800a3fe <__sflush_r+0x76>
 800a3fa:	682b      	ldr	r3, [r5, #0]
 800a3fc:	b903      	cbnz	r3, 800a400 <__sflush_r+0x78>
 800a3fe:	6560      	str	r0, [r4, #84]	@ 0x54
 800a400:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a402:	602f      	str	r7, [r5, #0]
 800a404:	b1b9      	cbz	r1, 800a436 <__sflush_r+0xae>
 800a406:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a40a:	4299      	cmp	r1, r3
 800a40c:	d002      	beq.n	800a414 <__sflush_r+0x8c>
 800a40e:	4628      	mov	r0, r5
 800a410:	f000 fdd8 	bl	800afc4 <_free_r>
 800a414:	2300      	movs	r3, #0
 800a416:	6363      	str	r3, [r4, #52]	@ 0x34
 800a418:	e00d      	b.n	800a436 <__sflush_r+0xae>
 800a41a:	2301      	movs	r3, #1
 800a41c:	4628      	mov	r0, r5
 800a41e:	47b0      	blx	r6
 800a420:	4602      	mov	r2, r0
 800a422:	1c50      	adds	r0, r2, #1
 800a424:	d1c9      	bne.n	800a3ba <__sflush_r+0x32>
 800a426:	682b      	ldr	r3, [r5, #0]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d0c6      	beq.n	800a3ba <__sflush_r+0x32>
 800a42c:	2b1d      	cmp	r3, #29
 800a42e:	d001      	beq.n	800a434 <__sflush_r+0xac>
 800a430:	2b16      	cmp	r3, #22
 800a432:	d11e      	bne.n	800a472 <__sflush_r+0xea>
 800a434:	602f      	str	r7, [r5, #0]
 800a436:	2000      	movs	r0, #0
 800a438:	e022      	b.n	800a480 <__sflush_r+0xf8>
 800a43a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a43e:	b21b      	sxth	r3, r3
 800a440:	e01b      	b.n	800a47a <__sflush_r+0xf2>
 800a442:	690f      	ldr	r7, [r1, #16]
 800a444:	2f00      	cmp	r7, #0
 800a446:	d0f6      	beq.n	800a436 <__sflush_r+0xae>
 800a448:	0793      	lsls	r3, r2, #30
 800a44a:	680e      	ldr	r6, [r1, #0]
 800a44c:	bf08      	it	eq
 800a44e:	694b      	ldreq	r3, [r1, #20]
 800a450:	600f      	str	r7, [r1, #0]
 800a452:	bf18      	it	ne
 800a454:	2300      	movne	r3, #0
 800a456:	eba6 0807 	sub.w	r8, r6, r7
 800a45a:	608b      	str	r3, [r1, #8]
 800a45c:	f1b8 0f00 	cmp.w	r8, #0
 800a460:	dde9      	ble.n	800a436 <__sflush_r+0xae>
 800a462:	6a21      	ldr	r1, [r4, #32]
 800a464:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a466:	4643      	mov	r3, r8
 800a468:	463a      	mov	r2, r7
 800a46a:	4628      	mov	r0, r5
 800a46c:	47b0      	blx	r6
 800a46e:	2800      	cmp	r0, #0
 800a470:	dc08      	bgt.n	800a484 <__sflush_r+0xfc>
 800a472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a476:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a47a:	81a3      	strh	r3, [r4, #12]
 800a47c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a484:	4407      	add	r7, r0
 800a486:	eba8 0800 	sub.w	r8, r8, r0
 800a48a:	e7e7      	b.n	800a45c <__sflush_r+0xd4>
 800a48c:	dfbffffe 	.word	0xdfbffffe

0800a490 <_fflush_r>:
 800a490:	b538      	push	{r3, r4, r5, lr}
 800a492:	690b      	ldr	r3, [r1, #16]
 800a494:	4605      	mov	r5, r0
 800a496:	460c      	mov	r4, r1
 800a498:	b913      	cbnz	r3, 800a4a0 <_fflush_r+0x10>
 800a49a:	2500      	movs	r5, #0
 800a49c:	4628      	mov	r0, r5
 800a49e:	bd38      	pop	{r3, r4, r5, pc}
 800a4a0:	b118      	cbz	r0, 800a4aa <_fflush_r+0x1a>
 800a4a2:	6a03      	ldr	r3, [r0, #32]
 800a4a4:	b90b      	cbnz	r3, 800a4aa <_fflush_r+0x1a>
 800a4a6:	f7fe fe49 	bl	800913c <__sinit>
 800a4aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d0f3      	beq.n	800a49a <_fflush_r+0xa>
 800a4b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a4b4:	07d0      	lsls	r0, r2, #31
 800a4b6:	d404      	bmi.n	800a4c2 <_fflush_r+0x32>
 800a4b8:	0599      	lsls	r1, r3, #22
 800a4ba:	d402      	bmi.n	800a4c2 <_fflush_r+0x32>
 800a4bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a4be:	f7fe ff1a 	bl	80092f6 <__retarget_lock_acquire_recursive>
 800a4c2:	4628      	mov	r0, r5
 800a4c4:	4621      	mov	r1, r4
 800a4c6:	f7ff ff5f 	bl	800a388 <__sflush_r>
 800a4ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a4cc:	07da      	lsls	r2, r3, #31
 800a4ce:	4605      	mov	r5, r0
 800a4d0:	d4e4      	bmi.n	800a49c <_fflush_r+0xc>
 800a4d2:	89a3      	ldrh	r3, [r4, #12]
 800a4d4:	059b      	lsls	r3, r3, #22
 800a4d6:	d4e1      	bmi.n	800a49c <_fflush_r+0xc>
 800a4d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a4da:	f7fe ff0d 	bl	80092f8 <__retarget_lock_release_recursive>
 800a4de:	e7dd      	b.n	800a49c <_fflush_r+0xc>

0800a4e0 <__malloc_lock>:
 800a4e0:	4801      	ldr	r0, [pc, #4]	@ (800a4e8 <__malloc_lock+0x8>)
 800a4e2:	f7fe bf08 	b.w	80092f6 <__retarget_lock_acquire_recursive>
 800a4e6:	bf00      	nop
 800a4e8:	2000060c 	.word	0x2000060c

0800a4ec <__malloc_unlock>:
 800a4ec:	4801      	ldr	r0, [pc, #4]	@ (800a4f4 <__malloc_unlock+0x8>)
 800a4ee:	f7fe bf03 	b.w	80092f8 <__retarget_lock_release_recursive>
 800a4f2:	bf00      	nop
 800a4f4:	2000060c 	.word	0x2000060c

0800a4f8 <_Balloc>:
 800a4f8:	b570      	push	{r4, r5, r6, lr}
 800a4fa:	69c6      	ldr	r6, [r0, #28]
 800a4fc:	4604      	mov	r4, r0
 800a4fe:	460d      	mov	r5, r1
 800a500:	b976      	cbnz	r6, 800a520 <_Balloc+0x28>
 800a502:	2010      	movs	r0, #16
 800a504:	f7ff fe96 	bl	800a234 <malloc>
 800a508:	4602      	mov	r2, r0
 800a50a:	61e0      	str	r0, [r4, #28]
 800a50c:	b920      	cbnz	r0, 800a518 <_Balloc+0x20>
 800a50e:	4b18      	ldr	r3, [pc, #96]	@ (800a570 <_Balloc+0x78>)
 800a510:	4818      	ldr	r0, [pc, #96]	@ (800a574 <_Balloc+0x7c>)
 800a512:	216b      	movs	r1, #107	@ 0x6b
 800a514:	f000 fd24 	bl	800af60 <__assert_func>
 800a518:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a51c:	6006      	str	r6, [r0, #0]
 800a51e:	60c6      	str	r6, [r0, #12]
 800a520:	69e6      	ldr	r6, [r4, #28]
 800a522:	68f3      	ldr	r3, [r6, #12]
 800a524:	b183      	cbz	r3, 800a548 <_Balloc+0x50>
 800a526:	69e3      	ldr	r3, [r4, #28]
 800a528:	68db      	ldr	r3, [r3, #12]
 800a52a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a52e:	b9b8      	cbnz	r0, 800a560 <_Balloc+0x68>
 800a530:	2101      	movs	r1, #1
 800a532:	fa01 f605 	lsl.w	r6, r1, r5
 800a536:	1d72      	adds	r2, r6, #5
 800a538:	0092      	lsls	r2, r2, #2
 800a53a:	4620      	mov	r0, r4
 800a53c:	f000 fd2e 	bl	800af9c <_calloc_r>
 800a540:	b160      	cbz	r0, 800a55c <_Balloc+0x64>
 800a542:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a546:	e00e      	b.n	800a566 <_Balloc+0x6e>
 800a548:	2221      	movs	r2, #33	@ 0x21
 800a54a:	2104      	movs	r1, #4
 800a54c:	4620      	mov	r0, r4
 800a54e:	f000 fd25 	bl	800af9c <_calloc_r>
 800a552:	69e3      	ldr	r3, [r4, #28]
 800a554:	60f0      	str	r0, [r6, #12]
 800a556:	68db      	ldr	r3, [r3, #12]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d1e4      	bne.n	800a526 <_Balloc+0x2e>
 800a55c:	2000      	movs	r0, #0
 800a55e:	bd70      	pop	{r4, r5, r6, pc}
 800a560:	6802      	ldr	r2, [r0, #0]
 800a562:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a566:	2300      	movs	r3, #0
 800a568:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a56c:	e7f7      	b.n	800a55e <_Balloc+0x66>
 800a56e:	bf00      	nop
 800a570:	0800b515 	.word	0x0800b515
 800a574:	0800b5a6 	.word	0x0800b5a6

0800a578 <_Bfree>:
 800a578:	b570      	push	{r4, r5, r6, lr}
 800a57a:	69c6      	ldr	r6, [r0, #28]
 800a57c:	4605      	mov	r5, r0
 800a57e:	460c      	mov	r4, r1
 800a580:	b976      	cbnz	r6, 800a5a0 <_Bfree+0x28>
 800a582:	2010      	movs	r0, #16
 800a584:	f7ff fe56 	bl	800a234 <malloc>
 800a588:	4602      	mov	r2, r0
 800a58a:	61e8      	str	r0, [r5, #28]
 800a58c:	b920      	cbnz	r0, 800a598 <_Bfree+0x20>
 800a58e:	4b09      	ldr	r3, [pc, #36]	@ (800a5b4 <_Bfree+0x3c>)
 800a590:	4809      	ldr	r0, [pc, #36]	@ (800a5b8 <_Bfree+0x40>)
 800a592:	218f      	movs	r1, #143	@ 0x8f
 800a594:	f000 fce4 	bl	800af60 <__assert_func>
 800a598:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a59c:	6006      	str	r6, [r0, #0]
 800a59e:	60c6      	str	r6, [r0, #12]
 800a5a0:	b13c      	cbz	r4, 800a5b2 <_Bfree+0x3a>
 800a5a2:	69eb      	ldr	r3, [r5, #28]
 800a5a4:	6862      	ldr	r2, [r4, #4]
 800a5a6:	68db      	ldr	r3, [r3, #12]
 800a5a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a5ac:	6021      	str	r1, [r4, #0]
 800a5ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a5b2:	bd70      	pop	{r4, r5, r6, pc}
 800a5b4:	0800b515 	.word	0x0800b515
 800a5b8:	0800b5a6 	.word	0x0800b5a6

0800a5bc <__multadd>:
 800a5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5c0:	690d      	ldr	r5, [r1, #16]
 800a5c2:	4607      	mov	r7, r0
 800a5c4:	460c      	mov	r4, r1
 800a5c6:	461e      	mov	r6, r3
 800a5c8:	f101 0c14 	add.w	ip, r1, #20
 800a5cc:	2000      	movs	r0, #0
 800a5ce:	f8dc 3000 	ldr.w	r3, [ip]
 800a5d2:	b299      	uxth	r1, r3
 800a5d4:	fb02 6101 	mla	r1, r2, r1, r6
 800a5d8:	0c1e      	lsrs	r6, r3, #16
 800a5da:	0c0b      	lsrs	r3, r1, #16
 800a5dc:	fb02 3306 	mla	r3, r2, r6, r3
 800a5e0:	b289      	uxth	r1, r1
 800a5e2:	3001      	adds	r0, #1
 800a5e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a5e8:	4285      	cmp	r5, r0
 800a5ea:	f84c 1b04 	str.w	r1, [ip], #4
 800a5ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a5f2:	dcec      	bgt.n	800a5ce <__multadd+0x12>
 800a5f4:	b30e      	cbz	r6, 800a63a <__multadd+0x7e>
 800a5f6:	68a3      	ldr	r3, [r4, #8]
 800a5f8:	42ab      	cmp	r3, r5
 800a5fa:	dc19      	bgt.n	800a630 <__multadd+0x74>
 800a5fc:	6861      	ldr	r1, [r4, #4]
 800a5fe:	4638      	mov	r0, r7
 800a600:	3101      	adds	r1, #1
 800a602:	f7ff ff79 	bl	800a4f8 <_Balloc>
 800a606:	4680      	mov	r8, r0
 800a608:	b928      	cbnz	r0, 800a616 <__multadd+0x5a>
 800a60a:	4602      	mov	r2, r0
 800a60c:	4b0c      	ldr	r3, [pc, #48]	@ (800a640 <__multadd+0x84>)
 800a60e:	480d      	ldr	r0, [pc, #52]	@ (800a644 <__multadd+0x88>)
 800a610:	21ba      	movs	r1, #186	@ 0xba
 800a612:	f000 fca5 	bl	800af60 <__assert_func>
 800a616:	6922      	ldr	r2, [r4, #16]
 800a618:	3202      	adds	r2, #2
 800a61a:	f104 010c 	add.w	r1, r4, #12
 800a61e:	0092      	lsls	r2, r2, #2
 800a620:	300c      	adds	r0, #12
 800a622:	f7fe fe6a 	bl	80092fa <memcpy>
 800a626:	4621      	mov	r1, r4
 800a628:	4638      	mov	r0, r7
 800a62a:	f7ff ffa5 	bl	800a578 <_Bfree>
 800a62e:	4644      	mov	r4, r8
 800a630:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a634:	3501      	adds	r5, #1
 800a636:	615e      	str	r6, [r3, #20]
 800a638:	6125      	str	r5, [r4, #16]
 800a63a:	4620      	mov	r0, r4
 800a63c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a640:	0800b584 	.word	0x0800b584
 800a644:	0800b5a6 	.word	0x0800b5a6

0800a648 <__hi0bits>:
 800a648:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a64c:	4603      	mov	r3, r0
 800a64e:	bf36      	itet	cc
 800a650:	0403      	lslcc	r3, r0, #16
 800a652:	2000      	movcs	r0, #0
 800a654:	2010      	movcc	r0, #16
 800a656:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a65a:	bf3c      	itt	cc
 800a65c:	021b      	lslcc	r3, r3, #8
 800a65e:	3008      	addcc	r0, #8
 800a660:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a664:	bf3c      	itt	cc
 800a666:	011b      	lslcc	r3, r3, #4
 800a668:	3004      	addcc	r0, #4
 800a66a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a66e:	bf3c      	itt	cc
 800a670:	009b      	lslcc	r3, r3, #2
 800a672:	3002      	addcc	r0, #2
 800a674:	2b00      	cmp	r3, #0
 800a676:	db05      	blt.n	800a684 <__hi0bits+0x3c>
 800a678:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a67c:	f100 0001 	add.w	r0, r0, #1
 800a680:	bf08      	it	eq
 800a682:	2020      	moveq	r0, #32
 800a684:	4770      	bx	lr

0800a686 <__lo0bits>:
 800a686:	6803      	ldr	r3, [r0, #0]
 800a688:	4602      	mov	r2, r0
 800a68a:	f013 0007 	ands.w	r0, r3, #7
 800a68e:	d00b      	beq.n	800a6a8 <__lo0bits+0x22>
 800a690:	07d9      	lsls	r1, r3, #31
 800a692:	d421      	bmi.n	800a6d8 <__lo0bits+0x52>
 800a694:	0798      	lsls	r0, r3, #30
 800a696:	bf49      	itett	mi
 800a698:	085b      	lsrmi	r3, r3, #1
 800a69a:	089b      	lsrpl	r3, r3, #2
 800a69c:	2001      	movmi	r0, #1
 800a69e:	6013      	strmi	r3, [r2, #0]
 800a6a0:	bf5c      	itt	pl
 800a6a2:	6013      	strpl	r3, [r2, #0]
 800a6a4:	2002      	movpl	r0, #2
 800a6a6:	4770      	bx	lr
 800a6a8:	b299      	uxth	r1, r3
 800a6aa:	b909      	cbnz	r1, 800a6b0 <__lo0bits+0x2a>
 800a6ac:	0c1b      	lsrs	r3, r3, #16
 800a6ae:	2010      	movs	r0, #16
 800a6b0:	b2d9      	uxtb	r1, r3
 800a6b2:	b909      	cbnz	r1, 800a6b8 <__lo0bits+0x32>
 800a6b4:	3008      	adds	r0, #8
 800a6b6:	0a1b      	lsrs	r3, r3, #8
 800a6b8:	0719      	lsls	r1, r3, #28
 800a6ba:	bf04      	itt	eq
 800a6bc:	091b      	lsreq	r3, r3, #4
 800a6be:	3004      	addeq	r0, #4
 800a6c0:	0799      	lsls	r1, r3, #30
 800a6c2:	bf04      	itt	eq
 800a6c4:	089b      	lsreq	r3, r3, #2
 800a6c6:	3002      	addeq	r0, #2
 800a6c8:	07d9      	lsls	r1, r3, #31
 800a6ca:	d403      	bmi.n	800a6d4 <__lo0bits+0x4e>
 800a6cc:	085b      	lsrs	r3, r3, #1
 800a6ce:	f100 0001 	add.w	r0, r0, #1
 800a6d2:	d003      	beq.n	800a6dc <__lo0bits+0x56>
 800a6d4:	6013      	str	r3, [r2, #0]
 800a6d6:	4770      	bx	lr
 800a6d8:	2000      	movs	r0, #0
 800a6da:	4770      	bx	lr
 800a6dc:	2020      	movs	r0, #32
 800a6de:	4770      	bx	lr

0800a6e0 <__i2b>:
 800a6e0:	b510      	push	{r4, lr}
 800a6e2:	460c      	mov	r4, r1
 800a6e4:	2101      	movs	r1, #1
 800a6e6:	f7ff ff07 	bl	800a4f8 <_Balloc>
 800a6ea:	4602      	mov	r2, r0
 800a6ec:	b928      	cbnz	r0, 800a6fa <__i2b+0x1a>
 800a6ee:	4b05      	ldr	r3, [pc, #20]	@ (800a704 <__i2b+0x24>)
 800a6f0:	4805      	ldr	r0, [pc, #20]	@ (800a708 <__i2b+0x28>)
 800a6f2:	f240 1145 	movw	r1, #325	@ 0x145
 800a6f6:	f000 fc33 	bl	800af60 <__assert_func>
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	6144      	str	r4, [r0, #20]
 800a6fe:	6103      	str	r3, [r0, #16]
 800a700:	bd10      	pop	{r4, pc}
 800a702:	bf00      	nop
 800a704:	0800b584 	.word	0x0800b584
 800a708:	0800b5a6 	.word	0x0800b5a6

0800a70c <__multiply>:
 800a70c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a710:	4614      	mov	r4, r2
 800a712:	690a      	ldr	r2, [r1, #16]
 800a714:	6923      	ldr	r3, [r4, #16]
 800a716:	429a      	cmp	r2, r3
 800a718:	bfa8      	it	ge
 800a71a:	4623      	movge	r3, r4
 800a71c:	460f      	mov	r7, r1
 800a71e:	bfa4      	itt	ge
 800a720:	460c      	movge	r4, r1
 800a722:	461f      	movge	r7, r3
 800a724:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a728:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a72c:	68a3      	ldr	r3, [r4, #8]
 800a72e:	6861      	ldr	r1, [r4, #4]
 800a730:	eb0a 0609 	add.w	r6, sl, r9
 800a734:	42b3      	cmp	r3, r6
 800a736:	b085      	sub	sp, #20
 800a738:	bfb8      	it	lt
 800a73a:	3101      	addlt	r1, #1
 800a73c:	f7ff fedc 	bl	800a4f8 <_Balloc>
 800a740:	b930      	cbnz	r0, 800a750 <__multiply+0x44>
 800a742:	4602      	mov	r2, r0
 800a744:	4b44      	ldr	r3, [pc, #272]	@ (800a858 <__multiply+0x14c>)
 800a746:	4845      	ldr	r0, [pc, #276]	@ (800a85c <__multiply+0x150>)
 800a748:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a74c:	f000 fc08 	bl	800af60 <__assert_func>
 800a750:	f100 0514 	add.w	r5, r0, #20
 800a754:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a758:	462b      	mov	r3, r5
 800a75a:	2200      	movs	r2, #0
 800a75c:	4543      	cmp	r3, r8
 800a75e:	d321      	bcc.n	800a7a4 <__multiply+0x98>
 800a760:	f107 0114 	add.w	r1, r7, #20
 800a764:	f104 0214 	add.w	r2, r4, #20
 800a768:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a76c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a770:	9302      	str	r3, [sp, #8]
 800a772:	1b13      	subs	r3, r2, r4
 800a774:	3b15      	subs	r3, #21
 800a776:	f023 0303 	bic.w	r3, r3, #3
 800a77a:	3304      	adds	r3, #4
 800a77c:	f104 0715 	add.w	r7, r4, #21
 800a780:	42ba      	cmp	r2, r7
 800a782:	bf38      	it	cc
 800a784:	2304      	movcc	r3, #4
 800a786:	9301      	str	r3, [sp, #4]
 800a788:	9b02      	ldr	r3, [sp, #8]
 800a78a:	9103      	str	r1, [sp, #12]
 800a78c:	428b      	cmp	r3, r1
 800a78e:	d80c      	bhi.n	800a7aa <__multiply+0x9e>
 800a790:	2e00      	cmp	r6, #0
 800a792:	dd03      	ble.n	800a79c <__multiply+0x90>
 800a794:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d05b      	beq.n	800a854 <__multiply+0x148>
 800a79c:	6106      	str	r6, [r0, #16]
 800a79e:	b005      	add	sp, #20
 800a7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7a4:	f843 2b04 	str.w	r2, [r3], #4
 800a7a8:	e7d8      	b.n	800a75c <__multiply+0x50>
 800a7aa:	f8b1 a000 	ldrh.w	sl, [r1]
 800a7ae:	f1ba 0f00 	cmp.w	sl, #0
 800a7b2:	d024      	beq.n	800a7fe <__multiply+0xf2>
 800a7b4:	f104 0e14 	add.w	lr, r4, #20
 800a7b8:	46a9      	mov	r9, r5
 800a7ba:	f04f 0c00 	mov.w	ip, #0
 800a7be:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a7c2:	f8d9 3000 	ldr.w	r3, [r9]
 800a7c6:	fa1f fb87 	uxth.w	fp, r7
 800a7ca:	b29b      	uxth	r3, r3
 800a7cc:	fb0a 330b 	mla	r3, sl, fp, r3
 800a7d0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a7d4:	f8d9 7000 	ldr.w	r7, [r9]
 800a7d8:	4463      	add	r3, ip
 800a7da:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a7de:	fb0a c70b 	mla	r7, sl, fp, ip
 800a7e2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a7ec:	4572      	cmp	r2, lr
 800a7ee:	f849 3b04 	str.w	r3, [r9], #4
 800a7f2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a7f6:	d8e2      	bhi.n	800a7be <__multiply+0xb2>
 800a7f8:	9b01      	ldr	r3, [sp, #4]
 800a7fa:	f845 c003 	str.w	ip, [r5, r3]
 800a7fe:	9b03      	ldr	r3, [sp, #12]
 800a800:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a804:	3104      	adds	r1, #4
 800a806:	f1b9 0f00 	cmp.w	r9, #0
 800a80a:	d021      	beq.n	800a850 <__multiply+0x144>
 800a80c:	682b      	ldr	r3, [r5, #0]
 800a80e:	f104 0c14 	add.w	ip, r4, #20
 800a812:	46ae      	mov	lr, r5
 800a814:	f04f 0a00 	mov.w	sl, #0
 800a818:	f8bc b000 	ldrh.w	fp, [ip]
 800a81c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a820:	fb09 770b 	mla	r7, r9, fp, r7
 800a824:	4457      	add	r7, sl
 800a826:	b29b      	uxth	r3, r3
 800a828:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a82c:	f84e 3b04 	str.w	r3, [lr], #4
 800a830:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a834:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a838:	f8be 3000 	ldrh.w	r3, [lr]
 800a83c:	fb09 330a 	mla	r3, r9, sl, r3
 800a840:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a844:	4562      	cmp	r2, ip
 800a846:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a84a:	d8e5      	bhi.n	800a818 <__multiply+0x10c>
 800a84c:	9f01      	ldr	r7, [sp, #4]
 800a84e:	51eb      	str	r3, [r5, r7]
 800a850:	3504      	adds	r5, #4
 800a852:	e799      	b.n	800a788 <__multiply+0x7c>
 800a854:	3e01      	subs	r6, #1
 800a856:	e79b      	b.n	800a790 <__multiply+0x84>
 800a858:	0800b584 	.word	0x0800b584
 800a85c:	0800b5a6 	.word	0x0800b5a6

0800a860 <__pow5mult>:
 800a860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a864:	4615      	mov	r5, r2
 800a866:	f012 0203 	ands.w	r2, r2, #3
 800a86a:	4607      	mov	r7, r0
 800a86c:	460e      	mov	r6, r1
 800a86e:	d007      	beq.n	800a880 <__pow5mult+0x20>
 800a870:	4c25      	ldr	r4, [pc, #148]	@ (800a908 <__pow5mult+0xa8>)
 800a872:	3a01      	subs	r2, #1
 800a874:	2300      	movs	r3, #0
 800a876:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a87a:	f7ff fe9f 	bl	800a5bc <__multadd>
 800a87e:	4606      	mov	r6, r0
 800a880:	10ad      	asrs	r5, r5, #2
 800a882:	d03d      	beq.n	800a900 <__pow5mult+0xa0>
 800a884:	69fc      	ldr	r4, [r7, #28]
 800a886:	b97c      	cbnz	r4, 800a8a8 <__pow5mult+0x48>
 800a888:	2010      	movs	r0, #16
 800a88a:	f7ff fcd3 	bl	800a234 <malloc>
 800a88e:	4602      	mov	r2, r0
 800a890:	61f8      	str	r0, [r7, #28]
 800a892:	b928      	cbnz	r0, 800a8a0 <__pow5mult+0x40>
 800a894:	4b1d      	ldr	r3, [pc, #116]	@ (800a90c <__pow5mult+0xac>)
 800a896:	481e      	ldr	r0, [pc, #120]	@ (800a910 <__pow5mult+0xb0>)
 800a898:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a89c:	f000 fb60 	bl	800af60 <__assert_func>
 800a8a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a8a4:	6004      	str	r4, [r0, #0]
 800a8a6:	60c4      	str	r4, [r0, #12]
 800a8a8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a8ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a8b0:	b94c      	cbnz	r4, 800a8c6 <__pow5mult+0x66>
 800a8b2:	f240 2171 	movw	r1, #625	@ 0x271
 800a8b6:	4638      	mov	r0, r7
 800a8b8:	f7ff ff12 	bl	800a6e0 <__i2b>
 800a8bc:	2300      	movs	r3, #0
 800a8be:	f8c8 0008 	str.w	r0, [r8, #8]
 800a8c2:	4604      	mov	r4, r0
 800a8c4:	6003      	str	r3, [r0, #0]
 800a8c6:	f04f 0900 	mov.w	r9, #0
 800a8ca:	07eb      	lsls	r3, r5, #31
 800a8cc:	d50a      	bpl.n	800a8e4 <__pow5mult+0x84>
 800a8ce:	4631      	mov	r1, r6
 800a8d0:	4622      	mov	r2, r4
 800a8d2:	4638      	mov	r0, r7
 800a8d4:	f7ff ff1a 	bl	800a70c <__multiply>
 800a8d8:	4631      	mov	r1, r6
 800a8da:	4680      	mov	r8, r0
 800a8dc:	4638      	mov	r0, r7
 800a8de:	f7ff fe4b 	bl	800a578 <_Bfree>
 800a8e2:	4646      	mov	r6, r8
 800a8e4:	106d      	asrs	r5, r5, #1
 800a8e6:	d00b      	beq.n	800a900 <__pow5mult+0xa0>
 800a8e8:	6820      	ldr	r0, [r4, #0]
 800a8ea:	b938      	cbnz	r0, 800a8fc <__pow5mult+0x9c>
 800a8ec:	4622      	mov	r2, r4
 800a8ee:	4621      	mov	r1, r4
 800a8f0:	4638      	mov	r0, r7
 800a8f2:	f7ff ff0b 	bl	800a70c <__multiply>
 800a8f6:	6020      	str	r0, [r4, #0]
 800a8f8:	f8c0 9000 	str.w	r9, [r0]
 800a8fc:	4604      	mov	r4, r0
 800a8fe:	e7e4      	b.n	800a8ca <__pow5mult+0x6a>
 800a900:	4630      	mov	r0, r6
 800a902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a906:	bf00      	nop
 800a908:	0800b600 	.word	0x0800b600
 800a90c:	0800b515 	.word	0x0800b515
 800a910:	0800b5a6 	.word	0x0800b5a6

0800a914 <__lshift>:
 800a914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a918:	460c      	mov	r4, r1
 800a91a:	6849      	ldr	r1, [r1, #4]
 800a91c:	6923      	ldr	r3, [r4, #16]
 800a91e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a922:	68a3      	ldr	r3, [r4, #8]
 800a924:	4607      	mov	r7, r0
 800a926:	4691      	mov	r9, r2
 800a928:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a92c:	f108 0601 	add.w	r6, r8, #1
 800a930:	42b3      	cmp	r3, r6
 800a932:	db0b      	blt.n	800a94c <__lshift+0x38>
 800a934:	4638      	mov	r0, r7
 800a936:	f7ff fddf 	bl	800a4f8 <_Balloc>
 800a93a:	4605      	mov	r5, r0
 800a93c:	b948      	cbnz	r0, 800a952 <__lshift+0x3e>
 800a93e:	4602      	mov	r2, r0
 800a940:	4b28      	ldr	r3, [pc, #160]	@ (800a9e4 <__lshift+0xd0>)
 800a942:	4829      	ldr	r0, [pc, #164]	@ (800a9e8 <__lshift+0xd4>)
 800a944:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a948:	f000 fb0a 	bl	800af60 <__assert_func>
 800a94c:	3101      	adds	r1, #1
 800a94e:	005b      	lsls	r3, r3, #1
 800a950:	e7ee      	b.n	800a930 <__lshift+0x1c>
 800a952:	2300      	movs	r3, #0
 800a954:	f100 0114 	add.w	r1, r0, #20
 800a958:	f100 0210 	add.w	r2, r0, #16
 800a95c:	4618      	mov	r0, r3
 800a95e:	4553      	cmp	r3, sl
 800a960:	db33      	blt.n	800a9ca <__lshift+0xb6>
 800a962:	6920      	ldr	r0, [r4, #16]
 800a964:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a968:	f104 0314 	add.w	r3, r4, #20
 800a96c:	f019 091f 	ands.w	r9, r9, #31
 800a970:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a974:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a978:	d02b      	beq.n	800a9d2 <__lshift+0xbe>
 800a97a:	f1c9 0e20 	rsb	lr, r9, #32
 800a97e:	468a      	mov	sl, r1
 800a980:	2200      	movs	r2, #0
 800a982:	6818      	ldr	r0, [r3, #0]
 800a984:	fa00 f009 	lsl.w	r0, r0, r9
 800a988:	4310      	orrs	r0, r2
 800a98a:	f84a 0b04 	str.w	r0, [sl], #4
 800a98e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a992:	459c      	cmp	ip, r3
 800a994:	fa22 f20e 	lsr.w	r2, r2, lr
 800a998:	d8f3      	bhi.n	800a982 <__lshift+0x6e>
 800a99a:	ebac 0304 	sub.w	r3, ip, r4
 800a99e:	3b15      	subs	r3, #21
 800a9a0:	f023 0303 	bic.w	r3, r3, #3
 800a9a4:	3304      	adds	r3, #4
 800a9a6:	f104 0015 	add.w	r0, r4, #21
 800a9aa:	4584      	cmp	ip, r0
 800a9ac:	bf38      	it	cc
 800a9ae:	2304      	movcc	r3, #4
 800a9b0:	50ca      	str	r2, [r1, r3]
 800a9b2:	b10a      	cbz	r2, 800a9b8 <__lshift+0xa4>
 800a9b4:	f108 0602 	add.w	r6, r8, #2
 800a9b8:	3e01      	subs	r6, #1
 800a9ba:	4638      	mov	r0, r7
 800a9bc:	612e      	str	r6, [r5, #16]
 800a9be:	4621      	mov	r1, r4
 800a9c0:	f7ff fdda 	bl	800a578 <_Bfree>
 800a9c4:	4628      	mov	r0, r5
 800a9c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9ca:	f842 0f04 	str.w	r0, [r2, #4]!
 800a9ce:	3301      	adds	r3, #1
 800a9d0:	e7c5      	b.n	800a95e <__lshift+0x4a>
 800a9d2:	3904      	subs	r1, #4
 800a9d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9d8:	f841 2f04 	str.w	r2, [r1, #4]!
 800a9dc:	459c      	cmp	ip, r3
 800a9de:	d8f9      	bhi.n	800a9d4 <__lshift+0xc0>
 800a9e0:	e7ea      	b.n	800a9b8 <__lshift+0xa4>
 800a9e2:	bf00      	nop
 800a9e4:	0800b584 	.word	0x0800b584
 800a9e8:	0800b5a6 	.word	0x0800b5a6

0800a9ec <__mcmp>:
 800a9ec:	690a      	ldr	r2, [r1, #16]
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	6900      	ldr	r0, [r0, #16]
 800a9f2:	1a80      	subs	r0, r0, r2
 800a9f4:	b530      	push	{r4, r5, lr}
 800a9f6:	d10e      	bne.n	800aa16 <__mcmp+0x2a>
 800a9f8:	3314      	adds	r3, #20
 800a9fa:	3114      	adds	r1, #20
 800a9fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800aa00:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800aa04:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800aa08:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800aa0c:	4295      	cmp	r5, r2
 800aa0e:	d003      	beq.n	800aa18 <__mcmp+0x2c>
 800aa10:	d205      	bcs.n	800aa1e <__mcmp+0x32>
 800aa12:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aa16:	bd30      	pop	{r4, r5, pc}
 800aa18:	42a3      	cmp	r3, r4
 800aa1a:	d3f3      	bcc.n	800aa04 <__mcmp+0x18>
 800aa1c:	e7fb      	b.n	800aa16 <__mcmp+0x2a>
 800aa1e:	2001      	movs	r0, #1
 800aa20:	e7f9      	b.n	800aa16 <__mcmp+0x2a>
	...

0800aa24 <__mdiff>:
 800aa24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa28:	4689      	mov	r9, r1
 800aa2a:	4606      	mov	r6, r0
 800aa2c:	4611      	mov	r1, r2
 800aa2e:	4648      	mov	r0, r9
 800aa30:	4614      	mov	r4, r2
 800aa32:	f7ff ffdb 	bl	800a9ec <__mcmp>
 800aa36:	1e05      	subs	r5, r0, #0
 800aa38:	d112      	bne.n	800aa60 <__mdiff+0x3c>
 800aa3a:	4629      	mov	r1, r5
 800aa3c:	4630      	mov	r0, r6
 800aa3e:	f7ff fd5b 	bl	800a4f8 <_Balloc>
 800aa42:	4602      	mov	r2, r0
 800aa44:	b928      	cbnz	r0, 800aa52 <__mdiff+0x2e>
 800aa46:	4b3f      	ldr	r3, [pc, #252]	@ (800ab44 <__mdiff+0x120>)
 800aa48:	f240 2137 	movw	r1, #567	@ 0x237
 800aa4c:	483e      	ldr	r0, [pc, #248]	@ (800ab48 <__mdiff+0x124>)
 800aa4e:	f000 fa87 	bl	800af60 <__assert_func>
 800aa52:	2301      	movs	r3, #1
 800aa54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aa58:	4610      	mov	r0, r2
 800aa5a:	b003      	add	sp, #12
 800aa5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa60:	bfbc      	itt	lt
 800aa62:	464b      	movlt	r3, r9
 800aa64:	46a1      	movlt	r9, r4
 800aa66:	4630      	mov	r0, r6
 800aa68:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800aa6c:	bfba      	itte	lt
 800aa6e:	461c      	movlt	r4, r3
 800aa70:	2501      	movlt	r5, #1
 800aa72:	2500      	movge	r5, #0
 800aa74:	f7ff fd40 	bl	800a4f8 <_Balloc>
 800aa78:	4602      	mov	r2, r0
 800aa7a:	b918      	cbnz	r0, 800aa84 <__mdiff+0x60>
 800aa7c:	4b31      	ldr	r3, [pc, #196]	@ (800ab44 <__mdiff+0x120>)
 800aa7e:	f240 2145 	movw	r1, #581	@ 0x245
 800aa82:	e7e3      	b.n	800aa4c <__mdiff+0x28>
 800aa84:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800aa88:	6926      	ldr	r6, [r4, #16]
 800aa8a:	60c5      	str	r5, [r0, #12]
 800aa8c:	f109 0310 	add.w	r3, r9, #16
 800aa90:	f109 0514 	add.w	r5, r9, #20
 800aa94:	f104 0e14 	add.w	lr, r4, #20
 800aa98:	f100 0b14 	add.w	fp, r0, #20
 800aa9c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800aaa0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800aaa4:	9301      	str	r3, [sp, #4]
 800aaa6:	46d9      	mov	r9, fp
 800aaa8:	f04f 0c00 	mov.w	ip, #0
 800aaac:	9b01      	ldr	r3, [sp, #4]
 800aaae:	f85e 0b04 	ldr.w	r0, [lr], #4
 800aab2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800aab6:	9301      	str	r3, [sp, #4]
 800aab8:	fa1f f38a 	uxth.w	r3, sl
 800aabc:	4619      	mov	r1, r3
 800aabe:	b283      	uxth	r3, r0
 800aac0:	1acb      	subs	r3, r1, r3
 800aac2:	0c00      	lsrs	r0, r0, #16
 800aac4:	4463      	add	r3, ip
 800aac6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800aaca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800aace:	b29b      	uxth	r3, r3
 800aad0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800aad4:	4576      	cmp	r6, lr
 800aad6:	f849 3b04 	str.w	r3, [r9], #4
 800aada:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aade:	d8e5      	bhi.n	800aaac <__mdiff+0x88>
 800aae0:	1b33      	subs	r3, r6, r4
 800aae2:	3b15      	subs	r3, #21
 800aae4:	f023 0303 	bic.w	r3, r3, #3
 800aae8:	3415      	adds	r4, #21
 800aaea:	3304      	adds	r3, #4
 800aaec:	42a6      	cmp	r6, r4
 800aaee:	bf38      	it	cc
 800aaf0:	2304      	movcc	r3, #4
 800aaf2:	441d      	add	r5, r3
 800aaf4:	445b      	add	r3, fp
 800aaf6:	461e      	mov	r6, r3
 800aaf8:	462c      	mov	r4, r5
 800aafa:	4544      	cmp	r4, r8
 800aafc:	d30e      	bcc.n	800ab1c <__mdiff+0xf8>
 800aafe:	f108 0103 	add.w	r1, r8, #3
 800ab02:	1b49      	subs	r1, r1, r5
 800ab04:	f021 0103 	bic.w	r1, r1, #3
 800ab08:	3d03      	subs	r5, #3
 800ab0a:	45a8      	cmp	r8, r5
 800ab0c:	bf38      	it	cc
 800ab0e:	2100      	movcc	r1, #0
 800ab10:	440b      	add	r3, r1
 800ab12:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ab16:	b191      	cbz	r1, 800ab3e <__mdiff+0x11a>
 800ab18:	6117      	str	r7, [r2, #16]
 800ab1a:	e79d      	b.n	800aa58 <__mdiff+0x34>
 800ab1c:	f854 1b04 	ldr.w	r1, [r4], #4
 800ab20:	46e6      	mov	lr, ip
 800ab22:	0c08      	lsrs	r0, r1, #16
 800ab24:	fa1c fc81 	uxtah	ip, ip, r1
 800ab28:	4471      	add	r1, lr
 800ab2a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ab2e:	b289      	uxth	r1, r1
 800ab30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ab34:	f846 1b04 	str.w	r1, [r6], #4
 800ab38:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ab3c:	e7dd      	b.n	800aafa <__mdiff+0xd6>
 800ab3e:	3f01      	subs	r7, #1
 800ab40:	e7e7      	b.n	800ab12 <__mdiff+0xee>
 800ab42:	bf00      	nop
 800ab44:	0800b584 	.word	0x0800b584
 800ab48:	0800b5a6 	.word	0x0800b5a6

0800ab4c <__d2b>:
 800ab4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ab50:	460f      	mov	r7, r1
 800ab52:	2101      	movs	r1, #1
 800ab54:	ec59 8b10 	vmov	r8, r9, d0
 800ab58:	4616      	mov	r6, r2
 800ab5a:	f7ff fccd 	bl	800a4f8 <_Balloc>
 800ab5e:	4604      	mov	r4, r0
 800ab60:	b930      	cbnz	r0, 800ab70 <__d2b+0x24>
 800ab62:	4602      	mov	r2, r0
 800ab64:	4b23      	ldr	r3, [pc, #140]	@ (800abf4 <__d2b+0xa8>)
 800ab66:	4824      	ldr	r0, [pc, #144]	@ (800abf8 <__d2b+0xac>)
 800ab68:	f240 310f 	movw	r1, #783	@ 0x30f
 800ab6c:	f000 f9f8 	bl	800af60 <__assert_func>
 800ab70:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ab74:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ab78:	b10d      	cbz	r5, 800ab7e <__d2b+0x32>
 800ab7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ab7e:	9301      	str	r3, [sp, #4]
 800ab80:	f1b8 0300 	subs.w	r3, r8, #0
 800ab84:	d023      	beq.n	800abce <__d2b+0x82>
 800ab86:	4668      	mov	r0, sp
 800ab88:	9300      	str	r3, [sp, #0]
 800ab8a:	f7ff fd7c 	bl	800a686 <__lo0bits>
 800ab8e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ab92:	b1d0      	cbz	r0, 800abca <__d2b+0x7e>
 800ab94:	f1c0 0320 	rsb	r3, r0, #32
 800ab98:	fa02 f303 	lsl.w	r3, r2, r3
 800ab9c:	430b      	orrs	r3, r1
 800ab9e:	40c2      	lsrs	r2, r0
 800aba0:	6163      	str	r3, [r4, #20]
 800aba2:	9201      	str	r2, [sp, #4]
 800aba4:	9b01      	ldr	r3, [sp, #4]
 800aba6:	61a3      	str	r3, [r4, #24]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	bf0c      	ite	eq
 800abac:	2201      	moveq	r2, #1
 800abae:	2202      	movne	r2, #2
 800abb0:	6122      	str	r2, [r4, #16]
 800abb2:	b1a5      	cbz	r5, 800abde <__d2b+0x92>
 800abb4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800abb8:	4405      	add	r5, r0
 800abba:	603d      	str	r5, [r7, #0]
 800abbc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800abc0:	6030      	str	r0, [r6, #0]
 800abc2:	4620      	mov	r0, r4
 800abc4:	b003      	add	sp, #12
 800abc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800abca:	6161      	str	r1, [r4, #20]
 800abcc:	e7ea      	b.n	800aba4 <__d2b+0x58>
 800abce:	a801      	add	r0, sp, #4
 800abd0:	f7ff fd59 	bl	800a686 <__lo0bits>
 800abd4:	9b01      	ldr	r3, [sp, #4]
 800abd6:	6163      	str	r3, [r4, #20]
 800abd8:	3020      	adds	r0, #32
 800abda:	2201      	movs	r2, #1
 800abdc:	e7e8      	b.n	800abb0 <__d2b+0x64>
 800abde:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800abe2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800abe6:	6038      	str	r0, [r7, #0]
 800abe8:	6918      	ldr	r0, [r3, #16]
 800abea:	f7ff fd2d 	bl	800a648 <__hi0bits>
 800abee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800abf2:	e7e5      	b.n	800abc0 <__d2b+0x74>
 800abf4:	0800b584 	.word	0x0800b584
 800abf8:	0800b5a6 	.word	0x0800b5a6

0800abfc <__sread>:
 800abfc:	b510      	push	{r4, lr}
 800abfe:	460c      	mov	r4, r1
 800ac00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac04:	f000 f978 	bl	800aef8 <_read_r>
 800ac08:	2800      	cmp	r0, #0
 800ac0a:	bfab      	itete	ge
 800ac0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ac0e:	89a3      	ldrhlt	r3, [r4, #12]
 800ac10:	181b      	addge	r3, r3, r0
 800ac12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ac16:	bfac      	ite	ge
 800ac18:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ac1a:	81a3      	strhlt	r3, [r4, #12]
 800ac1c:	bd10      	pop	{r4, pc}

0800ac1e <__swrite>:
 800ac1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac22:	461f      	mov	r7, r3
 800ac24:	898b      	ldrh	r3, [r1, #12]
 800ac26:	05db      	lsls	r3, r3, #23
 800ac28:	4605      	mov	r5, r0
 800ac2a:	460c      	mov	r4, r1
 800ac2c:	4616      	mov	r6, r2
 800ac2e:	d505      	bpl.n	800ac3c <__swrite+0x1e>
 800ac30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac34:	2302      	movs	r3, #2
 800ac36:	2200      	movs	r2, #0
 800ac38:	f000 f94c 	bl	800aed4 <_lseek_r>
 800ac3c:	89a3      	ldrh	r3, [r4, #12]
 800ac3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ac46:	81a3      	strh	r3, [r4, #12]
 800ac48:	4632      	mov	r2, r6
 800ac4a:	463b      	mov	r3, r7
 800ac4c:	4628      	mov	r0, r5
 800ac4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac52:	f000 b973 	b.w	800af3c <_write_r>

0800ac56 <__sseek>:
 800ac56:	b510      	push	{r4, lr}
 800ac58:	460c      	mov	r4, r1
 800ac5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac5e:	f000 f939 	bl	800aed4 <_lseek_r>
 800ac62:	1c43      	adds	r3, r0, #1
 800ac64:	89a3      	ldrh	r3, [r4, #12]
 800ac66:	bf15      	itete	ne
 800ac68:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ac6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ac6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ac72:	81a3      	strheq	r3, [r4, #12]
 800ac74:	bf18      	it	ne
 800ac76:	81a3      	strhne	r3, [r4, #12]
 800ac78:	bd10      	pop	{r4, pc}

0800ac7a <__sclose>:
 800ac7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac7e:	f000 b8f7 	b.w	800ae70 <_close_r>

0800ac82 <__swbuf_r>:
 800ac82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac84:	460e      	mov	r6, r1
 800ac86:	4614      	mov	r4, r2
 800ac88:	4605      	mov	r5, r0
 800ac8a:	b118      	cbz	r0, 800ac94 <__swbuf_r+0x12>
 800ac8c:	6a03      	ldr	r3, [r0, #32]
 800ac8e:	b90b      	cbnz	r3, 800ac94 <__swbuf_r+0x12>
 800ac90:	f7fe fa54 	bl	800913c <__sinit>
 800ac94:	69a3      	ldr	r3, [r4, #24]
 800ac96:	60a3      	str	r3, [r4, #8]
 800ac98:	89a3      	ldrh	r3, [r4, #12]
 800ac9a:	071a      	lsls	r2, r3, #28
 800ac9c:	d501      	bpl.n	800aca2 <__swbuf_r+0x20>
 800ac9e:	6923      	ldr	r3, [r4, #16]
 800aca0:	b943      	cbnz	r3, 800acb4 <__swbuf_r+0x32>
 800aca2:	4621      	mov	r1, r4
 800aca4:	4628      	mov	r0, r5
 800aca6:	f000 f82b 	bl	800ad00 <__swsetup_r>
 800acaa:	b118      	cbz	r0, 800acb4 <__swbuf_r+0x32>
 800acac:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800acb0:	4638      	mov	r0, r7
 800acb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acb4:	6823      	ldr	r3, [r4, #0]
 800acb6:	6922      	ldr	r2, [r4, #16]
 800acb8:	1a98      	subs	r0, r3, r2
 800acba:	6963      	ldr	r3, [r4, #20]
 800acbc:	b2f6      	uxtb	r6, r6
 800acbe:	4283      	cmp	r3, r0
 800acc0:	4637      	mov	r7, r6
 800acc2:	dc05      	bgt.n	800acd0 <__swbuf_r+0x4e>
 800acc4:	4621      	mov	r1, r4
 800acc6:	4628      	mov	r0, r5
 800acc8:	f7ff fbe2 	bl	800a490 <_fflush_r>
 800accc:	2800      	cmp	r0, #0
 800acce:	d1ed      	bne.n	800acac <__swbuf_r+0x2a>
 800acd0:	68a3      	ldr	r3, [r4, #8]
 800acd2:	3b01      	subs	r3, #1
 800acd4:	60a3      	str	r3, [r4, #8]
 800acd6:	6823      	ldr	r3, [r4, #0]
 800acd8:	1c5a      	adds	r2, r3, #1
 800acda:	6022      	str	r2, [r4, #0]
 800acdc:	701e      	strb	r6, [r3, #0]
 800acde:	6962      	ldr	r2, [r4, #20]
 800ace0:	1c43      	adds	r3, r0, #1
 800ace2:	429a      	cmp	r2, r3
 800ace4:	d004      	beq.n	800acf0 <__swbuf_r+0x6e>
 800ace6:	89a3      	ldrh	r3, [r4, #12]
 800ace8:	07db      	lsls	r3, r3, #31
 800acea:	d5e1      	bpl.n	800acb0 <__swbuf_r+0x2e>
 800acec:	2e0a      	cmp	r6, #10
 800acee:	d1df      	bne.n	800acb0 <__swbuf_r+0x2e>
 800acf0:	4621      	mov	r1, r4
 800acf2:	4628      	mov	r0, r5
 800acf4:	f7ff fbcc 	bl	800a490 <_fflush_r>
 800acf8:	2800      	cmp	r0, #0
 800acfa:	d0d9      	beq.n	800acb0 <__swbuf_r+0x2e>
 800acfc:	e7d6      	b.n	800acac <__swbuf_r+0x2a>
	...

0800ad00 <__swsetup_r>:
 800ad00:	b538      	push	{r3, r4, r5, lr}
 800ad02:	4b29      	ldr	r3, [pc, #164]	@ (800ada8 <__swsetup_r+0xa8>)
 800ad04:	4605      	mov	r5, r0
 800ad06:	6818      	ldr	r0, [r3, #0]
 800ad08:	460c      	mov	r4, r1
 800ad0a:	b118      	cbz	r0, 800ad14 <__swsetup_r+0x14>
 800ad0c:	6a03      	ldr	r3, [r0, #32]
 800ad0e:	b90b      	cbnz	r3, 800ad14 <__swsetup_r+0x14>
 800ad10:	f7fe fa14 	bl	800913c <__sinit>
 800ad14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad18:	0719      	lsls	r1, r3, #28
 800ad1a:	d422      	bmi.n	800ad62 <__swsetup_r+0x62>
 800ad1c:	06da      	lsls	r2, r3, #27
 800ad1e:	d407      	bmi.n	800ad30 <__swsetup_r+0x30>
 800ad20:	2209      	movs	r2, #9
 800ad22:	602a      	str	r2, [r5, #0]
 800ad24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad28:	81a3      	strh	r3, [r4, #12]
 800ad2a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ad2e:	e033      	b.n	800ad98 <__swsetup_r+0x98>
 800ad30:	0758      	lsls	r0, r3, #29
 800ad32:	d512      	bpl.n	800ad5a <__swsetup_r+0x5a>
 800ad34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ad36:	b141      	cbz	r1, 800ad4a <__swsetup_r+0x4a>
 800ad38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ad3c:	4299      	cmp	r1, r3
 800ad3e:	d002      	beq.n	800ad46 <__swsetup_r+0x46>
 800ad40:	4628      	mov	r0, r5
 800ad42:	f000 f93f 	bl	800afc4 <_free_r>
 800ad46:	2300      	movs	r3, #0
 800ad48:	6363      	str	r3, [r4, #52]	@ 0x34
 800ad4a:	89a3      	ldrh	r3, [r4, #12]
 800ad4c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ad50:	81a3      	strh	r3, [r4, #12]
 800ad52:	2300      	movs	r3, #0
 800ad54:	6063      	str	r3, [r4, #4]
 800ad56:	6923      	ldr	r3, [r4, #16]
 800ad58:	6023      	str	r3, [r4, #0]
 800ad5a:	89a3      	ldrh	r3, [r4, #12]
 800ad5c:	f043 0308 	orr.w	r3, r3, #8
 800ad60:	81a3      	strh	r3, [r4, #12]
 800ad62:	6923      	ldr	r3, [r4, #16]
 800ad64:	b94b      	cbnz	r3, 800ad7a <__swsetup_r+0x7a>
 800ad66:	89a3      	ldrh	r3, [r4, #12]
 800ad68:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ad6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad70:	d003      	beq.n	800ad7a <__swsetup_r+0x7a>
 800ad72:	4621      	mov	r1, r4
 800ad74:	4628      	mov	r0, r5
 800ad76:	f000 f83f 	bl	800adf8 <__smakebuf_r>
 800ad7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad7e:	f013 0201 	ands.w	r2, r3, #1
 800ad82:	d00a      	beq.n	800ad9a <__swsetup_r+0x9a>
 800ad84:	2200      	movs	r2, #0
 800ad86:	60a2      	str	r2, [r4, #8]
 800ad88:	6962      	ldr	r2, [r4, #20]
 800ad8a:	4252      	negs	r2, r2
 800ad8c:	61a2      	str	r2, [r4, #24]
 800ad8e:	6922      	ldr	r2, [r4, #16]
 800ad90:	b942      	cbnz	r2, 800ada4 <__swsetup_r+0xa4>
 800ad92:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ad96:	d1c5      	bne.n	800ad24 <__swsetup_r+0x24>
 800ad98:	bd38      	pop	{r3, r4, r5, pc}
 800ad9a:	0799      	lsls	r1, r3, #30
 800ad9c:	bf58      	it	pl
 800ad9e:	6962      	ldrpl	r2, [r4, #20]
 800ada0:	60a2      	str	r2, [r4, #8]
 800ada2:	e7f4      	b.n	800ad8e <__swsetup_r+0x8e>
 800ada4:	2000      	movs	r0, #0
 800ada6:	e7f7      	b.n	800ad98 <__swsetup_r+0x98>
 800ada8:	20000060 	.word	0x20000060

0800adac <__swhatbuf_r>:
 800adac:	b570      	push	{r4, r5, r6, lr}
 800adae:	460c      	mov	r4, r1
 800adb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adb4:	2900      	cmp	r1, #0
 800adb6:	b096      	sub	sp, #88	@ 0x58
 800adb8:	4615      	mov	r5, r2
 800adba:	461e      	mov	r6, r3
 800adbc:	da0d      	bge.n	800adda <__swhatbuf_r+0x2e>
 800adbe:	89a3      	ldrh	r3, [r4, #12]
 800adc0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800adc4:	f04f 0100 	mov.w	r1, #0
 800adc8:	bf14      	ite	ne
 800adca:	2340      	movne	r3, #64	@ 0x40
 800adcc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800add0:	2000      	movs	r0, #0
 800add2:	6031      	str	r1, [r6, #0]
 800add4:	602b      	str	r3, [r5, #0]
 800add6:	b016      	add	sp, #88	@ 0x58
 800add8:	bd70      	pop	{r4, r5, r6, pc}
 800adda:	466a      	mov	r2, sp
 800addc:	f000 f858 	bl	800ae90 <_fstat_r>
 800ade0:	2800      	cmp	r0, #0
 800ade2:	dbec      	blt.n	800adbe <__swhatbuf_r+0x12>
 800ade4:	9901      	ldr	r1, [sp, #4]
 800ade6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800adea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800adee:	4259      	negs	r1, r3
 800adf0:	4159      	adcs	r1, r3
 800adf2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800adf6:	e7eb      	b.n	800add0 <__swhatbuf_r+0x24>

0800adf8 <__smakebuf_r>:
 800adf8:	898b      	ldrh	r3, [r1, #12]
 800adfa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800adfc:	079d      	lsls	r5, r3, #30
 800adfe:	4606      	mov	r6, r0
 800ae00:	460c      	mov	r4, r1
 800ae02:	d507      	bpl.n	800ae14 <__smakebuf_r+0x1c>
 800ae04:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ae08:	6023      	str	r3, [r4, #0]
 800ae0a:	6123      	str	r3, [r4, #16]
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	6163      	str	r3, [r4, #20]
 800ae10:	b003      	add	sp, #12
 800ae12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae14:	ab01      	add	r3, sp, #4
 800ae16:	466a      	mov	r2, sp
 800ae18:	f7ff ffc8 	bl	800adac <__swhatbuf_r>
 800ae1c:	9f00      	ldr	r7, [sp, #0]
 800ae1e:	4605      	mov	r5, r0
 800ae20:	4639      	mov	r1, r7
 800ae22:	4630      	mov	r0, r6
 800ae24:	f7ff fa30 	bl	800a288 <_malloc_r>
 800ae28:	b948      	cbnz	r0, 800ae3e <__smakebuf_r+0x46>
 800ae2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae2e:	059a      	lsls	r2, r3, #22
 800ae30:	d4ee      	bmi.n	800ae10 <__smakebuf_r+0x18>
 800ae32:	f023 0303 	bic.w	r3, r3, #3
 800ae36:	f043 0302 	orr.w	r3, r3, #2
 800ae3a:	81a3      	strh	r3, [r4, #12]
 800ae3c:	e7e2      	b.n	800ae04 <__smakebuf_r+0xc>
 800ae3e:	89a3      	ldrh	r3, [r4, #12]
 800ae40:	6020      	str	r0, [r4, #0]
 800ae42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae46:	81a3      	strh	r3, [r4, #12]
 800ae48:	9b01      	ldr	r3, [sp, #4]
 800ae4a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ae4e:	b15b      	cbz	r3, 800ae68 <__smakebuf_r+0x70>
 800ae50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae54:	4630      	mov	r0, r6
 800ae56:	f000 f82d 	bl	800aeb4 <_isatty_r>
 800ae5a:	b128      	cbz	r0, 800ae68 <__smakebuf_r+0x70>
 800ae5c:	89a3      	ldrh	r3, [r4, #12]
 800ae5e:	f023 0303 	bic.w	r3, r3, #3
 800ae62:	f043 0301 	orr.w	r3, r3, #1
 800ae66:	81a3      	strh	r3, [r4, #12]
 800ae68:	89a3      	ldrh	r3, [r4, #12]
 800ae6a:	431d      	orrs	r5, r3
 800ae6c:	81a5      	strh	r5, [r4, #12]
 800ae6e:	e7cf      	b.n	800ae10 <__smakebuf_r+0x18>

0800ae70 <_close_r>:
 800ae70:	b538      	push	{r3, r4, r5, lr}
 800ae72:	4d06      	ldr	r5, [pc, #24]	@ (800ae8c <_close_r+0x1c>)
 800ae74:	2300      	movs	r3, #0
 800ae76:	4604      	mov	r4, r0
 800ae78:	4608      	mov	r0, r1
 800ae7a:	602b      	str	r3, [r5, #0]
 800ae7c:	f7f7 fc9e 	bl	80027bc <_close>
 800ae80:	1c43      	adds	r3, r0, #1
 800ae82:	d102      	bne.n	800ae8a <_close_r+0x1a>
 800ae84:	682b      	ldr	r3, [r5, #0]
 800ae86:	b103      	cbz	r3, 800ae8a <_close_r+0x1a>
 800ae88:	6023      	str	r3, [r4, #0]
 800ae8a:	bd38      	pop	{r3, r4, r5, pc}
 800ae8c:	20000618 	.word	0x20000618

0800ae90 <_fstat_r>:
 800ae90:	b538      	push	{r3, r4, r5, lr}
 800ae92:	4d07      	ldr	r5, [pc, #28]	@ (800aeb0 <_fstat_r+0x20>)
 800ae94:	2300      	movs	r3, #0
 800ae96:	4604      	mov	r4, r0
 800ae98:	4608      	mov	r0, r1
 800ae9a:	4611      	mov	r1, r2
 800ae9c:	602b      	str	r3, [r5, #0]
 800ae9e:	f7f7 fc99 	bl	80027d4 <_fstat>
 800aea2:	1c43      	adds	r3, r0, #1
 800aea4:	d102      	bne.n	800aeac <_fstat_r+0x1c>
 800aea6:	682b      	ldr	r3, [r5, #0]
 800aea8:	b103      	cbz	r3, 800aeac <_fstat_r+0x1c>
 800aeaa:	6023      	str	r3, [r4, #0]
 800aeac:	bd38      	pop	{r3, r4, r5, pc}
 800aeae:	bf00      	nop
 800aeb0:	20000618 	.word	0x20000618

0800aeb4 <_isatty_r>:
 800aeb4:	b538      	push	{r3, r4, r5, lr}
 800aeb6:	4d06      	ldr	r5, [pc, #24]	@ (800aed0 <_isatty_r+0x1c>)
 800aeb8:	2300      	movs	r3, #0
 800aeba:	4604      	mov	r4, r0
 800aebc:	4608      	mov	r0, r1
 800aebe:	602b      	str	r3, [r5, #0]
 800aec0:	f7f7 fc98 	bl	80027f4 <_isatty>
 800aec4:	1c43      	adds	r3, r0, #1
 800aec6:	d102      	bne.n	800aece <_isatty_r+0x1a>
 800aec8:	682b      	ldr	r3, [r5, #0]
 800aeca:	b103      	cbz	r3, 800aece <_isatty_r+0x1a>
 800aecc:	6023      	str	r3, [r4, #0]
 800aece:	bd38      	pop	{r3, r4, r5, pc}
 800aed0:	20000618 	.word	0x20000618

0800aed4 <_lseek_r>:
 800aed4:	b538      	push	{r3, r4, r5, lr}
 800aed6:	4d07      	ldr	r5, [pc, #28]	@ (800aef4 <_lseek_r+0x20>)
 800aed8:	4604      	mov	r4, r0
 800aeda:	4608      	mov	r0, r1
 800aedc:	4611      	mov	r1, r2
 800aede:	2200      	movs	r2, #0
 800aee0:	602a      	str	r2, [r5, #0]
 800aee2:	461a      	mov	r2, r3
 800aee4:	f7f7 fc91 	bl	800280a <_lseek>
 800aee8:	1c43      	adds	r3, r0, #1
 800aeea:	d102      	bne.n	800aef2 <_lseek_r+0x1e>
 800aeec:	682b      	ldr	r3, [r5, #0]
 800aeee:	b103      	cbz	r3, 800aef2 <_lseek_r+0x1e>
 800aef0:	6023      	str	r3, [r4, #0]
 800aef2:	bd38      	pop	{r3, r4, r5, pc}
 800aef4:	20000618 	.word	0x20000618

0800aef8 <_read_r>:
 800aef8:	b538      	push	{r3, r4, r5, lr}
 800aefa:	4d07      	ldr	r5, [pc, #28]	@ (800af18 <_read_r+0x20>)
 800aefc:	4604      	mov	r4, r0
 800aefe:	4608      	mov	r0, r1
 800af00:	4611      	mov	r1, r2
 800af02:	2200      	movs	r2, #0
 800af04:	602a      	str	r2, [r5, #0]
 800af06:	461a      	mov	r2, r3
 800af08:	f7f7 fc3b 	bl	8002782 <_read>
 800af0c:	1c43      	adds	r3, r0, #1
 800af0e:	d102      	bne.n	800af16 <_read_r+0x1e>
 800af10:	682b      	ldr	r3, [r5, #0]
 800af12:	b103      	cbz	r3, 800af16 <_read_r+0x1e>
 800af14:	6023      	str	r3, [r4, #0]
 800af16:	bd38      	pop	{r3, r4, r5, pc}
 800af18:	20000618 	.word	0x20000618

0800af1c <_sbrk_r>:
 800af1c:	b538      	push	{r3, r4, r5, lr}
 800af1e:	4d06      	ldr	r5, [pc, #24]	@ (800af38 <_sbrk_r+0x1c>)
 800af20:	2300      	movs	r3, #0
 800af22:	4604      	mov	r4, r0
 800af24:	4608      	mov	r0, r1
 800af26:	602b      	str	r3, [r5, #0]
 800af28:	f7f7 fc7c 	bl	8002824 <_sbrk>
 800af2c:	1c43      	adds	r3, r0, #1
 800af2e:	d102      	bne.n	800af36 <_sbrk_r+0x1a>
 800af30:	682b      	ldr	r3, [r5, #0]
 800af32:	b103      	cbz	r3, 800af36 <_sbrk_r+0x1a>
 800af34:	6023      	str	r3, [r4, #0]
 800af36:	bd38      	pop	{r3, r4, r5, pc}
 800af38:	20000618 	.word	0x20000618

0800af3c <_write_r>:
 800af3c:	b538      	push	{r3, r4, r5, lr}
 800af3e:	4d07      	ldr	r5, [pc, #28]	@ (800af5c <_write_r+0x20>)
 800af40:	4604      	mov	r4, r0
 800af42:	4608      	mov	r0, r1
 800af44:	4611      	mov	r1, r2
 800af46:	2200      	movs	r2, #0
 800af48:	602a      	str	r2, [r5, #0]
 800af4a:	461a      	mov	r2, r3
 800af4c:	f7f6 f9de 	bl	800130c <_write>
 800af50:	1c43      	adds	r3, r0, #1
 800af52:	d102      	bne.n	800af5a <_write_r+0x1e>
 800af54:	682b      	ldr	r3, [r5, #0]
 800af56:	b103      	cbz	r3, 800af5a <_write_r+0x1e>
 800af58:	6023      	str	r3, [r4, #0]
 800af5a:	bd38      	pop	{r3, r4, r5, pc}
 800af5c:	20000618 	.word	0x20000618

0800af60 <__assert_func>:
 800af60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af62:	4614      	mov	r4, r2
 800af64:	461a      	mov	r2, r3
 800af66:	4b09      	ldr	r3, [pc, #36]	@ (800af8c <__assert_func+0x2c>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	4605      	mov	r5, r0
 800af6c:	68d8      	ldr	r0, [r3, #12]
 800af6e:	b954      	cbnz	r4, 800af86 <__assert_func+0x26>
 800af70:	4b07      	ldr	r3, [pc, #28]	@ (800af90 <__assert_func+0x30>)
 800af72:	461c      	mov	r4, r3
 800af74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800af78:	9100      	str	r1, [sp, #0]
 800af7a:	462b      	mov	r3, r5
 800af7c:	4905      	ldr	r1, [pc, #20]	@ (800af94 <__assert_func+0x34>)
 800af7e:	f000 f87d 	bl	800b07c <fiprintf>
 800af82:	f000 f89a 	bl	800b0ba <abort>
 800af86:	4b04      	ldr	r3, [pc, #16]	@ (800af98 <__assert_func+0x38>)
 800af88:	e7f4      	b.n	800af74 <__assert_func+0x14>
 800af8a:	bf00      	nop
 800af8c:	20000060 	.word	0x20000060
 800af90:	0800b846 	.word	0x0800b846
 800af94:	0800b818 	.word	0x0800b818
 800af98:	0800b80b 	.word	0x0800b80b

0800af9c <_calloc_r>:
 800af9c:	b570      	push	{r4, r5, r6, lr}
 800af9e:	fba1 5402 	umull	r5, r4, r1, r2
 800afa2:	b93c      	cbnz	r4, 800afb4 <_calloc_r+0x18>
 800afa4:	4629      	mov	r1, r5
 800afa6:	f7ff f96f 	bl	800a288 <_malloc_r>
 800afaa:	4606      	mov	r6, r0
 800afac:	b928      	cbnz	r0, 800afba <_calloc_r+0x1e>
 800afae:	2600      	movs	r6, #0
 800afb0:	4630      	mov	r0, r6
 800afb2:	bd70      	pop	{r4, r5, r6, pc}
 800afb4:	220c      	movs	r2, #12
 800afb6:	6002      	str	r2, [r0, #0]
 800afb8:	e7f9      	b.n	800afae <_calloc_r+0x12>
 800afba:	462a      	mov	r2, r5
 800afbc:	4621      	mov	r1, r4
 800afbe:	f7fe f963 	bl	8009288 <memset>
 800afc2:	e7f5      	b.n	800afb0 <_calloc_r+0x14>

0800afc4 <_free_r>:
 800afc4:	b538      	push	{r3, r4, r5, lr}
 800afc6:	4605      	mov	r5, r0
 800afc8:	2900      	cmp	r1, #0
 800afca:	d041      	beq.n	800b050 <_free_r+0x8c>
 800afcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800afd0:	1f0c      	subs	r4, r1, #4
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	bfb8      	it	lt
 800afd6:	18e4      	addlt	r4, r4, r3
 800afd8:	f7ff fa82 	bl	800a4e0 <__malloc_lock>
 800afdc:	4a1d      	ldr	r2, [pc, #116]	@ (800b054 <_free_r+0x90>)
 800afde:	6813      	ldr	r3, [r2, #0]
 800afe0:	b933      	cbnz	r3, 800aff0 <_free_r+0x2c>
 800afe2:	6063      	str	r3, [r4, #4]
 800afe4:	6014      	str	r4, [r2, #0]
 800afe6:	4628      	mov	r0, r5
 800afe8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afec:	f7ff ba7e 	b.w	800a4ec <__malloc_unlock>
 800aff0:	42a3      	cmp	r3, r4
 800aff2:	d908      	bls.n	800b006 <_free_r+0x42>
 800aff4:	6820      	ldr	r0, [r4, #0]
 800aff6:	1821      	adds	r1, r4, r0
 800aff8:	428b      	cmp	r3, r1
 800affa:	bf01      	itttt	eq
 800affc:	6819      	ldreq	r1, [r3, #0]
 800affe:	685b      	ldreq	r3, [r3, #4]
 800b000:	1809      	addeq	r1, r1, r0
 800b002:	6021      	streq	r1, [r4, #0]
 800b004:	e7ed      	b.n	800afe2 <_free_r+0x1e>
 800b006:	461a      	mov	r2, r3
 800b008:	685b      	ldr	r3, [r3, #4]
 800b00a:	b10b      	cbz	r3, 800b010 <_free_r+0x4c>
 800b00c:	42a3      	cmp	r3, r4
 800b00e:	d9fa      	bls.n	800b006 <_free_r+0x42>
 800b010:	6811      	ldr	r1, [r2, #0]
 800b012:	1850      	adds	r0, r2, r1
 800b014:	42a0      	cmp	r0, r4
 800b016:	d10b      	bne.n	800b030 <_free_r+0x6c>
 800b018:	6820      	ldr	r0, [r4, #0]
 800b01a:	4401      	add	r1, r0
 800b01c:	1850      	adds	r0, r2, r1
 800b01e:	4283      	cmp	r3, r0
 800b020:	6011      	str	r1, [r2, #0]
 800b022:	d1e0      	bne.n	800afe6 <_free_r+0x22>
 800b024:	6818      	ldr	r0, [r3, #0]
 800b026:	685b      	ldr	r3, [r3, #4]
 800b028:	6053      	str	r3, [r2, #4]
 800b02a:	4408      	add	r0, r1
 800b02c:	6010      	str	r0, [r2, #0]
 800b02e:	e7da      	b.n	800afe6 <_free_r+0x22>
 800b030:	d902      	bls.n	800b038 <_free_r+0x74>
 800b032:	230c      	movs	r3, #12
 800b034:	602b      	str	r3, [r5, #0]
 800b036:	e7d6      	b.n	800afe6 <_free_r+0x22>
 800b038:	6820      	ldr	r0, [r4, #0]
 800b03a:	1821      	adds	r1, r4, r0
 800b03c:	428b      	cmp	r3, r1
 800b03e:	bf04      	itt	eq
 800b040:	6819      	ldreq	r1, [r3, #0]
 800b042:	685b      	ldreq	r3, [r3, #4]
 800b044:	6063      	str	r3, [r4, #4]
 800b046:	bf04      	itt	eq
 800b048:	1809      	addeq	r1, r1, r0
 800b04a:	6021      	streq	r1, [r4, #0]
 800b04c:	6054      	str	r4, [r2, #4]
 800b04e:	e7ca      	b.n	800afe6 <_free_r+0x22>
 800b050:	bd38      	pop	{r3, r4, r5, pc}
 800b052:	bf00      	nop
 800b054:	20000614 	.word	0x20000614

0800b058 <__ascii_mbtowc>:
 800b058:	b082      	sub	sp, #8
 800b05a:	b901      	cbnz	r1, 800b05e <__ascii_mbtowc+0x6>
 800b05c:	a901      	add	r1, sp, #4
 800b05e:	b142      	cbz	r2, 800b072 <__ascii_mbtowc+0x1a>
 800b060:	b14b      	cbz	r3, 800b076 <__ascii_mbtowc+0x1e>
 800b062:	7813      	ldrb	r3, [r2, #0]
 800b064:	600b      	str	r3, [r1, #0]
 800b066:	7812      	ldrb	r2, [r2, #0]
 800b068:	1e10      	subs	r0, r2, #0
 800b06a:	bf18      	it	ne
 800b06c:	2001      	movne	r0, #1
 800b06e:	b002      	add	sp, #8
 800b070:	4770      	bx	lr
 800b072:	4610      	mov	r0, r2
 800b074:	e7fb      	b.n	800b06e <__ascii_mbtowc+0x16>
 800b076:	f06f 0001 	mvn.w	r0, #1
 800b07a:	e7f8      	b.n	800b06e <__ascii_mbtowc+0x16>

0800b07c <fiprintf>:
 800b07c:	b40e      	push	{r1, r2, r3}
 800b07e:	b503      	push	{r0, r1, lr}
 800b080:	4601      	mov	r1, r0
 800b082:	ab03      	add	r3, sp, #12
 800b084:	4805      	ldr	r0, [pc, #20]	@ (800b09c <fiprintf+0x20>)
 800b086:	f853 2b04 	ldr.w	r2, [r3], #4
 800b08a:	6800      	ldr	r0, [r0, #0]
 800b08c:	9301      	str	r3, [sp, #4]
 800b08e:	f7fe ffb9 	bl	800a004 <_vfiprintf_r>
 800b092:	b002      	add	sp, #8
 800b094:	f85d eb04 	ldr.w	lr, [sp], #4
 800b098:	b003      	add	sp, #12
 800b09a:	4770      	bx	lr
 800b09c:	20000060 	.word	0x20000060

0800b0a0 <__ascii_wctomb>:
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	4608      	mov	r0, r1
 800b0a4:	b141      	cbz	r1, 800b0b8 <__ascii_wctomb+0x18>
 800b0a6:	2aff      	cmp	r2, #255	@ 0xff
 800b0a8:	d904      	bls.n	800b0b4 <__ascii_wctomb+0x14>
 800b0aa:	228a      	movs	r2, #138	@ 0x8a
 800b0ac:	601a      	str	r2, [r3, #0]
 800b0ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b0b2:	4770      	bx	lr
 800b0b4:	700a      	strb	r2, [r1, #0]
 800b0b6:	2001      	movs	r0, #1
 800b0b8:	4770      	bx	lr

0800b0ba <abort>:
 800b0ba:	b508      	push	{r3, lr}
 800b0bc:	2006      	movs	r0, #6
 800b0be:	f000 f82b 	bl	800b118 <raise>
 800b0c2:	2001      	movs	r0, #1
 800b0c4:	f7f7 fb52 	bl	800276c <_exit>

0800b0c8 <_raise_r>:
 800b0c8:	291f      	cmp	r1, #31
 800b0ca:	b538      	push	{r3, r4, r5, lr}
 800b0cc:	4605      	mov	r5, r0
 800b0ce:	460c      	mov	r4, r1
 800b0d0:	d904      	bls.n	800b0dc <_raise_r+0x14>
 800b0d2:	2316      	movs	r3, #22
 800b0d4:	6003      	str	r3, [r0, #0]
 800b0d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b0da:	bd38      	pop	{r3, r4, r5, pc}
 800b0dc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b0de:	b112      	cbz	r2, 800b0e6 <_raise_r+0x1e>
 800b0e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b0e4:	b94b      	cbnz	r3, 800b0fa <_raise_r+0x32>
 800b0e6:	4628      	mov	r0, r5
 800b0e8:	f000 f830 	bl	800b14c <_getpid_r>
 800b0ec:	4622      	mov	r2, r4
 800b0ee:	4601      	mov	r1, r0
 800b0f0:	4628      	mov	r0, r5
 800b0f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0f6:	f000 b817 	b.w	800b128 <_kill_r>
 800b0fa:	2b01      	cmp	r3, #1
 800b0fc:	d00a      	beq.n	800b114 <_raise_r+0x4c>
 800b0fe:	1c59      	adds	r1, r3, #1
 800b100:	d103      	bne.n	800b10a <_raise_r+0x42>
 800b102:	2316      	movs	r3, #22
 800b104:	6003      	str	r3, [r0, #0]
 800b106:	2001      	movs	r0, #1
 800b108:	e7e7      	b.n	800b0da <_raise_r+0x12>
 800b10a:	2100      	movs	r1, #0
 800b10c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b110:	4620      	mov	r0, r4
 800b112:	4798      	blx	r3
 800b114:	2000      	movs	r0, #0
 800b116:	e7e0      	b.n	800b0da <_raise_r+0x12>

0800b118 <raise>:
 800b118:	4b02      	ldr	r3, [pc, #8]	@ (800b124 <raise+0xc>)
 800b11a:	4601      	mov	r1, r0
 800b11c:	6818      	ldr	r0, [r3, #0]
 800b11e:	f7ff bfd3 	b.w	800b0c8 <_raise_r>
 800b122:	bf00      	nop
 800b124:	20000060 	.word	0x20000060

0800b128 <_kill_r>:
 800b128:	b538      	push	{r3, r4, r5, lr}
 800b12a:	4d07      	ldr	r5, [pc, #28]	@ (800b148 <_kill_r+0x20>)
 800b12c:	2300      	movs	r3, #0
 800b12e:	4604      	mov	r4, r0
 800b130:	4608      	mov	r0, r1
 800b132:	4611      	mov	r1, r2
 800b134:	602b      	str	r3, [r5, #0]
 800b136:	f7f7 fb09 	bl	800274c <_kill>
 800b13a:	1c43      	adds	r3, r0, #1
 800b13c:	d102      	bne.n	800b144 <_kill_r+0x1c>
 800b13e:	682b      	ldr	r3, [r5, #0]
 800b140:	b103      	cbz	r3, 800b144 <_kill_r+0x1c>
 800b142:	6023      	str	r3, [r4, #0]
 800b144:	bd38      	pop	{r3, r4, r5, pc}
 800b146:	bf00      	nop
 800b148:	20000618 	.word	0x20000618

0800b14c <_getpid_r>:
 800b14c:	f7f7 baf6 	b.w	800273c <_getpid>

0800b150 <_init>:
 800b150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b152:	bf00      	nop
 800b154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b156:	bc08      	pop	{r3}
 800b158:	469e      	mov	lr, r3
 800b15a:	4770      	bx	lr

0800b15c <_fini>:
 800b15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b15e:	bf00      	nop
 800b160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b162:	bc08      	pop	{r3}
 800b164:	469e      	mov	lr, r3
 800b166:	4770      	bx	lr
